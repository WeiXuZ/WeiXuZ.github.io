<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java基础入门</title>
    <url>/2019/08/02/190802Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java语言发展史"><a href="#1-1-Java语言发展史" class="headerlink" title="1.1 Java语言发展史"></a>1.1 Java语言发展史</h3><p>语言：人与人交流沟通的表达方式</p>
<p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p>
<p>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言</p>
<p>Java之父：詹姆斯·高斯林（James Gosling）</p>
<p>2009年，Sun公司被甲骨文公司收购，所以现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a> </p>
<a id="more"></a>

<h3 id="1-2-Java语言跨平台原理"><a href="#1-2-Java语言跨平台原理" class="headerlink" title="1.2 Java语言跨平台原理"></a>1.2 Java语言跨平台原理</h3><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。</p>
<h3 id="1-3-JRE和JDK"><a href="#1-3-JRE和JDK" class="headerlink" title="1.3 JRE和JDK"></a>1.3 JRE和JDK</h3><p>JVM（Java Virtual Machine），Java虚拟机</p>
<p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p>
<p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p>
<p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>
<h3 id="1-4-JDK的下载和安装"><a href="#1-4-JDK的下载和安装" class="headerlink" title="1.4 JDK的下载和安装"></a>1.4 JDK的下载和安装</h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p><a href="http://www.oracle.com/">Oracle官网</a></p>
<p><strong>注意</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p>
<h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h4><p><strong>注意</strong>：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p>
<h4 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h4><table>
<thead>
<tr>
<th>目录名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td>
</tr>
<tr>
<td>conf</td>
<td>该路径下存放了JDK的相关配置文件。</td>
</tr>
<tr>
<td>include</td>
<td>该路径下存放了一些平台特定的头文件。</td>
</tr>
<tr>
<td>jmods</td>
<td>该路径下存放了JDK的各种模块。</td>
</tr>
<tr>
<td>legal</td>
<td>该路径下存放了JDK各模块的授权文档。</td>
</tr>
<tr>
<td>lib</td>
<td>该路径下存放了JDK工具的一些补充JAR包。</td>
</tr>
</tbody></table>
<h3 id="1-5-常用DOS命令"><a href="#1-5-常用DOS命令" class="headerlink" title="1.5 常用DOS命令"></a>1.5 常用DOS命令</h3><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。</p>
<p>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。</p>
<p>2、常用命令及其作用</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>盘符名称:</td>
<td>盘符切换。E:回车，表示切换到E盘。</td>
</tr>
<tr>
<td>dir</td>
<td>查看当前路径下的内容。</td>
</tr>
<tr>
<td>cd 目录</td>
<td>进入单级目录。cd itheima</td>
</tr>
<tr>
<td>cd ..</td>
<td>回退到上一级目录。</td>
</tr>
<tr>
<td>cd 目录1\目录2...</td>
<td>进入多级目录。cd itheima\JavaSE</td>
</tr>
<tr>
<td>cd \</td>
<td>回退到盘符目录。</td>
</tr>
<tr>
<td>cls</td>
<td>清屏。</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提示符窗口。</td>
</tr>
</tbody></table>
<h3 id="1-6-为什么配置环境变量"><a href="#1-6-为什么配置环境变量" class="headerlink" title="1.6 为什么配置环境变量"></a>1.6 为什么配置环境变量</h3><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。  </p>
<h2 id="2-Java基础语法"><a href="#2-Java基础语法" class="headerlink" title="2. Java基础语法"></a>2. Java基础语法</h2><h4 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h4><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种：</p>
<p>单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释文字</span></span><br></pre></td></tr></table></figure>

<p>多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：多行注释不能嵌套使用。</span><br></pre></td></tr></table></figure>

<p>文档注释。文档注释以<code>/**</code>开始，以<code>*/</code>结束。（以后讲）</p>
<h4 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h4><p>关键字是指被java语言赋予了特殊含义的单词。</p>
<p>关键字的特点：</p>
<p>&emsp;&emsp;关键字的字母全部小写。</p>
<p>&emsp;&emsp;常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p>
<h4 id="2-3-常量"><a href="#2-3-常量" class="headerlink" title="2.3 常量"></a>2.3 常量</h4><p>常量：在程序运行过程中，其值不可以发生改变的量。</p>
<p>Java中的常量分类：</p>
<ul>
<li><p>字符串常量  用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等</p>
</li>
<li><p>整数常量  整数，例如：-10、0、88等</p>
</li>
<li><p>小数常量  小数，例如：-5.5、1.0、88.88等</p>
</li>
<li><p>字符常量  用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等</p>
</li>
<li><p>布尔常量  布尔值，表示真假，只有两个值true和false</p>
</li>
<li><p>空常量  一个特殊的值，空值，值为null</p>
</li>
</ul>
<p>除空常量外，其他常量均可使用输出语句直接输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">10</span>); <span class="comment">// 输出一个整数</span></span><br><span class="line">        System.out.println(<span class="number">5.5</span>); <span class="comment">// 输出一个小数</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 输出一个字符</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>); <span class="comment">// 输出boolean值true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h4><h5 id="2-4-1-计算机存储单元"><a href="#2-4-1-计算机存储单元" class="headerlink" title="2.4.1 计算机存储单元"></a>2.4.1 计算机存储单元</h5><p>&emsp;&emsp;我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，</p>
<p>通常用大写字母”””B”表示，字节是由连续的8个位组成。</p>
<p>除了字节外还有一些常用的存储单位，其换算单位如下：</p>
<p>1B（字节） = 8bit</p>
<p>1KB = 1024B</p>
<p>1MB = 1024KB</p>
<p>1GB = 1024MB</p>
<p>1TB = 1024GB</p>
<h5 id="2-4-2-Java中的数据类型"><a href="#2-4-2-Java中的数据类型" class="headerlink" title="2.4.2 Java中的数据类型"></a>2.4.2 Java中的数据类型</h5><p>&emsp;&emsp;Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p>
<p>Java中的基本数据类型：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th>关键字</th>
<th>内存占用</th>
<th align="left">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">整数类型</td>
<td>byte</td>
<td>1</td>
<td align="left">-128~127</td>
</tr>
<tr>
<td align="left"></td>
<td>short</td>
<td>2</td>
<td align="left">-32768~32767</td>
</tr>
<tr>
<td align="left"></td>
<td>int(默认)</td>
<td>4</td>
<td align="left">-2的31次方到2的31次方-1</td>
</tr>
<tr>
<td align="left"></td>
<td>long</td>
<td>8</td>
<td align="left">-2的63次方到2的63次方-1</td>
</tr>
<tr>
<td align="left">浮点类型</td>
<td>float</td>
<td>4</td>
<td align="left">负数：-3.402823E+38到-1.401298E-45                                                             正数：   1.401298E-45到3.402823E+38</td>
</tr>
<tr>
<td align="left"></td>
<td>double(默认)</td>
<td>8</td>
<td align="left">负数：-1.797693E+308到-4.9000000E-324                                              正数：4.9000000E-324   到1.797693E+308</td>
</tr>
<tr>
<td align="left">字符类型</td>
<td>char</td>
<td>2</td>
<td align="left">0-65535</td>
</tr>
<tr>
<td align="left">布尔类型</td>
<td>boolean</td>
<td>1</td>
<td align="left">true，false</td>
</tr>
</tbody></table>
<p>说明：</p>
<p>&emsp;&emsp;e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p>
<p>&emsp;&emsp;在java中整数默认是int类型，浮点数默认是double类型。</p>
<h4 id="2-5-变量"><a href="#2-5-变量" class="headerlink" title="2.5 变量"></a>2.5 变量</h4><h5 id="2-5-1-变量的定义"><a href="#2-5-1-变量的定义" class="headerlink" title="2.5.1 变量的定义"></a>2.5.1 变量的定义</h5><p>变量：在程序运行过程中，其值可以发生改变的量。</p>
<p>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。</p>
<p>变量的定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先声明，后赋值（使用前赋值即可）</span></span><br><span class="line">数据类型 变量名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line">money = <span class="number">55.5</span>;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure>

<p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">// 定义int类型的变量a和b，中间使用逗号隔开</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c,d; <span class="comment">// 声明int类型的变量c和d，中间使用逗号隔开</span></span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">d = <span class="number">40</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure>

<p>变量的使用：通过变量名访问即可。</p>
<h5 id="2-5-2-使用变量时的注意事项"><a href="#2-5-2-使用变量时的注意事项" class="headerlink" title="2.5.2 使用变量时的注意事项"></a>2.5.2 使用变量时的注意事项</h5><ol>
<li>在同一对花括号中，变量名不能重复。</li>
<li>变量在使用之前，必须初始化（赋值）。</li>
<li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。</li>
<li>定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</li>
</ol>
<h4 id="2-6-标识符"><a href="#2-6-标识符" class="headerlink" title="2.6 标识符"></a>2.6 标识符</h4><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。</p>
<p>Java中标识符的组成规则：</p>
<ul>
<li><p>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。</p>
</li>
<li><p>不能使用java中的关键字作为标识符。    </p>
</li>
<li><p>标识符对大小写敏感（区分大小写）。</p>
</li>
</ul>
<p>Java中标识符的命名约定：</p>
<ul>
<li><p>小驼峰式命名：变量名、方法名 &emsp;(首字母小写，从第二个单词开始每个单词的首字母大写)</p>
</li>
<li><p>大驼峰式命名：类名&emsp;(每个单词的首字母都大写)</p>
</li>
<li><p>标识符的命名最好可以做到见名知意。例如：username、studentNumber等。</p>
</li>
</ul>
<h4 id="2-7-类型转换"><a href="#2-7-类型转换" class="headerlink" title="2.7 类型转换"></a>2.7 类型转换</h4><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。</p>
<p>自动类型转换：</p>
<p>&emsp;&emsp;把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">// 将int类型的10直接赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">// 输出10.0</span></span><br></pre></td></tr></table></figure>

<p>强制类型转换：把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</p>
<p>强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p>
<p>&emsp;&emsp;例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br><span class="line">System.out.println(num2); <span class="comment">// 输出5（小数位直接舍弃）</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/08/02/190802Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1.png">说明：</p>
<ol>
<li>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，‘a’对应97。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// 将输出97</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2; </span><br><span class="line"><span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为:</span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure>

<ul>
<li>boolean类型不能与其他基本数据类型相互转换。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2019/08/03/190803.1%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><h3 id="1-1-算术运算符（理解）"><a href="#1-1-算术运算符（理解）" class="headerlink" title="1.1 算术运算符（理解）"></a>1.1 算术运算符（理解）</h3><h4 id="1-1-1-运算符和表达式"><a href="#1-1-1-运算符和表达式" class="headerlink" title="1.1.1 运算符和表达式"></a>1.1.1 运算符和表达式</h4><p>运算符：对常量或者变量进行操作的符号</p>
<p>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p>
<p>​                    不同运算符连接的表达式体现的是不同类型的表达式。</p>
<p>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure>

<p>  +：是运算符，并且是算术运算符。</p>
<p>  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p>
<a id="more"></a>

<h4 id="1-1-2-算术运算符"><a href="#1-1-2-算术运算符" class="headerlink" title="1.1.2 算术运算符"></a>1.1.2 算术运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>参看小学二年级，与“×”相同</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>参看小学二年级，与“÷”相同</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>获取的是两个数据做除法的余数</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p>
<p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a / b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a % b); <span class="comment">// 输出结果1</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-字符的“-”操作"><a href="#1-1-3-字符的“-”操作" class="headerlink" title="1.1.3 字符的“+”操作"></a>1.1.3 字符的“+”操作</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p>
<p>‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p>
<p>‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p>
<p>‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure>

<p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p>
<p>提升规则：</p>
<p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p>
<p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p>
<p>​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型</span></span><br><span class="line">-------------------------------</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure>

<p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。</p>
<h4 id="1-1-4-字符串的“-”操作"><a href="#1-1-4-字符串的“-”操作" class="headerlink" title="1.1.4 字符串的“+”操作"></a>1.1.4 字符串的“+”操作</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ <span class="number">666</span>); <span class="comment">// 输出：itheima666</span></span><br></pre></td></tr></table></figure>

<p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;Java&quot;</span>); <span class="comment">// 输出：199Java</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;Java&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 输出：3Java34</span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;Java&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3Java7</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-赋值运算符（应用）"><a href="#1-2-赋值运算符（应用）" class="headerlink" title="1.2 赋值运算符（应用）"></a>1.2 赋值运算符（应用）</h3><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=10，将10赋值给变量a</td>
</tr>
<tr>
<td>+=</td>
<td>加后赋值</td>
<td>a+=b，将a+b的值给a</td>
</tr>
<tr>
<td>-=</td>
<td>减后赋值</td>
<td>a-=b，将a-b的值给a</td>
</tr>
<tr>
<td>*=</td>
<td>乘后赋值</td>
<td>a*=b，将a×b的值给a</td>
</tr>
<tr>
<td>/=</td>
<td>除后赋值</td>
<td>a/=b，将a÷b的商给a</td>
</tr>
<tr>
<td>%=</td>
<td>取余后赋值</td>
<td>a%=b，将a÷b的余数给a</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>扩展的赋值运算符隐含了强制类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span></span><br><span class="line"></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-自增自减运算符（理解）"><a href="#1-3-自增自减运算符（理解）" class="headerlink" title="1.3 自增自减运算符（理解）"></a>1.3 自增自减运算符（理解）</h3><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>自增</td>
<td>变量的值加1</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量的值减1</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    ++和– 既可以放在变量的后边，也可以放在变量的前边。</p>
<p>​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</p>
<p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</p>
<p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</p>
<p>​    最常见的用法：单独使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">i++; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++ + x++ + x++;</span><br><span class="line">System.out.println(y); <span class="comment">// y的值是多少？</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。</span></span><br><span class="line"><span class="comment">所以整个式子应该是：int y = 10 + 11 + 12;</span></span><br><span class="line"><span class="comment">输出结果为33。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</span><br></pre></td></tr></table></figure>

<h3 id="1-4-关系运算符（应用）"><a href="#1-4-关系运算符（应用）" class="headerlink" title="1.4 关系运算符（应用）"></a>1.4 关系运算符（应用）</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>!=</td>
<td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;</td>
<td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;</td>
<td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;=</td>
<td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p>
<p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span></span><br><span class="line"><span class="keyword">boolean</span> flag = a &gt; b;</span><br><span class="line">System.out.println(flag); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-逻辑运算符（应用）"><a href="#1-5-逻辑运算符（应用）" class="headerlink" title="1.5 逻辑运算符（应用）"></a>1.5 逻辑运算符（应用）</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>逻辑与</td>
<td>a&amp;b，a和b都是true，结果为true，否则为false</td>
</tr>
<tr>
<td>|</td>
<td>逻辑或</td>
<td>a|b，a和b都是false，结果为false，否则为true</td>
</tr>
<tr>
<td>^</td>
<td>逻辑异或</td>
<td>a^b，a和b结果不同为true，相同为false</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>!a，结果和a的结果正好相反</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &gt; k)); <span class="comment">//false &amp; false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &gt; k)); <span class="comment">//true &amp; false,输出false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &lt; k)); <span class="comment">//false &amp; true,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &lt; k)); <span class="comment">//true &amp; true,输出true</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &gt; k)); <span class="comment">//false | false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) | (i &gt; k)); <span class="comment">//true | false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &lt; k)); <span class="comment">//false | true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) | (i &lt; k)); <span class="comment">//true | true,输出true</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//^ “异或”，相同为false，不同为true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &gt; k)); <span class="comment">//false ^ false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &gt; k)); <span class="comment">//true ^ false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &lt; k)); <span class="comment">//false ^ true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &lt; k)); <span class="comment">//true ^ true,输出false</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//! “非”，取反</span></span><br><span class="line">System.out.println((i &gt; j)); <span class="comment">//false</span></span><br><span class="line">System.out.println(!(i &gt; j)); <span class="comment">//!false，,输出true</span></span><br></pre></td></tr></table></figure>

<h4 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>短路与</td>
<td>作用和&amp;相同，但是有短路效果</td>
</tr>
<tr>
<td>||</td>
<td>短路或</td>
<td>作用和|相同，但是有短路效果</td>
</tr>
</tbody></table>
<p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p>
<ul>
<li>逻辑与&amp;，无论左边真假，右边都要执行。</li>
<li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li>
<li>逻辑或|，无论左边真假，右边都要执行。</li>
<li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp;&amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 左边已经可以确定结果为false，右边不参与运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-三元运算符（理解）"><a href="#1-6-三元运算符（理解）" class="headerlink" title="1.6 三元运算符（理解）"></a>1.6 三元运算符（理解）</h3><p>三元运算符语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure>

<p>三元运算符案例：</p>
<p>1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。</span></span><br><span class="line">		<span class="keyword">int</span> weight1 = <span class="number">180</span>;</span><br><span class="line">		<span class="keyword">int</span> weight2 = <span class="number">200</span>;	</span><br><span class="line">		<span class="comment">//2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。</span></span><br><span class="line">		<span class="keyword">boolean</span> b = weight1 == weight2 ? <span class="keyword">true</span> : <span class="keyword">false</span>;	</span><br><span class="line">		<span class="comment">//3：输出结果</span></span><br><span class="line">		System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span></span><br><span class="line">		<span class="keyword">int</span> height1 = <span class="number">150</span>;</span><br><span class="line">		<span class="keyword">int</span> height2 = <span class="number">210</span>;</span><br><span class="line">		<span class="keyword">int</span> height3 = <span class="number">165</span>;	</span><br><span class="line">		<span class="comment">//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span></span><br><span class="line">		<span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;		</span><br><span class="line">		<span class="comment">//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span></span><br><span class="line">		<span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;	</span><br><span class="line">		<span class="comment">//4：输出结果</span></span><br><span class="line">		System.out.println(<span class="string">&quot;maxHeight:&quot;</span> + maxHeight);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Scanner和if</title>
    <url>/2019/08/03/190803.2Scanner%E5%92%8Cif/</url>
    <content><![CDATA[<h2 id="1-数据输入（应用）"><a href="#1-数据输入（应用）" class="headerlink" title="1. 数据输入（应用）"></a>1. 数据输入（应用）</h2><p>我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：</p>
<p>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br></pre></td></tr></table></figure>

<p>2、创建Scanner对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure>

<p>3、接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建对象</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		<span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">		<span class="comment">//输出数据</span></span><br><span class="line">		System.out.println(<span class="string">&quot;x:&quot;</span> + x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改写三个和尚案例，数据使用键盘录入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//身高未知，采用键盘录入实现。首先导包，然后创建对象。</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//键盘录入三个身高分别赋值给三个变量。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第一个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height1 = sc.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第二个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height2 = sc.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第三个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height3 = sc.nextInt();</span><br><span class="line">		<span class="comment">//用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span></span><br><span class="line">		<span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;</span><br><span class="line">		<span class="comment">//用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span></span><br><span class="line">		<span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;</span><br><span class="line">		<span class="comment">//输出结果。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;这三个和尚中身高最高的是：&quot;</span> + maxHeight +<span class="string">&quot;cm&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-流程控制语句（应用）"><a href="#2-流程控制语句（应用）" class="headerlink" title="2. 流程控制语句（应用）"></a>2. 流程控制语句（应用）</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>
<h3 id="2-1-流程控制语句分类"><a href="#2-1-流程控制语句分类" class="headerlink" title="2.1 流程控制语句分类"></a>2.1 流程控制语句分类</h3><p>​    顺序结构</p>
<p>​    分支结构(if, switch)</p>
<p>​    循环结构(for, while, do…while)</p>
<h3 id="2-2-顺序结构"><a href="#2-2-顺序结构" class="headerlink" title="2.2 顺序结构"></a>2.2 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>
<p>顺序结构执行流程图：</p>
<p><img src="/2019/08/03/190803.2Scanner%E5%92%8Cif/1908031.png"></p>
<h3 id="2-3-分支结构之if语"><a href="#2-3-分支结构之if语" class="headerlink" title="2.3 分支结构之if语"></a>2.3 分支结构之if语</h3><h4 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体</p>
<p>③如果关系表达式的值为false就不执行语句体</p>
<p>④继续执行后面的语句内容</p>
<p><img src="/2019/08/03/190803.2Scanner%E5%92%8Cif/1908032.png"></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);	</span><br><span class="line">		<span class="comment">//定义两个变量</span></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;	</span><br><span class="line">		<span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span></span><br><span class="line">		<span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span></span><br><span class="line">		<span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(a == c) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a等于c&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体1</p>
<p>③如果关系表达式的值为false就执行语句体2</p>
<p>④继续执行后面的语句内容</p>
<p><img src="/2019/08/03/190803.2Scanner%E5%92%8Cif/1908033.png"></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);		</span><br><span class="line">		<span class="comment">//定义两个变量</span></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">		b = <span class="number">5</span>;	</span><br><span class="line">		<span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span></span><br><span class="line">		<span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a的值大于b&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if语句案例：奇偶数</p>
<p>需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。</p>
<p>分析：</p>
<p>​    ①为了体现任意给出一个整数，采用键盘录入一个数据</p>
<p>​    ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构</p>
<p>​    ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</p>
<p>​    ④根据判定情况，在控制台输出对应的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);		</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> number = sc.nextInt();	</span><br><span class="line">		<span class="comment">//判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构		</span></span><br><span class="line">		<span class="comment">//判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</span></span><br><span class="line">		<span class="comment">//根据判定情况，在控制台输出对应的内容</span></span><br><span class="line">		<span class="keyword">if</span>(number%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(number + <span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(number + <span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式1的值</p>
<p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p>
<p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p>
<p>④…</p>
<p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p>
<p><img src="/2019/08/03/190803.2Scanner%E5%92%8Cif/1908034.png"></p>
<p>示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo03</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">		<span class="comment">// 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个星期数(1-7)：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(week == <span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">2</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">3</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">4</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">5</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">6</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if语句格式3案例：</p>
<p>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p>
<p>分析：</p>
<p>​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p>
<p>​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p>
<p>​    ③为每种判断设置对应的条件</p>
<p>​    ④为每种判断设置对应的奖励</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//小明的考试成绩未知，可以使用键盘录入的方式获取值</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);	</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个分数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">		<span class="comment">//由于奖励种类较多，属于多种判断，采用if...else...if格式实现</span></span><br><span class="line">		<span class="comment">//为每种判断设置对应的条件</span></span><br><span class="line">		<span class="comment">//为每种判断设置对应的奖励	</span></span><br><span class="line">		<span class="comment">//数据测试：正确数据，边界数据，错误数据</span></span><br><span class="line">		<span class="keyword">if</span>(score&gt;<span class="number">100</span> || score&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;你输入的分数有误&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">95</span> &amp;&amp; score&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;山地自行车一辆&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">94</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;游乐场玩一次&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;=<span class="number">89</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;变形金刚玩具一个&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;胖揍一顿&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2019/08/19/190819.1%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h2><h3 id="1-1-继承的实现（掌握）"><a href="#1-1-继承的实现（掌握）" class="headerlink" title="1.1 继承的实现（掌握）"></a>1.1 继承的实现（掌握）</h3><ul>
<li><p>继承的概念</p>
<ul>
<li>继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法</li>
</ul>
</li>
<li><p>实现继承的格式</p>
<ul>
<li><p>继承通过extends实现</p>
</li>
<li><p>格式：class 子类 extends 父类 { } </p>
<ul>
<li><p>举例：class Dog extends Animal { }</p>
<a id="more"></a>
</li>
</ul>
</li>
</ul>
</li>
<li><p>继承带来的好处</p>
<ul>
<li>继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">        f.show();</span><br><span class="line"></span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        z.method();</span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-继承的好处和弊端（理解）"><a href="#1-2-继承的好处和弊端（理解）" class="headerlink" title="1.2 继承的好处和弊端（理解）"></a>1.2 继承的好处和弊端（理解）</h3><ul>
<li>继承好处<ul>
<li>提高了代码的复用性(多个类相同的成员可以放到同一个类中)</li>
<li>提高了代码的维护性(如果方法的代码需要修改，修改一处即可)</li>
</ul>
</li>
<li>继承弊端<ul>
<li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li>
</ul>
</li>
<li>继承的应用场景：<ul>
<li>使用继承，需要考虑类与类之间是否存在is..a的关系，不能盲目使用继承<ul>
<li>is..a的关系：谁是谁的一种，例如：老师和学生是人的一种，那人就是父类，学生和老师就是子类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-继承中的成员访问特点"><a href="#2-继承中的成员访问特点" class="headerlink" title="2. 继承中的成员访问特点"></a>2. 继承中的成员访问特点</h2><h3 id="2-1-继承中变量的访问特点（掌握）"><a href="#2-1-继承中变量的访问特点（掌握）" class="headerlink" title="2.1 继承中变量的访问特点（掌握）"></a>2.1 继承中变量的访问特点（掌握）</h3><p>在子类方法中访问一个变量，采用的是就近原则。</p>
<ol>
<li>子类局部范围找</li>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ol>
<ul>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        z.show();	<span class="comment">// 输出show方法中的局部变量30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-super（掌握）"><a href="#2-2-super（掌握）" class="headerlink" title="2.2 super（掌握）"></a>2.2 super（掌握）</h3><ul>
<li>this&amp;super关键字：<ul>
<li>this：代表本类对象的引用</li>
<li>super：代表父类存储空间的标识(可以理解为父类对象引用)</li>
</ul>
</li>
<li>this和super的使用分别<ul>
<li>成员变量：<ul>
<li>this.成员变量    -   访问本类成员变量</li>
<li>super.成员变量 -   访问父类成员变量</li>
</ul>
</li>
<li>成员方法：<ul>
<li>this.成员方法  - 访问本类成员方法</li>
<li>super.成员方法 - 访问父类成员方法</li>
</ul>
</li>
</ul>
</li>
<li>构造方法：<ul>
<li>this(…)  -  访问本类构造方法</li>
<li>super(…)  -  访问父类构造方法</li>
</ul>
</li>
</ul>
<h3 id="2-3-继承中构造方法的访问特点（理解）"><a href="#2-3-继承中构造方法的访问特点（理解）" class="headerlink" title="2.3 继承中构造方法的访问特点（理解）"></a>2.3 继承中构造方法的访问特点（理解）</h3><p><strong>注意：子类中所有的构造方法默认都会访问父类中无参的构造方法</strong></p>
<p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认都是：super()</p>
<p><strong>问题：如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 通过使用super关键字去显示的调用父类的带参构造方法</span><br><span class="line">2. 在父类中自己提供一个无参构造方法</span><br></pre></td></tr></table></figure>

<p><strong>推荐方案：</strong></p>
<p>​    自己给出无参构造方法</p>
<h3 id="2-4-继承中成员方法的访问特点（掌握）"><a href="#2-4-继承中成员方法的访问特点（掌握）" class="headerlink" title="2.4 继承中成员方法的访问特点（掌握）"></a>2.4 继承中成员方法的访问特点（掌握）</h3><p>通过子类对象访问一个方法</p>
<ol>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ol>
<h3 id="2-5-super内存图（理解）"><a href="#2-5-super内存图（理解）" class="headerlink" title="2.5 super内存图（理解）"></a>2.5 super内存图（理解）</h3><ul>
<li><p>对象在堆内存中，会单独存在一块super区域，用来存放父类的数据 </p>
<p><img src="/2019/08/19/190819.1%E7%BB%A7%E6%89%BF/1.%E7%BB%A7%E6%89%BF.png"></p>
</li>
</ul>
<h3 id="2-6-方法重写（掌握）"><a href="#2-6-方法重写（掌握）" class="headerlink" title="2.6 方法重写（掌握）"></a>2.6 方法重写（掌握）</h3><ul>
<li>1、方法重写概念<ul>
<li>子类出现了和父类中一模一样的方法声明（方法名一样，参数列表也必须一样）</li>
</ul>
</li>
<li>2、方法重写的应用场景<ul>
<li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</li>
</ul>
</li>
<li>3、Override注解<ul>
<li>用来检测当前的方法，是否是重写的方法，起到【校验】的作用</li>
</ul>
</li>
</ul>
<h3 id="2-7-方法重写的注意事项（掌握）"><a href="#2-7-方法重写的注意事项（掌握）" class="headerlink" title="2.7 方法重写的注意事项（掌握）"></a>2.7 方法重写的注意事项（掌握）</h3><ul>
<li>方法重写的注意事项</li>
</ul>
<ol>
<li>私有方法不能被重写(父类私有成员子类是不能继承的)</li>
<li>子类方法访问权限不能更低(public &gt; 默认 &gt; 私有)</li>
</ol>
<ul>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu中show()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 编译【出错】，子类不能重写父类私有的方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中show()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-Java中继承的注意事项（掌握）"><a href="#2-8-Java中继承的注意事项（掌握）" class="headerlink" title="2.8. Java中继承的注意事项（掌握）"></a>2.8. Java中继承的注意事项（掌握）</h3><ul>
<li><p>Java中继承的注意事项</p>
<ol>
<li>Java中类只支持单继承，不支持多继承<ul>
<li>错误范例：class A extends B, C { }</li>
</ul>
</li>
<li>Java中类支持多层继承</li>
</ol>
</li>
<li><p>多层继承示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷爱喝酒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸爱抽烟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈爱跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 此时，Son类中就同时拥有drink方法以及smoke方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-继承练习"><a href="#3-继承练习" class="headerlink" title="3. 继承练习"></a>3. 继承练习</h2><h3 id="3-1-老师和学生（应用）"><a href="#3-1-老师和学生（应用）" class="headerlink" title="3.1 老师和学生（应用）"></a>3.1 老师和学生（应用）</h3><ul>
<li><p>需求：定义老师类和学生类，然后写代码测试；最后找到老师类和学生类当中的共性内容，抽取出一个父类，用继承的方式改写代码，并进行测试 </p>
</li>
<li><p>步骤：</p>
<p>①定义老师类(姓名，年龄，教书())</p>
<p>②定义学生类(姓名，年龄，学习())</p>
<p>③定义测试类，写代码测试</p>
<p>④共性抽取父类，定义人类(姓名，年龄)</p>
<p>⑤定义老师类，继承人类，并给出自己特有方法：教书()</p>
<p>⑥定义学生类，继承人类，并给出自己特有方法：学习()</p>
<p>⑦定义测试类，写代码测试</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用爱成就每一位学员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建老师类对象并进行测试</span></span><br><span class="line">        Teacher t1 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        t1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        t1.setAge(<span class="number">30</span>);</span><br><span class="line">        System.out.println(t1.getName() + <span class="string">&quot;,&quot;</span> + t1.getAge());</span><br><span class="line">        t1.teach();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Teacher t2 = <span class="keyword">new</span> Teacher(<span class="string">&quot;风清扬&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(t2.getName() + <span class="string">&quot;,&quot;</span> + t2.getAge());</span><br><span class="line">        t2.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建学生类对象测试</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>，<span class="number">23</span>)；</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        s.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-猫和狗（-应用）"><a href="#3-2-猫和狗（-应用）" class="headerlink" title="3.2 猫和狗（ 应用）"></a>3.2 猫和狗（ 应用）</h3><ul>
<li><p>需求：请采用继承的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>分析：</p>
<p>①猫：</p>
<p>​    成员变量：姓名，年龄</p>
<p>​    构造方法：无参，带参</p>
<p>​    成员方法：get/set方法，抓老鼠()</p>
<p>②狗：</p>
<p>​    成员变量：姓名，年龄</p>
<p>​    构造方法：无参，带参</p>
<p>​    成员方法：get/set方法，看门()</p>
<p>③共性：</p>
<p>​    成员变量：姓名，年龄；构造方法：无参，带参；成员方法：get/set方法</p>
</li>
<li><p>步骤：</p>
<p>1、定义动物类(Animal)</p>
<p>​    【成员变量：姓名，年龄】【 构造方法：无参，带参】【成员方法：get/set方法】</p>
<p>2、定义猫类(Cat)，继承动物类</p>
<p>​    【构造方法：无参，带参】【成员方法：抓老鼠() 】</p>
<p>3、定义狗类(Dog)，继承动物类</p>
<p>​    【构造方法：无参，带参】【成员方法：看门() 】</p>
<p>4、定义测试类(AnimalDemo)，写代码测试</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗看门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建猫类对象并进行测试</span></span><br><span class="line">        Cat c1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        c1.setName(<span class="string">&quot;加菲猫&quot;</span>);</span><br><span class="line">        c1.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(c1.getName() + <span class="string">&quot;,&quot;</span> + c1.getAge());</span><br><span class="line">        c1.catchMouse();</span><br><span class="line"></span><br><span class="line">        Cat c2 = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲猫&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(c2.getName() + <span class="string">&quot;,&quot;</span> + c2.getAge());</span><br><span class="line">        c2.catchMouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>修饰符</title>
    <url>/2019/08/19/190819.2%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="1-1-package（了解）"><a href="#1-1-package（了解）" class="headerlink" title="1.1 package（了解）"></a>1.1 package（了解）</h3><ul>
<li><p>1、包的概念</p>
<ul>
<li>包就是文件夹，用来管理类文件的</li>
</ul>
</li>
<li><p>2、包的定义格式</p>
<ul>
<li>package 包名; (多级包用.分开)</li>
<li>例如：package com.heima.demo;</li>
</ul>
</li>
<li><p>3、带包编译&amp;带包运行</p>
<ul>
<li><p>带包编译：javac –d . 类名.java</p>
<ul>
<li>例如：javac  -d  . com.heima.demo.HelloWorld.java</li>
</ul>
</li>
<li><p>带包运行：java 包名+类名</p>
<ul>
<li><p>例如：java com.heima.demo.HelloWorld</p>
<a id="more"></a>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-import（理解）"><a href="#1-2-import（理解）" class="headerlink" title="1.2 import（理解）"></a>1.2 import（理解）</h3><ul>
<li><p>导包的意义</p>
<p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了</p>
<p>为了简化带包的操作，Java就提供了导包的功能</p>
</li>
<li><p>导包的格式</p>
<p>格式：import 包名;</p>
<p>范例：import java.util.Scanner;</p>
</li>
<li><p>示例代码（没有使用导包，创建的Scanner对象）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 没有导包，创建Scnaner对象</span></span><br><span class="line">        java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>示例代码（使用导包后，创建的Scanner对象）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 没有导包，创建Scnaner对象</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-权限修饰符（理解）"><a href="#1-3-权限修饰符（理解）" class="headerlink" title="1.3 权限修饰符（理解）"></a>1.3 权限修饰符（理解）</h3><p><img src="/2019/08/19/190819.2%E4%BF%AE%E9%A5%B0%E7%AC%A6/1.%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p>
<h3 id="1-4-final（应用）"><a href="#1-4-final（应用）" class="headerlink" title="1.4 final（应用）"></a>1.4 final（应用）</h3><ul>
<li>fianl关键字的作用<ul>
<li>final代表最终的意思，可以修饰成员方法，成员变量，类</li>
</ul>
</li>
<li>final修饰类、方法、变量的效果  <ul>
<li>fianl修饰类：该类不能被继承（不能有子类，但是可以有父类）</li>
<li>final修饰方法：该方法不能被重写</li>
<li>final修饰变量：表明该变量是一个常量，不能再次赋值</li>
</ul>
</li>
</ul>
<h3 id="1-5-final修饰局部变量（理解）"><a href="#1-5-final修饰局部变量（理解）" class="headerlink" title="1.5 final修饰局部变量（理解）"></a>1.5 final修饰局部变量（理解）</h3><ul>
<li><p>fianl修饰基本数据类型变量</p>
<ul>
<li>final 修饰指的是基本类型的数据值不能发生改变</li>
</ul>
</li>
<li><p>final修饰引用数据类型变量  </p>
<ul>
<li><p>final 修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的</p>
</li>
<li><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="number">23</span>);</span><br><span class="line">  	s = <span class="keyword">new</span> Student(<span class="number">24</span>);  <span class="comment">// 错误</span></span><br><span class="line"> 	s.setAge(<span class="number">24</span>);  <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-6-static（应用）"><a href="#1-6-static（应用）" class="headerlink" title="1.6 static（应用）"></a>1.6 static（应用）</h3><ul>
<li>static的概念<ul>
<li>static关键字是静态的意思，可以修饰【成员方法】，【成员变量】</li>
</ul>
</li>
<li>static修饰的特点 <ol>
<li>被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li>
<li>可以通过类名调用当然，也可以通过对象名调用<strong>【推荐使用类名调用】</strong></li>
</ol>
</li>
<li>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String university; <span class="comment">//学校	共享数据！所以设计为静态！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age + <span class="string">&quot;,&quot;</span> + university);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 为对象的共享数据赋值</span></span><br><span class="line">        Student.university = <span class="string">&quot;传智大学&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">30</span>;</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.name = <span class="string">&quot;风清扬&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">33</span>;</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-static访问特点（掌握）"><a href="#1-7-static访问特点（掌握）" class="headerlink" title="1.7 static访问特点（掌握）"></a>1.7 static访问特点（掌握）</h3><ul>
<li>static的访问特点<ul>
<li>非静态的成员方法<ul>
<li>能访问静态的成员变量</li>
<li>能访问非静态的成员变量</li>
<li>能访问静态的成员方法</li>
<li>能访问非静态的成员方法</li>
</ul>
</li>
<li>静态的成员方法<ul>
<li>能访问静态的成员变量</li>
<li>能访问静态的成员方法</li>
</ul>
</li>
<li>总结成一句话就是：<ul>
<li><strong>静态成员方法只能访问静态成员</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2019/08/20/190820.1%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h2 id="1-多态"><a href="#1-多态" class="headerlink" title="1.多态"></a>1.多态</h2><h3 id="1-1多态的概述（记忆）"><a href="#1-1多态的概述（记忆）" class="headerlink" title="1.1多态的概述（记忆）"></a>1.1多态的概述（记忆）</h3><ul>
<li><p>什么是多态</p>
<p>​    同一个对象，在不同时刻表现出来的不同形态</p>
</li>
<li><p>多态的前提</p>
<ul>
<li><p>要有继承或实现关系</p>
</li>
<li><p>要有方法的重写</p>
</li>
<li><p>要有父类引用指向子类对象</p>
<a id="more"></a>

</li>
</ul>
</li>
</ul>
<h3 id="1-2多态中的成员访问特点（记忆）"><a href="#1-2多态中的成员访问特点（记忆）" class="headerlink" title="1.2多态中的成员访问特点（记忆）"></a>1.2多态中的成员访问特点（记忆）</h3><ul>
<li><p>成员访问特点</p>
<ul>
<li><p>成员变量</p>
<p>​    编译看父类，运行看父类</p>
</li>
<li><p>成员方法</p>
<p>​    编译看父类，运行看子类</p>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li><p>动物类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>猫类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weight = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫捉迷藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//有父类引用指向子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">        System.out.println(a.age);</span><br><span class="line"><span class="comment">//        System.out.println(a.weight);</span></span><br><span class="line"></span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//        a.playGame();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-3多态的好处和弊端（记忆）"><a href="#1-3多态的好处和弊端（记忆）" class="headerlink" title="1.3多态的好处和弊端（记忆）"></a>1.3多态的好处和弊端（记忆）</h3><ul>
<li><p>好处</p>
<p>​    提高程序的扩展性。定义方法时候，使用父类型作为参数，在使用的时候，使用具体的子类型参与操作</p>
</li>
<li><p>弊端</p>
<p>​    不能使用子类的特有成员</p>
</li>
</ul>
<h3 id="1-4多态中的转型（应用）"><a href="#1-4多态中的转型（应用）" class="headerlink" title="1.4多态中的转型（应用）"></a>1.4多态中的转型（应用）</h3><ul>
<li><p>向上转型</p>
<p>​    父类引用指向子类对象就是向上转型</p>
</li>
<li><p>向下转型</p>
<p>​    格式：子类型 对象名 = (子类型)父类引用;</p>
</li>
<li><p>代码演示</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫捉迷藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//      a.playGame();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Cat c = (Cat)a;</span><br><span class="line">        c.eat();</span><br><span class="line">        c.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5多态的案例（应用）"><a href="#1-5多态的案例（应用）" class="headerlink" title="1.5多态的案例（应用）"></a>1.5多态的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    请采用多态的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>狗类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建猫类对象进行测试</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName() + <span class="string">&quot;,&quot;</span> + a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName() + <span class="string">&quot;,&quot;</span> + a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>抽象类</title>
    <url>/2019/08/20/190820.2%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="1-1抽象类的概述（理解）"><a href="#1-1抽象类的概述（理解）" class="headerlink" title="1.1抽象类的概述（理解）"></a>1.1抽象类的概述（理解）</h3><p>​    当我们在做子类共性功能抽取时，有些方法在父类中并没有具体的体现，这个时候就需要抽象类了！</p>
<p>​    在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类！</p>
<h3 id="1-2抽象类的特点（记忆）"><a href="#1-2抽象类的特点（记忆）" class="headerlink" title="1.2抽象类的特点（记忆）"></a>1.2抽象类的特点（记忆）</h3><ul>
<li><p>抽象类和抽象方法必须使用 abstract 关键字修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法的定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p>
</li>
<li><p>抽象类不能实例化</p>
<p>​    抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，这叫抽象类多态</p>
</li>
<li><p>抽象类的子类</p>
<p>​    要么重写抽象类中的所有抽象方法</p>
<p>​    要么是抽象类</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-3抽象类的成员特点（记忆）"><a href="#1-3抽象类的成员特点（记忆）" class="headerlink" title="1.3抽象类的成员特点（记忆）"></a>1.3抽象类的成员特点（记忆）</h3><ul>
<li><p>成员的特点</p>
<ul>
<li>成员变量<ul>
<li>既可以是变量</li>
<li>也可以是常量</li>
</ul>
</li>
<li>构造方法<ul>
<li>空参构造</li>
<li>有参构造</li>
</ul>
</li>
<li>成员方法<ul>
<li>抽象方法</li>
<li>普通方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String city = <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        age = <span class="number">40</span>;</span><br><span class="line">        System.out.println(age);</span><br><span class="line"><span class="comment">//        city = &quot;上海&quot;;</span></span><br><span class="line">        System.out.println(city);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4抽象类的案例（应用）"><a href="#1-4抽象类的案例（应用）" class="headerlink" title="1.4抽象类的案例（应用）"></a>1.4抽象类的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    请采用抽象类的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>狗类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，按照多态的方式</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2019/08/20/190820.3%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h2><h3 id="1-1接口的概述（理解）"><a href="#1-1接口的概述（理解）" class="headerlink" title="1.1接口的概述（理解）"></a>1.1接口的概述（理解）</h3><p>​    接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用。</p>
<p>​    Java中的接口更多的体现在对行为的抽象！</p>
<h3 id="1-2接口的特点（记忆）"><a href="#1-2接口的特点（记忆）" class="headerlink" title="1.2接口的特点（记忆）"></a>1.2接口的特点（记忆）</h3><ul>
<li><p>接口用关键字interface修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>类实现接口用implements表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不能实例化</p>
<p>​    接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。</p>
<p>​    多态的形式：具体类多态，抽象类多态，接口多态。 </p>
</li>
<li><p>接口的子类</p>
<p>​    要么重写接口中的所有抽象方法</p>
<p>​    要么子类也是抽象类</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-3接口的成员特点（记忆）"><a href="#1-3接口的成员特点（记忆）" class="headerlink" title="1.3接口的成员特点（记忆）"></a>1.3接口的成员特点（记忆）</h3><ul>
<li><p>成员特点</p>
<ul>
<li><p>成员变量</p>
<p>​     只能是常量<br>​     默认修饰符：public static final</p>
</li>
<li><p>构造方法</p>
<p>​    没有，因为接口主要是扩展功能的，而没有具体存在</p>
</li>
<li><p>成员方法</p>
<p>​    只能是抽象方法</p>
<p>​    默认修饰符：public abstract</p>
<p>​    关于接口中的方法，JDK8和JDK9中有一些新特性，后面再讲解</p>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    public static final int num3 = 30;</span></span><br><span class="line">    <span class="keyword">int</span> num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public Inter() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void show() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InterImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Inter i = <span class="keyword">new</span> InterImpl();</span><br><span class="line"><span class="comment">//        i.num = 20;</span></span><br><span class="line">        System.out.println(i.num);</span><br><span class="line"><span class="comment">//        i.num2 = 40;</span></span><br><span class="line">        System.out.println(i.num2);</span><br><span class="line">        System.out.println(Inter.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4接口的案例（应用）"><a href="#1-4接口的案例（应用）" class="headerlink" title="1.4接口的案例（应用）"></a>1.4接口的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    对猫和狗进行训练，他们就可以跳高了，这里加入跳高功能。</p>
<p>​    请采用抽象类和接口来实现猫狗案例，并在测试类中进行测试。</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>跳高接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        j.jump();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//        a.jump();</span></span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        c.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        c.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(c.getName()+<span class="string">&quot;,&quot;</span>+c.getAge());</span><br><span class="line">        c.eat();</span><br><span class="line">        c.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5类和接口的关系（记忆）"><a href="#1-5类和接口的关系（记忆）" class="headerlink" title="1.5类和接口的关系（记忆）"></a>1.5类和接口的关系（记忆）</h3><ul>
<li><p>类与类的关系</p>
<p>​    继承关系，只能单继承，但是可以多层继承</p>
</li>
<li><p>类与接口的关系</p>
<p>​    实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p>
</li>
<li><p>接口与接口的关系</p>
<p>​    继承关系，可以单继承，也可以多继承</p>
</li>
</ul>
<h3 id="1-6抽象类和接口的区别（记忆）"><a href="#1-6抽象类和接口的区别（记忆）" class="headerlink" title="1.6抽象类和接口的区别（记忆）"></a>1.6抽象类和接口的区别（记忆）</h3><ul>
<li><p>成员区别</p>
<ul>
<li><p>抽象类</p>
<p>​    变量,常量；有构造方法；有抽象方法,也有非抽象方法</p>
</li>
<li><p>接口</p>
<p>​    常量；抽象方法</p>
</li>
</ul>
</li>
<li><p>关系区别</p>
<ul>
<li><p>类与类</p>
<p>​    继承，单继承</p>
</li>
<li><p>类与接口</p>
<p>​    实现，可以单实现，也可以多实现</p>
</li>
<li><p>接口与接口</p>
<p>​    继承，单继承，多继承</p>
</li>
</ul>
</li>
<li><p>设计理念区别</p>
<ul>
<li><p>抽象类</p>
<p>​    对类抽象，包括属性、行为</p>
</li>
<li><p>接口</p>
<p>​    对行为抽象，主要是行为</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-综合案例"><a href="#2-综合案例" class="headerlink" title="2.综合案例"></a>2.综合案例</h2><h3 id="2-1案例需求（理解）"><a href="#2-1案例需求（理解）" class="headerlink" title="2.1案例需求（理解）"></a>2.1案例需求（理解）</h3><p>​    我们现在有乒乓球运动员和篮球运动员，乒乓球教练和篮球教练。</p>
<p>​    为了出国交流，跟乒乓球相关的人员都需要学习英语。</p>
<p>​    请用所学知识分析，这个案例中有哪些具体类，哪些抽象类，哪些接口，并用代码实现。</p>
<p><img src="/2019/08/20/190820.3%E6%8E%A5%E5%8F%A3/1.%E6%8E%A5%E5%8F%A3%E8%BF%90%E5%8A%A8%E5%91%98.png"></p>
<h3 id="2-2代码实现（应用）"><a href="#2-2代码实现（应用）" class="headerlink" title="2.2代码实现（应用）"></a>2.2代码实现（应用）</h3><ul>
<li>抽象人类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象运动员类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象教练类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>学英语接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>蓝球教练</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasketballCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球教练教如何运球和投篮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球教练吃羊肉，喝羊奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>乒乓球教练</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PingPangCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练教如何发球和接球&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练吃小白菜，喝大米粥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练说英语&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>乒乓球运动员</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PingPangPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员学习如何发球和接球&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员吃大白菜，喝小米粥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员说英语&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>篮球运动员</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasketballPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球运动员学习如何运球和投篮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球运动员吃牛肉，喝牛奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/2019/08/22/190822.1%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="1-参数传递"><a href="#1-参数传递" class="headerlink" title="1. 参数传递"></a>1. 参数传递</h2><h3 id="1-1-类名作为形参和返回值（应用）"><a href="#1-1-类名作为形参和返回值（应用）" class="headerlink" title="1.1 类名作为形参和返回值（应用）"></a>1.1 类名作为形参和返回值（应用）</h3><ul>
<li><p>1、类名作为方法的形参</p>
<p>方法的形参是类名，其实需要的是该类的对象</p>
<p>实际传递的是该对象的【地址值】</p>
</li>
<li><p>2、类名作为方法的返回值</p>
<p>方法的返回值是类名，其实返回的是该类的对象</p>
<p>实际传递的，也是该对象的【地址值】</p>
<a id="more"></a>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useCat</span><span class="params">(Cat c)</span> </span>&#123; <span class="comment">//Cat c = new Cat();</span></span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        CatOperator co = <span class="keyword">new</span> CatOperator();</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        co.useCat(c);</span><br><span class="line"></span><br><span class="line">        Cat c2 = co.getCat(); <span class="comment">//new Cat()</span></span><br><span class="line">        c2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-抽象类作为形参和返回值（理解）"><a href="#1-2-抽象类作为形参和返回值（理解）" class="headerlink" title="1.2 抽象类作为形参和返回值（理解）"></a>1.2 抽象类作为形参和返回值（理解）</h3><ul>
<li><p>抽象类作为形参和返回值</p>
<ul>
<li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li>
<li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useAnimal</span><span class="params">(Animal a)</span> </span>&#123; <span class="comment">//Animal a = new Cat();</span></span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">getAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        AnimalOperator ao = <span class="keyword">new</span> AnimalOperator();</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        ao.useAnimal(a);</span><br><span class="line"></span><br><span class="line">        Animal a2 = ao.getAnimal(); <span class="comment">//new Cat()</span></span><br><span class="line">        a2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3-接口名作为形参和返回值（理解）"><a href="#1-3-接口名作为形参和返回值（理解）" class="headerlink" title="1.3 接口名作为形参和返回值（理解）"></a>1.3 接口名作为形参和返回值（理解）</h3><ul>
<li><p>接口作为形参和返回值</p>
<ul>
<li>方法的形参是接口名，其实需要的是该接口的实现类对象</li>
<li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useJumpping</span><span class="params">(Jumpping j)</span> </span>&#123; <span class="comment">//Jumpping j = new Cat();</span></span><br><span class="line">        j.jump();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jumpping <span class="title">getJumpping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumppingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        JumppingOperator jo = <span class="keyword">new</span> JumppingOperator();</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        jo.useJumpping(j);</span><br><span class="line"></span><br><span class="line">        Jumpping j2 = jo.getJumpping(); <span class="comment">//new Cat()</span></span><br><span class="line">        j2.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-内部类"><a href="#2-内部类" class="headerlink" title="2. 内部类"></a>2. 内部类</h2><h3 id="2-1-内部类的基本使用（理解）"><a href="#2-1-内部类的基本使用（理解）" class="headerlink" title="2.1 内部类的基本使用（理解）"></a>2.1 内部类的基本使用（理解）</h3><ul>
<li><p>内部类概念</p>
<ul>
<li>在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</li>
</ul>
</li>
<li><p>内部类定义格式</p>
<ul>
<li><p>格式&amp;举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	格式：</span></span><br><span class="line"><span class="comment">    class 外部类名&#123;</span></span><br><span class="line"><span class="comment">    	修饰符 class 内部类名&#123;</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    	&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>内部类的访问特点 </p>
<ul>
<li>内部类可以直接访问外部类的成员，包括私有</li>
<li>外部类要访问内部类的成员，必须创建对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    内部类访问特点：</span></span><br><span class="line"><span class="comment">        内部类可以直接访问外部类的成员，包括私有</span></span><br><span class="line"><span class="comment">        外部类要访问内部类的成员，必须创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-成员内部类（理解）"><a href="#2-2-成员内部类（理解）" class="headerlink" title="2.2 成员内部类（理解）"></a>2.2 成员内部类（理解）</h3><ul>
<li><p>成员内部类的定义位置</p>
<ul>
<li>在类中方法，跟成员变量是一个位置</li>
</ul>
</li>
<li><p>外界创建成员内部类格式</p>
<ul>
<li>格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象;</li>
<li>举例：Outer.Inner oi = new Outer().new Inner();</li>
</ul>
</li>
<li><p>成员内部类的推荐使用方案</p>
<ul>
<li>将一个类，设计为内部类的目的，大多数都是不想让外界去访问，所以内部类的定义应该私有化，私有化之后，再提供一个可以让外界调用的方法，方法内部创建内部类对象并调用。</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Outer.Inner oi = new Outer().new Inner();</span></span><br><span class="line">		<span class="comment">//oi.show();</span></span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        o.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-局部内部类（理解）"><a href="#2-3-局部内部类（理解）" class="headerlink" title="2.3 局部内部类（理解）"></a>2.3 局部内部类（理解）</h3><ul>
<li><p>局部内部类定义位置</p>
<ul>
<li>局部内部类是在方法中定义的类</li>
</ul>
</li>
<li><p>局部内部类方式方式</p>
<ul>
<li>局部内部类，外界是无法直接使用，需要在方法内部创建对象并使用</li>
<li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        o.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-匿名内部类（应用）"><a href="#2-4-匿名内部类（应用）" class="headerlink" title="2.4 匿名内部类（应用）"></a>2.4 匿名内部类（应用）</h3><ul>
<li><p>匿名内部类的前提</p>
<ul>
<li>存在一个类或者接口，这里的类可以是具体类也可以是抽象类</li>
</ul>
</li>
<li><p>匿名内部类的格式</p>
<ul>
<li><p>格式：new 类名 ( ) {  重写方法 }    new  接口名 ( ) { 重写方法 }</p>
</li>
<li><p>举例： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Inter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>匿名内部类的本质</p>
<ul>
<li>本质：是一个继承了该类或者实现了该接口的子类匿名对象</li>
</ul>
</li>
<li><p>匿名内部类的细节</p>
<ul>
<li><p>匿名内部类可以通过多态的形式接受</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Inter i = <span class="keyword">new</span> Inter()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>匿名内部类直接调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Inter()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();	<span class="comment">// 直接调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-匿名内部类在开发中的使用（应用）"><a href="#2-4-匿名内部类在开发中的使用（应用）" class="headerlink" title="2.4 匿名内部类在开发中的使用（应用）"></a>2.4 匿名内部类在开发中的使用（应用）</h3><ul>
<li><p>匿名内部类在开发中的使用</p>
<ul>
<li>当发现某个方法需要，接口或抽象类的子类对象，我们就可以传递一个匿名内部类过去，来简化传统的代码</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Jumpping j)</span> </span>&#123; <span class="comment">//new Cat();   new Dog();</span></span><br><span class="line">        j.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需求：创建接口操作类的对象，调用method方法</span></span><br><span class="line">        JumppingOperator jo = <span class="keyword">new</span> JumppingOperator();</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        jo.method(j);</span><br><span class="line"></span><br><span class="line">        Jumpping j2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        jo.method(j2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名内部类的简化</span></span><br><span class="line">        jo.method(<span class="keyword">new</span> Jumpping() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">		<span class="comment">// 匿名内部类的简化</span></span><br><span class="line">        jo.method(<span class="keyword">new</span> Jumpping() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;狗可以跳高了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>异常</title>
    <url>/2019/08/23/190823%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="1-异常（记忆）"><a href="#1-异常（记忆）" class="headerlink" title="1.异常（记忆）"></a>1.异常（记忆）</h3><ul>
<li>异常的概述</li>
</ul>
<p>​    异常就是程序出现了不正常的情况</p>
<ul>
<li>异常的体系结构</li>
</ul>
<p>​    <img src="/2019/08/23/190823%E5%BC%82%E5%B8%B8/1%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png"></p>
<a id="more"></a>

<h3 id="2-JVM默认处理异常的方式（理解）"><a href="#2-JVM默认处理异常的方式（理解）" class="headerlink" title="2.JVM默认处理异常的方式（理解）"></a>2.JVM默认处理异常的方式（理解）</h3><ul>
<li>如果程序出现了问题，我们没有做任何处理，最终JVM 会做默认的处理，处理方式有如下两个步骤：</li>
<li>把异常的名称，错误原因及异常出现的位置等信息输出在了控制台</li>
<li>程序停止执行</li>
</ul>
<h3 id="3-try-catch方式处理异常（应用）"><a href="#3-try-catch方式处理异常（应用）" class="headerlink" title="3.try-catch方式处理异常（应用）"></a>3.try-catch方式处理异常（应用）</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">	异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程</p>
<ul>
<li>程序从 try 里面的代码开始执行</li>
<li>出现异常，就会跳转到对应的 catch 里面去执行</li>
<li>执行完毕之后，程序还可以继续往下执行</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;这里能够访问到吗&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;你访问的数组索引不存在，请回去修改为正确的索引&quot;);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-Throwable成员方法（应用）"><a href="#4-Throwable成员方法（应用）" class="headerlink" title="4.Throwable成员方法（应用）"></a>4.Throwable成员方法（应用）</h3><ul>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public String getMessage()</td>
<td>返回此 throwable 的详细消息字符串</td>
</tr>
<tr>
<td>public String toString()</td>
<td>返回此可抛出的简短描述</td>
</tr>
<tr>
<td>public void printStackTrace()</td>
<td>把异常的错误信息输出在控制台</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]); <span class="comment">//new ArrayIndexOutOfBoundsException();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;这里能够访问到吗&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123; <span class="comment">//new ArrayIndexOutOfBoundsException();</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public String getMessage():返回此 throwable 的详细消息字符串</span></span><br><span class="line"><span class="comment">//            System.out.println(e.getMessage());</span></span><br><span class="line">            <span class="comment">//Index 3 out of bounds for length 3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public String toString():返回此可抛出的简短描述</span></span><br><span class="line"><span class="comment">//            System.out.println(e.toString());</span></span><br><span class="line">            <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public void printStackTrace():把异常的错误信息输出在控制台</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//            java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line"><span class="comment">//            at com.itheima_02.ExceptionDemo02.method(ExceptionDemo02.java:18)</span></span><br><span class="line"><span class="comment">//            at com.itheima_02.ExceptionDemo02.main(ExceptionDemo02.java:11)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-编译时异常和运行时异常的区别（记忆）"><a href="#5-编译时异常和运行时异常的区别（记忆）" class="headerlink" title="5.编译时异常和运行时异常的区别（记忆）"></a>5.编译时异常和运行时异常的区别（记忆）</h3><ul>
<li>编译时异常<ul>
<li>都是Exception类及其子类</li>
<li>必须显示处理，否则程序就会发生错误，无法通过编译</li>
</ul>
</li>
<li>运行时异常<ul>
<li>都是RuntimeException类及其子类</li>
<li>无需显示处理，也可以和编译时异常一样处理</li>
</ul>
</li>
</ul>
<h3 id="6-throws方式处理异常（应用）"><a href="#6-throws方式处理异常（应用）" class="headerlink" title="6.throws方式处理异常（应用）"></a>6.throws方式处理异常（应用）</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() <span class="keyword">throws</span> 异常类名 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//        method();</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编译时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;2048-08-09&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date d = sdf.parse(s);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ArrayIndexOutOfBoundsException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>这个throws格式是跟在方法的括号后面的</li>
<li>编译时异常必须要进行处理，两种处理方案：try…catch …或者 throws，如果采用 throws 这种方案，将来谁调用谁处理</li>
<li>运行时异常可以不处理，出现问题后，需要我们回来修改代码</li>
</ul>
</li>
</ul>
<h3 id="7-throws和throw的区别（记忆）"><a href="#7-throws和throw的区别（记忆）" class="headerlink" title="7.throws和throw的区别（记忆）"></a>7.throws和throw的区别（记忆）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-自定义异常（应用）"><a href="#8-自定义异常（应用）" class="headerlink" title="8.自定义异常（应用）"></a>8.自定义异常（应用）</h3><ul>
<li><p>自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>老师类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkScore</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> ScoreException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new ScoreException();</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ScoreException(<span class="string">&quot;你给的分数有误，分数应该在0-100之间&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.checkScore(score);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScoreException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Collection集合</title>
    <url>/2019/08/25/190825Collection%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Collection集合"><a href="#1-Collection集合" class="headerlink" title="1.Collection集合"></a>1.Collection集合</h2><h3 id="1-1集合体系结构【记忆】"><a href="#1-1集合体系结构【记忆】" class="headerlink" title="1.1集合体系结构【记忆】"></a>1.1集合体系结构【记忆】</h3><ul>
<li><p>集合类的特点</p>
<p>​    提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p>
</li>
<li><p>集合类的体系图</p>
<p>​    <img src="/2019/08/25/190825Collection%E9%9B%86%E5%90%88/1%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="01"></p>
</li>
</ul>
<a id="more"></a>

<h3 id="1-2Collection集合概述和基本使用【应用】"><a href="#1-2Collection集合概述和基本使用【应用】" class="headerlink" title="1.2Collection集合概述和基本使用【应用】"></a>1.2Collection集合概述和基本使用【应用】</h3><ul>
<li><p>Collection集合概述</p>
<ul>
<li>是单列集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素</li>
<li>JDK 不提供此接口的任何直接实现，它提供更具体的子接口（如Set和List）实现</li>
</ul>
</li>
<li><p>Collection集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Collection集合的对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素：boolean add(E e)</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3Collection集合的常用方法【应用】"><a href="#1-3Collection集合的常用方法【应用】" class="headerlink" title="1.3Collection集合的常用方法【应用】"></a>1.3Collection集合的常用方法【应用】</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>添加元素</td>
</tr>
<tr>
<td>boolean remove(Object o)</td>
<td>从集合中移除指定的元素</td>
</tr>
<tr>
<td>void   clear()</td>
<td>清空集合中的元素</td>
</tr>
<tr>
<td>boolean contains(Object o)</td>
<td>判断集合中是否存在指定的元素</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>int   size()</td>
<td>集合的长度，也就是集合中元素的个数</td>
</tr>
</tbody></table>
<h3 id="1-4Collection集合的遍历【应用】"><a href="#1-4Collection集合的遍历【应用】" class="headerlink" title="1.4Collection集合的遍历【应用】"></a>1.4Collection集合的遍历【应用】</h3><ul>
<li>迭代器的介绍<ul>
<li>迭代器，集合的专用遍历方式</li>
<li>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</E></li>
<li>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</li>
</ul>
</li>
<li>Collection集合的遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用while循环改进元素的判断和获取</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5集合使用步骤图解【理解】"><a href="#1-5集合使用步骤图解【理解】" class="headerlink" title="1.5集合使用步骤图解【理解】"></a>1.5集合使用步骤图解【理解】</h3><ul>
<li>使用步骤</li>
</ul>
<p><img src="/2019/08/25/190825Collection%E9%9B%86%E5%90%88/2%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4.png" alt="02"></p>
<h3 id="1-6集合的案例-Collection集合存储学生对象并遍历【应用】"><a href="#1-6集合的案例-Collection集合存储学生对象并遍历【应用】" class="headerlink" title="1.6集合的案例-Collection集合存储学生对象并遍历【应用】"></a>1.6集合的案例-Collection集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li>学生类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Collection集合对象</span></span><br><span class="line">        Collection&lt;Student&gt; c = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        c.add(s1);</span><br><span class="line">        c.add(s2);</span><br><span class="line">        c.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合(迭代器方式)</span></span><br><span class="line">        Iterator&lt;Student&gt; it = c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h2><h3 id="2-1List集合概述和特点【记忆】"><a href="#2-1List集合概述和特点【记忆】" class="headerlink" title="2.1List集合概述和特点【记忆】"></a>2.1List集合概述和特点【记忆】</h3><ul>
<li>List集合概述<ul>
<li>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素</li>
<li>与Set集合不同，列表通常允许重复的元素</li>
</ul>
</li>
<li>List集合特点<ul>
<li>有索引</li>
<li>可以存储重复元素</li>
<li>元素存取有序</li>
</ul>
</li>
</ul>
<h3 id="2-2List集合的特有方法【应用】"><a href="#2-2List集合的特有方法【应用】" class="headerlink" title="2.2List集合的特有方法【应用】"></a>2.2List集合的特有方法【应用】</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void add(int index,E   element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td>E remove(int   index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>E set(int index,E   element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>E get(int   index)</td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
<h3 id="2-3集合的案例-List集合存储学生对象并遍历【应用】"><a href="#2-3集合的案例-List集合存储学生对象并遍历【应用】" class="headerlink" title="2.3集合的案例-List集合存储学生对象并遍历【应用】"></a>2.3集合的案例-List集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for循环方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-4并发修改异常【应用】"><a href="#2-4并发修改异常【应用】" class="headerlink" title="2.4并发修改异常【应用】"></a>2.4并发修改异常【应用】</h3><ul>
<li><p>出现的原因</p>
<p>​    迭代器遍历的过程中，通过集合对象修改了集合中的元素，造成了迭代器获取元素中判断预期修改值和实际修改值不一致，则会出现：ConcurrentModificationException</p>
</li>
<li><p>解决的方案</p>
<p>​    用for循环遍历，然后用集合对象做对应的操作即可</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个元素，看有没有&quot;world&quot;这个元素，如果有，我就添加一个&quot;javaee&quot;元素，请写代码实现</span></span><br><span class="line"><span class="comment">//        Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">//        while (it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//            String s = it.next();</span></span><br><span class="line"><span class="comment">//            if(s.equals(&quot;world&quot;)) &#123;</span></span><br><span class="line"><span class="comment">//                list.add(&quot;javaee&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5列表迭代器【应用】"><a href="#2-5列表迭代器【应用】" class="headerlink" title="2.5列表迭代器【应用】"></a>2.5列表迭代器【应用】</h3><ul>
<li><p>ListIterator介绍</p>
<ul>
<li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器</li>
<li>用于允许程序员沿任一方向遍历的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取列表迭代器</span></span><br><span class="line">        ListIterator&lt;String&gt; lit = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (lit.hasNext()) &#123;</span><br><span class="line">            String s = lit.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                lit.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6增强for循环【应用】"><a href="#2-6增强for循环【应用】" class="headerlink" title="2.6增强for循环【应用】"></a>2.6增强for循环【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 数组/集合对象名) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String s : strArray) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部原理是一个Iterator迭代器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for(String s : list) &#123;</span></span><br><span class="line"><span class="comment">            if(s.equals(&quot;world&quot;)) &#123;</span></span><br><span class="line"><span class="comment">                list.add(&quot;javaee&quot;); //ConcurrentModificationException</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7集合的案例-List集合存储学生对象三种方式遍历【应用】"><a href="#2-7集合的案例-List集合存储学生对象三种方式遍历【应用】" class="headerlink" title="2.7集合的案例-List集合存储学生对象三种方式遍历【应用】"></a>2.7集合的案例-List集合存储学生对象三种方式遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器：集合特有的遍历方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for：带有索引的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for：最方便的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(Student s : list) &#123;</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h2><h3 id="3-1数据结构之栈和队列【记忆】"><a href="#3-1数据结构之栈和队列【记忆】" class="headerlink" title="3.1数据结构之栈和队列【记忆】"></a>3.1数据结构之栈和队列【记忆】</h3><ul>
<li><p>栈结构</p>
<p>​    先进后出</p>
</li>
<li><p>队列结构</p>
<p>​    先进先出</p>
</li>
</ul>
<h3 id="3-2数据结构之数组和链表【记忆】"><a href="#3-2数据结构之数组和链表【记忆】" class="headerlink" title="3.2数据结构之数组和链表【记忆】"></a>3.2数据结构之数组和链表【记忆】</h3><ul>
<li><p>数组结构</p>
<p>​    查询快、增删慢</p>
</li>
<li><p>队列结构</p>
<p>​    查询慢、增删快</p>
</li>
</ul>
<h2 id="4-List集合的实现类"><a href="#4-List集合的实现类" class="headerlink" title="4.List集合的实现类"></a>4.List集合的实现类</h2><h3 id="4-1List集合子类的特点【记忆】"><a href="#4-1List集合子类的特点【记忆】" class="headerlink" title="4.1List集合子类的特点【记忆】"></a>4.1List集合子类的特点【记忆】</h3><ul>
<li><p>ArrayList集合</p>
<p>​    底层是数组结构实现，查询快、增删慢</p>
</li>
<li><p>LinkedList集合</p>
<p>​    底层是链表结构实现，查询慢、增删快</p>
</li>
</ul>
<h3 id="4-2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】"><a href="#4-2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】" class="headerlink" title="4.2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】"></a>4.2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器：集合特有的遍历方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = array.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for：带有索引的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for：最方便的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="4-3LinkedList集合的特有功能【应用】"><a href="#4-3LinkedList集合的特有功能【应用】" class="headerlink" title="4.3LinkedList集合的特有功能【应用】"></a>4.3LinkedList集合的特有功能【应用】</h3><ul>
<li><p>特有方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public void addFirst(E e)</td>
<td>在该列表开头插入指定的元素</td>
</tr>
<tr>
<td>public void addLast(E e)</td>
<td>将指定的元素追加到此列表的末尾</td>
</tr>
<tr>
<td>public E getFirst()</td>
<td>返回此列表中的第一个元素</td>
</tr>
<tr>
<td>public   E getLast()</td>
<td>返回此列表中的最后一个元素</td>
</tr>
<tr>
<td>public E removeFirst()</td>
<td>从此列表中删除并返回第一个元素</td>
</tr>
<tr>
<td>public   E removeLast()</td>
<td>从此列表中删除并返回最后一个元素</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2019/09/17/190917HTML/</url>
    <content><![CDATA[<h2 id="1-web概念概述"><a href="#1-web概念概述" class="headerlink" title="1.web概念概述"></a>1.web概念概述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaWeb：</span><br><span class="line">	* 使用Java语言开发基于互联网的项目</span><br><span class="line"></span><br><span class="line">* 软件架构：</span><br><span class="line">	1. C&#x2F;S: Client&#x2F;Server 客户端&#x2F;服务器端</span><br><span class="line">		* 在用户本地有一个客户端程序，在远程有一个服务器端程序</span><br><span class="line">		* 如：QQ，迅雷...</span><br><span class="line">		* 优点：</span><br><span class="line">			1. 用户体验好</span><br><span class="line">		* 缺点：</span><br><span class="line">			1. 开发、安装，部署，维护 麻烦</span><br><span class="line">	2. B&#x2F;S: Browser&#x2F;Server 浏览器&#x2F;服务器端</span><br><span class="line">		* 只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序</span><br><span class="line">		* 优点：</span><br><span class="line">			1. 开发、安装，部署，维护 简单</span><br><span class="line">		* 缺点：</span><br><span class="line">			1. 如果应用过大，用户的体验可能会受到影响</span><br><span class="line">			2. 对硬件要求过高</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* B&#x2F;S架构详解</span><br><span class="line">	* 资源分类：</span><br><span class="line">		1. 静态资源：</span><br><span class="line">			* 使用静态网页开发技术发布的资源。</span><br><span class="line">			* 特点：</span><br><span class="line">				* 所有用户访问，得到的结果是一样的。</span><br><span class="line">				* 如：文本，图片，音频、视频, HTML,CSS,JavaScript</span><br><span class="line">				* 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</span><br><span class="line">		2. 动态资源：</span><br><span class="line">			* 使用动态网页及时发布的资源。</span><br><span class="line">			* 特点：</span><br><span class="line">				* 所有用户访问，得到的结果可能不一样。</span><br><span class="line">				* 如：jsp&#x2F;servlet,php,asp...</span><br><span class="line">				* 如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 我们要学习动态资源，必须先学习静态资源！</span><br><span class="line"></span><br><span class="line">* 静态资源：</span><br><span class="line">	* HTML：用于搭建基础网页，展示页面的内容</span><br><span class="line">	* CSS：用于美化页面，布局页面</span><br><span class="line">	* JavaScript：控制页面的元素，让页面有一些动态的效果</span><br></pre></td></tr></table></figure>

<h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2.HTML"></a>2.HTML</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：是最基础的网页开发语言</span><br><span class="line">	* Hyper Text Markup Language 超文本标记语言</span><br><span class="line">		* 超文本:</span><br><span class="line">			* 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</span><br><span class="line">		* 标记语言:</span><br><span class="line">			* 由标签构成的语言。&lt;标签名称&gt; 如 html，xml</span><br><span class="line">			* 标记语言不是编程语言</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line">	* 语法：</span><br><span class="line">		1. html文档后缀名 .html 或者 .htm</span><br><span class="line">		2. 标签分为</span><br><span class="line">			1. 围堵标签：有开始标签和结束标签。如 &lt;html&gt; &lt;&#x2F;html&gt;</span><br><span class="line">			2. 自闭和标签：开始标签和结束标签在一起。如 &lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">		3. 标签可以嵌套：</span><br><span class="line">			需要正确嵌套，不能你中有我，我中有你</span><br><span class="line">			错误：&lt;a&gt;&lt;b&gt;&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;</span><br><span class="line">			正确：&lt;a&gt;&lt;b&gt;&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">		4. 在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</span><br><span class="line">		5. html的标签不区分大小写，但是建议使用小写。</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		&lt;html&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;head&gt;</span><br><span class="line">				&lt;title&gt;title&lt;&#x2F;title&gt;</span><br><span class="line">			&lt;&#x2F;head&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;body&gt;</span><br><span class="line">				&lt;FONT color&#x3D;&#39;red&#39;&gt;Hello World&lt;&#x2F;font&gt;&lt;br&#x2F;&gt;</span><br><span class="line">				</span><br><span class="line">				&lt;font color&#x3D;&#39;green&#39;&gt;Hello World&lt;&#x2F;font&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;&#x2F;body&gt;</span><br><span class="line">	</span><br><span class="line">		&lt;&#x2F;html&gt;</span><br><span class="line">3. 标签学习：</span><br><span class="line">	1. 文件标签：构成html最基本的标签</span><br><span class="line">		* html:html文档的根标签</span><br><span class="line">		* head：头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line">		* title：标题标签。</span><br><span class="line">		* body：体标签</span><br><span class="line">		* &lt;!DOCTYPE html&gt;：html5中定义该文档是html文档</span><br><span class="line">	2. 文本标签：和文本有关的标签</span><br><span class="line">		* 注释：&lt;!-- 注释内容 --&gt;</span><br><span class="line">		* &lt;h1&gt; to &lt;h6&gt;：标题标签</span><br><span class="line">			* h1~h6:字体大小逐渐递减</span><br><span class="line">		* &lt;p&gt;：段落标签</span><br><span class="line">		* &lt;br&gt;：换行标签</span><br><span class="line">		* &lt;hr&gt;：展示一条水平线</span><br><span class="line">			* 属性：</span><br><span class="line">				* color：颜色</span><br><span class="line">				* width：宽度</span><br><span class="line">				* size：高度</span><br><span class="line">				* align：对其方式</span><br><span class="line">					* center：居中</span><br><span class="line">					* left：左对齐</span><br><span class="line">					* right：右对齐</span><br><span class="line">		* &lt;b&gt;：字体加粗</span><br><span class="line">		* &lt;i&gt;：字体斜体</span><br><span class="line">		* &lt;font&gt;:字体标签</span><br><span class="line">		* &lt;center&gt;:文本居中</span><br><span class="line">			* 属性：</span><br><span class="line">				* color：颜色</span><br><span class="line">				* size：大小</span><br><span class="line">				* face：字体</span><br><span class="line"></span><br><span class="line">		* 属性定义：</span><br><span class="line">			* color：</span><br><span class="line">				1. 英文单词：red,green,blue</span><br><span class="line">				2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)</span><br><span class="line">				3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF</span><br><span class="line">			* width：</span><br><span class="line">				1. 数值：width&#x3D;&#39;20&#39; ,数值的单位，默认是 px(像素)</span><br><span class="line">				2. 数值%：占比相对于父元素的比例</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 图片标签：</span><br><span class="line">	* img：展示图片</span><br><span class="line">		* 属性：</span><br><span class="line">			* src：指定图片的位置</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		 &lt;!--展示一张图片 img--&gt;</span><br><span class="line"></span><br><span class="line">	    &lt;img src&#x3D;&quot;image&#x2F;jingxuan_2.jpg&quot; align&#x3D;&quot;right&quot; alt&#x3D;&quot;古镇&quot; width&#x3D;&quot;500&quot; height&#x3D;&quot;500&quot;&#x2F;&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;!--</span><br><span class="line">	        相对路径</span><br><span class="line">	            * 以.开头的路径</span><br><span class="line">	                * .&#x2F;：代表当前目录  .&#x2F;image&#x2F;1.jpg</span><br><span class="line">	                * ..&#x2F;:代表上一级目录</span><br><span class="line">	     --&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;img src&#x3D;&quot;.&#x2F;image&#x2F;jiangwai_1.jpg&quot;&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;img src&#x3D;&quot;..&#x2F;image&#x2F;jiangwai_1.jpg&quot;&gt;</span><br><span class="line">4. 列表标签：</span><br><span class="line">	* 有序列表：</span><br><span class="line">		* ol:</span><br><span class="line">		* li:</span><br><span class="line">	* 无序列表：</span><br><span class="line">		* ul:</span><br><span class="line">		* li:</span><br><span class="line">5. 链接标签：</span><br><span class="line">	* a:定义一个超链接</span><br><span class="line">		* 属性：</span><br><span class="line">			* href：指定访问资源的URL(统一资源定位符)</span><br><span class="line">			* target：指定打开资源的方式</span><br><span class="line">				* _self:默认值，在当前页面打开</span><br><span class="line">				* _blank：在空白页面打开</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		 &lt;!--超链接  a--&gt;</span><br><span class="line"></span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot; target&#x3D;&quot;_self&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot; target&#x3D;&quot;_blank&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;a href&#x3D;&quot;.&#x2F;5_列表标签.html&quot;&gt;列表标签&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;zhaoweixu.com&quot;&gt;联系我&lt;&#x2F;a&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot;&gt;&lt;img src&#x3D;&quot;image&#x2F;win_1.jpg&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">6. div和span：</span><br><span class="line">	* div:每一个div占满一整行。块级标签</span><br><span class="line">   	* span：文本信息在一行展示，行内标签 内联标签</span><br><span class="line"></span><br><span class="line">7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。</span><br><span class="line">	1. &lt;header&gt;：页眉</span><br><span class="line">	2. &lt;footer&gt;：页脚</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8. 表格标签：</span><br><span class="line">	* table：定义表格</span><br><span class="line">		* width：宽度</span><br><span class="line">		* border：边框</span><br><span class="line">		* cellpadding：定义内容和单元格的距离</span><br><span class="line">		* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</span><br><span class="line">		* bgcolor：背景色</span><br><span class="line">		* align：对齐方式</span><br><span class="line">	* tr：定义行</span><br><span class="line">		* bgcolor：背景色</span><br><span class="line">		* align：对齐方式</span><br><span class="line">	* td：定义单元格</span><br><span class="line">		* colspan：合并列</span><br><span class="line">		* rowspan：合并行</span><br><span class="line">	* th：定义表头单元格</span><br><span class="line">	* &lt;caption&gt;：表格标题</span><br><span class="line">	* &lt;thead&gt;：表示表格的头部分</span><br><span class="line">	* &lt;tbody&gt;：表示表格的体部分</span><br><span class="line">	* &lt;tfoot&gt;：表示表格的脚部分</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
      </categories>
  </entry>
  <entry>
    <title>markdown常用语法</title>
    <url>/2019/10/08/191008markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><ul>
<li><p># 一级标题</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li>
<li><p>## 二级标题</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li>
<li><p>### 三级标题</p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a></li>
<li><p>#### 四级标题</p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4></li>
<li><p>##### 五级标题</p>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></li>
<li><p>###### 六级标题</p>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li>
</ul>
<h2 id="2-列表-注意空格"><a href="#2-列表-注意空格" class="headerlink" title="2.列表(注意空格)"></a>2.列表(注意空格)</h2><ul>
<li>* ：无序列表</li>
<li>+ ：无序列表</li>
<li>- ：无序列表</li>
</ul>
<ol>
<li>：有序列表</li>
<li>：有序列表</li>
<li>：有序列表<h2 id="3-换行"><a href="#3-换行" class="headerlink" title="3.换行"></a>3.换行</h2></li>
</ol>
<ul>
<li>按两次回车</li>
<li>html中的标签br</li>
<li>&lt;可识别的内容&gt;<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2></li>
<li>--- 连续输入三个-</li>
</ul>
<hr>
<ul>
<li>*** 连续输入三个*</li>
</ul>
<hr>
<h2 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5.超链接"></a>5.超链接</h2><ul>
<li><p>[超链接名字](超链接的地址src)</p>
<p> <a href="zhaoweixu.com">WeiXu’blog</a></p>
<h2 id="6-粗体和斜体"><a href="#6-粗体和斜体" class="headerlink" title="6.粗体和斜体"></a>6.粗体和斜体</h2></li>
<li><p>*内容* ：一个*号代表 斜体</p>
<p> <em>这是斜体文字</em></p>
</li>
<li><p>**内容** ：两个*号代表 粗体</p>
<p> <strong>这是粗体文字</strong></p>
</li>
<li><p>***内容*** ：三个*号代表 斜体+粗体</p>
<p> <strong><em>这是斜体+粗体文字</em></strong></p>
<h2 id="7-引用"><a href="#7-引用" class="headerlink" title="7.引用"></a>7.引用</h2></li>
<li><p>&gt; 引用一段话</p>
</li>
</ul>
<blockquote>
<p>这是引用的话的示例</p>
</blockquote>
<ul>
<li>```代码``` 引用代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">    margin-top: 15px; </span><br><span class="line">    font:12px 宋体;</span><br><span class="line">&#125;</span><br><span class="line">ul li a&#123;</span><br><span class="line">    text-decoration: none; </span><br><span class="line">    color: black; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="8-空格"><a href="#8-空格" class="headerlink" title="8.空格"></a>8.空格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;emsp;   &#x2F;&#x2F;敲一次就是缩进一个汉字的位置,两次就是两个</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Server</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>markdown常用语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章插入图片</title>
    <url>/2019/10/11/191011hexo%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h2><h4 id="images文件夹"><a href="#images文件夹" class="headerlink" title="images文件夹"></a>images文件夹</h4><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中,然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<p>例如:</p>
<p><code>![1.png](/images/1.png)</code></p>
<a id="more"></a>

<h2 id="方法二-推荐使用"><a href="#方法二-推荐使用" class="headerlink" title="方法二:(推荐使用)"></a>方法二:(推荐使用)</h2><h4 id="1-将-config-yml-文件中的-post-asset-folder-选项设为-“true”-。"><a href="#1-将-config-yml-文件中的-post-asset-folder-选项设为-“true”-。" class="headerlink" title="1.将 config.yml 文件中的 post_asset_folder 选项设为 “true” 。"></a>1.将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 “true” 。</h4><p>&emsp;&emsp;之后在你每次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建xxx.md时会自动创建一个同名资源文件夹xxx,你可以把跟这篇文章有关的图片资源放在关联文件夹中。</p>
<p><code>_config.ymlpost_asset_folder: true</code></p>
<h4 id="2-安装插件-在blog目录下输入下边的命令安装插件"><a href="#2-安装插件-在blog目录下输入下边的命令安装插件" class="headerlink" title="2.安装插件:在blog目录下输入下边的命令安装插件:"></a>2.安装插件:在blog目录下输入下边的命令安装插件:</h4><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p>
<h4 id="3-添加图片"><a href="#3-添加图片" class="headerlink" title="3.添加图片:"></a>3.添加图片:</h4><p>在想添加的位置写入<code>![](资源文件夹名字/图片名字.图片格式)</code>,例如:</p>
<p><code>![](xxx/1.png)</code></p>
]]></content>
      <categories>
        <category>Server</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>资源文件夹</tag>
        <tag>图片标签插件</tag>
      </tags>
  </entry>
  <entry>
    <title>黑阀使用方法</title>
    <url>/2019/10/23/191023%E9%BB%91%E9%98%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>&emsp;&emsp;在手机中安装“黑阀”APP，然后在电脑中下载好ADB工具，并解压到电脑里面。<br>电脑ADB下载地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developer.android.google.cn&#x2F;studio&#x2F;releases&#x2F;platform-tools#downloads</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;手机点击向导,在“使用”项目卡中点击“进入黑域”按钮,“开发者选项”打开手机的“USB调试”，手机会弹出一个小窗口点击“允许”按钮即可。</p>
<a id="more"></a>

<h3 id="2-查看命令"><a href="#2-查看命令" class="headerlink" title="2.查看命令"></a>2.查看命令</h3><p>&emsp;&emsp;打开电脑中ADB文件目录（进入platform-tools），在空白处按着键盘上的“shift键”然后点击鼠标的右键,点击“在此处打开命令窗口”项目,在弹出的命令窗口中输入下边命令，查看我们已经连接到电脑的手机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“.\adb devices”</span><br></pre></td></tr></table></figure>

<h3 id="3-授权命令"><a href="#3-授权命令" class="headerlink" title="3.授权命令"></a>3.授权命令</h3><p>&emsp;&emsp;待我们的设备列举出来后，输入下边命令,从而完成我们对黑域手机端的授权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“.\adb -d shell sh &#x2F;data&#x2F;data&#x2F;me.piebridge.brevent&#x2F;brevent.sh”</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Server</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>黑阀</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7设置防火墙</title>
    <url>/2019/10/26/191026CentOS7%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h4 id="1-查看防火墙的状态的命令为："><a href="#1-查看防火墙的状态的命令为：" class="headerlink" title="1.查看防火墙的状态的命令为："></a>1.查看防火墙的状态的命令为：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h4 id="2-打开防火墙的方式有两种"><a href="#2-打开防火墙的方式有两种" class="headerlink" title="2.打开防火墙的方式有两种:"></a>2.打开防火墙的方式有两种:</h4><h6 id="一种是打开后重启会恢复回原来的状态，命令为："><a href="#一种是打开后重启会恢复回原来的状态，命令为：" class="headerlink" title="一种是打开后重启会恢复回原来的状态，命令为："></a>一种是打开后重启会恢复回原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld；</span><br></pre></td></tr></table></figure>

<h6 id="另一种是打开后重启不会恢复到原来的状态，命令为："><a href="#另一种是打开后重启不会恢复到原来的状态，命令为：" class="headerlink" title="另一种是打开后重启不会恢复到原来的状态，命令为："></a>另一种是打开后重启不会恢复到原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable firewalld;</span><br></pre></td></tr></table></figure>

<p>这种方式输入命令后要重启系统才会生效。</p>
<a id="more"></a>

<h4 id="3-关闭防火墙的方式也有两种"><a href="#3-关闭防火墙的方式也有两种" class="headerlink" title="3.关闭防火墙的方式也有两种:"></a>3.关闭防火墙的方式也有两种:</h4><h6 id="一种是打开后重启会恢复回原来的状态，命令为：-1"><a href="#一种是打开后重启会恢复回原来的状态，命令为：-1" class="headerlink" title="一种是打开后重启会恢复回原来的状态，命令为："></a>一种是打开后重启会恢复回原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld;</span><br></pre></td></tr></table></figure>

<h6 id="另一种是打开后重启不会恢复到原来的状态，命令为：-1"><a href="#另一种是打开后重启不会恢复到原来的状态，命令为：-1" class="headerlink" title="另一种是打开后重启不会恢复到原来的状态，命令为："></a>另一种是打开后重启不会恢复到原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl disable firewalld;</span><br></pre></td></tr></table></figure>

<p>这种方式输入命令后要重启系统才会生效。</p>
<h4 id="4-开启某个特定的端口"><a href="#4-开启某个特定的端口" class="headerlink" title="4.开启某个特定的端口:"></a>4.开启某个特定的端口:</h4><p>例如下边代码是开放80端口:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>Linux Firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2019/10/28/191028Spring/</url>
    <content><![CDATA[<h2 id="1-spring概述"><a href="#1-spring概述" class="headerlink" title="1. spring概述"></a>1. spring概述</h2><h3 id="1-1-Spring是什么（理解）"><a href="#1-1-Spring是什么（理解）" class="headerlink" title="1.1 Spring是什么（理解）"></a>1.1 Spring是什么（理解）</h3><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。</p>
<p>提供了展现层 SpringMVC和持久层 Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p>
<a id="more"></a>

<h3 id="1-2-Spring发展历程-（了解）"><a href="#1-2-Spring发展历程-（了解）" class="headerlink" title="1.2 Spring发展历程 （了解）"></a>1.2 Spring发展历程 （了解）</h3><p>Rod Johnson （ Spring 之父）</p>
<p>2017  年<br>9 月份发布了 Spring 的最新版本 Spring5.0<br>通用版（GA）</p>
<h3 id="1-3-Spring的优势（理解）"><a href="#1-3-Spring的优势（理解）" class="headerlink" title="1.3 Spring的优势（理解）"></a>1.3 Spring的优势（理解）</h3><p>方便解耦，简化开发</p>
<p>AOP 编程的支持</p>
<p>声明式事务的支持</p>
<p>方便程序的测试</p>
<h3 id="1-4-Spring的体系结构（了解）"><a href="#1-4-Spring的体系结构（了解）" class="headerlink" title="1.4 Spring的体系结构（了解）"></a>1.4 Spring的体系结构（了解）</h3><p><img src="/2019/10/28/191028Spring/1.Spring.png"></p>
<h2 id="2-spring快速入门"><a href="#2-spring快速入门" class="headerlink" title="2. spring快速入门"></a>2. spring快速入门</h2><h3 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h3><p>①导入 Spring 开发的基本包坐标</p>
<p>②编写 Dao 接口和实现类</p>
<p>③创建 Spring 核心配置文件</p>
<p>④在 Spring 配置文件中配置 UserDaoImpl</p>
<p>⑤使用 Spring 的 API 获得 Bean 实例</p>
<h3 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h3><p>在类路径下（resources）创建applicationContext.xml配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext applicationContext = <span class="keyword">new</span>  </span><br><span class="line">             ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">             UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);   				 userDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3. Spring配置文件"></a>3. Spring配置文件</h2><h3 id="3-1-Bean标签基本配置"><a href="#3-1-Bean标签基本配置" class="headerlink" title="3.1 Bean标签基本配置"></a>3.1 Bean标签基本配置</h3><p>用于配置对象交由Spring 来创建。</p>
<p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。</p>
<p>基本属性：</p>
<p>id：Bean实例在Spring容器中的唯一标识</p>
<p>class：Bean的全限定名称</p>
<h3 id="3-2-Bean标签范围配置"><a href="#3-2-Bean标签范围配置" class="headerlink" title="3.2 Bean标签范围配置"></a>3.2 Bean标签范围配置</h3><p>scope:指对象的作用范围，取值如下： </p>
<table>
<thead>
<tr>
<th>取值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>默认值，单例的</td>
</tr>
<tr>
<td>prototype</td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td>
</tr>
<tr>
<td>session</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td>
</tr>
<tr>
<td>global   session</td>
<td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td>
</tr>
</tbody></table>
<p>1）当scope的取值为singleton时</p>
<p>​      Bean的实例化个数：1个</p>
<p>​      Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p>
<p>​      Bean的生命周期：</p>
<p>对象创建：当应用加载，创建容器时，对象就被创建了</p>
<p>对象运行：只要容器在，对象一直活着</p>
<p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p>
<p>2）当scope的取值为prototype时</p>
<p>​      Bean的实例化个数：多个</p>
<p>​      Bean的实例化时机：当调用getBean()方法时实例化Bean</p>
<p>对象创建：当使用对象时，创建新的对象实例</p>
<p>对象运行：只要对象在使用中，就一直活着</p>
<p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p>
<h3 id="3-3-Bean生命周期配置"><a href="#3-3-Bean生命周期配置" class="headerlink" title="3.3 Bean生命周期配置"></a>3.3 Bean生命周期配置</h3><p>init-method：指定类中的初始化方法名称</p>
<p>destroy-method：指定类中销毁方法名称</p>
<h3 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h3><p>1） 使用无参构造方法实例化</p>
<p>​      它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2） 工厂静态方法实例化</p>
<p>​      工厂的静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactoryBean&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>3） 工厂实例方法实例化</p>
<p>​      工厂的非静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactoryBean</span> </span>&#123;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;        </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactoryBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-Bean的依赖注入入门"><a href="#3-5-Bean的依赖注入入门" class="headerlink" title="3.5 Bean的依赖注入入门"></a>3.5 Bean的依赖注入入门</h3><p>①创建 UserService，UserService 内部在调用 UserDao的save() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       	           UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);	</span><br><span class="line">          userDao.save();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>②将 UserServiceImpl 的创建权交给 Spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>③从 Spring 容器中获得 UserService 进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.save();</span><br></pre></td></tr></table></figure>

<h3 id="3-6-Bean的依赖注入概念"><a href="#3-6-Bean的依赖注入概念" class="headerlink" title="3.6 Bean的依赖注入概念"></a>3.6 Bean的依赖注入概念</h3><p>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。</p>
<p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p>
<p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p>
<p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p>
<p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</p>
<h3 id="3-7-Bean的依赖注入方式"><a href="#3-7-Bean的依赖注入方式" class="headerlink" title="3.7 Bean的依赖注入方式"></a>3.7 Bean的依赖注入方式</h3><p>①构造方法</p>
<p>​      创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);    </span><br><span class="line">          userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用有参构造时进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span>      		   	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②set方法</p>
<p>​      在UserServiceImpl中添加setUserDao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;  </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">   		 userDao.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用set方法进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>set方法:P命名空间注入</p>
<p>​      P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p>
<p>​      首先，需要引入P命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其次，需要修改注入方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-</span></span></span><br><span class="line"><span class="tag"> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-8-Bean的依赖注入的数据类型"><a href="#3-8-Bean的依赖注入的数据类型" class="headerlink" title="3.8 Bean的依赖注入的数据类型"></a>3.8 Bean的依赖注入的数据类型</h3><p>上面的操作，都是注入的引用Bean，处了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p>
<p>注入数据的三种数据类型 </p>
<p>普通数据类型</p>
<p>引用数据类型</p>
<p>集合数据类型</p>
<p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p>
<p><strong>Bean的依赖注入的数据类型</strong></p>
<p>（1）普通数据类型的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company+<span class="string">&quot;===&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">value</span>=<span class="string">&quot;传智播客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）集合数据类型（List<String>）的注入</String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strList = strList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）集合数据类型（List<User>）的注入</User></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.userList = userList;  </span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(userList);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（4）集合数据类型（ Map&lt;String,User&gt; ）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">	System.out.println(userMap);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（5）集合数据类型（Properties）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(properties);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-9-引入其他配置文件（分模块开发）"><a href="#3-9-引入其他配置文件（分模块开发）" class="headerlink" title="3.9 引入其他配置文件（分模块开发）"></a>3.9 引入其他配置文件（分模块开发）</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-spring相关API"><a href="#4-spring相关API" class="headerlink" title="4. spring相关API"></a>4. spring相关API</h2><h3 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h3><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p>
<h3 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h3><p>1）ClassPathXmlApplicationContext </p>
<p>​      它是从类的根路径下加载配置文件 推荐使用这种</p>
<p>2）FileSystemXmlApplicationContext </p>
<p>​      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<p>3）AnnotationConfigApplicationContext</p>
<p>​      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p>
<h3 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;  </span><br><span class="line">	assertBeanFactoryActive();   </span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;   			    	assertBeanFactoryActive();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p>
<p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错</p>
<p><strong>getBean()方法使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">            ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">  UserService userService1 = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">  UserService userService2 = applicationContext.getBean(UserService.class);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>搭建个人VPN</title>
    <url>/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/</url>
    <content><![CDATA[<p>如何搭建属于自己的SS服务</p>
<h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备:"></a>1.准备:</h3><p>&emsp;&emsp;首先要有自己的服务器(国外的),谷歌有免费使用一年活动,不限时间</p>
<a id="more"></a>

<h3 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h3><p>&emsp;&emsp;在VM实例页面，找到创建好的实例，点击后面的SSH，远程连接到该VPS服务器上。可以理解为在公司远程控制家里的电脑，只不过这里控制的是你的VPS服务器。</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/1.SSH%E8%BF%9E%E6%8E%A5.png" alt="SSH连接"></p>
<p>&emsp;&emsp;SSH连接成功后，依次输入下面命令：</p>
<h5 id="1-获取管理员权限"><a href="#1-获取管理员权限" class="headerlink" title="1.获取管理员权限"></a>1.获取管理员权限</h5><p><code>sudo -i</code>  </p>
<h5 id="2-安装SS服务"><a href="#2-安装SS服务" class="headerlink" title="2.安装SS服务"></a>2.安装SS服务</h5><p><code>wget --no-check-certificatehttps://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh </code>  </p>
<h5 id="3-对SS进行配置"><a href="#3-对SS进行配置" class="headerlink" title="3.对SS进行配置"></a>3.对SS进行配置</h5><p><code>./shadowsocksR.sh</code>　</p>
<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><p>&emsp;&emsp;执行完步骤2中命令后，会进入下面的配置界面,提示的是设置SS密码，输入后回车；(输入密码的时候不显示,不是没输进去,只是不显示,默认密码为teddysun.com)</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/2.%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png" alt="设置密码"></p>
<p>&emsp;&emsp;然后是设置SS端口，输入一个1-65536之间的数字后回车，我这里输入8080；(默认为9895)</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/3.%E7%AB%AF%E5%8F%A3.png" alt="端口"></p>
<p>&emsp;&emsp;加密方式选择aes-256-cfb,输入方式前的序号即可</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/4.%E9%80%89%E6%8B%A9%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F.png" alt="选择加密方式"></p>
<p>&emsp;&emsp;剩下的其他配置一直按回车(选择默认方式)就行，直到出现下图所示账号信息就安装成功了,这个过程大概需要2分钟。</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/5.%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="搭建成功"></p>
<p>账号信息中需要用到的有:</p>
<p>IP</p>
<p>Port(端口)</p>
<p>Password(密码)</p>
<p>Encryption Method(加密方式)</p>
<h3 id="4-防火墙设置"><a href="#4-防火墙设置" class="headerlink" title="4.防火墙设置"></a>4.防火墙设置</h3><p>　　由于防火墙的原因，现在你肯定还是连接不上去的，这里就需要设置防火墙。Debian 9的默认防火墙是允许所有端口访问的，但是它上面还有一层谷歌云的防火墙(阿里云管这个叫安全组),所以我们需要设置谷歌云的防火墙。在左侧菜单依次点击“VPC网络–防火墙规则”。</p>
<p>&emsp;&emsp;进到防火墙规则页面，点击“创建防火墙规则”。设置防火墙规则时，有几个地方需要注意，目标修改为“网络中所有实例”，来源IP地址范围填写“0.0.0.0/0”，协议和端口勾选“指定的协议和端口”。勾选tcp,填入自己在第3步中设置的端口号,我设置的是8080,填入之后点击”创建”,防火墙设置就完成了。</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/6.%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99.png" alt="防火墙规则"></p>
<h3 id="5-配置Shadowsocks"><a href="#5-配置Shadowsocks" class="headerlink" title="5.配置Shadowsocks"></a>5.配置Shadowsocks</h3><p>&emsp;&emsp;最后在Shadowsocks客户端中配置自己的信息就可以开心的玩耍了</p>
<p><img src="/2019/11/10/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/7.SS.png" alt="SS"></p>
]]></content>
      <categories>
        <category>Server</category>
        <category>VPS</category>
      </categories>
  </entry>
  <entry>
    <title>Debian允许root用户登录</title>
    <url>/2019/11/11/191111Debian%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
        <category>Debian9</category>
      </categories>
  </entry>
  <entry>
    <title>Linux添加root权限</title>
    <url>/2019/11/16/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h3><ul>
<li><p>使用adduser或者useradd添加一个名为ying的用户: <code>adduser ying</code></p>
</li>
<li><p>修改密码:输入 <code>passwd ying</code></p>
</li>
<li><p>会看到以下提示,按提示输入两次密码:</p>
<p>Changing password for user ying.<br>New UNIX password:     //在这里输入新密码<br>Retype new UNIX password:  //再次输入新密码</p>
<p>看到下边这行提示就说明添加成功了:</p>
<p>passwd: all authentication tokens updated successfully.</p>
<a id="more"></a>

</li>
</ul>
<h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h3><p><code>userdel -r ying</code></p>
<h3 id="3-给-ying赋予root权限"><a href="#3-给-ying赋予root权限" class="headerlink" title="3.给 ying赋予root权限"></a>3.给 ying赋予root权限</h3><h5 id="1-修改-etc-sudoers-文件，找到"><a href="#1-修改-etc-sudoers-文件，找到" class="headerlink" title="1.修改 /etc/sudoers 文件，找到:"></a>1.修改 /etc/sudoers 文件，找到:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allow root to run any commands anywhere</span><br><span class="line"></span><br><span class="line">root    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure>

<h5 id="2-在下边添加"><a href="#2-在下边添加" class="headerlink" title="2.在下边添加:"></a>2.在下边添加:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ying    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/16/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/root%E6%9D%83%E9%99%90.png"></p>
<h5 id="3-添加完之后按ESC-输入以下命令强制保存并退出"><a href="#3-添加完之后按ESC-输入以下命令强制保存并退出" class="headerlink" title="3.添加完之后按ESC,输入以下命令强制保存并退出"></a>3.添加完之后按ESC,输入以下命令<strong>强制保存</strong>并退出</h5><p><code>:wq!</code></p>
<p>必须<strong>强制</strong>保存退出,否则会报以下错误:</p>
<p><img src="/2019/11/16/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/%E4%BF%9D%E5%AD%98%E9%80%80%E5%87%BA%E6%8A%A5%E9%94%99.png"></p>
<h5 id="4-输入sudo-i就可以切换到root角色"><a href="#4-输入sudo-i就可以切换到root角色" class="headerlink" title="4.输入sudo -i就可以切换到root角色"></a>4.输入<code>sudo -i</code>就可以切换到root角色</h5><p>查看自己所在组用以下命令: <code>id</code></p>
<p><img src="/2019/11/16/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/id.png"></p>
<p>查看自己是否是管理员:whoami</p>
<p><img src="/2019/11/16/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/whoami.png"></p>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu设置root用户登录</title>
    <url>/2019/12/02/191202Ubuntu%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>更换NexT主题后访问报错</title>
    <url>/2020/01/15/200115%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E8%AE%BF%E9%97%AE%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>hexo博客更换NexT主题后访问显示报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro&#x2F;post.swig‘ as post</span><br><span class="line">_template %&#125;</span><br></pre></td></tr></table></figure>

<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<p>在博客目录下右键“Git Bash Here”输入以下命令即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Server</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>NexT主题点击日志报错</title>
    <url>/2020/01/16/200116NexT%E4%B8%BB%E9%A2%98%E7%82%B9%E5%87%BB%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99-md/</url>
    <content><![CDATA[<p>NexT主题点击日志时报错：</p>
<p><img src="/2020/01/16/200116NexT%E4%B8%BB%E9%A2%98%E7%82%B9%E5%87%BB%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99-md/%E6%97%A5%E5%BF%97404.png"></p>
<p>打开主题目录下/layout/_macro/sidebar.swig</p>
<p>找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123;url_for(theme.menu.archives.split(&#39;||&#39;)[0])| trim&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>记得清除浏览器缓存</p>
]]></content>
      <categories>
        <category>Server</category>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>DeepFaceLab</title>
    <url>/2020/05/11/200511DeepFaceLab/</url>
    <content><![CDATA[<h2 id="训练参数设置："><a href="#训练参数设置：" class="headerlink" title="训练参数设置："></a>训练参数设置：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enable autobackup? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：自动备份模型，一小时备份一次，开启会自动备份最近15次模型。<br>默认不开启 n 开启输入 y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Write preview history? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：每10秒自动在model / history文件夹生成一张预览图。<br>默认不开启 n 开启输入 y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Target iteration (skip:unlimited&#x2F;default) :</span><br></pre></td></tr></table></figure>

<p>翻译：训练次数，推荐默认设置。<br>默认无限训练，开启此功能可以输入想要的数字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Batch_size (?:help skip:0&#x2F;default) :</span><br></pre></td></tr></table></figure>

<p>翻译：Batch_size数值，大概可以理解为一次有多少图像被发送到神经网络训练。<br>取决于你的硬件性能，建议取大于4的数值，训练伊始可以设置低数值，收敛困难时增加数值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Feed faces to network sorted by yaw? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：偏航排序，data_dst和data_src素材种类一致可以开启。<br>默认开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flip faces randomly? (y&#x2F;n ?:help skip:y) :</span><br></pre></td></tr></table></figure>

<p>翻译：随机翻转脸部，data_src素材丰富时关闭会更自然，反之效果很差。<br>默认开启，建议开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Src face scale modifier % ( -30…30, ?:help skip:0) :</span><br></pre></td></tr></table></figure>

<p>翻译：data_src面部比例大小，输入数值会改变data_src脸部大小。<br>默认为不开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use lightweight autoencoder? (y&#x2F;n, ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：是否使用轻量级编码模式，配置较低时使用，牺牲部分质量。<br>默认开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use pixel loss? (y&#x2F;n, ?:help skip: n&#x2F;default ) :</span><br></pre></td></tr></table></figure>


<p>翻译：是否使用像素丢失。开启后能增强细节，比如牙齿或其它需要增强的细节，但不宜过量，可以在合成之前开启一段时间。否则将有可能使模型损坏。<br>默认不开启，建议后期开启。</p>
]]></content>
      <categories>
        <category>Soft</category>
      </categories>
  </entry>
  <entry>
    <title>Cmder的使用</title>
    <url>/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p><a href="https://cmder.net/">官网下载</a></p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/1.png"></p>
<p>下载分为mini版和完整版，完整版功能更为全面，可运行linux下的所有命令</p>
<a id="more"></a>

<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"></p>
<p>不需要安装，解压后可直接使用。</p>
<p>首次打开会有个警告弹窗，选择第一个即可：</p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/4.png"></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><ul>
<li>配置环境变量</li>
</ul>
<p>下载解压后将cmder.exe的所在目录添加到环境变量path中。</p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/3.path.png"></p>
<ul>
<li>配置右键快捷启动</li>
</ul>
<p>管理员身份运行cmd，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cmder.exe &#x2F;REGISTER ALL  &#x2F;&#x2F; 设置任意地方鼠标右键启动Cmder</span><br></pre></td></tr></table></figure>

<p>之后可在任意地方点击右键使用cmder，会直接跳转到该路径下，而无需cd</p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/6.png"></p>
<ul>
<li><p>语言设置</p>
<p>Setting–&gt;General–&gt;Interface language</p>
</li>
</ul>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/Users\WeiXu\blog\source_posts\201122Cmder的使用\9.png"></p>
<ul>
<li>命令提示符”λ”改为”$”</li>
</ul>
<p>cmder的光标是以”λ”开始的，我们可以修改为常用的$，找到cmder目录下的vendor文件夹中的clink.lua文件，修改local lambda值即可。</p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/7.png"></p>
<ul>
<li>设置中文编码</li>
</ul>
<p>打开setting，在Start-up下的environment中加入: <code>set LANG=zh_CN.UTF8</code></p>
<p><img src="/2020/11/22/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/8.png"></p>
<h3 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3.快捷键"></a>3.快捷键</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tab       自动路径补全</span><br><span class="line">Ctrl+T    建立新页签</span><br><span class="line">Ctrl+W    关闭页签</span><br><span class="line">Ctrl+Tab  切换页签</span><br><span class="line">Alt+F4    关闭所有页签</span><br><span class="line">Alt+Shift+<span class="number">1</span> 开启cmd.exe</span><br><span class="line">Alt+Shift+<span class="number">2</span> 开启powershell.exe</span><br><span class="line">Alt+Shift+<span class="number">3</span> 开启powershell.exe (系统管理员权限)</span><br><span class="line">Ctrl+<span class="number">1</span>      快速切换到第<span class="number">1</span>个页签</span><br><span class="line">Ctrl+n      快速切换到第n个页签(n值无上限)</span><br><span class="line">Alt + enter 切换到全屏状态</span><br><span class="line">Ctr+r       历史命令搜索</span><br><span class="line">Tab         自动路径补全</span><br><span class="line">Ctrl+T      建立新页签</span><br><span class="line">Ctrl+W      关闭页签</span><br><span class="line">Ctrl+Tab    切换页签</span><br><span class="line">Alt+F4      关闭所有页签</span><br><span class="line">Alt+Shift+<span class="number">1</span> 开启cmd.exe</span><br><span class="line">Alt+Shift+<span class="number">2</span> 开启powershell.exe</span><br><span class="line">Alt+Shift+<span class="number">3</span> 开启powershell.exe (系统管理员权限)</span><br><span class="line">Ctrl+<span class="number">1</span>      快速切换到第<span class="number">1</span>个页签</span><br><span class="line">Ctrl+n      快速切换到第n个页签(n值无上限)</span><br><span class="line">Alt + enter 切换到全屏状态</span><br><span class="line">Ctr+r       历史命令搜索</span><br><span class="line">Win+Alt+P   开启工具选项视窗</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Soft</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2019/10/17/Server/191017Web_tomcat/</url>
    <content><![CDATA[<h3 id="Tomcat：Web服务器软件"><a href="#Tomcat：Web服务器软件" class="headerlink" title="Tomcat：Web服务器软件"></a>Tomcat：Web服务器软件</h3><h4 id="1-下载-http-tomcat-apache-org"><a href="#1-下载-http-tomcat-apache-org" class="headerlink" title="1.下载:http://tomcat.apache.org/"></a>1.下载:<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></h4>]]></content>
      <categories>
        <category>Java</category>
        <category>JavaWeb</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>API</title>
    <url>/2019/08/22/190822.2API/</url>
    <content><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1-Math（应用）"><a href="#1-1-Math（应用）" class="headerlink" title="1.1 Math（应用）"></a>1.1 Math（应用）</h3><ul>
<li><p>1、Math类概述</p>
<ul>
<li>Math 包含执行基本数字运算的方法</li>
</ul>
</li>
<li><p>2、Math中方法的调用方式</p>
<ul>
<li><p>Math类中无构造方法，但内部的方法都是静态的，则可以通过   <strong>类名.进行调用</strong></p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>3、Math类的常用方法</p>
<table>
<thead>
<tr>
<th>方法名    方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static int   abs(int a)</td>
<td>返回参数的绝对值</td>
</tr>
<tr>
<td>public static double ceil(double a)</td>
<td>返回大于或等于参数的最小double值，等于一个整数</td>
</tr>
<tr>
<td>public static double floor(double a)</td>
<td>返回小于或等于参数的最大double值，等于一个整数</td>
</tr>
<tr>
<td>public   static int round(float a)</td>
<td>按照四舍五入返回最接近参数的int</td>
</tr>
<tr>
<td>public static int   max(int a,int b)</td>
<td>返回两个int值中的较大值</td>
</tr>
<tr>
<td>public   static int min(int a,int b)</td>
<td>返回两个int值中的较小值</td>
</tr>
<tr>
<td>public   static double pow (double a,double b)</td>
<td>返回a的b次幂的值</td>
</tr>
<tr>
<td>public   static double random()</td>
<td>返回值为double的正值，[0.0,1.0)</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="1-2-System（应用）"><a href="#1-2-System（应用）" class="headerlink" title="1.2 System（应用）"></a>1.2 System（应用）</h3><ul>
<li>System类的常用方法 </li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   static void exit(int status)</td>
<td>终止当前运行的   Java   虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td>public   static long currentTimeMillis()</td>
<td>返回当前时间(以毫秒为单位)</td>
</tr>
</tbody></table>
<ul>
<li><p>示例代码</p>
<ul>
<li>需求：在控制台输出1-10000，计算这段代码执行了多少毫秒 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取开始的时间节点</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取代码运行结束后的时间节点</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3-Object类的toString方法（应用）"><a href="#1-3-Object类的toString方法（应用）" class="headerlink" title="1.3 Object类的toString方法（应用）"></a>1.3 Object类的toString方法（应用）</h3><ul>
<li><p>Object类概述</p>
<ul>
<li>Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类，换句话说，该类所具备的方法，所有类都会有一份</li>
</ul>
</li>
<li><p>查看方法源码的方式</p>
<ul>
<li>选中方法，按下Ctrl + B</li>
</ul>
</li>
<li><p>重写toString方法的方式</p>
<ul>
<li><ol>
<li>Alt + Insert 选择toString</li>
</ol>
</li>
<li><ol start="2">
<li>在类的空白区域，右键 -&gt; Generate -&gt; 选择toString</li>
</ol>
</li>
</ul>
</li>
<li><p>toString方法的作用：</p>
<ul>
<li>以良好的格式，更方便的展示对象中的属性值</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        System.out.println(s); </span><br><span class="line">        System.out.println(s.toString()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student&#123;name=<span class="string">&#x27;林青霞&#x27;</span>, age=<span class="number">30</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;林青霞&#x27;</span>, age=<span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4-Object类的equals方法（应用）"><a href="#1-4-Object类的equals方法（应用）" class="headerlink" title="1.4 Object类的equals方法（应用）"></a>1.4 Object类的equals方法（应用）</h3><ul>
<li><p>equals方法的作用</p>
<ul>
<li>用于对象之间的比较，返回true和false的结果</li>
<li>举例：s1.equals(s2);    s1和s2是两个对象</li>
</ul>
</li>
<li><p>重写equals方法的场景</p>
<ul>
<li>不希望比较对象的地址值，想要结合对象属性进行比较的时候。</li>
</ul>
</li>
<li><p>重写equals方法的方式</p>
<ul>
<li><ol>
<li>alt + insert  选择equals() and hashCode()，IntelliJ Default，一路next，finish即可</li>
</ol>
</li>
<li><ol start="2">
<li>在类的空白区域，右键 -&gt; Generate -&gt; 选择equals() and hashCode()，后面的同上。</li>
</ol>
</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this -- s1</span></span><br><span class="line">        <span class="comment">//o -- s2</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o; <span class="comment">//student -- s2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：比较两个对象的内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5-冒泡排序原理（理解）"><a href="#1-5-冒泡排序原理（理解）" class="headerlink" title="1.5 冒泡排序原理（理解）"></a>1.5 冒泡排序原理（理解）</h3><ul>
<li>冒泡排序概述<ul>
<li>一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序</li>
</ul>
</li>
<li>如果有n个数据进行排序，总共需要比较n-1次</li>
<li>每一次比较完毕，下一次的比较就会少一个数据参与</li>
</ul>
<h3 id="1-6-冒泡排序代码实现（理解）"><a href="#1-6-冒泡排序代码实现（理解）" class="headerlink" title="1.6 冒泡排序代码实现（理解）"></a>1.6 冒泡排序代码实现（理解）</h3><ul>
<li>代码实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    冒泡排序：</span></span><br><span class="line"><span class="comment">        一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，</span></span><br><span class="line"><span class="comment">        依次对所有的数据进行操作，直至所有数据按要求完成排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span> + arrayToString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里减1，是控制每轮比较的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length - <span class="number">1</span>; x++) &#123;</span><br><span class="line">            <span class="comment">// -1是为了避免索引越界，-x是为了调高比较效率</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - x; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span> + arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数组中的元素按照指定的规则组成一个字符串：[元素1, 元素2, ...]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-Arrays（应用）"><a href="#1-7-Arrays（应用）" class="headerlink" title="1.7 Arrays（应用）"></a>1.7 Arrays（应用）</h3><ul>
<li><p>Arrays的常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static String toString(int[] a)</td>
<td>返回指定数组的内容的字符串表示形式</td>
</tr>
<tr>
<td>public static void sort(int[] a)</td>
<td>按照数字顺序排列指定的数组</td>
</tr>
</tbody></table>
</li>
<li><p>工具类设计思想</p>
<p>1、构造方法用 private 修饰</p>
<p>2、成员用 public static 修饰</p>
</li>
</ul>
<h1 id="2-常用API"><a href="#2-常用API" class="headerlink" title="2.常用API"></a>2.常用API</h1><h2 id="2-1-包装类"><a href="#2-1-包装类" class="headerlink" title="2.1.包装类"></a>2.1.包装类</h2><h3 id="2-1-1基本类型包装类（记忆）"><a href="#2-1-1基本类型包装类（记忆）" class="headerlink" title="2.1.1基本类型包装类（记忆）"></a>2.1.1基本类型包装类（记忆）</h3><ul>
<li><p>基本类型包装类的作用</p>
<p>​    将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p>
<p>​    常用的操作之一：用于基本数据类型与字符串之间的转换</p>
</li>
<li><p>基本类型对应的包装类</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-1-2Integer类（应用）"><a href="#2-1-2Integer类（应用）" class="headerlink" title="2.1.2Integer类（应用）"></a>2.1.2Integer类（应用）</h3><ul>
<li><p>Integer类概述</p>
<p>​    包装一个对象中的原始类型 int 的值</p>
</li>
<li><p>Integer类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Integer(int   value)</td>
<td>根据 int 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public Integer(String s)</td>
<td>根据 String 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public static Integer valueOf(int i)</td>
<td>返回表示指定的 int 值的 Integer   实例</td>
</tr>
<tr>
<td>public static Integer valueOf(String s)</td>
<td>返回一个保存指定值的 Integer 对象 String</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Integer(int value)：根据 int 值创建 Integer 对象(过时)</span></span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Integer(String s)：根据 String 值创建 Integer 对象(过时)</span></span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="comment">//        Integer i2 = new Integer(&quot;abc&quot;); //NumberFormatException</span></span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(int i)：返回表示指定的 int 值的 Integer 实例</span></span><br><span class="line">        Integer i3 = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(String s)：返回一个保存指定值的Integer对象 String</span></span><br><span class="line">        Integer i4 = Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-1-3int和String类型的相互转换（记忆）"><a href="#2-1-3int和String类型的相互转换（记忆）" class="headerlink" title="2.1.3int和String类型的相互转换（记忆）"></a>2.1.3int和String类型的相互转换（记忆）</h3><ul>
<li><p>int转换为String</p>
<ul>
<li><p>转换方式</p>
<ul>
<li>方式一：直接在数字后加一个空字符串</li>
<li>方式二：通过String类静态方法valueOf()</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int --- String</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        String s1 = number + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static String valueOf(int i)</span></span><br><span class="line">        String s2 = String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>String转换为int</p>
<ul>
<li><p>转换方式</p>
<ul>
<li>方式一：先将字符串数字转成Integer，再调用valueOf()方法</li>
<li>方式二：通过Integer静态方法parseInt()进行转换</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String --- int</span></span><br><span class="line">        String s = <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1：String --- Integer --- int</span></span><br><span class="line">        Integer i = Integer.valueOf(s);</span><br><span class="line">        <span class="comment">//public int intValue()</span></span><br><span class="line">        <span class="keyword">int</span> x = i.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static int parseInt(String s)</span></span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(s);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-1-4字符串数据排序案例（应用）"><a href="#2-1-4字符串数据排序案例（应用）" class="headerlink" title="2.1.4字符串数据排序案例（应用）"></a>2.1.4字符串数据排序案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    有一个字符串：“91 27 46 38 50”，请写程序实现最终输出结果是：“27 38 46 50 91”</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;91 27 46 38 50&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串中的数字数据存储到一个int类型的数组中</span></span><br><span class="line">        String[] strArray = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//        for(int i=0; i&lt;strArray.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(strArray[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个int数组，把 String[] 数组中的每一个元素存储到 int 数组中</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[strArray.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(strArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对 int 数组进行排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把排序后的int数组中的元素进行拼接得到一个字符串，这里拼接采用StringBuilder来实现</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String result = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-1-5自动拆箱和自动装箱（理解）"><a href="#2-1-5自动拆箱和自动装箱（理解）" class="headerlink" title="2.1.5自动拆箱和自动装箱（理解）"></a>2.1.5自动拆箱和自动装箱（理解）</h3><ul>
<li><p>自动装箱</p>
<p>​    把基本数据类型转换为对应的包装类类型</p>
</li>
<li><p>自动拆箱</p>
<p>​    把包装类类型转换为对应的基本数据类型</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">100</span>;  <span class="comment">// 自动装箱</span></span><br><span class="line">i += <span class="number">200</span>;         <span class="comment">// i = i + 200;  i + 200 自动拆箱；i = i + 200; 是自动装箱</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-2-时间日期类"><a href="#2-2-时间日期类" class="headerlink" title="2.2.时间日期类"></a>2.2.时间日期类</h2><h3 id="2-2-1Date类（应用）"><a href="#2-2-1Date类（应用）" class="headerlink" title="2.2.1Date类（应用）"></a>2.2.1Date类（应用）</h3><ul>
<li><p>Date类概述</p>
<p>​    Date 代表了一个特定的时间，精确到毫秒</p>
</li>
<li><p>Date类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Date()</td>
<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>
</tr>
<tr>
<td>public Date(long date)</td>
<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(d1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> date = <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(date);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-2Date类常用方法（应用）"><a href="#2-2-2Date类常用方法（应用）" class="headerlink" title="2.2.2Date类常用方法（应用）"></a>2.2.2Date类常用方法（应用）</h3><ul>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public long getTime()</td>
<td>获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</td>
</tr>
<tr>
<td>public void setTime(long time)</td>
<td>设置时间，给的是毫秒值</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public long getTime():获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</span></span><br><span class="line"><span class="comment">//        System.out.println(d.getTime());</span></span><br><span class="line"><span class="comment">//        System.out.println(d.getTime() * 1.0 / 1000 / 60 / 60 / 24 / 365 + &quot;年&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void setTime(long time):设置时间，给的是毫秒值</span></span><br><span class="line"><span class="comment">//        long time = 1000*60*60;</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        d.setTime(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-3SimpleDateFormat类（应用）"><a href="#2-2-3SimpleDateFormat类（应用）" class="headerlink" title="2.2.3SimpleDateFormat类（应用）"></a>2.2.3SimpleDateFormat类（应用）</h3><ul>
<li><p>SimpleDateFormat类概述</p>
<p>​    SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。</p>
<p>​    我们重点学习日期格式化和解析</p>
</li>
<li><p>SimpleDateFormat类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   SimpleDateFormat()</td>
<td>构造一个SimpleDateFormat，使用默认模式和日期格式</td>
</tr>
<tr>
<td>public SimpleDateFormat(String pattern)</td>
<td>构造一个SimpleDateFormat使用给定的模式和默认的日期格式</td>
</tr>
</tbody></table>
</li>
<li><p>SimpleDateFormat类的常用方法</p>
<ul>
<li>格式化(从Date到String)<ul>
<li>public final String format(Date date)：将日期格式化成日期/时间字符串</li>
</ul>
</li>
<li>解析(从String到Date)<ul>
<li>public Date parse(String source)：从给定字符串的开始解析文本以生成日期</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//格式化：从 Date 到 String</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf = new SimpleDateFormat();</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        String s = sdf.format(d);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 String 到 Date</span></span><br><span class="line">        String ss = <span class="string">&quot;2048-08-09 11:11:11&quot;</span>;</span><br><span class="line">        <span class="comment">//ParseException</span></span><br><span class="line">        SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date dd = sdf2.parse(ss);</span><br><span class="line">        System.out.println(dd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-4日期工具类案例（应用）"><a href="#2-2-4日期工具类案例（应用）" class="headerlink" title="2.2.4日期工具类案例（应用）"></a>2.2.4日期工具类案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    定义一个日期工具类(DateUtils)，包含两个方法：把日期转换为指定格式的字符串；把字符串解析为指定格式的日期，然后定义一个测试类(DateDemo)，测试日期工具类的方法</p>
</li>
<li><p>代码实现</p>
<ul>
<li>工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DateUtils</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把日期转为指定格式的字符串</span></span><br><span class="line"><span class="comment">        返回值类型：String</span></span><br><span class="line"><span class="comment">        参数：Date date, String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date date, String format)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        String s = sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把字符串解析为指定格式的日期</span></span><br><span class="line"><span class="comment">        返回值类型：Date</span></span><br><span class="line"><span class="comment">        参数：String s, String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String s, String format)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        Date d = sdf.parse(s);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        String s1 = DateUtils.dateToString(d, <span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        String s2 = DateUtils.dateToString(d, <span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        String s3 = DateUtils.dateToString(d, <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">&quot;2048-08-09 12:12:12&quot;</span>;</span><br><span class="line">        Date dd = DateUtils.stringToDate(s, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(dd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-5Calendar类（应用）"><a href="#2-2-5Calendar类（应用）" class="headerlink" title="2.2.5Calendar类（应用）"></a>2.2.5Calendar类（应用）</h3><ul>
<li><p>Calendar类概述</p>
<p>​    Calendar 为特定瞬间与一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p>
<p>​    Calendar 提供了一个类方法 getInstance 用于获取这种类型的一般有用的对象。</p>
<p>​    该方法返回一个Calendar 对象。</p>
<p>​    其日历字段已使用当前日期和时间初始化：Calendar rightNow = Calendar.getInstance();</p>
</li>
<li><p>Calendar类常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int   get(int field)</td>
<td>返回给定日历字段的值</td>
</tr>
<tr>
<td>public abstract void add(int   field, int amount)</td>
<td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td>
</tr>
<tr>
<td>public final void set(int year,int month,int date)</td>
<td>设置当前日历的年月日</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取日历类对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int get(int field):返回给定日历字段的值</span></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public abstract void add(int field, int amount):根据日历的规则，将指定的时间量添加或减去给定的日历字段</span></span><br><span class="line">        <span class="comment">//需求1:3年前的今天</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.YEAR,-3);</span></span><br><span class="line"><span class="comment">//        year = c.get(Calendar.YEAR);</span></span><br><span class="line"><span class="comment">//        month = c.get(Calendar.MONTH) + 1;</span></span><br><span class="line"><span class="comment">//        date = c.get(Calendar.DATE);</span></span><br><span class="line"><span class="comment">//        System.out.println(year + &quot;年&quot; + month + &quot;月&quot; + date + &quot;日&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2:10年后的10天前</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.YEAR,10);</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.DATE,-10);</span></span><br><span class="line"><span class="comment">//        year = c.get(Calendar.YEAR);</span></span><br><span class="line"><span class="comment">//        month = c.get(Calendar.MONTH) + 1;</span></span><br><span class="line"><span class="comment">//        date = c.get(Calendar.DATE);</span></span><br><span class="line"><span class="comment">//        System.out.println(year + &quot;年&quot; + month + &quot;月&quot; + date + &quot;日&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public final void set(int year,int month,int date):设置当前日历的年月日</span></span><br><span class="line">        c.set(<span class="number">2050</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        year = c.get(Calendar.YEAR);</span><br><span class="line">        month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-6二月天案例（应用）"><a href="#2-2-6二月天案例（应用）" class="headerlink" title="2.2.6二月天案例（应用）"></a>2.2.6二月天案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    获取任意一年的二月有多少天</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入任意的年份</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置日历对象的年、月、日</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(year, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3月1日往前推一天，就是2月的最后一天</span></span><br><span class="line">        c.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取这一天输出即可</span></span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年的2月份有&quot;</span> + date + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Set集合</title>
    <url>/2019/08/26/190826Set%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Set集合"><a href="#1-Set集合" class="headerlink" title="1.Set集合"></a>1.Set集合</h2><h3 id="1-1Set集合概述和特点【应用】"><a href="#1-1Set集合概述和特点【应用】" class="headerlink" title="1.1Set集合概述和特点【应用】"></a>1.1Set集合概述和特点【应用】</h3><ul>
<li><p>Set集合的特点</p>
<ul>
<li><p>元素存取无序</p>
</li>
<li><p>没有索引、只能通过迭代器或增强for循环遍历</p>
</li>
<li><p>不能存储重复元素</p>
<a id="more"></a></li>
</ul>
</li>
<li><p>Set集合的基本使用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//不包含重复元素的集合</span></span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2哈希值【理解】"><a href="#1-2哈希值【理解】" class="headerlink" title="1.2哈希值【理解】"></a>1.2哈希值【理解】</h3><ul>
<li><p>哈希值简介</p>
<p>​    是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</p>
</li>
<li><p>如何获取哈希值</p>
<p>​    Object类中的public int hashCode()：返回对象的哈希码值</p>
</li>
<li><p>哈希值的特点</p>
<ul>
<li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li>
<li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li>
</ul>
</li>
<li><p>获取哈希值的代码</p>
<ul>
<li>学生类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同一个对象多次调用hashCode()方法返回的哈希值是相同的</span></span><br><span class="line">        System.out.println(s1.hashCode()); <span class="comment">//1060830840</span></span><br><span class="line">        System.out.println(s1.hashCode()); <span class="comment">//1060830840</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认情况下，不同对象的哈希值是不相同的</span></span><br><span class="line">        <span class="comment">//通过方法重写，可以实现不同对象的哈希值是相同的</span></span><br><span class="line">        System.out.println(s2.hashCode()); <span class="comment">//2137211482</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>.hashCode()); <span class="comment">//99162322</span></span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>.hashCode()); <span class="comment">//113318802</span></span><br><span class="line">        System.out.println(<span class="string">&quot;java&quot;</span>.hashCode()); <span class="comment">//3254818</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>.hashCode()); <span class="comment">//113318802</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;重地&quot;</span>.hashCode()); <span class="comment">//1179395</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通话&quot;</span>.hashCode()); <span class="comment">//1179395</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3HashSet集合概述和特点【应用】"><a href="#1-3HashSet集合概述和特点【应用】" class="headerlink" title="1.3HashSet集合概述和特点【应用】"></a>1.3HashSet集合概述和特点【应用】</h3><ul>
<li><p>HashSet集合的特点</p>
<ul>
<li>底层数据结构是哈希表</li>
<li>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li>
<li>没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>由于是Set集合，所以是不包含重复元素的集合</li>
</ul>
</li>
<li><p>HashSet集合的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; hs = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        hs.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hs.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        hs.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        hs.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : hs) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4HashSet集合保证元素唯一性源码分析【理解】"><a href="#1-4HashSet集合保证元素唯一性源码分析【理解】" class="headerlink" title="1.4HashSet集合保证元素唯一性源码分析【理解】"></a>1.4HashSet集合保证元素唯一性源码分析【理解】</h3><ul>
<li><p>HashSet集合保证元素唯一性的原理</p>
<p>​    1.根据对象的哈希值计算存储位置</p>
<p>​            如果当前位置没有元素则直接存入</p>
<p>​            如果当前位置有元素存在，则进入第二步</p>
<p>​     2.当前元素的元素和已经存在的元素比较哈希值</p>
<p>​            如果哈希值不同，则将当前元素进行存储</p>
<p>​            如果哈希值相同，则进入第三步</p>
<p>​     3.通过equals()方法比较两个元素的内容</p>
<p>​            如果内容不相同，则将当前元素进行存储</p>
<p>​            如果内容相同，则不存储当前元素</p>
</li>
<li><p>HashSet集合保证元素唯一性的图解</p>
<p><img src="/2019/08/26/190826Set%E9%9B%86%E5%90%88/1HashSet%E9%9B%86%E5%90%88%E4%BF%9D%E8%AF%81%E5%85%83%E7%B4%A0%E5%94%AF%E4%B8%80%E6%80%A7.png" alt="01"></p>
</li>
</ul>
<h3 id="1-5常见数据结构之哈希表【理解】"><a href="#1-5常见数据结构之哈希表【理解】" class="headerlink" title="1.5常见数据结构之哈希表【理解】"></a>1.5常见数据结构之哈希表【理解】</h3><p><img src="/2019/08/26/190826Set%E9%9B%86%E5%90%88/2.png" alt="02"></p>
<h3 id="1-6HashSet集合存储学生对象并遍历【应用】"><a href="#1-6HashSet集合存储学生对象并遍历【应用】" class="headerlink" title="1.6HashSet集合存储学生对象并遍历【应用】"></a>1.6HashSet集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</li>
<li>要求：学生对象的成员变量值相同，我们就认为是同一个对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;Student&gt; hs = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hs.add(s1);</span><br><span class="line">        hs.add(s2);</span><br><span class="line">        hs.add(s3);</span><br><span class="line">        hs.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合(增强for)</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : hs) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-7LinkedHashSet集合概述和特点【应用】"><a href="#1-7LinkedHashSet集合概述和特点【应用】" class="headerlink" title="1.7LinkedHashSet集合概述和特点【应用】"></a>1.7LinkedHashSet集合概述和特点【应用】</h3><ul>
<li><p>LinkedHashSet集合特点</p>
<ul>
<li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li>
<li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li>
<li>由哈希表保证元素唯一，也就是说没有重复的元素</li>
</ul>
</li>
<li><p>LinkedHashSet集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        LinkedHashSet&lt;String&gt; linkedHashSet = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : linkedHashSet) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-Set集合排序"><a href="#2-Set集合排序" class="headerlink" title="2.Set集合排序"></a>2.Set集合排序</h2><h3 id="2-1TreeSet集合概述和特点【应用】"><a href="#2-1TreeSet集合概述和特点【应用】" class="headerlink" title="2.1TreeSet集合概述和特点【应用】"></a>2.1TreeSet集合概述和特点【应用】</h3><ul>
<li><p>TreeSet集合概述</p>
<ul>
<li>元素有序，可以按照一定的规则进行排序，具体排序方式取决于构造方法<ul>
<li>TreeSet()：根据其元素的自然排序进行排序</li>
<li>TreeSet(Comparator comparator) ：根据指定的比较器进行排序</li>
</ul>
</li>
<li>没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>由于是Set集合，所以不包含重复元素的集合</li>
</ul>
</li>
<li><p>TreeSet集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        ts.add(<span class="number">10</span>);</span><br><span class="line">        ts.add(<span class="number">40</span>);</span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line">        ts.add(<span class="number">50</span>);</span><br><span class="line">        ts.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : ts) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2自然排序Comparable的使用【应用】"><a href="#2-2自然排序Comparable的使用【应用】" class="headerlink" title="2.2自然排序Comparable的使用【应用】"></a>2.2自然排序Comparable的使用【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>存储学生对象并遍历，创建TreeSet集合使用无参构造方法</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>实现步骤</p>
<ul>
<li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li>
<li>自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(T o)方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//        return 1;</span></span><br><span class="line"><span class="comment">//        return -1;</span></span><br><span class="line">        <span class="comment">//按照年龄从小到大排序</span></span><br><span class="line">       <span class="keyword">int</span> num = <span class="keyword">this</span>.age - s.age;</span><br><span class="line"><span class="comment">//        int num = s.age - this.age;</span></span><br><span class="line">        <span class="comment">//年龄相同时，按照姓名的字母顺序排序</span></span><br><span class="line">       <span class="keyword">int</span> num2 = num==<span class="number">0</span>?<span class="keyword">this</span>.name.compareTo(s.name):num;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;xishi&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzhaojun&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;diaochan&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;yangyuhuan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-3比较器排序Comparator的使用【应用】"><a href="#2-3比较器排序Comparator的使用【应用】" class="headerlink" title="2.3比较器排序Comparator的使用【应用】"></a>2.3比较器排序Comparator的使用【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>存储学生对象并遍历，创建TreeSet集合使用带参构造方法</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>实现步骤</p>
<ul>
<li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li>
<li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//this.age - s.age</span></span><br><span class="line">                <span class="comment">//s1,s2</span></span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge() - s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">                <span class="keyword">return</span> num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;xishi&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzhaojun&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;diaochan&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;yangyuhuan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-4成绩排序案例【应用】"><a href="#2-4成绩排序案例【应用】" class="headerlink" title="2.4成绩排序案例【应用】"></a>2.4成绩排序案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>用TreeSet集合存储多个学生信息(姓名，语文成绩，数学成绩)，并遍历该集合</li>
<li>要求：按照总分从高到低出现</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> math;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> chinese, <span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChinese</span><span class="params">(<span class="keyword">int</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese + <span class="keyword">this</span>.math;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合对象，通过比较器排序进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                int num = (s2.getChinese()+s2.getMath())-(s1.getChinese()+s1.getMath());</span></span><br><span class="line">                <span class="comment">//主要条件</span></span><br><span class="line">                <span class="keyword">int</span> num = s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getChinese() - s2.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num2;</span><br><span class="line">                <span class="keyword">return</span> num3;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">98</span>, <span class="number">100</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">95</span>, <span class="number">95</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">100</span>, <span class="number">93</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;柳岩&quot;</span>, <span class="number">100</span>, <span class="number">97</span>);</span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;风清扬&quot;</span>, <span class="number">98</span>, <span class="number">98</span>);</span><br><span class="line"></span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;左冷禅&quot;</span>, <span class="number">97</span>, <span class="number">99</span>);</span><br><span class="line"><span class="comment">//        Student s7 = new Student(&quot;左冷禅&quot;, 97, 99);</span></span><br><span class="line">        Student s7 = <span class="keyword">new</span> Student(<span class="string">&quot;赵云&quot;</span>, <span class="number">97</span>, <span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生对象添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line">        ts.add(s7);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getChinese() + <span class="string">&quot;,&quot;</span> + s.getMath() + <span class="string">&quot;,&quot;</span> + s.getSum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-5不重复的随机数案例【应用】"><a href="#2-5不重复的随机数案例【应用】" class="headerlink" title="2.5不重复的随机数案例【应用】"></a>2.5不重复的随机数案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>编写一个程序，获取10个1-20之间的随机数，要求随机数不能重复，并在控制台输出</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Set集合对象</span></span><br><span class="line"><span class="comment">//        Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建随机数对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合的长度是不是小于10</span></span><br><span class="line">        <span class="keyword">while</span> (set.size()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//产生一个随机数，添加到集合</span></span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">            set.add(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : set) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3.泛型"></a>3.泛型</h2><h3 id="3-1泛型概述和好处【理解】"><a href="#3-1泛型概述和好处【理解】" class="headerlink" title="3.1泛型概述和好处【理解】"></a>3.1泛型概述和好处【理解】</h3><ul>
<li><p>泛型概述</p>
<p>​    是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型</p>
<p>它的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口</p>
</li>
<li><p>泛型定义格式</p>
<ul>
<li>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参</li>
<li>&lt;类型1,类型2…&gt;：指定多种类型的格式，多种类型之间用逗号隔开。这里的类型可以看成是形参</li>
<li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li>
</ul>
</li>
<li><p>泛型的好处</p>
<ul>
<li>把运行时期的问题提前到了编译期间</li>
<li>避免了强制类型转换</li>
</ul>
</li>
</ul>
<h3 id="3-2泛型类【应用】"><a href="#3-2泛型类【应用】" class="headerlink" title="3.2泛型类【应用】"></a>3.2泛型类【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;类型&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> Generic&lt;String&gt;();</span><br><span class="line">        g1.setT(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(g1.getT());</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> Generic&lt;Integer&gt;();</span><br><span class="line">        g2.setT(<span class="number">30</span>);</span><br><span class="line">        System.out.println(g2.getT());</span><br><span class="line"></span><br><span class="line">        Generic&lt;Boolean&gt; g3 = <span class="keyword">new</span> Generic&lt;Boolean&gt;();</span><br><span class="line">        g3.setT(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(g3.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-3泛型方法【应用】"><a href="#3-3泛型方法【应用】" class="headerlink" title="3.3泛型方法【应用】"></a>3.3泛型方法【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>带有泛型方法的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Generic g = <span class="keyword">new</span> Generic();</span><br><span class="line">        g.show(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        g.show(<span class="number">30</span>);</span><br><span class="line">        g.show(<span class="keyword">true</span>);</span><br><span class="line">        g.show(<span class="number">12.34</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-4泛型接口【应用】"><a href="#3-4泛型接口【应用】" class="headerlink" title="3.4泛型接口【应用】"></a>3.4泛型接口【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;类型&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> GenericImpl&lt;String&gt;();</span><br><span class="line">        g1.show(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> GenericImpl&lt;Integer&gt;();</span><br><span class="line">        g2.show(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5类型通配符【应用】"><a href="#3-5类型通配符【应用】" class="headerlink" title="3.5类型通配符【应用】"></a>3.5类型通配符【应用】</h3><ul>
<li><p>类型通配符的作用</p>
<p>​    为了表示各种泛型List的父类，可以使用类型通配符    </p>
</li>
<li><p>类型通配符的分类</p>
<ul>
<li>类型通配符：&lt;?&gt;<ul>
<li>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何的类型</li>
<li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li>
</ul>
</li>
<li>类型通配符上限：&lt;? extends 类型&gt;<ul>
<li>List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</li>
</ul>
</li>
<li>类型通配符下限：&lt;? super 类型&gt;<ul>
<li>List&lt;? super Number&gt;：它表示的类型是Number或者其父类型</li>
</ul>
</li>
</ul>
</li>
<li><p>类型通配符的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型通配符：&lt;?&gt;</span></span><br><span class="line">        List&lt;?&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        List&lt;?&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型通配符上限：&lt;? extends 类型&gt;</span></span><br><span class="line"><span class="comment">//        List&lt;? extends Number&gt; list4 = new ArrayList&lt;Object&gt;();</span></span><br><span class="line">        List&lt;? extends Number&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        List&lt;? extends Number&gt; list6 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型通配符下限：&lt;? super 类型&gt;</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list7 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list8 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line"><span class="comment">//        List&lt;? super Number&gt; list9 = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-可变参数"><a href="#4-可变参数" class="headerlink" title="4.可变参数"></a>4.可变参数</h2><h3 id="4-1可变参数【应用】"><a href="#4-1可变参数【应用】" class="headerlink" title="4.1可变参数【应用】"></a>4.1可变参数【应用】</h3><ul>
<li><p>可变参数介绍</p>
<p>​    可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p>
</li>
<li><p>可变参数定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型… 变量名) &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可变参数的注意事项</p>
<ul>
<li>这里的变量其实是一个数组</li>
<li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后</li>
</ul>
</li>
<li><p>可变参数的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static int sum(int b,int... a) &#123;</span></span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-2可变参数的使用【应用】"><a href="#4-2可变参数的使用【应用】" class="headerlink" title="4.2可变参数的使用【应用】"></a>4.2可变参数的使用【应用】</h3><ul>
<li><p>Arrays工具类中有一个静态方法：</p>
<ul>
<li>public static <T> List<T> asList(T… a)：返回由指定数组支持的固定大小的列表</T></T></li>
<li>返回的集合不能做增删操作，可以做修改操作</li>
</ul>
</li>
<li><p>List接口中有一个静态方法：</p>
<ul>
<li>public static <E> List<E> of(E… elements)：返回包含任意数量元素的不可变列表</E></E></li>
<li>返回的集合不能做增删改操作</li>
</ul>
</li>
<li><p>Set接口中有一个静态方法：</p>
<ul>
<li>public static <E> Set<E> of(E… elements) ：返回一个包含任意数量元素的不可变集合</E></E></li>
<li>在给元素的时候，不能给重复的元素</li>
<li>返回的集合不能做增删操作，没有修改的方法</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a)：返回由指定数组支持的固定大小的列表</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        list.add(&quot;javaee&quot;); //UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.remove(&quot;world&quot;); //UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//        list.set(1,&quot;javaee&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; List&lt;E&gt; of(E... elements)：返回包含任意数量元素的不可变列表</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = List.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;, &quot;world&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        list.add(&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.remove(&quot;java&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.set(1,&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; Set&lt;E&gt; of(E... elements) ：返回一个包含任意数量元素的不可变集合</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; set = Set.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;,&quot;world&quot;); //IllegalArgumentException</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = Set.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//        set.remove(&quot;world&quot;);//UnsupportedOperationException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(set);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Map集合</title>
    <url>/2019/08/27/190827Map%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1.Map集合"></a>1.Map集合</h2><h3 id="1-1Map集合概述和特点【理解】"><a href="#1-1Map集合概述和特点【理解】" class="headerlink" title="1.1Map集合概述和特点【理解】"></a>1.1Map集合概述和特点【理解】</h3><ul>
<li><p>Map集合概述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  <span class="title">K</span>：键的类型；<span class="title">V</span>：值的类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map集合的特点</p>
<ul>
<li><p>键值对映射关系</p>
</li>
<li><p>一个键对应一个值</p>
</li>
<li><p>键不能重复，值可以重复</p>
</li>
<li><p>元素存取无序</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>Map集合的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span></span><br><span class="line">        map.put(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2Map集合的基本功能【应用】"><a href="#1-2Map集合的基本功能【应用】" class="headerlink" title="1.2Map集合的基本功能【应用】"></a>1.2Map集合的基本功能【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>V   put(K key,V   value)</td>
<td>添加元素</td>
</tr>
<tr>
<td>V   remove(Object key)</td>
<td>根据键删除键值对元素</td>
</tr>
<tr>
<td>void   clear()</td>
<td>移除所有的键值对元素</td>
</tr>
<tr>
<td>boolean containsKey(Object key)</td>
<td>判断集合是否包含指定的键</td>
</tr>
<tr>
<td>boolean containsValue(Object value)</td>
<td>判断集合是否包含指定的值</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>int size()</td>
<td>集合的长度，也就是集合中键值对的个数</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key,V value)：添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>,<span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>,<span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V remove(Object key)：根据键删除键值对元素</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void clear()：移除所有的键值对元素</span></span><br><span class="line"><span class="comment">//        map.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：判断集合是否包含指定的键</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean isEmpty()：判断集合是否为空</span></span><br><span class="line"><span class="comment">//        System.out.println(map.isEmpty());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：集合的长度，也就是集合中键值对的个数</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3Map集合的获取功能【应用】"><a href="#1-3Map集合的获取功能【应用】" class="headerlink" title="1.3Map集合的获取功能【应用】"></a>1.3Map集合的获取功能【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>V   get(Object key)</td>
<td>根据键获取值</td>
</tr>
<tr>
<td>Set<K>   keySet()</K></td>
<td>获取所有键的集合</td>
</tr>
<tr>
<td>Collection<V>   values()</V></td>
<td>获取所有值的集合</td>
</tr>
<tr>
<td>Set&lt;Map.Entry&lt;K,V&gt;&gt;   entrySet()</td>
<td>获取所有键值对对象的集合</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V get(Object key):根据键获取值</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张无忌&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张三丰&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;K&gt; keySet():获取所有键的集合</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; keySet = map.keySet();</span></span><br><span class="line"><span class="comment">//        for(String key : keySet) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collection&lt;V&gt; values():获取所有值的集合</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(String value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4Map集合的遍历-方式1-【应用】"><a href="#1-4Map集合的遍历-方式1-【应用】" class="headerlink" title="1.4Map集合的遍历(方式1)【应用】"></a>1.4Map集合的遍历(方式1)【应用】</h3><ul>
<li><p>遍历思路</p>
<ul>
<li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul>
<li>把所有的丈夫给集中起来</li>
<li>遍历丈夫的集合，获取到每一个丈夫</li>
<li>根据丈夫去找对应的妻子</li>
</ul>
</li>
</ul>
</li>
<li><p>步骤分析</p>
<ul>
<li>获取所有键的集合。用keySet()方法实现</li>
<li>遍历键的集合，获取到每一个键。用增强for实现  </li>
<li>根据键去找值。用get(Object key)方法实现</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键的集合。用keySet()方法实现</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="comment">//遍历键的集合，获取到每一个键。用增强for实现</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//根据键去找值。用get(Object key)方法实现</span></span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5Map集合的遍历-方式2-【应用】"><a href="#1-5Map集合的遍历-方式2-【应用】" class="headerlink" title="1.5Map集合的遍历(方式2)【应用】"></a>1.5Map集合的遍历(方式2)【应用】</h3><ul>
<li><p>遍历思路</p>
<ul>
<li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul>
<li>获取所有结婚证的集合</li>
<li>遍历结婚证的集合，得到每一个结婚证</li>
<li>根据结婚证获取丈夫和妻子</li>
</ul>
</li>
</ul>
</li>
<li><p>步骤分析</p>
<ul>
<li>获取所有键值对对象的集合<ul>
<li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取所有键值对对象的集合</li>
</ul>
</li>
<li>遍历键值对对象的集合，得到每一个键值对对象<ul>
<li>用增强for实现，得到每一个Map.Entry</li>
</ul>
</li>
<li>根据键值对对象获取键和值<ul>
<li>用getKey()得到键</li>
<li>用getValue()得到值</li>
</ul>
</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键值对对象的集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="comment">//遍历键值对对象的集合，得到每一个键值对对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;</span><br><span class="line">            <span class="comment">//根据键值对对象获取键和值</span></span><br><span class="line">            String key = me.getKey();</span><br><span class="line">            String value = me.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6Map集合的案例【应用】"><a href="#1-6Map集合的案例【应用】" class="headerlink" title="1.6Map集合的案例【应用】"></a>1.6Map集合的案例【应用】</h3><h4 id="1-6-1HashMap集合练习之键是String值是Student"><a href="#1-6-1HashMap集合练习之键是String值是Student" class="headerlink" title="1.6.1HashMap集合练习之键是String值是Student"></a>1.6.1HashMap集合练习之键是String值是Student</h4><ul>
<li><p>案例需求</p>
<p>​    创建一个HashMap集合，键是学号(String)，值是学生对象(Student)。存储三个键值对元素，并遍历</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：</span></span><br><span class="line"><span class="comment">        创建一个HashMap集合，键是学号(String)，值是学生对象(Student)。存储三个键值对元素，并遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类</span></span><br><span class="line"><span class="comment">        2:创建HashMap集合对象</span></span><br><span class="line"><span class="comment">        3:创建学生对象</span></span><br><span class="line"><span class="comment">        4:把学生添加到集合</span></span><br><span class="line"><span class="comment">        5:遍历集合</span></span><br><span class="line"><span class="comment">            方式1：键找值</span></span><br><span class="line"><span class="comment">            方式2：键值对对象找键和值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        HashMap&lt;String, Student&gt; hm = <span class="keyword">new</span> HashMap&lt;String, Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;itheima001&quot;</span>, s1);</span><br><span class="line">        hm.put(<span class="string">&quot;itheima002&quot;</span>, s2);</span><br><span class="line">        hm.put(<span class="string">&quot;itheima003&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：键找值</span></span><br><span class="line">        Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            Student value = hm.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value.getName() + <span class="string">&quot;,&quot;</span> + value.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：键值对对象找键和值</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Student&gt;&gt; entrySet = hm.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Student&gt; me : entrySet) &#123;</span><br><span class="line">            String key = me.getKey();</span><br><span class="line">            Student value = me.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value.getName() + <span class="string">&quot;,&quot;</span> + value.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-6-2HashMap集合练习之键是Student值是String"><a href="#1-6-2HashMap集合练习之键是Student值是String" class="headerlink" title="1.6.2HashMap集合练习之键是Student值是String"></a>1.6.2HashMap集合练习之键是Student值是String</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个HashMap集合，键是学生对象(Student)，值是居住地 (String)。存储多个元素，并遍历。</li>
<li>要求保证键的唯一性：如果学生对象的成员变量值相同，我们就认为是同一个对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        HashMap&lt;Student, String&gt; hm = <span class="keyword">new</span> HashMap&lt;Student, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hm.put(s1, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        hm.put(s2, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        hm.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">        hm.put(s4, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Student&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keySet) &#123;</span><br><span class="line">            String value = hm.get(key);</span><br><span class="line">            System.out.println(key.getName() + <span class="string">&quot;,&quot;</span> + key.getAge() + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-6-3集合嵌套之ArrayList嵌套HashMap"><a href="#1-6-3集合嵌套之ArrayList嵌套HashMap" class="headerlink" title="1.6.3集合嵌套之ArrayList嵌套HashMap"></a>1.6.3集合嵌套之ArrayList嵌套HashMap</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个ArrayList集合，存储三个元素，每一个元素都是HashMap</li>
<li>每一个HashMap的键和值都是String，并遍历。</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIncludeHashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;HashMap&lt;String, String&gt;&gt; array = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashMap集合，并添加键值对元素</span></span><br><span class="line">        HashMap&lt;String, String&gt; hm1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm1.put(<span class="string">&quot;孙策&quot;</span>, <span class="string">&quot;大乔&quot;</span>);</span><br><span class="line">        hm1.put(<span class="string">&quot;周瑜&quot;</span>, <span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm1);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; hm2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm2.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        hm2.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm2);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; hm3 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm3.put(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;任盈盈&quot;</span>);</span><br><span class="line">        hm3.put(<span class="string">&quot;林平之&quot;</span>, <span class="string">&quot;岳灵珊&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历ArrayList集合</span></span><br><span class="line">        <span class="keyword">for</span> (HashMap&lt;String, String&gt; hm : array) &#123;</span><br><span class="line">            Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">            <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                String value = hm.get(key);</span><br><span class="line">                System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-4集合嵌套之HashMap嵌套ArrayList"><a href="#1-6-4集合嵌套之HashMap嵌套ArrayList" class="headerlink" title="1.6.4集合嵌套之HashMap嵌套ArrayList"></a>1.6.4集合嵌套之HashMap嵌套ArrayList</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个HashMap集合，存储三个键值对元素，每一个键值对元素的键是String，值是ArrayList</li>
<li>每一个ArrayList的元素是String，并遍历。</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapIncludeArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String, ArrayList&lt;String&gt;&gt; hm = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合，并添加元素</span></span><br><span class="line">        ArrayList&lt;String&gt; sgyy = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sgyy.add(<span class="string">&quot;诸葛亮&quot;</span>);</span><br><span class="line">        sgyy.add(<span class="string">&quot;赵云&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;三国演义&quot;</span>,sgyy);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; xyj = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        xyj.add(<span class="string">&quot;唐僧&quot;</span>);</span><br><span class="line">        xyj.add(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;西游记&quot;</span>,xyj);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; shz = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        shz.add(<span class="string">&quot;武松&quot;</span>);</span><br><span class="line">        shz.add(<span class="string">&quot;鲁智深&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;水浒传&quot;</span>,shz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历HashMap集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keySet) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            ArrayList&lt;String&gt; value = hm.get(key);</span><br><span class="line">            <span class="keyword">for</span>(String s : value) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-5统计字符串中每个字符出现的次数"><a href="#1-6-5统计字符串中每个字符出现的次数" class="headerlink" title="1.6.5统计字符串中每个字符出现的次数"></a>1.6.5统计字符串中每个字符出现的次数</h4><ul>
<li><p>案例需求</p>
<ul>
<li>键盘录入一个字符串，要求统计字符串中每个字符串出现的次数。</li>
<li>举例：键盘录入“aababcabcdabcde”  在控制台输出：“a(5)b(4)c(3)d(2)e(1)”</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashMap集合，键是Character，值是Integer</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Character, Integer&gt; hm = new HashMap&lt;Character, Integer&gt;();</span></span><br><span class="line">        TreeMap&lt;Character, Integer&gt; hm = <span class="keyword">new</span> TreeMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> key = line.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿得到的每一个字符作为键到HashMap集合中去找对应的值，看其返回值</span></span><br><span class="line">            Integer value = hm.get(key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果返回值是null：说明该字符在HashMap集合中不存在，就把该字符作为键，1作为值存储</span></span><br><span class="line">                hm.put(key,<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果返回值不是null：说明该字符在HashMap集合中存在，把该值加1，然后重新存储该字符和对应的值</span></span><br><span class="line">                value++;</span><br><span class="line">                hm.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历HashMap集合，得到键和值，按照要求进行拼接</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        Set&lt;Character&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Character key : keySet) &#123;</span><br><span class="line">            Integer value = hm.get(key);</span><br><span class="line">            sb.append(key).append(<span class="string">&quot;(&quot;</span>).append(value).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String result = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-Collections集合工具类"><a href="#2-Collections集合工具类" class="headerlink" title="2.Collections集合工具类"></a>2.Collections集合工具类</h2><h3 id="2-1Collections概述和使用【应用】"><a href="#2-1Collections概述和使用【应用】" class="headerlink" title="2.1Collections概述和使用【应用】"></a>2.1Collections概述和使用【应用】</h3><ul>
<li><p>Collections类的作用</p>
<p>​    是针对集合操作的工具类</p>
</li>
<li><p>Collections类常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static void sort(List<T> list)</T></td>
<td>将指定的列表按升序排序</td>
</tr>
<tr>
<td>public static void reverse(List&lt;?&gt; list)</td>
<td>反转指定列表中元素的顺序</td>
</tr>
<tr>
<td>public static void shuffle(List&lt;?&gt; list)</td>
<td>使用默认的随机源随机排列指定的列表</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)：将指定的列表按升序排序</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void reverse(List&lt;?&gt; list)：反转指定列表中元素的顺序</span></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void shuffle(List&lt;?&gt; list)：使用默认的随机源随机排列指定的列表</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2ArrayList集合存储学生并排序【应用】"><a href="#2-2ArrayList集合存储学生并排序【应用】" class="headerlink" title="2.2ArrayList集合存储学生并排序【应用】"></a>2.2ArrayList集合存储学生并排序【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>ArrayList存储学生对象，使用Collections对ArrayList进行排序</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangmanyu&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzuxian&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;liuyan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line">        array.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Collections对ArrayList集合排序</span></span><br><span class="line">        <span class="comment">//sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</span></span><br><span class="line">        Collections.sort(array, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</span></span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge() - s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">                <span class="keyword">return</span> num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-斗地主案例"><a href="#3-斗地主案例" class="headerlink" title="3.斗地主案例"></a>3.斗地主案例</h2><h3 id="3-1模拟斗地主案例-普通版本【应用】"><a href="#3-1模拟斗地主案例-普通版本【应用】" class="headerlink" title="3.1模拟斗地主案例-普通版本【应用】"></a>3.1模拟斗地主案例-普通版本【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    通过程序实现斗地主过程中的洗牌，发牌和看牌</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往牌盒里面装牌</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ♦2,♦3,♦4...♦K,♦A</span></span><br><span class="line"><span class="comment">            ♣2,...</span></span><br><span class="line"><span class="comment">            ♥2,...</span></span><br><span class="line"><span class="comment">            ♠2,...</span></span><br><span class="line"><span class="comment">            小王，大王</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义花色数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//定义点数数组</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">                array.add(color + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;大王&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，也就是把牌打撒，用Collections的shuffle()方法实现</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(array);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌，也就是遍历集合，给三个玩家发牌</span></span><br><span class="line">        ArrayList&lt;String&gt; lqxArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; lyArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; fqyArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dpArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            String poker = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= array.size() - <span class="number">3</span>) &#123;</span><br><span class="line">                dpArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                lqxArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                lyArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                fqyArray.add(poker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看牌，也就是三个玩家分别遍历自己的牌</span></span><br><span class="line">        lookPoker(<span class="string">&quot;林青霞&quot;</span>, lqxArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;柳岩&quot;</span>, lyArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;风清扬&quot;</span>, fqyArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;底牌&quot;</span>, dpArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看牌的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name, ArrayList&lt;String&gt; array)</span> </span>&#123;</span><br><span class="line">        System.out.print(name + <span class="string">&quot;的牌是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String poker : array) &#123;</span><br><span class="line">            System.out.print(poker + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2模拟斗地主案例-升级版本【应用】"><a href="#3-2模拟斗地主案例-升级版本【应用】" class="headerlink" title="3.2模拟斗地主案例-升级版本【应用】"></a>3.2模拟斗地主案例-升级版本【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    通过程序实现斗地主过程中的洗牌，发牌和看牌。要求：对牌进行排序</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap，键是编号，值是牌</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList，存储编号</span></span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建花色数组和点数数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0开始往HashMap里面存储编号，并存储对应的牌。同时往ArrayList里面存储编号</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                hm.put(index, color + number);</span><br><span class="line">                array.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hm.put(index, <span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        hm.put(index, <span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌(洗的是编号)，用Collections的shuffle()方法实现</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌(发的也是编号，为了保证编号是排序的，创建TreeSet集合接收)</span></span><br><span class="line">        TreeSet&lt;Integer&gt; lqxSet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; lySet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; fqySet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; dpSet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= array.size() - <span class="number">3</span>) &#123;</span><br><span class="line">                dpSet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                lqxSet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                lySet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                fqySet.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用看牌方法</span></span><br><span class="line">        lookPoker(<span class="string">&quot;林青霞&quot;</span>, lqxSet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;柳岩&quot;</span>, lySet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;风清扬&quot;</span>, fqySet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;底牌&quot;</span>, dpSet, hm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法看牌(遍历TreeSet集合，获取编号，到HashMap集合找对应的牌)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name, TreeSet&lt;Integer&gt; ts, HashMap&lt;Integer, String&gt; hm)</span> </span>&#123;</span><br><span class="line">        System.out.print(name + <span class="string">&quot;的牌是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer key : ts) &#123;</span><br><span class="line">            String poker = hm.get(key);</span><br><span class="line">            System.out.print(poker + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>File类递归字节流</title>
    <url>/2019/08/29/190829File%E7%B1%BB%E9%80%92%E5%BD%92%E5%AD%97%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h2><h3 id="1-1File类概述和构造方法【应用】"><a href="#1-1File类概述和构造方法【应用】" class="headerlink" title="1.1File类概述和构造方法【应用】"></a>1.1File类概述和构造方法【应用】</h3><ul>
<li><p>File类介绍</p>
<ul>
<li><p>它是文件和目录路径名的抽象表示</p>
</li>
<li><p>文件和目录是可以通过File封装成对象的</p>
</li>
<li><p>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>File类的构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>File(String   pathname)</td>
<td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td>
</tr>
<tr>
<td>File(String   parent, String child)</td>
<td>从父路径名字符串和子路径名字符串创建新的   File实例</td>
</tr>
<tr>
<td>File(File   parent, String child)</td>
<td>从父抽象路径名和子路径名字符串创建新的   File实例</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//File(String pathname)：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child)：从父路径名字符串和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child)：从父抽象路径名和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        File f4 = <span class="keyword">new</span> File(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2File类创建功能【应用】"><a href="#1-2File类创建功能【应用】" class="headerlink" title="1.2File类创建功能【应用】"></a>1.2File类创建功能【应用】</h3><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean createNewFile()</td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td>
</tr>
<tr>
<td>public boolean mkdir()</td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td>public boolean mkdirs()</td>
<td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//需求1：我要在E:\\itcast目录下创建一个文件java.txt</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我要在E:\\itcast目录下创建一个目录JavaSE</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：我要在E:\\itcast目录下创建一个多级目录JavaWEB\\HTML</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaWEB\\HTML&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：我要在E:\\itcast目录下创建一个文件javase.txt</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\javase.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.mkdir());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3File类判断和获取功能【应用】"><a href="#1-3File类判断和获取功能【应用】" class="headerlink" title="1.3File类判断和获取功能【应用】"></a>1.3File类判断和获取功能【应用】</h3><ul>
<li><p>判断功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   boolean isDirectory()</td>
<td>测试此抽象路径名表示的File是否为目录</td>
</tr>
<tr>
<td>public   boolean isFile()</td>
<td>测试此抽象路径名表示的File是否为文件</td>
</tr>
<tr>
<td>public   boolean   exists()</td>
<td>测试此抽象路径名表示的File是否存在</td>
</tr>
</tbody></table>
</li>
<li><p>获取功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   String getAbsolutePath()</td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td>public   String getPath()</td>
<td>将此抽象路径名转换为路径名字符串</td>
</tr>
<tr>
<td>public   String getName()</td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td>public   String[] list()</td>
<td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td>
</tr>
<tr>
<td>public   File[] listFiles()</td>
<td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public boolean isDirectory()：测试此抽象路径名表示的File是否为目录</span></span><br><span class="line"><span class="comment">//        public boolean isFile()：测试此抽象路径名表示的File是否为文件</span></span><br><span class="line"><span class="comment">//        public boolean exists()：测试此抽象路径名表示的File是否存在</span></span><br><span class="line">        System.out.println(f.isDirectory());</span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.exists());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String getAbsolutePath()：返回此抽象路径名的绝对路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getPath()：将此抽象路径名转换为路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getName()：返回由此抽象路径名表示的文件或目录的名称</span></span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        System.out.println(f.getPath());</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String[] list()：返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</span></span><br><span class="line"><span class="comment">//        public File[] listFiles()：返回此抽象路径名表示的目录中的文件和目录的File对象数组</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strArray = f2.list();</span><br><span class="line">        <span class="keyword">for</span>(String str : strArray) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] fileArray = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(file);</span></span><br><span class="line"><span class="comment">//            System.out.println(file.getName());</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile()) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4File类删除功能【应用】"><a href="#1-4File类删除功能【应用】" class="headerlink" title="1.4File类删除功能【应用】"></a>1.4File类删除功能【应用】</h3><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean   delete()</td>
<td>删除由此抽象路径名表示的文件或目录</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        File f1 = new File(&quot;E:\\itcast\\java.txt&quot;);</span></span><br><span class="line">        <span class="comment">//需求1：在当前模块目录下创建java.txt文件</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f1.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：删除当前模块目录下的java.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：在当前模块目录下创建itcast目录</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f2.mkdir());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：删除当前模块目录下的itcast目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：在当前模块下创建一个目录itcast,然后在该目录下创建一个文件java.txt</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：删除当前模块下的目录itcast</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对路径和相对路径的区别</p>
<ul>
<li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\itcast\java.txt</li>
<li>相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile\java.txt</li>
</ul>
</li>
</ul>
<h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h2><h3 id="2-1递归【应用】"><a href="#2-1递归【应用】" class="headerlink" title="2.1递归【应用】"></a>2.1递归【应用】</h3><ul>
<li><p>递归的介绍</p>
<ul>
<li>以编程的角度来看，递归指的是方法定义中调用方法本身的现象</li>
<li>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li>
<li>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</li>
</ul>
</li>
<li><p>递归的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//回顾不死神兔问题，求第20个月兔子的对数</span></span><br><span class="line">        <span class="comment">//每个月的兔子对数：1,1,2,3,5,8，...</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">19</span>]);</span><br><span class="line">        System.out.println(f(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递归解决问题，首先就是要定义一个方法：</span></span><br><span class="line"><span class="comment">            定义一个方法f(n)：表示第n个月的兔子对数</span></span><br><span class="line"><span class="comment">            那么，第n-1个月的兔子对数该如何表示呢？f(n-1)</span></span><br><span class="line"><span class="comment">            同理，第n-2个月的兔子对数该如何表示呢？f(n-2)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        StackOverflowError:当堆栈溢出发生时抛出一个应用程序递归太深</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>递归的注意事项</p>
<ul>
<li>递归一定要有出口。否则内存溢出</li>
<li>递归虽然有出口，但是递归的次数也不宜过多。否则内存溢出</li>
</ul>
</li>
</ul>
<h3 id="2-2递归求阶乘【应用】"><a href="#2-2递归求阶乘【应用】" class="headerlink" title="2.2递归求阶乘【应用】"></a>2.2递归求阶乘【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    用递归求5的阶乘，并把结果在控制台输出</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> result = jc(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5的阶乘是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于递归求阶乘，参数为一个int类型的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法内部判断该变量的值是否是1</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//是：返回1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是：返回n*(n-1)!</span></span><br><span class="line">            <span class="keyword">return</span> n*jc(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3递归遍历目录【应用】"><a href="#2-3递归遍历目录【应用】" class="headerlink" title="2.3递归遍历目录【应用】"></a>2.3递归遍历目录【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    给定一个路径(E:\itcast)，通过递归完成遍历该目录下所有内容，并把所有文件的绝对路径输出在控制台</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据给定的路径创建一个File对象</span></span><br><span class="line"><span class="comment">//        File srcFile = new File(&quot;E:\\itcast&quot;);</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itheima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        getAllFilePath(srcFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于获取给定目录下的所有内容，参数为第1步创建的File对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFilePath</span><span class="params">(File srcFile)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取给定的File目录下所有的文件或者目录的File数组</span></span><br><span class="line">        File[] fileArray = srcFile.listFiles();</span><br><span class="line">        <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">        <span class="keyword">if</span>(fileArray != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//判断该File对象是否是目录</span></span><br><span class="line">                <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//是：递归调用</span></span><br><span class="line">                    getAllFilePath(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//不是：获取绝对路径输出在控制台</span></span><br><span class="line">                    System.out.println(file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-IO流"><a href="#3-IO流" class="headerlink" title="3.IO流"></a>3.IO流</h2><h3 id="3-1IO流概述和分类【理解】"><a href="#3-1IO流概述和分类【理解】" class="headerlink" title="3.1IO流概述和分类【理解】"></a>3.1IO流概述和分类【理解】</h3><ul>
<li>IO流介绍<ul>
<li>IO：输入/输出(Input/Output)</li>
<li>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</li>
<li>IO流就是用来处理设备间数据传输问题的。常见的应用：文件复制；文件上传；文件下载</li>
</ul>
</li>
<li>IO流的分类<ul>
<li>按照数据的流向<ul>
<li>输入流：读数据</li>
<li>输出流：写数据</li>
</ul>
</li>
<li>按照数据类型来分<ul>
<li>字节流<ul>
<li>字节输入流</li>
<li>字节输出流</li>
</ul>
</li>
<li>字符流<ul>
<li>字符输入流</li>
<li>字符输出流</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>IO流的使用场景<ul>
<li>如果操作的是纯文本文件，优先使用字符流</li>
<li>如果操作的是图片、视频、音频等二进制文件。优先使用字节流</li>
<li>如果不确定文件类型，优先使用字节流。字节流是万能的流</li>
</ul>
</li>
</ul>
<h3 id="3-2字节流写数据【应用】"><a href="#3-2字节流写数据【应用】" class="headerlink" title="3.2字节流写数据【应用】"></a>3.2字节流写数据【应用】</h3><ul>
<li><p>字节流抽象基类</p>
<ul>
<li>InputStream：这个抽象类是表示字节输入流的所有类的超类</li>
<li>OutputStream：这个抽象类是表示字节输出流的所有类的超类</li>
<li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li>
</ul>
</li>
<li><p>字节输出流</p>
<ul>
<li>FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</li>
</ul>
</li>
<li><p>使用字节输出流写数据的步骤</p>
<ul>
<li>创建字节输出流对象(调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件)</li>
<li>调用字节输出流对象的写数据方法</li>
<li>释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            做了三件事情：</span></span><br><span class="line"><span class="comment">                A:调用系统功能创建了文件</span></span><br><span class="line"><span class="comment">                B:创建了字节输出流对象</span></span><br><span class="line"><span class="comment">                C:让字节输出流对象指向创建好的文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line"><span class="comment">//        fos.write(57);</span></span><br><span class="line"><span class="comment">//        fos.write(55);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后都要释放资源</span></span><br><span class="line">        <span class="comment">//void close()：关闭此文件输出流并释放与此流相关联的任何系统资源。</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3字节流写数据的三种方式【应用】"><a href="#3-3字节流写数据的三种方式【应用】" class="headerlink" title="3.3字节流写数据的三种方式【应用】"></a>3.3字节流写数据的三种方式【应用】</h3><ul>
<li><p>写数据的方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   write(int b)</td>
<td>将指定的字节写入此文件输出流   一次写一个字节数据</td>
</tr>
<tr>
<td>void   write(byte[] b)</td>
<td>将 b.length字节从指定的字节数组写入此文件输出流   一次写一个字节数组数据</td>
</tr>
<tr>
<td>void   write(byte[] b, int off, int len)</td>
<td>将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流   一次写一个字节数组的部分数据</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//new File(name)</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileOutputStream(File file)：创建文件输出流以写入由指定的 File对象表示的文件</span></span><br><span class="line"><span class="comment">//        File file = new File(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(97);</span></span><br><span class="line"><span class="comment">//        fos.write(98);</span></span><br><span class="line"><span class="comment">//        fos.write(99);</span></span><br><span class="line"><span class="comment">//        fos.write(100);</span></span><br><span class="line"><span class="comment">//        fos.write(101);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        void write(byte[] b)：将 b.length字节从指定的字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">//        byte[] bys = &#123;97, 98, 99, 100, 101&#125;;</span></span><br><span class="line">        <span class="comment">//byte[] getBytes()：返回字符串对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//        fos.write(bys);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(byte[] b, int off, int len)：将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(bys,0,bys.length);</span></span><br><span class="line">        fos.write(bys,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4字节流写数据的两个小问题【应用】"><a href="#3-4字节流写数据的两个小问题【应用】" class="headerlink" title="3.4字节流写数据的两个小问题【应用】"></a>3.4字节流写数据的两个小问题【应用】</h3><ul>
<li><p>字节流写数据如何实现换行</p>
<ul>
<li>windows:\r\n</li>
<li>linux:\n</li>
<li>mac:\r</li>
</ul>
</li>
<li><p>字节流写数据如何实现追加写入</p>
<ul>
<li>public FileOutputStream(String name,boolean append)</li>
<li>创建文件输出流以指定的名称写入文件。如果第二个参数为true ，则字节将写入文件的末尾而不是开头</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5字节流写数据加异常处理【应用】"><a href="#3-5字节流写数据加异常处理【应用】" class="headerlink" title="3.5字节流写数据加异常处理【应用】"></a>3.5字节流写数据加异常处理【应用】</h3><ul>
<li><p>异常处理格式</p>
<ul>
<li><p>try-catch-finally</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">	异常的处理代码;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	执行所有清除操作;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>finally特点</p>
<ul>
<li>被finally控制的语句一定会执行，除非JVM退出</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加入finally来实现释放资源</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6字节流读数据-一次读一个字节数据-【应用】"><a href="#3-6字节流读数据-一次读一个字节数据-【应用】" class="headerlink" title="3.6字节流读数据(一次读一个字节数据)【应用】"></a>3.6字节流读数据(一次读一个字节数据)【应用】</h3><ul>
<li><p>字节输入流</p>
<ul>
<li>FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream ，该文件由文件系统中的路径名name命名</li>
</ul>
</li>
<li><p>字节输入流读取数据的步骤</p>
<ul>
<li>创建字节输入流对象</li>
<li>调用字节输入流对象的读数据方法</li>
<li>释放资源</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        <span class="comment">//FileInputStream(String name)</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            fis.read()：读数据</span></span><br><span class="line"><span class="comment">            by=fis.read()：把读取到的数据赋值给by</span></span><br><span class="line"><span class="comment">            by != -1：判断读取到的数据是否是-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-7字节流复制文本文件【应用】"><a href="#3-7字节流复制文本文件【应用】" class="headerlink" title="3.7字节流复制文本文件【应用】"></a>3.7字节流复制文本文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    把“E:\itcast\窗里窗外.txt”复制到模块目录下的“窗里窗外.txt”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li><p>复制文本文件，其实就把文本文件的内容从一个文件中读取出来(数据源)，然后写入到另一个文件中(目的地)</p>
</li>
<li><p>数据源：</p>
<p>​    E:\itcast\窗里窗外.txt — 读数据 — InputStream — FileInputStream </p>
</li>
<li><p>目的地：</p>
<p>​    myByteStream\窗里窗外.txt — 写数据 — OutputStream — FileOutputStream</p>
</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\窗里窗外.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\窗里窗外.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文本文件(一次读取一个字节，一次写入一个字节)</span></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-8字节流读数据-一次读一个字节数组数据-【应用】"><a href="#3-8字节流读数据-一次读一个字节数组数据-【应用】" class="headerlink" title="3.8字节流读数据(一次读一个字节数组数据)【应用】"></a>3.8字节流读数据(一次读一个字节数组数据)【应用】</h3><ul>
<li><p>一次读一个字节数组的方法</p>
<ul>
<li>public int read(byte[] b)：从输入流读取最多b.length个字节的数据</li>
<li>返回的是读入缓冲区的总字节数,也就是实际的读取字节个数</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            hello\r\n</span></span><br><span class="line"><span class="comment">            world\r\n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第一次：hello</span></span><br><span class="line"><span class="comment">            第二次：\r\nwor</span></span><br><span class="line"><span class="comment">            第三次：ld\r\nr</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">//1024及其整数倍</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-9字节流复制图片【应用】"><a href="#3-9字节流复制图片【应用】" class="headerlink" title="3.9字节流复制图片【应用】"></a>3.9字节流复制图片【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    把“E:\itcast\mn.jpg”复制到模块目录下的“mn.jpg”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字节输入流对象</li>
<li>根据目的地创建字节输出流对象</li>
<li>读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJpgDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\mn.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\mn.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>字节缓冲流字符流</title>
    <url>/2019/08/30/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="1-字节缓冲流"><a href="#1-字节缓冲流" class="headerlink" title="1.字节缓冲流"></a>1.字节缓冲流</h2><h3 id="1-1字节缓冲流构造方法【应用】"><a href="#1-1字节缓冲流构造方法【应用】" class="headerlink" title="1.1字节缓冲流构造方法【应用】"></a>1.1字节缓冲流构造方法【应用】</h3><ul>
<li><p>字节缓冲流介绍</p>
<ul>
<li><p>lBufferOutputStream：该类实现缓冲输出流。 通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
</li>
<li><p>lBufferedInputStream：创建BufferedInputStream将创建一个内部缓冲区数组。 当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>构造方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedOutputStream(OutputStream out)</td>
<td>创建字节缓冲输出流对象</td>
</tr>
<tr>
<td>BufferedInputStream(InputStream in)</td>
<td>创建字节缓冲输入流对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//字节缓冲输出流：BufferedOutputStream(OutputStream out)</span></span><br><span class="line"> </span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> 				                                       FileOutputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        bos.write(<span class="string">&quot;hello\r\n&quot;</span>.getBytes());</span><br><span class="line">        bos.write(<span class="string">&quot;world\r\n&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节缓冲输入流：BufferedInputStream(InputStream in)</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span>                                                          FileInputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数据</span></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=bis.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数组数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2字节流复制视频【应用】"><a href="#1-2字节流复制视频【应用】" class="headerlink" title="1.2字节流复制视频【应用】"></a>1.2字节流复制视频【应用】</h3><ul>
<li><p>案例需求</p>
<p>把“E:\itcast\字节流复制图片.avi”复制到模块目录下的“字节流复制图片.avi”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字节输入流对象</li>
<li>根据目的地创建字节输出流对象</li>
<li>读写数据，复制视频</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyAviDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制视频</span></span><br><span class="line"><span class="comment">//        method1();</span></span><br><span class="line"><span class="comment">//        method2();</span></span><br><span class="line"><span class="comment">//        method3();</span></span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2.字符流"></a>2.字符流</h2><h3 id="2-1为什么会出现字符流【理解】"><a href="#2-1为什么会出现字符流【理解】" class="headerlink" title="2.1为什么会出现字符流【理解】"></a>2.1为什么会出现字符流【理解】</h3><ul>
<li><p>字符流的介绍</p>
<p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p>
<p>字符流 = 字节流 + 编码表</p>
</li>
<li><p>中文的字节存储方式</p>
<p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p>
<p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p>
</li>
</ul>
<h3 id="2-2编码表【理解】"><a href="#2-2编码表【理解】" class="headerlink" title="2.2编码表【理解】"></a>2.2编码表【理解】</h3><ul>
<li><p>什么是字符集</p>
<p>是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p>
<p>l计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p>
</li>
<li><p>常见的字符集</p>
<ul>
<li><p>ASCII字符集：</p>
<p>lASCII：是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等)和可显示字符(英文大小写字符、阿拉伯数字和西文符号) </p>
<p>基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p>
</li>
<li><p>GBXXX字符集：</p>
<p>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</p>
</li>
<li><p>Unicode字符集：</p>
<p>UTF-8编码：可以用来表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用 中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p>
<p>编码规则： </p>
<p>  128个US-ASCII字符，只需一个字节编码</p>
<p>  拉丁文等字符，需要二个字节编码</p>
<p>  大部分常用字（含中文），使用三个字节编码</p>
<p>  其他极少使用的Unicode辅助字符，使用四字节编码</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-3字符串中的编码解码问题【应用】"><a href="#2-3字符串中的编码解码问题【应用】" class="headerlink" title="2.3字符串中的编码解码问题【应用】"></a>2.3字符串中的编码解码问题【应用】</h3><ul>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>byte[] getBytes()</td>
<td>使用平台的默认字符集将该 String编码为一系列字节</td>
</tr>
<tr>
<td>byte[] getBytes(String charsetName)</td>
<td>使用指定的字符集将该 String编码为一系列字节</td>
</tr>
<tr>
<td>String(byte[] bytes)</td>
<td>使用平台的默认字符集解码指定的字节数组来创建字符串</td>
</tr>
<tr>
<td>String(byte[] bytes, String charsetName)</td>
<td>通过指定的字符集解码指定的字节数组来创建字符串</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(&quot;UTF-8&quot;); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = s.getBytes(<span class="string">&quot;GBK&quot;</span>); <span class="comment">//[-42, -48, -71, -6]</span></span><br><span class="line">        System.out.println(Arrays.toString(bys));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String ss = new String(bys);</span></span><br><span class="line">        <span class="comment">//String ss = new String(bys,&quot;UTF-8&quot;);</span></span><br><span class="line">        String ss = <span class="keyword">new</span> String(bys,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4字符流中的编码解码问题【应用】"><a href="#2-4字符流中的编码解码问题【应用】" class="headerlink" title="2.4字符流中的编码解码问题【应用】"></a>2.4字符流中的编码解码问题【应用】</h3><ul>
<li><p>字符流中和编码解码问题相关的两个类</p>
<ul>
<li><p>InputStreamReader：是从字节流到字符流的桥梁</p>
<p>​    它读取字节，并使用指定的编码将其解码为字符</p>
<p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p>
</li>
<li><p>OutputStreamWriter：是从字符流到字节流的桥梁</p>
<p>​    是从字符流到字节流的桥梁，使用指定的编码将写入的字符编码为字节</p>
<p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p>
</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>InputStreamReader(InputStream in)</td>
<td>使用默认字符编码创建InputStreamReader对象</td>
</tr>
<tr>
<td>InputStreamReader(InputStream in,String chatset)</td>
<td>使用指定的字符编码创建InputStreamReader对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out)</td>
<td>使用默认字符编码创建OutputStreamWriter对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out,String charset)</td>
<td>使用指定的字符编码创建OutputStreamWriter对象</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//OutputStreamWriter osw = new OutputStreamWriter(new                                             FileOutputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span>                                              FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        osw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new 	                                         FileInputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span>                                                 FileInputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5字符流写数据的5种方式【应用】"><a href="#2-5字符流写数据的5种方式【应用】" class="headerlink" title="2.5字符流写数据的5种方式【应用】"></a>2.5字符流写数据的5种方式【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   write(int c)</td>
<td>写一个字符</td>
</tr>
<tr>
<td>void   write(char[] cbuf)</td>
<td>写入一个字符数组</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>写入字符数组的一部分</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>写一个字符串</td>
</tr>
<tr>
<td>void write(String str, int off, int len)</td>
<td>写一个字符串的一部分</td>
</tr>
</tbody></table>
</li>
<li><p>刷新和关闭的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flush()</td>
<td>刷新流，之后还可以继续写数据</td>
</tr>
<tr>
<td>close()</td>
<td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int c)：写一个字符</span></span><br><span class="line"><span class="comment">//        osw.write(97);</span></span><br><span class="line"><span class="comment">//        osw.write(98);</span></span><br><span class="line"><span class="comment">//        osw.write(99);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writ(char[] cbuf)：写入一个字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//        osw.write(chs);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(char[] cbuf, int off, int len)：写入字符数组的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 0, chs.length);</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 1, 3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str)：写一个字符串</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str, int off, int len)：写一个字符串的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;, 0, &quot;abcde&quot;.length());</span></span><br><span class="line">        osw.write(<span class="string">&quot;abcde&quot;</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6字符流读数据的2种方式【应用】"><a href="#2-6字符流读数据的2种方式【应用】" class="headerlink" title="2.6字符流读数据的2种方式【应用】"></a>2.6字符流读数据的2种方式【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int read()</td>
<td>一次读一个字符数据</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>一次读一个字符数组数据</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read()：一次读一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read(char[] cbuf)：一次读一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7字符流复制Java文件【应用】"><a href="#2-7字符流复制Java文件【应用】" class="headerlink" title="2.7字符流复制Java文件【应用】"></a>2.7字符流复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            osw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8字符流复制Java文件改进版【应用】"><a href="#2-8字符流复制Java文件改进版【应用】" class="headerlink" title="2.8字符流复制Java文件改进版【应用】"></a>2.8字符流复制Java文件改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>使用便捷流对象，把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=fr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            fw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-9字符缓冲流【应用】"><a href="#2-9字符缓冲流【应用】" class="headerlink" title="2.9字符缓冲流【应用】"></a>2.9字符缓冲流【应用】</h3><ul>
<li><p>字符缓冲流介绍</p>
<ul>
<li>BufferedWriter：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</li>
<li>BufferedReader：从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。 默认值足够大，可用于大多数用途</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedWriter(Writer out)</td>
<td>创建字符缓冲输出流对象</td>
</tr>
<tr>
<td>BufferedReader(Reader in)</td>
<td>创建字符缓冲输入流对象</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//BufferedWriter(Writer out)</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                            FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line">        bw.write(<span class="string">&quot;hello\r\n&quot;</span>);</span><br><span class="line">        bw.write(<span class="string">&quot;world\r\n&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BufferedReader(Reader in)</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                           FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-10字符缓冲流复制Java文件【应用】"><a href="#2-10字符缓冲流复制Java文件【应用】" class="headerlink" title="2.10字符缓冲流复制Java文件【应用】"></a>2.10字符缓冲流复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符缓冲输入流对象</li>
<li>根据目的地创建字符缓冲输出流对象</li>
<li>读写数据，复制文件，使用字符缓冲流特有功能实现</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            bw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-11字符缓冲流特有功能【应用】"><a href="#2-11字符缓冲流特有功能【应用】" class="headerlink" title="2.11字符缓冲流特有功能【应用】"></a>2.11字符缓冲流特有功能【应用】</h3><ul>
<li><p>方法介绍</p>
<p>BufferedWriter：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void newLine()</td>
<td>写一行行分隔符，行分隔符字符串由系统属性定义</td>
</tr>
</tbody></table>
<p>BufferedReader:</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String readLine()</td>
<td>读一行文字。 结果包含行的内容的字符串，不包括任何行终止字符如果流的结尾已经到达，则为null</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                          FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">            <span class="comment">//bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                          FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-12字符缓冲流特有功能复制Java文件【应用】"><a href="#2-12字符缓冲流特有功能复制Java文件【应用】" class="headerlink" title="2.12字符缓冲流特有功能复制Java文件【应用】"></a>2.12字符缓冲流特有功能复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>使用特有功能把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符缓冲输入流对象</li>
<li>根据目的地创建字符缓冲输出流对象</li>
<li>读写数据，复制文件，使用字符缓冲流特有功能实现</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//使用字符缓冲流特有功能实现</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-13IO流小结【理解】"><a href="#2-13IO流小结【理解】" class="headerlink" title="2.13IO流小结【理解】"></a>2.13IO流小结【理解】</h3><ul>
<li><p>字节流</p>
<p><img src="/2019/08/30/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E5%AD%97%E7%AC%A6%E6%B5%81/1.png"></p>
</li>
<li><p>字符流</p>
<p><img src="/2019/08/30/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81%E5%AD%97%E7%AC%A6%E6%B5%81/2.png"></p>
</li>
</ul>
<h3 id="3练习案例"><a href="#3练习案例" class="headerlink" title="3练习案例"></a>3练习案例</h3><h3 id="3-1集合到文件【应用】"><a href="#3-1集合到文件【应用】" class="headerlink" title="3.1集合到文件【应用】"></a>3.1集合到文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个集合元素</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据存储到集合中</li>
<li>释放资源</li>
<li>遍历集合</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxtToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2文件到集合【应用】"><a href="#3-2文件到集合【应用】" class="headerlink" title="3.2文件到集合【应用】"></a>3.2文件到集合【应用】</h3><ul>
<li><p>案例需求</p>
<p>把ArrayList集合中的字符串数据写入到文本文件。要求：每一个字符串元素作为文件中的一行数据</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建ArrayList集合</li>
<li>往集合中存储字符串元素</li>
<li>创建字符缓冲输出流对象</li>
<li>遍历集合，得到每一个字符串数据</li>
<li>调用字符缓冲输出流对象的方法写数据</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中存储字符串元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个字符串数据</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(s);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3点名器【应用】"><a href="#3-3点名器【应用】" class="headerlink" title="3.3点名器【应用】"></a>3.3点名器【应用】</h3><ul>
<li><p>案例需求</p>
<p>我有一个文件里面存储了班级同学的姓名，每一个姓名占一行，要求通过程序实现随点名器</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据存储到集合中</li>
<li>释放资源</li>
<li>使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</li>
<li>把第6步产生的随机数作为索引到ArrayList集合中获取值</li>
<li>把第7步得到的数据输出在控制台</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallNameDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\names.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第6步产生的随机数作为索引到ArrayList集合中获取值</span></span><br><span class="line">        String name = array.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第7步得到的数据输出在控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;幸运者是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4集合到文件改进版【应用】"><a href="#3-4集合到文件改进版【应用】" class="headerlink" title="3.4集合到文件改进版【应用】"></a>3.4集合到文件改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>把ArrayList集合中的学生数据写入到文本文件。要求：每一个学生对象的数据作为文件中的一行数据<br>​        格式：学号,姓名,年龄,居住地    举例：itheima001,林青霞,30,西安</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义学生类</li>
<li>创建ArrayList集合</li>
<li>创建学生对象</li>
<li>把学生对象添加到集合中</li>
<li>创建字符缓冲输出流对象</li>
<li>遍历集合，得到每一个学生对象</li>
<li>把学生对象的数据拼接成指定格式的字符串</li>
<li>调用字符缓冲输出流对象的方法写数据</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生对象添加到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getSid()).append(<span class="string">&quot;,&quot;</span>).append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getAge()).append(<span class="string">&quot;,&quot;</span>).append(s.getAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5文件到集合改进版【应用】"><a href="#3-5文件到集合改进版【应用】" class="headerlink" title="3.5文件到集合改进版【应用】"></a>3.5文件到集合改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个学生对象的成员变量值<br> 举例：itheima001,林青霞,30,西安</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义学生类</li>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据用split()进行分割，得到一个字符串数组</li>
<li>创建学生对象</li>
<li>把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</li>
<li>把学生对象添加到集合</li>
<li>释放资源</li>
<li>遍历集合</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<p>​    同上</p>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据用split()进行分割，得到一个字符串数组</span></span><br><span class="line">            String[] strArray = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</span></span><br><span class="line">            <span class="comment">//itheima001,林青霞,30,西安</span></span><br><span class="line">            s.setSid(strArray[<span class="number">0</span>]);</span><br><span class="line">            s.setName(strArray[<span class="number">1</span>]);</span><br><span class="line">            s.setAge(Integer.parseInt(strArray[<span class="number">2</span>]));</span><br><span class="line">            s.setAddress(strArray[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到集合</span></span><br><span class="line">            array.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getSid() + <span class="string">&quot;,&quot;</span> + s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge() + <span class="string">&quot;,&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs&amp;ES6</title>
    <url>/2019/11/12/191112Nodejs&amp;ES6/</url>
    <content><![CDATA[<h2 id="1-Node-js"><a href="#1-Node-js" class="headerlink" title="1. Node.js"></a>1. Node.js</h2><h4 id="1-1Node-js安装"><a href="#1-1Node-js安装" class="headerlink" title="1.1Node.js安装"></a>1.1Node.js安装</h4><ul>
<li>下载对应你系统的Node.js版本,推荐下载LTS版本。</li>
</ul>
<p><a href="https://nodejs.org/en/download/">Node.js官网</a></p>
<ul>
<li>查看版本:在控制台输入<code>node -v </code></li>
</ul>
<h4 id="1-2什么是Node-JS-理解"><a href="#1-2什么是Node-JS-理解" class="headerlink" title="1.2什么是Node.JS(理解)"></a>1.2什么是Node.JS(理解)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的说 Node.js 就是运行在服务端的 JavaScript。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>&emsp;&emsp;我们知道 javaEE 可以使用Request,Respose **”接受参数处理业务逻辑,返回数据”**等操作,所以我们可以把我们写的java代码部署在tomcat 上运行,变成一个服务器</p>
<p>&emsp;&emsp;仔细想想, 我们的 javascript 语言 是不是也能 <strong>接受参数,处理业务逻辑返回数据</strong>,如果能有一个软件能部署我们的 js 代码,那么我们是不是就可以使用js 写服务器端代码呢?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>  (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么软件可以解析 js 代码?  答: “浏览器”</p>
<p>Nodejs 就是基于 Google 浏览器 的V8 引擎 开发的 平台(类似于tomcat ) 能够部署我们使用 js 写的服务器代码 </p>
<p>有了这个技术,前端开发人员也可以写服务器端代码了. </p>
<p>一句话总结:  Node.js是一个可以在js中接收和处理web请求的应用平台。</p>
<h2 id="2-Nodejs模块化编程"><a href="#2-Nodejs模块化编程" class="headerlink" title="2. Nodejs模块化编程"></a>2. Nodejs模块化编程</h2><p><strong>目标</strong>：编写模块文件使用require引入模块后使用node.js执行</p>
<p><strong>小结1</strong>：</p>
<p>node demo1.js<br>证明 node 可以解析 我们的js文件,就像我们的tomcat 可以解析 servlet 一样</p>
<p><strong>小结2</strong>：</p>
<p>&emsp;&emsp;默认每一个JS 文件中的 变量函数是私有的,为了能够像其他语言一样能够重复调用代码(类似java)<br>Node 引入了 模块的概念(类似于java 中的 “类”)</p>
<ol>
<li>一个 JavaScript 文件就是一个模块</li>
<li>模块天生就是一个私有的作用域，默认模块内定义的变量等成员只能被模块内部访问,(这里的意思是不写exports 外部文件无法访问)</li>
<li>每一个模块中都有一个 module.exports 编程接口对象，默认是一个空对象,可以通过给 module.exports 编程接口对象添加成员向外暴露内部成员</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">add=<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认 module.exports=&#123;&#125;;</span></span><br><span class="line"><span class="comment">// 我们可以往  exports 属性中增加属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.add=add;</span><br><span class="line"><span class="comment">// 也可以使用简写方式</span></span><br><span class="line"><span class="built_in">exports</span>.add=add;</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line">    <span class="keyword">var</span> demo= <span class="built_in">require</span>(<span class="string">&#x27;./demo3_1&#x27;</span>); 这里是文件名称</span><br></pre></td></tr></table></figure>

<p>一句话总结:</p>
<p>&emsp;&emsp;可以使用exports将js方法导出，并使用require引入对应的js模块，然后再引入之后可以使用对应的方法。</p>
<h2 id="3-创建Nodejs-Web服务器"><a href="#3-创建Nodejs-Web服务器" class="headerlink" title="3. 创建Nodejs Web服务器"></a>3. 创建Nodejs Web服务器</h2><p><strong>目标</strong>：引入http模块监听8888端口实现输出字符</p>
<p><strong>小结</strong>：</p>
<p>可以利用node.js创建web服务器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;Hello World \n&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="4-处理Nodejs-Web请求参数"><a href="#4-处理Nodejs-Web请求参数" class="headerlink" title="4. 处理Nodejs Web请求参数"></a>4. 处理Nodejs Web请求参数</h2><p><strong>目标</strong>：引入http和url模块创建web容器并使用url解析请求路径中参数且输出</p>
<p><strong>分析</strong>：</p>
<p>需求：<a href="http://127.0.0.1:8888/?id=123&amp;name=heima">http://127.0.0.1:8888?id=123&amp;name=heima</a> 获取到请求路径中参数及值并输出</p>
<p>实现步骤：</p>
<ol>
<li>创建web服务器；</li>
<li>引入url模块；</li>
<li>利用url解析请求地址中的参数和值并输出</li>
<li>启动测试；</li>
</ol>
<p><strong>小结</strong>：</p>
<p>在node.js中可以引入url内置模块对请求地址进行处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求地址</span></span><br><span class="line">    <span class="comment">//参数1：请求地址</span></span><br><span class="line">    <span class="comment">//参数2：true的话使用query解析参数到一个对象，默认false</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> key <span class="keyword">in</span> params</span>)</span>&#123;</span><br><span class="line">        response.write( key + <span class="string">&quot; = &quot;</span> + params[key]);</span><br><span class="line">        response.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们后续可以判断url 然后执行不同的业务逻辑,当然了自己判断肯定麻烦,NodeJs 也有框架</p>
<p>学习到这里应该明白一件事</p>
<p>&emsp;&emsp;”js语言也可以写服务器端的业务逻辑”</p>
<p>当然了 用上述代码写服务器肯定很麻烦实际上Node也有一些前端框架可以供我们使用,官方推荐的Express就是其中之一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其他框架自行翻看</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;49c58dd7e9bb</span><br></pre></td></tr></table></figure>



<h2 id="5-包资源管理器NPM"><a href="#5-包资源管理器NPM" class="headerlink" title="5. 包资源管理器NPM"></a>5. 包资源管理器NPM</h2><p><strong>目标</strong>：说出npm的作用；区别本地安装和全局安装</p>
<p><strong>小结</strong>1：</p>
<p>nmp 类似于我们java的maven,我们可以使用npm安装前端框架需要的工具包(其实是一堆js文件)</p>
<p><strong>小结</strong>2：npm  intstall  express</p>
<p>&emsp;&emsp;package.json,package-lock.json 这两个文件相当于我们 maven 的pom 文件<br>如果我们把刚才下载依赖的删除,我们可以再次使用 “npm install” 命令下载<br>此时的下载规则是:<br>&emsp;&emsp;package.json文件记录你项目中所需要的所有模块。<br>&emsp;&emsp;package-lock.json文件锁定所有模块的版本号，包括主模块和所有依赖子模块。<br>&emsp;&emsp;当你执行npm install的时候，node从package.json文件读取模块名称，从package-lock.json文件中获取版本号，然后进行下载或者更新。 </p>
<p><strong>小结</strong>3：</p>
<p>npm是一个node.js的管理和分发工具，可以根据配置package.json下载js库。</p>
<ul>
<li>本地安装：将下载的模块安装到当前目录（项目）；</li>
<li>全局安装：将下载的模块安装到全局的目录（ <code>npm root -g</code> ）</li>
</ul>
<p><strong>小结</strong>4：</p>
<p>全局安装和本地安装的区别:</p>
<p>&emsp;&emsp;全局安装完毕后 任意目录下都可以使用安装的命令,一般只安装全局的配置文件例如 cnpm 等工具,安装完,任意地方都可以使用,像项目中全局安装jquery ,实际项目中并不能直接使用(说白了就是玩玩,无用操作)<br>局部安装只当前项目有效</p>
<h2 id="6-切换NPM镜像"><a href="#6-切换NPM镜像" class="headerlink" title="6. 切换NPM镜像"></a>6. 切换NPM镜像</h2><p><strong>原因</strong>：npm是从国外下载速度较慢,使用国内淘宝镜像下载速度比较快</p>
<p><strong>目标</strong>：安装nrm组件将npm的镜像切换为淘宝镜像</p>
<p><strong>小结</strong>：</p>
<ul>
<li>使用nrm 切换镜像源</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install nrm -g</span><br><span class="line"><span class="comment">#查看命令 </span></span><br><span class="line">nrm ls</span><br><span class="line"><span class="comment"># 切换</span></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<ul>
<li>使用cnpm下载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 使用案例如下 </span></span><br><span class="line">cnpm install **</span><br></pre></td></tr></table></figure>

<ul>
<li>补充</li>
</ul>
<p>npm install 和   npm install –save 的区别   npm install –save-dev</p>
<p>   1)npm install  默认是 npm install –save<br>    2)安装完毕之后会将安装信息写在 package.json <dependencies> 文件中(相当于自动导入maven 的坐标, scope 是 compile)<br>    3) npm install –save-dev  装完毕之后会将安装信息写在 package.json <devdependencies> 中<br>    (相当于自动导入maven 的坐标, scope 是 provide) 开发有效,有序上限不需要</devdependencies></dependencies></p>
<ul>
<li>npm 和cnpm 的区别**(最直观区别是cnpm下载速度比npm快)**</li>
</ul>
<ol>
<li>cnpm install  不支持  package_lock.json 文件 即,上一个小结中的  package_lock.json  文件不会被生成,即使手动创建了也不会被使用</li>
<li>cnpm install 默认是  npm install –no-save<br> npm install  默认是   npm install –save </li>
</ol>
<h2 id="7-webpack概述"><a href="#7-webpack概述" class="headerlink" title="7. webpack概述"></a>7. webpack概述</h2><p><strong>目标</strong>：webpack的作用是什么并安装webpack</p>
<p>安装命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<p>“脚手架”  ==== maven 的”骨架”</p>
<p>&emsp;&emsp;最近经常看到“脚手架”这个词，这个就是一个比喻，比喻项目开发的前期工作。每次开始一个项目，你得先把整个文件目录结构搭好把，把必要的文件先建好。这个过程每次新建项目都需要，其实这个就是脚手架 该干的活。再说明白点，这个脚手架就是个项目模板，有了他能给我省很多事。就像在后台创建Maven项目时，可以直接Create from archetype,这个 archetype就是个原型或者说是模板，跟这个脚手架差不多</p>
<p>“webpack 脚手架”及 webpack-cli ,是一个帮助我们快速构建前端项目的 “骨架”</p>
<p>另一个作用就是 把我们写好的项目中的静态资源统一打包成一个文件</p>
<p><strong>小结</strong>：</p>
<p>webpack作用：可以将多个静态资源js、css等打包成一个js文件。</p>
<h2 id="8-webpack打包js"><a href="#8-webpack打包js" class="headerlink" title="8. webpack打包js"></a>8. webpack打包js</h2><p>为何需要webpack 打包？</p>
<p>一个HTML中有时候我们需要引入很多的js 文件，为了未来方便写代码,我们可以将多个js 文件打包</p>
<p>1)方便开发,</p>
<ol start="2">
<li><p>对客户来讲,文件打包后一般会变得更小,节约流量</p>
</li>
<li><p>加大了别的开发人员山寨我们功能的难度</p>
</li>
</ol>
<p><strong>目标</strong>：创建2个js文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p>
<p><strong>分析</strong>：</p>
<p>实现步骤：</p>
<ol>
<li>创建2个js文件；</li>
<li>创建入口文件main.js；</li>
<li>创建webpack的配置文件；</li>
<li>运行webpack命令；</li>
<li>创建index.html页面进行测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>webpack打包js的配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 node js中 默认 有一行配置<br>var exports = module.exports;<br>于是我们可以直接在 exports 对象上添加方法，表示对外输出的接口，如同在module.exports上添加一样。<br>例如  exports.add=funciton(){…}</p>
<p>注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系。<br>例如:  exports = {}<br>此时 exports 被覆盖 exports!= module.exports 了,和module.exports 没有关系了,之后对 exports 的所有操作都和 module.exports 没有关系了</p>
<blockquote>
<p>webpack可以将多个js文件打包成一个js</p>
</blockquote>
<h2 id="9-webpack打包css"><a href="#9-webpack打包css" class="headerlink" title="9. webpack打包css"></a>9. webpack打包css</h2><p><strong>目标</strong>：安装style-loader css-loader组件，创建并使用css文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install style-loader css-loader --save-dev</span><br><span class="line">cnpm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：</p>
<p>实现步骤：</p>
<ol>
<li>安装转换css的组件；</li>
<li>修改配置文件；</li>
<li>创建css文件；</li>
<li>修改入口文件，加载css文件；</li>
<li>打包并测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>webpack打包css文件需要安装转换的组件，并修改配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-ES6概述-amp-创建测试工程"><a href="#10-ES6概述-amp-创建测试工程" class="headerlink" title="10. ES6概述&amp;创建测试工程"></a>10. ES6概述&amp;创建测试工程</h2><p><strong>目标</strong>：了解es6应用场景；创建测试工程</p>
<p><a href="https://www.w3school.com.cn/js/pro_js_history.asp">js 的发展历史</a><br>ECMAScript是JavaScript的规范,规定了js 应该有哪些功能<br>ECMAScript 也和我们的java 语言一样,不断的在改进语法<br>2015年发布了第6 个重大版本,我们叫做 ES6, 其中出现了一些新的特性正在被开发人员大量使用</p>
<p><strong>小结</strong>：</p>
<p>ECMAScript是前端js的语法规范；可以应用在各种js环境中。如：浏览器或者node.js环境。</p>
<p>它有很多版本：es1/2/3/5/6，很多新特性，可以在js环境中使用这些新特性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备注: js 没有 4.xx 的版本 ,因为4 的版本开发阶段提出了很多超前思想,然后官方开了个会决定放弃这个版本的发布,实际上 4.x 的版本的很多特性被ES6 实现了</span><br></pre></td></tr></table></figure>

<p>Idea 默认只支持ES5 语法,需要设置ES6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File--&gt;OtherSettings--&gt;Settings for New Projects--&gt;Languages&amp;Framworks--&gt;JavaScript</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/12/191112Nodejs&ES6/IDEA%E8%AE%BE%E7%BD%AEES6.png" alt="设置ES6"></p>
<h2 id="11-let和const命令及模板字符串"><a href="#11-let和const命令及模板字符串" class="headerlink" title="11. let和const命令及模板字符串"></a>11. let和const命令及模板字符串</h2><p><strong>目标</strong>：使用let和const定义变量说出区别；模板字符串的好处以及对象初始化简写</p>
<p><strong>小结</strong>：</p>
<ul>
<li><p>let所声明的变量只能在let命令所在的代码块中使用</p>
</li>
<li><p>const声明的变量是常量，也就是值不可以改变(类似java的final )</p>
</li>
<li><p>模板字符串：可以不用通过反斜杠拼接多行字符，直接使用`</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello &#x27;</span> + name)</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) <span class="comment">//hello itcast</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;Hi \</span></span><br><span class="line"><span class="string">man!&quot;</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象初始化简化：可以在返回的对象时，不用指定属性名。</p>
</li>
</ul>
<h2 id="12-解构表达式"><a href="#12-解构表达式" class="headerlink" title="12. 解构表达式"></a>12. 解构表达式</h2><p><strong>目标</strong>：将数组、对象中的值或属性使用解构表达式设置到对应变量</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;解构&quot; : 把原来的额对象分解,重新构造一个新的对象或变量进行接收</span><br><span class="line"> 作用  :  使我们基于一个对象创建新变量的操作更加简单;</span><br></pre></td></tr></table></figure>

<p>解构表达式：可以对数组、对象的元素或者属性按顺序、名称的方式进行赋值到对应变量中。</p>
<h2 id="13-函数优化"><a href="#13-函数优化" class="headerlink" title="13. 函数优化"></a>13. 函数优化</h2><p><strong>目标</strong>：箭头函数的好处；对象的函数属性简写，箭头函数与解构表达式的应用</p>
<p><strong>小结</strong>：</p>
<p>箭头函数：可以不用编写基础函数的解构（如：function），直接使用 <code>=&gt;</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj);</span><br><span class="line">        &#125;;</span><br><span class="line">        print(<span class="string">&quot;print&quot;</span>);</span><br><span class="line">        <span class="comment">//箭头函数</span></span><br><span class="line">        <span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line">        print2(<span class="string">&quot;print2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//箭头函数</span></span><br><span class="line">        <span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line">        <span class="built_in">console</span>.log(sum2(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(sum3(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> person = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;heima&quot;</span>,</span><br><span class="line">            learn1: <span class="function"><span class="keyword">function</span> (<span class="params">course=<span class="string">&quot;java&quot;</span></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//箭头函数；不能使用this</span></span><br><span class="line">            learn2: <span class="function">(<span class="params">course</span>) =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">&quot; 在学习 &quot;</span> + course),</span><br><span class="line">            <span class="comment">//简写</span></span><br><span class="line">            <span class="function"><span class="title">learn3</span>(<span class="params">course</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        person.learn1(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        person.learn2(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">        person.learn3(<span class="string">&quot;css&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> person = &#123;</span><br><span class="line">            name:<span class="string">&quot;heima&quot;</span>,</span><br><span class="line">            age:<span class="number">13</span>,</span><br><span class="line">            language:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;js&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + person.name);</span><br><span class="line">         &#125;</span><br><span class="line">         hello(person);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//箭头函数、解构表达式</span></span><br><span class="line"><span class="comment">//  此处的&#123;name&#125; 意思是  未来传递的对象必须有一个name 属性,否则无法使用</span></span><br><span class="line">      <span class="comment">// var &#123;name&#125; =person</span></span><br><span class="line">       <span class="comment">// var hello2 = (name) =&gt; console.log(&quot;hello2 &quot; + name);</span></span><br><span class="line">		<span class="keyword">var</span> hello2 = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello2 &quot;</span> + name);</span><br><span class="line">        hello2(person);</span><br></pre></td></tr></table></figure>

<h2 id="14-map方法使用"><a href="#14-map方法使用" class="headerlink" title="14. map方法使用"></a>14. map方法使用</h2><p><strong>目标</strong>：数组中map方法的应用场景</p>
<p><strong>小结</strong>：</p>
<p>map方法可以将原数组中的所有元素通过一个函数进行处理并放入到一个新数组中并返回该新数组。</p>
<p>案例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已知一个数组,let arr =[3,2,1] ,求数组中每个数的三次方,并放入一个新的数组</span></span><br><span class="line"><span class="comment">// 答:</span></span><br><span class="line"><span class="keyword">let</span> arr =[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"> <span class="keyword">var</span> ar = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem*elem*elem;</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(ar); <span class="comment">// [27,8,1]</span></span><br></pre></td></tr></table></figure>

<h2 id="15-reduce方法使用"><a href="#15-reduce方法使用" class="headerlink" title="15. reduce方法使用"></a>15. reduce方法使用</h2><p><strong>目标</strong>：数组中reduce方法的应用场景</p>
<p><strong>小结</strong>：</p>
<p>reduce方法会从左到右依次把数组中的元素用函数处理（reduce方法的第一个参数），会返回一个执行结果。</p>
<blockquote>
<p>let arr = [1, 2, 3]</p>
<p>arr.reduce((a,b)=&gt;a+b)</p>
<p>第1次：(1,2) =&gt; 1+2</p>
<p>第2次：(3, 3) =&gt; 3+3  ——–&gt; 6</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">求已知数组的累计和</span><br></pre></td></tr></table></figure>

<h2 id="16-promise应用示例"><a href="#16-promise应用示例" class="headerlink" title="16. promise应用示例"></a>16. promise应用示例</h2><p><strong>目标</strong>：promise的应用场景及示例</p>
<p>问题:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">                <span class="keyword">const</span> i=<span class="number">0</span>;</span><br><span class="line">                i=<span class="number">100</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before setTimeout()&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(callback, <span class="number">1000</span>); <span class="comment">// 1秒钟后调用callback函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after setTimeout()&#x27;</span>);</span><br><span class="line"><span class="comment">/* 问题:</span></span><br><span class="line"><span class="comment"> 如果此时我们想让主线程知道方法调用是否成功,如果想成功了 做点事情,失败了做点事情, 传统方式是做不到的</span></span><br><span class="line"><span class="comment"> ES6 提供了一个新的对象供我们使用解决上述问题 promise</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">                   <span class="keyword">const</span> i = <span class="number">0</span>;</span><br><span class="line">                   i = <span class="number">100</span>;</span><br><span class="line">                   resolve(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">               &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                   <span class="comment">// console.log(&quot;exception&quot;);</span></span><br><span class="line">                   reject(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;before setTimeout()&#x27;</span>);</span><br><span class="line"></span><br><span class="line">       promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(msg)</span><br><span class="line">       &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(msg)</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<p>promise是一个对象，保存着预期事件执行的结果；可以应用在异步操作时候，指定异步操作的成功与失败的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">num &lt; <span class="number">0.5</span></span>)</span>&#123;</span><br><span class="line">            resolve(<span class="string">&quot;操作成功！num=&quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&quot;操作失败！num=&quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="17-对象的扩展方法使用"><a href="#17-对象的扩展方法使用" class="headerlink" title="17. 对象的扩展方法使用"></a>17. 对象的扩展方法使用</h2><p><strong>目标</strong>：Object对象中的keys/values/assign的作用</p>
<p><strong>小结</strong>：</p>
<p>Object的方法：</p>
<ul>
<li><p>keys：获取对象的属性名</p>
</li>
<li><p>values：获取对象的属性值</p>
</li>
<li><p>entries：获取对象的属性和属性值</p>
</li>
<li><p>assign：可以将对象进行拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">           age:<span class="number">13</span>,</span><br><span class="line">           order:&#123;</span><br><span class="line">                id:<span class="number">1</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">var</span> obj =&#123;&#125;</span><br><span class="line">       <span class="comment">//  obj.age=person.age;// 赋值</span></span><br><span class="line">       <span class="built_in">Object</span>.assign(obj,person)</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(obj.age);</span><br><span class="line">       <span class="built_in">console</span>.log(obj.order.id);</span><br><span class="line"></span><br><span class="line">       person.age=<span class="number">14</span>;</span><br><span class="line">       person.order.id=<span class="number">3</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(obj.age);</span><br><span class="line">       <span class="built_in">console</span>.log(obj.order.id); <span class="comment">// 浅 copy</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="18-数组的扩展方法使用"><a href="#18-数组的扩展方法使用" class="headerlink" title="18. 数组的扩展方法使用"></a>18. 数组的扩展方法使用</h2><p><strong>目标</strong>：数组中的find/findIndex/includes的作用</p>
<p><strong>小结</strong>：</p>
<p>数组的扩展方法：</p>
<ul>
<li>find：根据函数条件查找数组中符合条件的元素</li>
<li>findIndex：与find类似，返回的不是元素而是元素对应的索引号</li>
<li>includes：判断指定的元素是否存在</li>
</ul>
<h2 id="19-安装babel"><a href="#19-安装babel" class="headerlink" title="19. 安装babel"></a>19. 安装babel</h2><p><strong>目标</strong>：安装babel及了解babel的作用</p>
<p><strong>小结</strong>：</p>
<p>babel是一个javaScript语法编译器，可以将es6的语法进行转换并执行。</p>
<p>需要安装babel：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev </span><br><span class="line">cnpm install babel-cli -g</span><br></pre></td></tr></table></figure>

<p>编写.babelrc文件，指定es的版本</p>
<p>可以通过命令去执行对应的js文件：babel-node</p>
<h2 id="20-export和import联合应用"><a href="#20-export和import联合应用" class="headerlink" title="20. export和import联合应用"></a>20. export和import联合应用</h2><p><strong>目标</strong>：export和import的联合应用场景；使用export导出模板文件，import引入模板文件</p>
<p><strong>小结</strong>：</p>
<p>可以通过export导出模块，通过import导入模块并使用其内容。</p>
<p>导出有两种方式：命名导出和默认导出。</p>
<p>因为浏览器默认不支持export和import命令，所以需要安装babel对export和import进行解析和执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//补充 ES6 的 export和import 方法是可以在浏览器中使用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test.html</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">	<span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span></span><br><span class="line">	alert(<span class="string">&quot;3+5=&quot;</span>+(add(<span class="number">3</span>,<span class="number">5</span>)));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Dubbo</title>
    <url>/2019/11/16/191116Dubbo/</url>
    <content><![CDATA[<h1 id="分布式RPC框架Apache-Dubbo"><a href="#分布式RPC框架Apache-Dubbo" class="headerlink" title="分布式RPC框架Apache Dubbo"></a>分布式RPC框架Apache Dubbo</h1><h2 id="1-软件架构的演进过程"><a href="#1-软件架构的演进过程" class="headerlink" title="1. 软件架构的演进过程"></a>1. 软件架构的演进过程</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。</p>
<h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="/2019/11/16/191116Dubbo/1.png" alt="1"></p>
<p>架构说明：</p>
<p>​      全部功能集中在一个项目内（All in one）。</p>
<p>架构优点：</p>
<p>​      架构简单，前期开发成本低、开发周期短，适合小型项目。</p>
<a id="more"></a>

<p>架构缺点：</p>
<p>​       全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p>
<p>​       技术栈受限，只能使用一种语言开发。</p>
<p>​       系统性能扩展只能通过扩展集群节点，成本高。</p>
<h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><p><img src="/2019/11/16/191116Dubbo/18.png" alt="18"></p>
<p>架构说明：       </p>
<p>​      按照业务进行切割，形成小的单体项目。</p>
<p>架构优点：</p>
<p>​      技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p>
<p>架构缺点：</p>
<p>​       功能集中在一个项目中，不利于开发、扩展、维护。</p>
<p>​       系统扩张只能通过集群的方式。</p>
<p>​       项目之间功能冗余、数据冗余、耦合性强。</p>
<h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><p>SOA全称为Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p>
<p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p>
<p><img src="/2019/11/16/191116Dubbo/19.png" alt="19"></p>
<p>架构说明：</p>
<p>​      将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p>
<p>架构优点：</p>
<p>​       重复功能或模块抽取为服务，提高开发效率。</p>
<p>​       可重用性高。</p>
<p>​       可维护性高。</p>
<p>架构缺点：</p>
<p>​       各系统之间业务不同，很难确认功能或模块是重复的。(设计难度增大)</p>
<p>​       抽取服务的粒度大。</p>
<p>​       系统和服务之间耦合度高。</p>
<h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="/2019/11/16/191116Dubbo/20.png" alt="20"></p>
<p>架构说明：</p>
<p>​       将系统服务层完全独立出来，抽取为一个一个的微服务。</p>
<p>​       抽取的粒度更细，遵循单一原则。</p>
<p>​       采用轻量级框架协议传输。</p>
<p>架构优点：</p>
<p>​       服务拆分粒度更细，有利于提高开发效率。 </p>
<p>​       可以针对不同服务制定对应的优化方案。</p>
<p>​       适用于互联网时代，产品迭代周期更短。</p>
<p>架构缺点：</p>
<p>​      粒度太细导致服务太多，维护成本高。</p>
<p>​      分布式系统开发的技术成本高，对团队的挑战大。</p>
<h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>
<p><strong>什么是RPC？</strong></p>
<p>RPC全称为remote procedure call，即<strong>远程过程调用</strong>。比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p>
<p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p>
<p><a href="http://dubbo.apache.org/">Dubbo官网地址</a></p>
<p>Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>Dubbo架构图（Dubbo官方提供）如下：</p>
<p><img src="/2019/11/16/191116Dubbo/2.png" alt="2"></p>
<p>节点角色说明：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>角色名称</th>
</tr>
</thead>
<tbody><tr>
<td>Provider</td>
<td>暴露服务的服务提供方</td>
</tr>
<tr>
<td>Consumer</td>
<td>调用远程服务的服务消费方</td>
</tr>
<tr>
<td>Registry</td>
<td>服务注册与发现的注册中心</td>
</tr>
<tr>
<td>Monitor</td>
<td>统计服务的调用次数和调用时间的监控中心</td>
</tr>
<tr>
<td>Container</td>
<td>服务运行容器</td>
</tr>
</tbody></table>
<p>虚线都是异步访问，实线都是同步访问<br>蓝色虚线:在启动时完成的功能<br>红色虚线(实线)都是程序运行过程中执行的功能</p>
<p>调用关系说明:</p>
<ol start="0">
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>
</ol>
<h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo 支持很多中在注册中心,但是官方推荐的是zookeeper</span><br><span class="line"></span><br><span class="line">1、Zookeeper(官方推荐)</span><br><span class="line">优点:支持分布式.很多周边产品。</span><br><span class="line">缺点: 受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优。</span><br><span class="line">2、Multicast</span><br><span class="line">优点:去中心化,不需要单独安装软件。</span><br><span class="line">缺点:Provider和Consumer和Registry不能跨机房(路由)。</span><br><span class="line">3、Redis</span><br><span class="line">优点:支持集群,性能高。</span><br><span class="line">缺点:要求服务器时间同步.否则可能出现集群失败问题。</span><br><span class="line">4、Simple</span><br><span class="line">优点: 标准RPC服务.没有兼容问题。</span><br><span class="line">缺点: 不支持集群。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p>
<p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p>
<p><img src="/2019/11/16/191116Dubbo/img/4.png" alt="4"></p>
<p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径，例如：C:\Windows\itcast\hello.txt。</p>
<p>Zookeeper树型目录服务：</p>
<p><img src="/2019/11/16/191116Dubbo/3.png" alt="3"></p>
<p>流程说明：</p>
<ul>
<li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li>
<li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li>
<li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li>
</ul>
<h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p>
<p>本课程使用的Zookeeper版本为3.4.6，下载完成后可以获得名称为zookeeper-3.4.6.tar.gz的压缩文件。</p>
<p>安装步骤：</p>
<p>第一步：安装 jdk（略）<br>第二步：把 zookeeper 的压缩包（zookeeper-3.4.6.tar.gz）上传到 linux 系统<br>第三步：解压缩压缩包<br>​    tar -zxvf zookeeper-3.4.6.tar.gz<br>第四步：进入zookeeper-3.4.6目录，创建data目录<br>​    mkdir data<br>第五步：进入conf目录 ，把zoo_sample.cfg 改名为zoo.cfg<br>​    cd conf<br>​    mv zoo_sample.cfg zoo.cfg<br>第六步：打开zoo.cfg文件,  修改data属性：dataDir=/root/zookeeper-3.4.6/data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows 环境,路径配置 </span><br><span class="line">D:\\develop\\zookeeper-3.4.6\\zookeeper-3.4.6\\data</span><br></pre></td></tr></table></figure>



<h3 id="3-3-启动、停止Zookeeper"><a href="#3-3-启动、停止Zookeeper" class="headerlink" title="3.3 启动、停止Zookeeper"></a>3.3 启动、停止Zookeeper</h3><p>进入Zookeeper的bin目录，启动服务命令<br> ./zkServer.sh start</p>
<p>停止服务命令<br>./zkServer.sh stop</p>
<p>查看服务状态：<br>./zkServer.sh status</p>
<h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p>
<h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p><img src="/2019/11/16/191116Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/5.dubbo/%E7%AC%94%E8%AE%B0/assets/1569123691384.png" alt="1569123691384"></p>
<p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）创建服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）创建服务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：服务实现类上使用的Service注解是Dubbo提供的，用于对外发布服务</p>
<p>（5）在src/main/resources下创建applicationContext-service.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service.impl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（6）启动服务</p>
<p>tomcat7:run</p>
<h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_consumer，pom.xml配置和上面服务提供者相同，只需要将Tomcat插件的端口号改为8082即可</p>
<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p>
<p>（4）编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</p>
<p>（5）在src/main/resources下创建applicationContext-web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo-consumer&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（6）运行测试</p>
<p>tomcat7:run启动</p>
<p>在浏览器输入<a href="http://localhost:8082/demo/hello.do?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) provider 不一定需要部署在tomcat ,main 方法也可以需要死循环</span><br><span class="line">2) 一旦comsumer 和provider 建立连接,是长连接,及时zookeeper 宕机也不影响</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p>
<p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p>
<p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p>
<p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。可以通过开发工具的debug功能查看此代理对象的内部结构。另外，Dubbo实现网络传输底层是基于Netty框架完成的。</p>
<p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p>
<p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p>
<h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p>
<h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p>
<p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p>
<p>（2）启动tomcat，此war文件会自动解压</p>
<p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p>
<p>​    dubbo.registry.address=zookeeper://192.168.134.129:2181<br>​    dubbo.admin.root.password=root<br>​    dubbo.admin.guest.password=guest</p>
<p>（4）重启tomcat</p>
<h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p>
<p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D(root)%E5%92%8C%E5%AF%86%E7%A0%81(root)">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p>
<p><img src="/2019/11/16/191116Dubbo/5.png" alt="5"></p>
<p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p>
<p><img src="/2019/11/16/191116Dubbo/6.png" alt="6"></p>
<p><img src="/2019/11/16/191116Dubbo/7.png" alt="7"></p>
<p><img src="/2019/11/16/191116Dubbo/8.png" alt="8"></p>
<p><img src="/2019/11/16/191116Dubbo/9.png" alt="9"></p>
<h2 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6. Dubbo相关配置说明"></a>6. Dubbo相关配置说明</h2><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p>
<p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.HelloServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作为服务消费者，可以通过如下配置来引用服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">interface</span> =<span class="string">&quot;com.itheima.api.HelloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p>
<h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p>
<p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p>
<p>推荐使用的是dubbo协议。</p>
<p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>
<p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;rmi&quot;</span> <span class="attr">port</span>=<span class="string">&quot;1099&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;dubbo&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;rmi&quot;</span> /&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p>
<p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p>
<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p>
<p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p>
<p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference(check = false,loadbalance = &quot;random&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p>
<p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p>
<p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p>
<h4 id="dubbo-负载均衡策略"><a href="#dubbo-负载均衡策略" class="headerlink" title="dubbo 负载均衡策略 ,"></a>dubbo 负载均衡策略 ,</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)RandomLoadBalance:随机负载均衡。随机的选择一个。是Dubbo的默认负载均衡策略。</span><br><span class="line">2)RoundRobinLoadBalance:轮询负载均衡。轮询选择一个。</span><br><span class="line">3)LeastActiveLoadBalance:最少活跃调用数，相同活跃数的随机。活跃数指调用前后计数差。使慢的 Provider 收到更少请求，因为越慢的 Provider 的调用前后计数差会越大。</span><br><span class="line">4) ConsistentHashLoadBalance:一致性哈希负载均衡。相同参数的请求总是落在同一台机器上。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如何配置: </p>
<p>  LoadBalance 接口有四个字类,源代码中有配置选项,可以找到配置选择项</p>
<h3 id="6-5-超时时间配置"><a href="#6-5-超时时间配置" class="headerlink" title="6.5 超时时间配置"></a>6.5 超时时间配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候我们的查询业务需要较长的时间才能返回结果,dubbo 默认 1s 没有响应结果则认为服务调用失败,会报错</span><br><span class="line">我们可以指定超时时间策略</span><br><span class="line"> @Service(timeout &#x3D; 10000) &#x2F;&#x2F; 10s </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p>
<p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p>
<h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p>
<p>操作步骤：</p>
<p>（1）在pom.xml文件中增加maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面连接的数据库可以自行创建</p>
<p>（3）在HelloServiceImpl类上加入@Transactional注解</p>
<p>（4）启动服务提供者和服务消费者，并访问</p>
<p><img src="/2019/11/16/191116Dubbo/12.png" alt="12"></p>
<p>上面的错误为没有可用的服务提供者</p>
<p>查看dubbo管理控制台发现服务并没有发布，如下：</p>
<p><img src="/2019/11/16/191116Dubbo/13.png" alt="13"></p>
<p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p>
<p><img src="/2019/11/16/191116Dubbo/14.png" alt="14"></p>
<p><img src="/2019/11/16/191116Dubbo/15.png" alt="15"></p>
<h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.itheima.service），所以后面真正发布服务的代码没有执行。</p>
<p>解决方式操作步骤：</p>
<p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/16/191116Dubbo/17.png" alt="17"></p>
<p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p>
<p><img src="/2019/11/16/191116Dubbo/16.png" alt="16"></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2019/11/18/191118Git/</url>
    <content><![CDATA[<h1 id="1-版本控制工具概念"><a href="#1-版本控制工具概念" class="headerlink" title="1.版本控制工具概念"></a>1.版本控制工具概念</h1><p>毕业论文写好了导师不满意让修改,改好了,导师又觉得第一版不错,改回来吧,此时内心一脸懵,第一版长啥样没存档啊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;毕业论文第一版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文第二版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文第三版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文最终版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文最终版2.doc&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>代码开发中经常会碰到这种现象:改之前好好的,改完就报错了,也没怎么修改啊,这种情况下如果不能查看修改之前的代码,查找问题是非常困难的.</p>
<p>如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具.</p>
<p>版本控制工具一般具有如下特性:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 能够记录历史版本</span><br><span class="line">2) 能后回退历史版本</span><br><span class="line">3) 能够满足团队协作开发的要求</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="2-版本管理工具介绍"><a href="#2-版本管理工具介绍" class="headerlink" title="2. 版本管理工具介绍"></a>2. 版本管理工具介绍</h1><p>现在比较流行的版本控制工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn</p>
<h2 id="2-1版本控制发展简史-维基百科"><a href="#2-1版本控制发展简史-维基百科" class="headerlink" title="2.1版本控制发展简史(维基百科)"></a>2.1版本控制发展简史(维基百科)</h2><p><img src="/2019/11/18/191118Git/1571983065236.png" alt="1571983065236"> </p>
<h2 id="2-2-SVN-和GIT-的区别"><a href="#2-2-SVN-和GIT-的区别" class="headerlink" title="2.2 SVN 和GIT 的区别"></a>2.2 SVN 和GIT 的区别</h2><h3 id="2-1-1-SVN-SubVersion"><a href="#2-1-1-SVN-SubVersion" class="headerlink" title="2.1.1 SVN(SubVersion)"></a>2.1.1 SVN(SubVersion)</h3><p>工作流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SVN是集中式版本控制系统，版本库是集中放在中央服务器的.</span><br><span class="line">工作流程如下:</span><br><span class="line">	1.从远程仓库下载代码</span><br><span class="line">	2.修改后将代码提交到远程仓库</span><br></pre></td></tr></table></figure>

<p>优缺点:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优点: 简单,易操作</span><br><span class="line">缺点:所有代码必须放在服务器  </span><br><span class="line"> 	   1.服务器一旦宕机无法提交代码,即容错性较差</span><br><span class="line">      2.离线无法提交代码,无法及时记录我们的提交行为</span><br></pre></td></tr></table></figure>

<p>svn流程图</p>
<p><img src="/2019/11/18/191118Git/svn.jpg"></p>
<h3 id="2-1-2-Git"><a href="#2-1-2-Git" class="headerlink" title="2.1.2 Git"></a>2.1.2 Git</h3><p>工作流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库：</span><br><span class="line">本地仓库和远程仓库</span><br><span class="line">工作流程如下</span><br><span class="line">    1．从远程仓库中克隆代码到本地仓库(pull)</span><br><span class="line">    2．从本地仓库中checkout代码然后进行代码修改</span><br><span class="line">    3．在提交前先将代码提交到暂存区</span><br><span class="line">    4．提交到本地仓库。本地仓库中保存修改的各个历史版本</span><br><span class="line">    5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/git.png"></p>
<h3 id="2-1-3-svn-和git-的区别"><a href="#2-1-3-svn-和git-的区别" class="headerlink" title="2.1.3 svn 和git 的区别"></a>2.1.3 svn 和git 的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. svn 是集中式版本控制工具,git 是分布式版本控制工具</span><br><span class="line">2. svn 不支持离线提交,git 支持离线提交代码</span><br></pre></td></tr></table></figure>

<h1 id="3-Git-发展简史"><a href="#3-Git-发展简史" class="headerlink" title="3. Git 发展简史"></a>3. Git 发展简史</h1><p> 林纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds, 1969年~ ） </p>
<p><img src="/2019/11/18/191118Git/1571987252740.png" alt="1571987252740"></p>
<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>
<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>
<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过<strong>手工方式合并代码！</strong></p>
<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？那个年代不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，<strong>而且必须联网才能使用</strong>。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是<strong>付费</strong>的，和Linux的开源精神不符。</p>
<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。而授权的前提是:Linux 社区的人不能开发具有相同功能的竞争产品! </p>
<p>另一方面,BitKeeper不是开源的. 显然与Linux 的开源精神不相符,所以linux 社区的很多人抱怨,不愿意使用.</p>
<p>典型的就是 1  (Samba 开发服务的创造者) 非常不满.偷偷违反了和 BitKeeper 的协议,反编译 BitKeeper 的源代码,开发了个爬虫,然后爬取信息被人发现了. BitKeeper 公司的领导非常不满意,然后开始发布消息说,(下个版本)不再为Linux 提供免费的服务. </p>
<p>Linus  本人就出面协调(几周或者几个月),但是不管用, 没办法. 估计谈判的过程感觉到了憋屈–”吃人嘴短,拿人手软”</p>
<p>Linus  本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！</p>
<p> <img src="/2019/11/18/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1571988966446.png" alt="Linus 采访记录"></p>
<p>Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.</p>
<p>直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具</p>
<h1 id="4-Git-的安装"><a href="#4-Git-的安装" class="headerlink" title="4. Git 的安装"></a>4. Git 的安装</h1><h2 id="4-1-git-的下载"><a href="#4-1-git-的下载" class="headerlink" title="4.1 git 的下载"></a>4.1 git 的下载</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p>
<p><img src="/2019/11/18/191118Git/1571990833074.png" alt="1571990833074"></p>
<p>附件</p>
<p><img src="/2019/11/18/191118Git/1571991253594.png" alt="1571991253594"></p>
<hr>

<h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><ol>
<li><p>按照附件的 顺序直接下一步傻瓜式安装即可</p>
</li>
<li><p>其中安装的过程中需要填写一个邮箱和用户名(任意即可)</p>
</li>
</ol>
<p><img src="/2019/11/18/191118Git/1572001054551.png" alt="1572001054551"></p>
<ol start="3">
<li><p> $\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$ </p>
</li>
<li><p>更改语言</p>
</li>
</ol>
<p><img src="/2019/11/18/191118Git/1571992521110.png" alt="1571992521110"></p>
<h1 id="5-Git-工作流程"><a href="#5-Git-工作流程" class="headerlink" title="5. Git 工作流程"></a>5. Git 工作流程</h1><h2 id="5-1-Git-初始化"><a href="#5-1-Git-初始化" class="headerlink" title="5.1 Git 初始化"></a>5.1 Git 初始化</h2><p>我们先初始化一个本地仓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 新建测试文件夹</span><br><span class="line">2) 进入文件夹,然后右键创建版本库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1571993852280.png" alt="1571993852280"></p>
<p>此时 我们看到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 文件夹上多了一个绿色图标(如果没有请看本章节 5.3小节说明)</span><br><span class="line">2) 文件夹内部生成了一个.git 隐藏文件夹(需要设置隐藏文件夹可见)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-2-git-流程"><a href="#5-2-git-流程" class="headerlink" title="5.2  git 流程"></a>5.2  git 流程</h2><h3 id="5-2-1-流程图"><a href="#5-2-1-流程图" class="headerlink" title="5.2.1 流程图"></a>5.2.1 流程图</h3><p><img src="/2019/11/18/191118Git/git%E6%B5%81%E7%A8%8B.png"></p>
<h3 id="5-2-2概念及详解"><a href="#5-2-2概念及详解" class="headerlink" title="5.2.2概念及详解"></a>5.2.2概念及详解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)		</span><br><span class="line">远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)</span><br><span class="line">工作区: 我们自己写代码(文档)的地方</span><br><span class="line">暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件</span><br><span class="line">------------</span><br><span class="line">Clone：克隆，就是将远程仓库复制到本地仓库</span><br><span class="line">Push：推送，就是将本地仓库代码上传到远程仓库</span><br><span class="line">Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png"></p>
<h2 id="5-3-图标不显示问题处理"><a href="#5-3-图标不显示问题处理" class="headerlink" title="5.3 图标不显示问题处理"></a>5.3 图标不显示问题处理</h2><p>如果 TortoiseGit  安装完毕后 图标不正常显示 则需要进行如下处理</p>
<p>修复TortoiseGit文件夹和文件状态图标不显示问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) win +r  输入  regedit</span><br><span class="line">2) 进入目录</span><br><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\</span><br><span class="line">3) 将如下图目录前加两个空格</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1571993045835.png" alt="1571993045835"></p>
<h1 id="6-Git-的基本使用01-TortoiseGit-操作本地仓库"><a href="#6-Git-的基本使用01-TortoiseGit-操作本地仓库" class="headerlink" title="6.Git 的基本使用01-TortoiseGit 操作本地仓库"></a>6.Git 的基本使用01-TortoiseGit 操作本地仓库</h1><h2 id="6-1-初始化仓库"><a href="#6-1-初始化仓库" class="headerlink" title="6.1  初始化仓库"></a>6.1  初始化仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一: </span><br><span class="line">新建一个文件夹,进入文件夹内部操作</span><br><span class="line">1)右键--&gt; 在这里创建Git 版本库 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572161580344.png" alt="1572161580344"></p>
<p>  注意: 不要直接在桌面上操作,否则桌面就是一个仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法二:</span><br><span class="line">2) 右键--&gt;Git GUI here</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572162906623.png" alt="1572162906623"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法三: 命令行模式</span><br><span class="line">2) git init </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572163015102.png" alt="1572163015102"></p>
<p>创建完毕仓库,我们发现,此时我们创建的文件夹下有一个.git 文件已经生成了</p>
<p>并且仓库文件夹上多了一个 绿色图标</p>
<p><img src="/2019/11/18/191118Git/1572164583708.png" alt="1572164583708"></p>
<h2 id="6-2-添加文件"><a href="#6-2-添加文件" class="headerlink" title="6.2 添加文件"></a>6.2 添加文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)在仓库中新建一个文件</span><br><span class="line">2)选中新建的文件--&gt;右键--&gt; TortoiseGit--&gt; 添加</span><br><span class="line">3)此时我们看到文件夹上多了一个 &quot;加号&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572164475555.png" alt="1572164475555"></p>
<p><img src="/2019/11/18/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1572165109016.png" alt="1572165109016"></p>
<h2 id="6-3-提交文件至本地仓库"><a href="#6-3-提交文件至本地仓库" class="headerlink" title="6.3 提交文件至本地仓库"></a>6.3 提交文件至本地仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)选中文件</span><br><span class="line">2) 右键--git提交</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572165471421.png" alt="1572165471421"></p>
<h2 id="6-4-修改文件-与再次提交文件"><a href="#6-4-修改文件-与再次提交文件" class="headerlink" title="6.4 修改文件,与再次提交文件"></a>6.4 修改文件,与再次提交文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当我们修改文件以后,文件上多了一个红色感叹号,表示我们上次提交后该文件被修改过</span><br><span class="line">提交后文件图标又变成绿色</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572165676716.png" alt="1572165676716"></p>
<h2 id="6-5-文件状态"><a href="#6-5-文件状态" class="headerlink" title="6.5 文件状态"></a>6.5 文件状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git工作目录下的文件存在两种状态：</span><br><span class="line">1 untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个&quot;问号&quot;)</span><br><span class="line">2 tracked 已跟踪（被纳入版本控制）     </span><br><span class="line">    2.1 Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个&quot;加号&quot;)</span><br><span class="line">	2.2 Unmodified 未修改状态        : 已提交(此时文件夹上有一个&quot;对号&quot;)</span><br><span class="line">	2.3 Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个&quot;红色感叹号&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1569293793902.png"></p>
<p>这些文件的状态会随着我们执行Git的命令发生变化</p>
<p><img src="/2019/11/18/191118Git/1566627767390.png"></p>
<h2 id="6-6-修改文件-不提交和上一个版本比较差异-diff"><a href="#6-6-修改文件-不提交和上一个版本比较差异-diff" class="headerlink" title="6.6 修改文件,不提交和上一个版本比较差异(diff)"></a>6.6 修改文件,不提交和上一个版本比较差异(diff)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改文件,此时不要提交</span><br><span class="line">选中文件--&gt;右键--&gt; TortoiseGit--&gt; 比较差异</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572167540734.png" alt="1572167540734"></p>
<h2 id="6-7-查看提交历史记录"><a href="#6-7-查看提交历史记录" class="headerlink" title="6.7 查看提交历史记录"></a>6.7 查看提交历史记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选中文件</span><br><span class="line">右键--&gt; TortoiseGit--&gt; 显示日志</span><br><span class="line">此时我们可以看到所有的历史提交记录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572167842481.png" alt="1572167842481"></p>
<p>##6.8 回退至历史版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右键--&gt; TortoiseGit--&gt; 显示日志</span><br><span class="line">选中某个版本--&gt; 进行如下操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572171034508.png" alt="1572171034508"></p>
<h2 id="6-9-文件删除"><a href="#6-9-文件删除" class="headerlink" title="6.9 文件删除"></a>6.9 文件删除</h2><p>###6.9.1本地删除与恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 直接选中文件删除的话,其实只是删除了本地工作区的文件,并没有删除 仓库中的文件</span><br><span class="line">   此时时可以回退的, 比如我们进行如下操作</span><br><span class="line">   1)文件删除</span><br><span class="line">   2)右键--&gt; TortoiseGit--&gt; 还原</span><br><span class="line">   此时我们发现文件又被恢复了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572169387835.png" alt="1572169387835"></p>
<h3 id="6-9-2从服务器删除"><a href="#6-9-2从服务器删除" class="headerlink" title="6.9.2从服务器删除"></a>6.9.2从服务器删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2) 我们如果真的想要将某个文件从服务器删除,需要进行如下操作</span><br><span class="line">   1) 删除文件,和上面的操作一样</span><br><span class="line">   2) 提交,此时服务文件已经删除了(历史版本还在,还是可以恢复)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-9-3从服务器删除-但是不删除本地"><a href="#6-9-3从服务器删除-但是不删除本地" class="headerlink" title="6.9.3从服务器删除,但是不删除本地"></a>6.9.3从服务器删除,但是不删除本地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们可以如下操作,只删除服务器上的文件,但是本地文件并不删除</span><br><span class="line">备注: 删除之后需要提交,才会真正的从服务器删除</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/191118Git/1572171572963.png" alt="1572171572963"></p>
<h2 id="6-10-忽略提交"><a href="#6-10-忽略提交" class="headerlink" title="6.10 忽略提交"></a>6.10 忽略提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候我们一些文件是不需要提交的比如说idea&#x2F;eclipse 开发的代码自动生成的配置文件</span><br><span class="line">如何配置不提交呢</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572172137494.png" alt="1572172137494"></p>
<p>此时我们的根目录下会生成一个.gitignore 文件</p>
<p>忽略文件如何阅读,常见格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有以.a 结尾的文件讲被忽略(递归)</span></span><br><span class="line"><span class="string">*.a</span></span><br><span class="line"><span class="comment"># 不管其他规则怎样,强制不忽略  lib.a</span></span><br><span class="line"><span class="type">!lib.a</span></span><br><span class="line"><span class="comment"># 只忽略 文件 TODO (注意这里是文件)</span></span><br><span class="line"><span class="string">/TODO</span></span><br><span class="line"><span class="comment"># 忽略 build文件夹下所有内容(递归) 这里是文件夹</span></span><br><span class="line"><span class="string">build/</span></span><br><span class="line"><span class="comment"># 忽略 doc 目录下以 *.txt 结尾的文件 (不递归)</span></span><br><span class="line"><span class="string">doc/*.txt</span></span><br><span class="line"><span class="comment"># 忽略 doc 目录下以 *.pdf 结尾的文件 (递归)</span></span><br><span class="line"><span class="string">doc/**/*.pdf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然理解了上述规则,我们也可以手动编辑该文件,而不用通过窗口化操作(如果不嫌麻烦)</p>
<h1 id="7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支"><a href="#7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支" class="headerlink" title="7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)"></a>7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)</h1><h2 id="7-1-分支的概念"><a href="#7-1-分支的概念" class="headerlink" title="7.1 分支的概念"></a>7.1 分支的概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-2-为何要使用分支"><a href="#7-2-为何要使用分支" class="headerlink" title="7.2 为何要使用分支"></a>7.2 为何要使用分支</h2><p>先看单线程开发</p>
<p><img src="/2019/11/18/191118Git/1572173978185.png" alt="1572173978185"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思考如下现象</span><br><span class="line">    10.1 日 业务部门提出需求 : 明年 元旦3天做2个促销活动</span><br><span class="line">	1) 12.31 号上线活动1, </span><br><span class="line">	2) 1.4 号上线活动2 ,同时 要求撤销 活动1</span><br><span class="line">    你所在 部门领导 为了保证能顺利完成,要求 11.15 号完成 上述两个功能的开发工作</span><br><span class="line">此时作为开发人员:我要面临两个文件, 活动1 的代码,即要存在(12.31 要用)又要不存在(1.4 号要求删除) ,我们怎么做?</span><br><span class="line">显然比较棘手,如果使用分支(可以理解为将代码复制一份)将很好解决</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572174740013.png" alt="1572174740013"></p>
<h2 id="7-3-创建分支"><a href="#7-3-创建分支" class="headerlink" title="7.3 创建分支"></a>7.3 创建分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到现在为止,我们一直使用的时主分支(master)</span><br><span class="line">在主分支上操作创建分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572178189980.png" alt="1572178189980"></p>
<h2 id="7-4-分支的查看切换"><a href="#7-4-分支的查看切换" class="headerlink" title="7.4 分支的查看切换"></a>7.4 分支的查看切换</h2><h3 id="7-4-1查看分支"><a href="#7-4-1查看分支" class="headerlink" title="7.4.1查看分支"></a>7.4.1查看分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看版本分支图,此时我们看到有两个分支</span><br><span class="line">当然,我们可以创建多个分支</span><br><span class="line">可以看到多个分支的图形</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572179420706.png" alt="1572179420706"></p>
<h3 id="7-4-2切换分支"><a href="#7-4-2切换分支" class="headerlink" title="7.4.2切换分支"></a>7.4.2切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右键--&gt; 检出</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/191118Git/1572180057481.png" alt="1572180057481"></p>
<p>##7.5 分支的合并与删除</p>
<h3 id="7-5-1合并"><a href="#7-5-1合并" class="headerlink" title="7.5.1合并"></a>7.5.1合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们将代码切换到分支1,然后写属于需求1 的代码并提交</span><br><span class="line">当我们把需求1 开发完毕如何把需求1 的代码合并到主分支呢?</span><br><span class="line">--&gt;1 切换到 主版本</span><br><span class="line">--&gt;2 右键 合并即可将需求1 写的代码合并至主分支</span><br><span class="line">-----此时我们看到代码自动合并到了master分支</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572180623156.png" alt="1572180623156"></p>
<h3 id="7-5-2删除分支"><a href="#7-5-2删除分支" class="headerlink" title="7.5.2删除分支"></a>7.5.2删除分支</h3><p><img src="/2019/11/18/191118Git/1572183670465.png" alt="1572183670465"></p>
<p>5,冲突的处理<br>    5.1)冲突的概念</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现象演示	</span><br><span class="line">	开发人员A 开发需求1,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int [] args)</span><br><span class="line"> 同时开发人员B 开发需求2,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int a int b)</span><br><span class="line">他们在互相不知道对方需求的情况下同时提交了代码到自己的分支</span><br><span class="line">   思考此时如果我们把需求1 和需求2 同时都合并到主分支上, 主分支的 工具类 MathUtil 的第一行应该使用谁的代码? </span><br><span class="line">   此时主分支是不能智能判断第一行使用谁的代码,合并时会报错,我们叫做冲突.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572181403239.png" alt="1572181403239"></p>
<p>​    5.2) 如何处理冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析一下冲突的原因:</span><br><span class="line">	开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码,合并是冲突</span><br><span class="line">思考:</span><br><span class="line">	我们能直接把某个开发人员开发的代码删除吗?</span><br><span class="line">显然不能</span><br><span class="line">	所以在处理冲突时,第一步应该时找开发另一个需求的人员沟通,之后才是处理冲突</span><br><span class="line">-----</span><br><span class="line">--&gt; 选中冲突的文件(带黄色感叹号的文件都是冲突的文件,如果有多个需要逐一处理)</span><br><span class="line">--&gt; 右键--&gt; 编辑冲突,</span><br><span class="line">--&gt;处理完毕后.标记已解决</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572182565594.png" alt="1572182565594"></p>
<p><img src="/2019/11/18/191118Git/1572182727568.png" alt="1572182727568"></p>
<p>#8. tag  标签</p>
<h2 id="8-1-标签的概念"><a href="#8-1-标签的概念" class="headerlink" title="8.1 标签的概念"></a>8.1 标签的概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag)</span><br><span class="line">比如说，我们想为我们的项目发布一个&quot;1.0&quot;版本。 我们给最新一次提交打上（HEAD）&quot;v1.0&quot;的标签。</span><br><span class="line">标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交</span><br></pre></td></tr></table></figure>

<h2 id="8-2-标签的创建-tag"><a href="#8-2-标签的创建-tag" class="headerlink" title="8.2  标签的创建(tag)"></a>8.2  标签的创建(tag)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签的创建和分支的创建操作几乎一样</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572183849972.png" alt="1572183849972"></p>
<h2 id="8-3-标签的切换与删除"><a href="#8-3-标签的切换与删除" class="headerlink" title="8.3 标签的切换与删除"></a>8.3 标签的切换与删除</h2><p><img src="/2019/11/18/191118Git/1572184030612.png" alt="1572184030612"></p>
<p><img src="/2019/11/18/191118Git/1572184109746.png" alt="1572184109746"></p>
<h1 id="9-远程仓库"><a href="#9-远程仓库" class="headerlink" title="9. 远程仓库"></a>9. 远程仓库</h1><p>我们的代码不能总是放在本地,因为总是放在本地,一旦电脑出现故障,数据将丢失,怎么共享呢,这里我们需要一个服务器, 我们可以把代码放到服务器上,然后让别人下载,这样我峨嵋你既可以备份代码,也可以进行团队协作开发</p>
<h2 id="9-0-局域网仓库"><a href="#9-0-局域网仓库" class="headerlink" title="9.0 局域网仓库"></a>9.0 局域网仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上我们可以搭建一个简单的局域网服务器共享我们的代码</span><br></pre></td></tr></table></figure>

<h3 id="9-0-1本地相对路径-多个文件夹之间共享代码"><a href="#9-0-1本地相对路径-多个文件夹之间共享代码" class="headerlink" title="9.0.1本地相对路径,多个文件夹之间共享代码"></a>9.0.1本地相对路径,多个文件夹之间共享代码</h3><p><img src="/2019/11/18/191118Git/1572535798760.png" alt="1572535798760"></p>
<h3 id="9-0-2开启局域网共享代码"><a href="#9-0-2开启局域网共享代码" class="headerlink" title="9.0.2开启局域网共享代码"></a>9.0.2开启局域网共享代码</h3><p><img src="/2019/11/18/191118Git/1572535921581.png" alt="1572535921581"></p>
<p><img src="/2019/11/18/191118Git/1572536029899.png" alt="1572536029899"></p>
<p>局域网这种共享是没有安全控制的,都可以访问,如果想要搭建一个可以控制权限的服务器需要借助第三方软件</p>
<p>gitblit,可以自行搜索搭建</p>
<h2 id="9-1-常用远程仓库托管服务"><a href="#9-1-常用远程仓库托管服务" class="headerlink" title="9.1 常用远程仓库托管服务"></a>9.1 常用远程仓库托管服务</h2><p>除了自己搭建服务器,其实我们可以使用一些免费的远程仓库,远程仓库有很多,常见的免费互联网远程仓库托管服务如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.github.com</span><br><span class="line">www.gitee.com</span><br><span class="line">www.gitlab.com</span><br><span class="line"></span><br><span class="line">github  是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。</span><br><span class="line">gitee    即码云，是 oschina 免费给企业用的，不用自己搭建环境。</span><br><span class="line">gitlab   类似 github，一般用于在企业内搭建git私服，要自己搭环境。</span><br><span class="line"></span><br><span class="line">GitHub(gitee)、GitLab 不同点：</span><br><span class="line">1、GitHub如果使用私有仓库是需要付费的，(2019年开始私有仓库也是免费的但是只能3个人协同开发,想要更多需要收费)，GitLab可以在上面搭建私人的免费仓库。</span><br><span class="line">2、GitLab让开发团队对他们的代码仓库拥有更多的控制，相对于GitHub，它有不少的特色：</span><br><span class="line">    (1)允许免费设置仓库权限</span><br><span class="line">    (2)允许用户选择分享一个project的部分代码</span><br><span class="line">    (3)允许用户设置project的获取权限，进一步提升安全性</span><br><span class="line">    (4)可以设置获取到团队整体的改进进度</span><br><span class="line">    (5)通过innersourcing让不在权限范围内的人访问不到该资源</span><br></pre></td></tr></table></figure>

<p>鉴于国内用户可能网络不好,这里我们使用gitee(码云) 来讲解我们的课程,其他可自行找资料学习非常类似</p>
<h2 id="9-2-码云账号注册"><a href="#9-2-码云账号注册" class="headerlink" title="9.2  码云账号注册"></a>9.2  码云账号注册</h2><p><img src="/2019/11/18/191118Git/1572267659865.png" alt="1572267659865"></p>
<p>填写邮箱发送验证码,然后可以注册账号,主页如下</p>
<p><img src="/2019/11/18/191118Git/1572268091948.png" alt="1572268091948"></p>
<h2 id="9-3-创建远程仓库"><a href="#9-3-创建远程仓库" class="headerlink" title="9.3 创建远程仓库"></a>9.3 创建远程仓库</h2><p><img src="/2019/11/18/191118Git/1572274044100.png" alt="1572274044100"></p>
<p><img src="/2019/11/18/191118Git/224637.png"></p>
<p>各个类型仓库之间的区别</p>
<p><img src="/2019/11/18/191118Git/1572274100802.png" alt="1572274100802"></p>
<p><img src="/2019/11/18/191118Git/1572274406371.png" alt="1572274406371"></p>
<h2 id="9-4-把本地代码推送到远端"><a href="#9-4-把本地代码推送到远端" class="headerlink" title="9.4  把本地代码推送到远端"></a>9.4  把本地代码推送到远端</h2><p><img src="/2019/11/18/191118Git/1572275202869.png" alt="1572275202869"></p>
<p><img src="/2019/11/18/191118Git/1572275492670.png" alt="1572275492670"></p>
<p><img src="/2019/11/18/191118Git/1572275546739.png" alt="1572275546739"></p>
<p>此时我们刷新仓库发现代码已经存在了</p>
<p>我们填写的用户信息,会被保存在本地,下次提交无需填写用户名和密码</p>
<p><img src="/2019/11/18/191118Git/1572277483698.png" alt="1572277483698"></p>
<h2 id="9-5-从远程仓库更新代码"><a href="#9-5-从远程仓库更新代码" class="headerlink" title="9.5  从远程仓库更新代码"></a>9.5  从远程仓库更新代码</h2><p>我们同样可以从库下载代码,</p>
<p>新建一个文件夹 repo2 ,进入然后进行如下操作</p>
<p><img src="/2019/11/18/191118Git/1572275958701.png" alt="1572275958701"></p>
<p>此时我们发现我们的代码已经被下载下来了</p>
<h2 id="9-6-代码的修改与提交-查看历史"><a href="#9-6-代码的修改与提交-查看历史" class="headerlink" title="9.6  代码的修改与提交,查看历史"></a>9.6  代码的修改与提交,查看历史</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)此时我们修改代码就不能仅仅是提交到本地了,提交完毕应该推送到远端服务器</span><br><span class="line">2)此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的</span><br><span class="line">   git --&gt;显示日志</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572277139243.png" alt="1572277139243"></p>
<h2 id="9-7-ssh-连接概述"><a href="#9-7-ssh-连接概述" class="headerlink" title="9.7 ssh 连接概述"></a>9.7 ssh 连接概述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh 方式配置</span><br></pre></td></tr></table></figure>

<p> ssh 方式的底层原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式</span><br><span class="line">数学基础好的同学可以研究一下</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;cjm123&#x2F;p&#x2F;8243424.html</span><br><span class="line"></span><br><span class="line">公钥私钥加密可以看作古代 的&quot;虎符&quot; , 我们本地电脑有一份,远程服务器有一份, 只要 &quot;虎符&quot; 核对通过 表示身份无误,可以执行提交等操作,无需输入用户名密码</span><br></pre></td></tr></table></figure>

<h2 id="9-8-ssh-密钥的生成"><a href="#9-8-ssh-密钥的生成" class="headerlink" title="9.8 ssh 密钥的生成"></a>9.8 ssh 密钥的生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#生成公钥私钥</span><br><span class="line"> ssh-keygen -t rsa</span><br><span class="line"> 一直回车即可</span><br><span class="line"> 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572520139221.png" alt="1572520139221"></p>
<p><img src="/2019/11/18/191118Git/1572520293700.png" alt="1572520293700"></p>
<h2 id="9-9-ssh-密钥配置"><a href="#9-9-ssh-密钥配置" class="headerlink" title="9.9 ssh 密钥配置"></a>9.9 ssh 密钥配置</h2><p><img src="/2019/11/18/191118Git/1572520396806.png" alt="1572520396806"></p>
<h2 id="9-10-ssh-方式克隆-提交代码"><a href="#9-10-ssh-方式克隆-提交代码" class="headerlink" title="9.10 ssh 方式克隆/提交代码:"></a>9.10 ssh 方式克隆/提交代码:</h2><p>  配置完成之后我们克隆我们之前的项目</p>
<p><img src="/2019/11/18/191118Git/1572522118610.png" alt="1572522118610"></p>
<p>修改后直接提交推送即可成功,,git 会自动去.ssh 目录找我们的私钥进行匹配</p>
<h2 id="9-11-远程仓库的其他操作"><a href="#9-11-远程仓库的其他操作" class="headerlink" title="9.11. 远程仓库的其他操作"></a>9.11. 远程仓库的其他操作</h2><p>概念</p>
<p><img src="/2019/11/18/191118Git/1572522822946.png" alt="1572522822946"></p>
<p>当我们从 gitee 上查看别人的项目的时候我们可能会看到上图中的按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指数:</span><br><span class="line">	是gitee 网站根据当前项目的各项指标计算出来的一个值</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572523045267.png" alt="1572523045267"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Star:</span><br><span class="line">	点赞, 注意这里的并不像朋友圈那样容易获得点赞,圈内人还是很克制的</span><br><span class="line">Watch:</span><br><span class="line">   如果你watch 了某个开源项目,那么这个项目后续所有的改动你将收到通知</span><br><span class="line">Fork :</span><br><span class="line">	将别人的代码克隆到你自己的仓库</span><br><span class="line">	作用一: 如果担心某个优秀的项目别人突然有一天不开源了,你可以fork到自己的仓库</span><br><span class="line">    作用二: 修改别人的代码</span><br><span class="line">	  以linux 为例,你其实不是linux 社区的开发人员,但是你 又想为linux 开发做贡献(维护代码)</span><br><span class="line">	   你并没有权限,怎们办?</span><br><span class="line">	   你可以先把linux 开源的代码 fork 到你自己的仓库,此时你就可以操作自己的仓库进行修改代码了</span><br><span class="line">	   如何让别人合并你修改好的代码呢? </span><br><span class="line">	    我们注意项目的上方有一个 &quot; Pull Request&quot; 这个按钮的意思是 &quot;请求求别人合并你修改的代码&quot;</span><br><span class="line">	    当我们发起一个 Pull Request 时 , 项目的拥有者将收到 Pull Request请求,然后将根据你提交代码的质量决定是否合并</span><br></pre></td></tr></table></figure>

<p>项目操作</p>
<p>1)我们可以删除修改我们自己仓库的基本信息</p>
<ol start="2">
<li>我们可以邀请其他人成为项目的开发人员或者管理人员</li>
</ol>
<p><img src="/2019/11/18/191118Git/1572523819666.png" alt="1572523819666"></p>
<p>我们可以删除修改我们自己仓库的基本信息</p>
<p><img src="/2019/11/18/191118Git/1572523928774.png" alt="1572523928774"></p>
<p><img src="/2019/11/18/191118Git/1572523968992.png" alt="1572523968992"></p>
<h2 id="9-12-利用-gitee-搭建个人主页"><a href="#9-12-利用-gitee-搭建个人主页" class="headerlink" title="9.12 利用 gitee 搭建个人主页"></a>9.12 利用 gitee 搭建个人主页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)将静态资源上传至仓库</span><br><span class="line">2) 选择服务 pages 即可部署</span><br><span class="line">注意 1)必须有个index.html 文件</span><br><span class="line">注意 2) 只能搭建静态网站,动态网站请租赁服务器搭建提供服务</span><br><span class="line">注意 3) gitee 要求必须绑定手机号</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/191118Git/1572525575923.png" alt="1572525575923"></p>
<p>点击开启后gitee 会自动生成一个域名</p>
<p><img src="/2019/11/18/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1572526097257.png" alt="1572526097257"></p>
<p>直接访问即可</p>
<p>此时我们已经在git 上部署了一个静态的网站</p>
<p><img src="/2019/11/18/191118Git/1572526136074.png" alt="1572526136074"></p>
<h1 id="10-命令行–-git基本操作"><a href="#10-命令行–-git基本操作" class="headerlink" title="10.命令行– git基本操作"></a>10.命令行– git基本操作</h1><h2 id="10-1-介绍"><a href="#10-1-介绍" class="headerlink" title="10.1  介绍"></a>10.1  介绍</h2><p>​    上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p>
<p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p>
<p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p>
<p>##10.2 环境配置</p>
<p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置用户信息 </span></span><br><span class="line">   git config --global user.name “itcast”</span><br><span class="line">   git config --global user.email “itcast@itcast.cn”</span><br><span class="line"><span class="meta">#</span><span class="bash">查看配置信息</span></span><br><span class="line">   git config --list</span><br><span class="line">   git config user.name</span><br><span class="line"><span class="meta">#</span><span class="bash">通过上面的命令设置的信息会保存在~/.gitconfig文件中</span></span><br></pre></td></tr></table></figure>

<p>##10.3  初始化本地仓库 init</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化仓库带工作区</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化仓库不带工作区</span></span><br><span class="line">git init -bare  </span><br></pre></td></tr></table></figure>

<p>##10.4 克隆 clone</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库克隆</span></span><br><span class="line">git clone 远程Git仓库地址 </span><br><span class="line">例如: git clone https://gitee.com/itcast/gittest.git</span><br></pre></td></tr></table></figure>

<p>##10.5  查看状态 stasus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">git status </span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态 使输出信息更加简洁</span></span><br><span class="line">git status –s </span><br></pre></td></tr></table></figure>

<p>##10.6 add </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将未跟踪的文件加入暂存区</span></span><br><span class="line">git add  &lt;文件名&gt;  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存区的文件取消暂存 (取消 add )</span></span><br><span class="line">git reset  &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<p>##10.7 commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git commit 将暂存区的文件修改提交到本地仓库</span></span><br><span class="line">git commit -m &quot;日志信息&quot;  &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<p>##10.8 删除 rm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从本地工作区 删除文件</span></span><br><span class="line">git rm &lt;文件名&gt;  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果本工作区库误删, 想要回退</span></span><br><span class="line">git checkout head &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<h1 id="11-命令行–git-远程仓库操作"><a href="#11-命令行–git-远程仓库操作" class="headerlink" title="11. 命令行–git 远程仓库操作"></a>11. 命令行–git 远程仓库操作</h1><h2 id="11-1-查看远程"><a href="#11-1-查看远程" class="headerlink" title="11.1    查看远程"></a>11.1    查看远程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程  列出指定的每一个远程服务器的简写</span></span><br><span class="line">git remote </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程 , 列出 简称和地址</span></span><br><span class="line">git remote  -v  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库详细地址</span></span><br><span class="line">git remote show  &lt;仓库简称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-2-添加-移除远测仓库"><a href="#11-2-添加-移除远测仓库" class="headerlink" title="11.2 添加/移除远测仓库"></a>11.2 添加/移除远测仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加远程仓库</span></span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span></span><br><span class="line">git remote rm &lt;shortname&gt; </span><br></pre></td></tr></table></figure>

<h2 id="11-3-从远程仓库获取代码"><a href="#11-3-从远程仓库获取代码" class="headerlink" title="11.3 从远程仓库获取代码"></a>11.3 从远程仓库获取代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库克隆</span></span><br><span class="line">git clone &lt;url&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span></span><br><span class="line">git fetch  &lt;shortname&gt;  &lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动合并  把某个版本的某个分支合并到当前工作区</span></span><br><span class="line">git merge &lt;shortname&gt;/&lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span></span><br><span class="line">git pull  &lt;shortname&gt;  &lt;分支名称&gt;</span><br><span class="line">git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并</span><br></pre></td></tr></table></figure>

<p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将本地仓库推送至远程仓库的某个分支</span></span><br><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>

<h1 id="12-命令行–-分支"><a href="#12-命令行–-分支" class="headerlink" title="12.  命令行– 分支"></a>12.  命令行– 分支</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认 分支名称为 master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支 </span></span><br><span class="line">git chekout &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支(如果分支已经修改过,则不允许删除)</span></span><br><span class="line">git branch -d  &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除分支</span></span><br><span class="line">git branch -D  &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交分支至远程仓库</span></span><br><span class="line">git push &lt;仓库简称&gt; &lt;分支名称&gt;	</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支 将其他分支合并至当前工作区</span></span><br><span class="line">git merge &lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库分支</span></span><br><span class="line">git push origin –d branchName</span><br></pre></td></tr></table></figure>

<h1 id="13-命令行-–tag"><a href="#13-命令行-–tag" class="headerlink" title="13 . 命令行 –tag"></a>13 . 命令行 –tag</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag详细信息 </span></span><br><span class="line"> git show [tagName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag</span></span><br><span class="line">git tag [tagName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [仓库简称] [tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag (注意 空格)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tag]</span></span><br></pre></td></tr></table></figure>

<h1 id="14-案例"><a href="#14-案例" class="headerlink" title="14. 案例"></a>14. 案例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">企业中我们是如何开发的</span><br><span class="line">1) 入职第一天,管理人员分配&#x2F;git账号密码 (可能是两个:一个是文档,一个是 代码)</span><br><span class="line">2) 开发人员下载代码即文档&#x2F; 根据文档将环境搭建成功</span><br><span class="line">3) 团队一般会给你讲讲项目相关的支持</span><br><span class="line">----</span><br><span class="line">4) 你接到第一个需求(或者某个功能,一般要经过沟通,分析,设计...等过程)</span><br><span class="line">5) 创建分支(一般以需求编号为版本号)</span><br><span class="line">6) 开发需求,本地测试,提交代码,</span><br><span class="line">	一般来讲为了避免将测试代码提交,需要提交前,检查如下步骤</span><br><span class="line">	6.1) 是否多提交了某个文件,比如测试文件</span><br><span class="line">	6.2) 是否漏提交文件</span><br><span class="line">	6.3) 打开每一个应该提交的文件,判断是否多提交了一行代码,是否少提交了一行代码,是否删除了本应该存在的代码</span><br><span class="line">	检查完毕提交代码</span><br><span class="line">7) 合并至主版本-- 提交测试人员测试</span><br><span class="line">8) 测试人员测试bug ,在分支上继续修改,提交</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>IO流和Properties集合</title>
    <url>/2019/09/01/190901IO%E6%B5%81%E5%92%8CProperties%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-IO流案例"><a href="#1-IO流案例" class="headerlink" title="1.IO流案例"></a>1.IO流案例</h2><h3 id="1-1集合到文件数据排序改进版【应用】"><a href="#1-1集合到文件数据排序改进版【应用】" class="headerlink" title="1.1集合到文件数据排序改进版【应用】"></a>1.1集合到文件数据排序改进版【应用】</h3><h4 id="1-1-1案例需求"><a href="#1-1-1案例需求" class="headerlink" title="1.1.1案例需求"></a>1.1.1案例需求</h4><ul>
<li>键盘录入5个学生信息(姓名,语文成绩,数学成绩,英语成绩)。要求按照成绩总分从高到低写入文本文件</li>
<li>格式：姓名,语文成绩,数学成绩,英语成绩  举例：林青霞,98,99,100</li>
</ul>
<h4 id="1-1-2分析步骤"><a href="#1-1-2分析步骤" class="headerlink" title="1.1.2分析步骤"></a>1.1.2分析步骤</h4><ol>
<li><p>定义学生类</p>
</li>
<li><p>创建TreeSet集合，通过比较器排序进行排序</p>
</li>
<li><p>键盘录入学生数据</p>
</li>
<li><p>创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</p>
</li>
<li><p>把学生对象添加到TreeSet集合</p>
</li>
<li><p>创建字符缓冲输出流对象</p>
</li>
<li><p>遍历集合，得到每一个学生对象</p>
</li>
<li><p>把学生对象的数据拼接成指定格式的字符串</p>
</li>
<li><p>调用字符缓冲输出流对象的方法写数据</p>
</li>
<li><p>释放资源</p>
<a id="more"></a>

</li>
</ol>
<h4 id="1-1-3代码实现"><a href="#1-1-3代码实现" class="headerlink" title="1.1.3代码实现"></a>1.1.3代码实现</h4><ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 语文成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> math;</span><br><span class="line">    <span class="comment">// 英语成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> chinese, <span class="keyword">int</span> math, <span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChinese</span><span class="params">(<span class="keyword">int</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnglish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese + <span class="keyword">this</span>.math + <span class="keyword">this</span>.english;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，通过比较器排序进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//成绩总分从高到低</span></span><br><span class="line">                <span class="keyword">int</span> num = s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getChinese() - s2.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s1.getMath() - s2.getMath() : num2;</span><br><span class="line">                <span class="keyword">int</span> num4 = num3 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num3;</span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入学生数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个学生信息：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;语文成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> chinese = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;数学成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> math = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;英语成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> english = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setChinese(chinese);</span><br><span class="line">            s.setMath(math);</span><br><span class="line">            s.setEnglish(english);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到TreeSet集合</span></span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\ts.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            <span class="comment">//格式：姓名,语文成绩,数学成绩,英语成绩</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getChinese()).append(<span class="string">&quot;,&quot;</span>).append(s.getMath()).append(<span class="string">&quot;,&quot;</span>).append(s.getEnglish()).append(<span class="string">&quot;,&quot;</span>).append(s.getSum());</span><br><span class="line"></span><br><span class="line"><span class="comment">//            调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2复制单级文件夹【应用】"><a href="#1-2复制单级文件夹【应用】" class="headerlink" title="1.2复制单级文件夹【应用】"></a>1.2复制单级文件夹【应用】</h3><h4 id="1-2-1案例需求"><a href="#1-2-1案例需求" class="headerlink" title="1.2.1案例需求"></a>1.2.1案例需求</h4><ul>
<li>把“E:\itcast”这个文件夹复制到模块目录下</li>
</ul>
<h4 id="1-2-2分析步骤"><a href="#1-2-2分析步骤" class="headerlink" title="1.2.2分析步骤"></a>1.2.2分析步骤</h4><ol>
<li><p>创建数据源目录File对象，路径是E:\itcast</p>
</li>
<li><p>获取数据源目录File对象的名称</p>
</li>
<li><p>创建目的地目录File对象，路径由(模块名+第2步获取的名称)组成</p>
</li>
<li><p>判断第3步创建的File是否存在，如果不存在，就创建</p>
</li>
<li><p>获取数据源目录下所有文件的File数组</p>
</li>
<li><p>遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</p>
</li>
<li><p>获取数据源文件File对象的名称</p>
</li>
<li><p>创建目的地文件File对象，路径由(目的地目录+第7步获取的名称)组成</p>
</li>
<li><p>复制文件</p>
<p>​    由于不清楚数据源目录下的文件都是什么类型的，所以采用字节流复制文件</p>
<p>​    采用参数为File的构造方法</p>
</li>
</ol>
<h4 id="1-2-3代码实现"><a href="#1-2-3代码实现" class="headerlink" title="1.2.3代码实现"></a>1.2.3代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFolderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源目录File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFolder = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录File对象的名称(itcast)</span></span><br><span class="line">        String srcFolderName = srcFolder.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地目录File对象，路径名是模块名+itcast组成(myCharStream\\itcast)</span></span><br><span class="line">        File destFolder = <span class="keyword">new</span> File(<span class="string">&quot;myCharStream&quot;</span>,srcFolderName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断目的地目录对应的File是否存在，如果不存在，就创建</span></span><br><span class="line">        <span class="keyword">if</span>(!destFolder.exists()) &#123;</span><br><span class="line">            destFolder.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录下所有文件的File数组</span></span><br><span class="line">        File[] listFiles = srcFolder.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</span></span><br><span class="line">        <span class="keyword">for</span>(File srcFile : listFiles) &#123;</span><br><span class="line">            <span class="comment">//数据源文件：E:\\itcast\\mn.jpg</span></span><br><span class="line">            <span class="comment">//获取数据源文件File对象的名称(mn.jpg)</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            <span class="comment">//创建目的地文件File对象，路径名是目的地目录+mn.jpg组成(myCharStream\\itcast\\mn.jpg)</span></span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destFolder,srcFileName);</span><br><span class="line">            <span class="comment">//复制文件</span></span><br><span class="line">            copyFile(srcFile,destFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3复制多级文件夹【应用】"><a href="#1-3复制多级文件夹【应用】" class="headerlink" title="1.3复制多级文件夹【应用】"></a>1.3复制多级文件夹【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><ul>
<li>把“E:\itcast”这个文件夹复制到 F盘目录下</li>
</ul>
<h4 id="1-3-2分析步骤"><a href="#1-3-2分析步骤" class="headerlink" title="1.3.2分析步骤"></a>1.3.2分析步骤</h4><ol>
<li><p>创建数据源File对象，路径是E:\itcast</p>
</li>
<li><p>创建目的地File对象，路径是F:\</p>
</li>
<li><p>写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</p>
</li>
<li><p>判断数据源File是否是文件</p>
<p>​    是文件：直接复制，用字节流</p>
<p>​    不是文件：</p>
<pre><code>      在目的地下创建该目录

      遍历获取该目录下的所有文件的File数组，得到每一个File对象

      回到3继续(递归)</code></pre>
</li>
</ol>
<h4 id="1-3-3代码实现"><a href="#1-3-3代码实现" class="headerlink" title="1.3.3代码实现"></a>1.3.3代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFoldersDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//创建目的地File对象，路径是F:\\</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">&quot;F:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</span></span><br><span class="line">        copyFolder(srcFile,destFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFolder</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//判断数据源File是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(srcFile.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">//在目的地下创建和数据源File名称一样的目录</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            File newFolder = <span class="keyword">new</span> File(destFile,srcFileName); <span class="comment">//F:\\itcast</span></span><br><span class="line">            <span class="keyword">if</span>(!newFolder.exists()) &#123;</span><br><span class="line">                newFolder.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数据源File下所有文件或者目录的File数组</span></span><br><span class="line">            File[] fileArray = srcFile.listFiles();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//把该File作为数据源File对象，递归调用复制文件夹的方法</span></span><br><span class="line">                copyFolder(file,newFolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明是文件，直接复制，用字节流</span></span><br><span class="line">            File newFile = <span class="keyword">new</span> File(destFile,srcFile.getName());</span><br><span class="line">            copyFile(srcFile,newFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流复制文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4复制文件的异常处理【应用】"><a href="#1-4复制文件的异常处理【应用】" class="headerlink" title="1.4复制文件的异常处理【应用】"></a>1.4复制文件的异常处理【应用】</h3><h4 id="1-4-1基本做法"><a href="#1-4-1基本做法" class="headerlink" title="1.4.1基本做法"></a>1.4.1基本做法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//try...catch...finally</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fr!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2JDK7版本改进"><a href="#1-4-2JDK7版本改进" class="headerlink" title="1.4.2JDK7版本改进"></a>1.4.2JDK7版本改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK7的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3JDK9版本改进"><a href="#1-4-3JDK9版本改进" class="headerlink" title="1.4.3JDK9版本改进"></a>1.4.3JDK9版本改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK9的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>(fr;fw)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-IO特殊操作流"><a href="#2-IO特殊操作流" class="headerlink" title="2.IO特殊操作流"></a>2.IO特殊操作流</h2><h3 id="2-1标准输入流【应用】"><a href="#2-1标准输入流【应用】" class="headerlink" title="2.1标准输入流【应用】"></a>2.1标准输入流【应用】</h3><ul>
<li><p>System类中有两个静态的成员变量</p>
<ul>
<li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li>
<li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li>
</ul>
</li>
<li><p>自己实现键盘录入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//public static final InputStream in：标准输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = System.in;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=is.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何把字节流转换为字符流？用转换流</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        //使用字符流能不能够实现一次读取一行数据呢？可以</span></span><br><span class="line"><span class="comment">//        //但是，一次读取一行数据的方法是字符缓冲输入流的特有方法</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的字符串是：&quot;</span> + line);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(br.readLine());</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的整数是：&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己实现键盘录入数据太麻烦了，所以Java就提供了一个类供我们使用</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2标准输出流【应用】"><a href="#2-2标准输出流【应用】" class="headerlink" title="2.2标准输出流【应用】"></a>2.2标准输出流【应用】</h3><ul>
<li><p>System类中有两个静态的成员变量</p>
<ul>
<li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li>
<li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li>
</ul>
</li>
<li><p>输出语句的本质：是一个标准的输出流</p>
<ul>
<li>PrintStream ps = System.out;</li>
<li>PrintStream类有的方法，System.out都可以使用</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemOutDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public static final PrintStream out：标准输出流</span></span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//能够方便地打印各种数据值</span></span><br><span class="line"><span class="comment">//        ps.print(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.print(100);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ps.println(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.println(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out的本质是一个字节输出流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        System.out.print();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3字节打印流【应用】"><a href="#2-3字节打印流【应用】" class="headerlink" title="2.3字节打印流【应用】"></a>2.3字节打印流【应用】</h3><ul>
<li><p>打印流分类</p>
<ul>
<li>字节打印流：PrintStream</li>
<li>字符打印流：PrintWriter</li>
</ul>
</li>
<li><p>打印流的特点</p>
<ul>
<li>只负责输出数据，不负责读取数据</li>
<li>永远不会抛出IOException</li>
<li>有自己的特有方法</li>
</ul>
</li>
<li><p>字节打印流</p>
<ul>
<li><p>PrintStream(String fileName)：使用指定的文件名创建新的打印流</p>
</li>
<li><p>使用继承父类的方法写数据，查看的时候会转码；使用自己的特有方法写数据，查看的数据原样输出</p>
</li>
<li><p>可以改变输出语句的目的地</p>
<p>​    public static void setOut(PrintStream out)：重新分配“标准”输出流</p>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintStream(String fileName)：使用指定的文件名创建新的打印流</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;myOtherStream\\ps.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="comment">//字节输出流有的方法</span></span><br><span class="line"><span class="comment">//        ps.write(97);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用特有方法写数据</span></span><br><span class="line"><span class="comment">//        ps.print(97);</span></span><br><span class="line"><span class="comment">//        ps.println();</span></span><br><span class="line"><span class="comment">//        ps.print(98);</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.println(<span class="number">98</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4字符打印流【应用】"><a href="#2-4字符打印流【应用】" class="headerlink" title="2.4字符打印流【应用】"></a>2.4字符打印流【应用】</h3><ul>
<li><p>字符打印流构造房方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PrintWriter(String   fileName)</td>
<td>使用指定的文件名创建一个新的PrintWriter，而不需要自动执行刷新</td>
</tr>
<tr>
<td>PrintWriter(Writer   out, boolean autoFlush)</td>
<td>创建一个新的PrintWriter    out：字符输出流    autoFlush： 一个布尔值，如果为真，则println ， printf ，或format方法将刷新输出缓冲区</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintWriter(String fileName) ：使用指定的文件名创建一个新的PrintWriter，而不需要自动执行行刷新</span></span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(&quot;myOtherStream\\pw.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.println(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.println(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter(Writer out, boolean autoFlush)：创建一个新的PrintWriter</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\pw.txt&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(new FileWriter(&quot;myOtherStream\\pw.txt&quot;),false);</span></span><br><span class="line"></span><br><span class="line">        pw.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">            pw.flush();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pw.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5复制Java文件打印流改进版【应用】"><a href="#2-5复制Java文件打印流改进版【应用】" class="headerlink" title="2.5复制Java文件打印流改进版【应用】"></a>2.5复制Java文件打印流改进版【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>把模块目录下的PrintStreamDemo.java 复制到模块目录下的 Copy.java</li>
</ul>
</li>
<li><p>分析步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //根据数据源创建字符输入流对象</span></span><br><span class="line"><span class="comment">        BufferedReader br = new BufferedReader(new FileReader(&quot;myOtherStream\\PrintStreamDemo.java&quot;));</span></span><br><span class="line"><span class="comment">        //根据目的地创建字符输出流对象</span></span><br><span class="line"><span class="comment">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myOtherStream\\Copy.java&quot;));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //读写数据，复制文件</span></span><br><span class="line"><span class="comment">        String line;</span></span><br><span class="line"><span class="comment">        while ((line=br.readLine())!=null) &#123;</span></span><br><span class="line"><span class="comment">            bw.write(line);</span></span><br><span class="line"><span class="comment">            bw.newLine();</span></span><br><span class="line"><span class="comment">            bw.flush();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //释放资源</span></span><br><span class="line"><span class="comment">        bw.close();</span></span><br><span class="line"><span class="comment">        br.close();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\PrintStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\Copy.java&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            pw.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6对象序列化流【应用】"><a href="#2-6对象序列化流【应用】" class="headerlink" title="2.6对象序列化流【应用】"></a>2.6对象序列化流【应用】</h3><ul>
<li><p>对象序列化介绍</p>
<ul>
<li>对象序列化：就是将对象保存到磁盘中，或者在网络中传输对象</li>
<li>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</li>
<li>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</li>
<li>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</li>
</ul>
</li>
<li><p>对象序列化流： ObjectOutputStream</p>
<ul>
<li>将Java对象的原始数据类型和图形写入OutputStream。 可以使用ObjectInputStream读取（重构）对象。 可以通过使用流的文件来实现对象的持久存储。 如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象 </li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectOutputStream(OutputStream out)</td>
<td>创建一个写入指定的OutputStream的ObjectOutputStream</td>
</tr>
</tbody></table>
</li>
<li><p>序列化对象的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void writeObject(Object obj)</td>
<td>将指定的对象写入ObjectOutputStream</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</li>
<li>Serializable是一个标记接口，实现该接口，不需要重写任何方法</li>
</ul>
</li>
</ul>
<h3 id="2-7对象反序列化流【应用】"><a href="#2-7对象反序列化流【应用】" class="headerlink" title="2.7对象反序列化流【应用】"></a>2.7对象反序列化流【应用】</h3><ul>
<li><p>对象反序列化流： ObjectInputStream</p>
<ul>
<li>ObjectInputStream反序列化先前使用ObjectOutputStream编写的原始数据和对象</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectInputStream(InputStream in)</td>
<td>创建从指定的InputStream读取的ObjectInputStream</td>
</tr>
</tbody></table>
</li>
<li><p>反序列化对象的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object readObject()</td>
<td>从ObjectInputStream读取一个对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject()：从ObjectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8serialVersionUID-amp-transient【应用】"><a href="#2-8serialVersionUID-amp-transient【应用】" class="headerlink" title="2.8serialVersionUID&amp;transient【应用】"></a>2.8serialVersionUID&amp;transient【应用】</h3><ul>
<li><p>serialVersionUID</p>
<ul>
<li>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题呢？<ul>
<li>会出问题，会抛出InvalidClassException异常</li>
</ul>
</li>
<li>如果出问题了，如何解决呢？<ul>
<li>重新序列化</li>
<li>给对象所属的类加一个serialVersionUID <ul>
<li>private static final long serialVersionUID = 42L;</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>transient</p>
<ul>
<li>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢？<ul>
<li>给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    private int age;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Student&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        write();</span></span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        oos.writeObject(s);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-Properties集合"><a href="#3-Properties集合" class="headerlink" title="3.Properties集合"></a>3.Properties集合</h2><h3 id="3-1Properties作为Map集合的使用【应用】"><a href="#3-1Properties作为Map集合的使用【应用】" class="headerlink" title="3.1Properties作为Map集合的使用【应用】"></a>3.1Properties作为Map集合的使用【应用】</h3><ul>
<li><p>Properties介绍</p>
<ul>
<li>是一个Map体系的集合类</li>
<li>Properties可以保存到流中或从流中加载</li>
<li>属性列表中的每个键及其对应的值都是一个字符串</li>
</ul>
</li>
<li><p>Properties基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Properties&lt;String,String&gt; prop = new Properties&lt;String,String&gt;(); //错误</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储元素</span></span><br><span class="line">        prop.put(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">            Object value = prop.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2Properties作为Map集合的特有方法【应用】"><a href="#3-2Properties作为Map集合的特有方法【应用】" class="headerlink" title="3.2Properties作为Map集合的特有方法【应用】"></a>3.2Properties作为Map集合的特有方法【应用】</h3><ul>
<li><p>特有方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object   setProperty(String key, String value)</td>
<td>设置集合的键和值，都是String类型，底层调用   Hashtable方法 put</td>
</tr>
<tr>
<td>String   getProperty(String key)</td>
<td>使用此属性列表中指定的键搜索属性</td>
</tr>
<tr>
<td>Set<String>   stringPropertyNames()</String></td>
<td>从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object setProperty(String key, String value)：设置集合的键和值，都是String类型，底层调用Hashtable方法put</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Object setProperty(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">                return put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Object put(Object key, Object value) &#123;</span></span><br><span class="line"><span class="comment">                return map.put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getProperty(String key)：使用此属性列表中指定的键搜索属性</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima001&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima0011&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(prop);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span></span><br><span class="line">        Set&lt;String&gt; names = prop.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : names) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line">            String value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3Properties和IO流相结合的方法【应用】"><a href="#3-3Properties和IO流相结合的方法【应用】" class="headerlink" title="3.3Properties和IO流相结合的方法【应用】"></a>3.3Properties和IO流相结合的方法【应用】</h3><ul>
<li><p>和IO流结合的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   load(InputStream inStream)</td>
<td>从输入字节流读取属性列表（键和元素对）</td>
</tr>
<tr>
<td>void   load(Reader reader)</td>
<td>从输入字符流读取属性列表（键和元素对）</td>
</tr>
<tr>
<td>void   store(OutputStream out, String comments)</td>
<td>将此属性列表（键和元素对）写入此   Properties表中，以适合于使用   load(InputStream)方法的格式写入输出字节流</td>
</tr>
<tr>
<td>void   store(Writer writer, String comments)</td>
<td>将此属性列表（键和元素对）写入此   Properties表中，以适合使用   load(Reader)方法的格式写入输出字符流</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//把集合中的数据保存到文件</span></span><br><span class="line"><span class="comment">//        myStore();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把文件中的数据加载到集合</span></span><br><span class="line">        myLoad();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void load(Reader reader)：</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void store(Writer writer, String comments)：</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4游戏次数案例【应用】"><a href="#3-4游戏次数案例【应用】" class="headerlink" title="3.4游戏次数案例【应用】"></a>3.4游戏次数案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>实现猜数字小游戏只能试玩3次，如果还想玩，提示：游戏试玩已结束，想玩请充值(<a href="http://www.itcast.cn/">www.itcast.cn</a>)</li>
</ul>
</li>
<li><p>分析步骤</p>
<ol>
<li><p>写一个游戏类，里面有一个猜数字的小游戏</p>
</li>
<li><p>写一个测试类，测试类中有main()方法，main()方法中写如下代码：</p>
<p>​    从文件中读取数据到Properties集合，用load()方法实现</p>
<pre><code>      文件已经存在：game.txt

      里面有一个数据值：count=0</code></pre>
<p>​    通过Properties集合获取到玩游戏的次数</p>
<p>​    判断次数是否到到3次了</p>
<pre><code>      如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)

      如果不到3次：

          次数+1，重新写回文件，用Properties的store()方法实现玩游戏</code></pre>
</li>
</ol>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从文件中读取数据到Properties集合，用load()方法实现</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties集合获取到玩游戏的次数</span></span><br><span class="line">        String count = prop.getProperty(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数是否到到3次了</span></span><br><span class="line">        <span class="keyword">if</span>(number &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;游戏试玩已结束，想玩请充值(www.itcast.cn)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//玩游戏</span></span><br><span class="line">            GuessNumber.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//次数+1，重新写回文件，用Properties的store()方法实现</span></span><br><span class="line">            number++;</span><br><span class="line">            prop.setProperty(<span class="string">&quot;count&quot;</span>,String.valueOf(number));</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">            prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Maven高级</title>
    <url>/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h2><h2 id="1-maven基础知识回顾"><a href="#1-maven基础知识回顾" class="headerlink" title="1.maven基础知识回顾"></a>1.maven基础知识回顾</h2><h3 id="1-1-maven介绍"><a href="#1-1-maven介绍" class="headerlink" title="1.1 maven介绍"></a>1.1 maven介绍</h3><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。</p>
<p>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。</p>
<p>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p>
<p>​              <img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%871.png"></p>
<a id="more"></a>

<h3 id="1-2-maven的仓库类型"><a href="#1-2-maven的仓库类型" class="headerlink" title="1.2 maven的仓库类型"></a>1.2 maven的仓库类型</h3><p>1.本地仓库 </p>
<p>2.远程仓库</p>
<p>①maven中央仓库（地址：<a href="http://repo2.maven.org/maven2/%EF%BC%89">http://repo2.maven.org/maven2/）</a></p>
<p>②maven私服（公司局域网内的仓库，需要自己搭建）</p>
<p>③其他公共远程仓库（例如apache提供的远程仓库，地址：<a href="http://repo.maven.apache.org/maven2/%EF%BC%89">http://repo.maven.apache.org/maven2/）</a></p>
<h3 id="1-3-maven常用命令"><a href="#1-3-maven常用命令" class="headerlink" title="1.3 maven常用命令"></a>1.3 maven常用命令</h3><p>clean：     清理</p>
<p>compile：编译</p>
<p>test：        测试</p>
<p>package：打包</p>
<p>install：    安装</p>
<h3 id="1-4-maven坐标书写规范"><a href="#1-4-maven坐标书写规范" class="headerlink" title="1.4 maven坐标书写规范"></a>1.4 maven坐标书写规范</h3><p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%872.png"></p>
<h3 id="1-5-maven的依赖范围"><a href="#1-5-maven的依赖范围" class="headerlink" title="1.5 maven的依赖范围"></a>1.5 maven的依赖范围</h3><table>
<thead>
<tr>
<th>依赖范围</th>
<th>对于编译classpath有效</th>
<th>对于测试classpath有效</th>
<th>对于运行时classpath有效</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>spring-core</td>
</tr>
<tr>
<td>test</td>
<td>-</td>
<td>Y</td>
<td>-</td>
<td>Junit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>-</td>
<td>Y</td>
<td>Y</td>
<td>JDBC驱动</td>
</tr>
<tr>
<td>system</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>本地的，maven仓库之外的类库</td>
</tr>
</tbody></table>
<h2 id="2-maven的依赖传递"><a href="#2-maven的依赖传递" class="headerlink" title="2. maven的依赖传递"></a>2. maven的依赖传递</h2><h3 id="2-1-什么是依赖传递"><a href="#2-1-什么是依赖传递" class="headerlink" title="2.1 什么是依赖传递"></a>2.1 什么是依赖传递</h3><p>在maven中，依赖是可以传递的，假设存在三个项目，分别是项目A，项目B以及项目C。假设C依赖B，B依赖A，那么我们可以根据maven项目依赖的特征不难推出项目C也依赖A。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%873.png"></p>
<p>​                         <img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%874.png"></p>
<p>通过上面的图可以看到，我们的web项目直接依赖了spring-webmvc，而spring-webmvc依赖了sping-aop、spring-beans等。最终的结果就是在我们的web项目中间接依赖了spring-aop、spring-beans等。</p>
<h3 id="2-2-什么是依赖冲突"><a href="#2-2-什么是依赖冲突" class="headerlink" title="2.2 什么是依赖冲突"></a>2.2 什么是依赖冲突</h3><p>由于依赖传递现象的存在， spring-webmvc 依赖 spirng-beans-4.2.4，spring-aop 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4 加入到了工程中，而我们希望 spring-beans-5.0.2 加入工程。这就造成了依赖冲突。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%875.png"></p>
<h3 id="2-3-如何解决依赖冲突"><a href="#2-3-如何解决依赖冲突" class="headerlink" title="2.3 如何解决依赖冲突"></a>2.3 如何解决依赖冲突</h3><p>1.使用maven提供的依赖调解原则 </p>
<pre><code>    第一声明者优先原则</code></pre>
<p>​     路径近者优先原则</p>
<p>2.排除依赖</p>
<p>3.锁定版本 </p>
<h3 id="2-4-依赖调节原则——第一声明者优先原则"><a href="#2-4-依赖调节原则——第一声明者优先原则" class="headerlink" title="2.4 依赖调节原则——第一声明者优先原则"></a>2.4 依赖调节原则——第一声明者优先原则</h3><p>在 pom 文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%876.png"></p>
<p>结论：通过上图可以看到，spring-aop和spring-webmvc都传递过来了spring-beans，但是因为spring-aop在前面，所以最终使用的spring-beans是由spring-aop传递过来的，而spring-webmvc传递过来的spring-beans则被忽略了。</p>
<h3 id="2-5-排除依赖"><a href="#2-5-排除依赖" class="headerlink" title="2.5 排除依赖"></a>2.5 排除依赖</h3><p>可以使用exclusions标签将传递过来的依赖排除出去。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%877.png"></p>
<h3 id="2-6-版本锁定"><a href="#2-6-版本锁定" class="headerlink" title="2.6 版本锁定"></a>2.6 版本锁定</h3><p>采用直接锁定版本的方法确定依赖jar包的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p>
<p>版本锁定的使用方式：</p>
<p>第一步：在dependencyManagement标签中锁定依赖的版本</p>
<p>第二步：在dependencies标签中声明需要导入的maven坐标</p>
<p>①在dependencyManagement标签中锁定依赖的版本</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%878.png"></p>
<p>②在dependencies标签中声明需要导入的maven坐标</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%879.png"></p>
<h2 id="3-基于maven构建SSM工程案例"><a href="#3-基于maven构建SSM工程案例" class="headerlink" title="3.基于maven构建SSM工程案例"></a>3.基于maven构建SSM工程案例</h2><h3 id="3-1-需求描述"><a href="#3-1-需求描述" class="headerlink" title="3.1 需求描述"></a>3.1 需求描述</h3><p>本案例基于maven构建 SSM（Spring+SpringMVC+Mybatis）工程，通过maven坐标进行依赖管理。最终实现根据 id 查询商品信息的功能。</p>
<h3 id="3-2-构建maven工程"><a href="#3-2-构建maven工程" class="headerlink" title="3.2 构建maven工程"></a>3.2 构建maven工程</h3><p>1.数据库环境搭建 </p>
<p>​    ①创建数据库ssmtest</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8710.png"></p>
<p>​    ②创建商品表item</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`createtime`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>2.maven项目构建 </p>
<p>①创建maven web项目</p>
<p>②配置pom.xml文件</p>
<p>③实现spring+mybatis整合</p>
<p>创建POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Float price;</span><br><span class="line"><span class="keyword">private</span> Date createtime;</span><br><span class="line"><span class="keyword">private</span> String detail;</span><br><span class="line"><span class="comment">//省略setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持久层DAO接口编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mapper映射文件编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.ssm.dao.ItemMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">         select * from item where id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>业务层Service编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> itemMapper.findById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring配置文件applicationContext-dao.xml编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>   <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span>       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/bean       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd       http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-4.0.xsd      http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd     http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- url --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmtest&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper配置 --&gt;</span> <span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为指定包下的所有实体类创建别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.pojo&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper扫描器 ：用来产生代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring配置文件applicationContext-service.xml编写</p>
<p>④加入springmvc相关配置</p>
<p>表现层Controller编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ItemService itemService;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/showItem/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showItem</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id, Model model)</span></span>&#123;</span><br><span class="line">        Item item = itemService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;item&quot;</span>,item);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml文件编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd       http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  配置视图解析器的前缀和后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix“ value=&quot;</span>/<span class="attr">WEB-INF</span>/<span class="attr">jsp</span>/&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jsp页面编写</p>
<p>配置web.xml文件</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8711.png"></p>
<h2 id="4-分模块构建maven工程"><a href="#4-分模块构建maven工程" class="headerlink" title="4.分模块构建maven工程"></a>4.分模块构建maven工程</h2><h3 id="4-1-分模块构建maven工程分析"><a href="#4-1-分模块构建maven工程分析" class="headerlink" title="4.1 分模块构建maven工程分析"></a>4.1 分模块构建maven工程分析</h3><p>在现实生活中，汽车厂家进行汽车生产时，由于整个生产过程非常复杂和繁琐，工作量非常大，所以车场都会将整个汽车的部件分开生产，最终再将生产好的部件进行组装，形成一台完整的汽车。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8712.png"></p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/Java%E8%B5%84%E6%96%99/4.framwork/4.maven%E9%AB%98%E7%BA%A7/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8713.png" alt="1559550904100"></p>
<h3 id="4-2-maven工程的继承"><a href="#4-2-maven工程的继承" class="headerlink" title="4.2 maven工程的继承"></a>4.2 maven工程的继承</h3><p>在Java语言中，类之间是可以继承的，通过继承，子类就可以引用父类中非private的属性和方法。同样，在maven工程之间也可以继承，子工程继承父工程后，就可以使用在父工程中引入的依赖。继承的目的是为了消除重复代码。</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8714.png"></p>
<h3 id="4-3-maven工程的聚合"><a href="#4-3-maven工程的聚合" class="headerlink" title="4.3 maven工程的聚合"></a>4.3 maven工程的聚合</h3><p>在maven工程的pom.xml文件中可以使用<modules>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。</modules></p>
<p>例如拆分后的maven工程有多个，如果要进行打包，就需要针对每个工程分别执行打包命令，操作起来非常繁琐。这时就可以使用<modules>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令，其下被聚合的工程就都会被打包了。</modules></p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8715.png"></p>
<h3 id="4-4-分模块构建maven工程具体实现"><a href="#4-4-分模块构建maven工程具体实现" class="headerlink" title="4.4 分模块构建maven工程具体实现"></a>4.4 分模块构建maven工程具体实现</h3><p>①父工程maven_parent构建</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">springmvc.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">springmvc.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--锁定jar版本--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- springMVC --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springmvc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②子工程maven_pojo构建</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③3.1子工程maven_dao构建</p>
<p>​    3.2 配置maven_dao工程的pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Mybatis和mybatis与spring的整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- MySql驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- druid数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- spring相关 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    3.3 创建DAO接口和Mapper映射文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.ssm.dao.ItemMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Item&quot;</span>&gt;</span></span><br><span class="line">        select * from item where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    3.4 在resources目录下创建spring配置文件applicationContext-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源信息，使用druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmtest&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置spring整合mybatis框架的SQLSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，为实体类创建别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mapper扫描器，用于产生代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure>

<p>④子工程maven_service构建</p>
<p>​    第一步：创建maven_service工程</p>
<p>​    第二步：配置maven_service工程的pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第三步：创建Service接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.dao.ItemMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 第四步：创建spring配置文件applicationContext-service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置扫描器，扫描Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事物注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑤子工程maven_web构建</p>
<p>​    第一步：创建maven_web工程，注意打包方式为war</p>
<p>​    第二步：配置maven_web工程的pom.xml文件</p>
 <properties>
​        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
​        <maven.compiler.source>1.8</maven.compiler.source>
​        <maven.compiler.target>1.8</maven.compiler.target>
​    </properties>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​    第三步：创建Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showItem/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id, Model model)</span></span>&#123;</span><br><span class="line">        Item item = itemService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;item&quot;</span>,item);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第四步：创建jsp页面</p>
<p>​    第五步：配置web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定Spring配置文件位置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--配置Spring框架启动时使用的监听器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置SpringMVC的前端控制器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第六步：创建springmvc配置文件springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置扫描器，扫描Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>项目整体结构如下：</p>
<p>1）maven_parent为父工程，其余工程为子工程，都继承父工程maven_parent</p>
<p>2）maven_parent工程将其子工程都进行了聚合 </p>
<p>3）子工程之间存在依赖关系，比如maven_dao依赖， maven_pojo、maven_service依赖maven_dao、 maven_web依赖maven_service</p>
<h2 id="5-maven私服"><a href="#5-maven私服" class="headerlink" title="5. maven私服"></a>5. maven私服</h2><h3 id="5-1-私服说明"><a href="#5-1-私服说明" class="headerlink" title="5.1 私服说明"></a>5.1 私服说明</h3><p>maven仓库分为本地仓库和远程仓库，而远程仓库又分为maven中央仓库、其他远程仓库和私服（私有服务器）。其中，中央仓库是由maven官方提供的，而私服就需要我们自己搭建了。</p>
<p>maven私服就是公司局域网内的maven远程仓库，每个员工的电脑上安装maven软件并且连接maven私服，程序员可以将自己开发的项目打成jar并发布到私服，其它项目组成员就可以从私服下载所依赖的jar。私服还充当一个代理服务器的角色，当私服上没有jar包时会从maven中央仓库自动下载。</p>
<p>nexus 是一个maven仓库管理器（其实就是一个软件），nexus可以充当maven私服，同时nexus还提供强大的仓库管理、构件搜索等功能。</p>
<h3 id="5-2-搭建maven私服"><a href="#5-2-搭建maven私服" class="headerlink" title="5.2 搭建maven私服"></a>5.2 搭建maven私服</h3><p>①下载nexus</p>
<p><a href="https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss">https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss</a></p>
<p>②安装nexus</p>
<p>将下载的压缩包进行解压，进入bin目录</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8717.png"></p>
<p>打开cmd窗口并进入上面bin目录下，执行nexus.bat install命令安装服务（注意需要以管理员身份运行cmd命令）</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8718.png"></p>
<p>③启动nexus</p>
<p>经过前面命令已经完成nexus的安装，可以通过如下两种方式启动nexus服务：</p>
<p>在Windows系统服务中启动nexus</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8719.png"></p>
<p>在命令行执行nexus.bat start命令启动nexus</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8720.png"></p>
<p>④访问nexus</p>
<p>启动nexus服务后，访问<a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a></p>
<p>点击右上角LogIn按钮，进行登录。使用默认用户名admin和密码admin123登录系统</p>
<p>登录成功后点击左侧菜单Repositories可以看到nexus内置的仓库列表（如下图）</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%87.png"></p>
<p>nexus仓库类型</p>
<p>通过前面的仓库列表可以看到，nexus默认内置了很多仓库，这些仓库可以划分为4种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p>
<p>①hosted，宿主仓库，部署自己的jar到这个类型的仓库，包括Releases和Snapshots两部分，Releases为公司内部发布版本仓库、 Snapshots为公司内部测试版本仓库 </p>
<p>②proxy，代理仓库，用于代理远程的公共仓库，如maven中央仓库，用户连接私服，私服自动去中央仓库下载jar包或者插件</p>
<p>③group，仓库组，用来合并多个hosted/proxy仓库，通常我们配置自己的maven连接仓库组</p>
<p>④virtual(虚拟)：兼容Maven1版本的jar或者插件</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8721.png"></p>
<p>nexus仓库类型与安装目录对应关系</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8722.png"></p>
<h3 id="5-3-将项目发布到maven私服"><a href="#5-3-将项目发布到maven私服" class="headerlink" title="5.3 将项目发布到maven私服"></a>5.3 将项目发布到maven私服</h3><p>maven私服是搭建在公司局域网内的maven仓库，公司内的所有开发团队都可以使用。例如技术研发团队开发了一个基础组件，就可以将这个基础组件打成jar包发布到私服，其他团队成员就可以从私服下载这个jar包到本地仓库并在项目中使用。</p>
<p>将项目发布到maven私服操作步骤如下：</p>
<ol>
<li>配置maven的settings.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​      注意：一定要在idea工具中引入的maven的settings.xml文件中配置 </p>
<ol start="2">
<li>配置项目的pom.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行mvn deploy命令</li>
</ol>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8723.png"></p>
<h3 id="5-4-从私服下载jar到本地仓库"><a href="#5-4-从私服下载jar到本地仓库" class="headerlink" title="5.4 从私服下载jar到本地仓库"></a>5.4 从私服下载jar到本地仓库</h3><p>前面我们已经完成了将本地项目打成jar包发布到maven私服，下面我们就需要从maven私服下载jar包到本地仓库。</p>
<p>具体操作步骤如下：</p>
<p>在maven的settings.xml文件中配置下载模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">			http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否下载releases构件--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否下载snapshots构件--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">		http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在maven的settings.xml文件中配置激活下载模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-将第三方jar安装到本地仓库和maven私服"><a href="#6-将第三方jar安装到本地仓库和maven私服" class="headerlink" title="6. 将第三方jar安装到本地仓库和maven私服"></a>6. 将第三方jar安装到本地仓库和maven私服</h2><p>在maven工程的pom.xml文件中配置某个jar包的坐标后，如果本地的maven仓库不存在这个jar包，maven工具会自动到配置的maven私服下载，如果私服中也不存在，maven私服就会从maven中央仓库进行下载。</p>
<p>但是并不是所有的jar包都可以从中央仓库下载到，比如常用的Oracle数据库驱动的jar包在中央仓库就不存在。此时需要到Oracle的官网下载驱动jar包，然后将此jar包通过maven命令安装到我们本地的maven仓库或者maven私服中，这样在maven项目中就可以使用maven坐标引用到此jar包了。</p>
<h3 id="6-1-将第三方jar安装到本地仓库"><a href="#6-1-将第三方jar安装到本地仓库" class="headerlink" title="6.1 将第三方jar安装到本地仓库"></a>6.1 将第三方jar安装到本地仓库</h3><p>①下载Oracle的jar包（略）</p>
<p>②mvn install命令进行安装</p>
<p>​      mvn install:install-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 – </p>
<p>​      Dversion=10.2.0.4.0 -Dpackaging=jar</p>
<p>③查看本地maven仓库，确认安装是否成功</p>
<p><img src="/2019/11/15/191115Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8724.png"></p>
<h3 id="6-2-将第三方jar安装到maven私服"><a href="#6-2-将第三方jar安装到maven私服" class="headerlink" title="6.2 将第三方jar安装到maven私服"></a>6.2 将第三方jar安装到maven私服</h3><p>①下载Oracle的jar包（略）</p>
<p>②在maven的settings.xml配置文件中配置第三方仓库的server信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③执行mvn deploy命令进行安装</p>
<p>​      mvn deploy:deploy-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 –</p>
<p>​      Dversion=10.2.0.4.0 -Dpackaging=jar –</p>
<p>​      Durl=<a href="http://localhost:8081/nexus/content/repositories/thirdparty/">http://localhost:8081/nexus/content/repositories/thirdparty/</a> -DrepositoryId=thirdparty</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>依赖传递</tag>
      </tags>
  </entry>
</search>
