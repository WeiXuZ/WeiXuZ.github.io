<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown常用语法</title>
    <url>/2019/10/08/Hexo/191008markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h2><ul>
<li><p># 一级标题</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1></li>
<li><p>## 二级标题</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></li>
<li><p>### 三级标题</p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><a id="more"></a></li>
<li><p>#### 四级标题</p>
<h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4></li>
<li><p>##### 五级标题</p>
<h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5></li>
<li><p>###### 六级标题</p>
<h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li>
</ul>
<h2 id="2-列表-注意空格"><a href="#2-列表-注意空格" class="headerlink" title="2.列表(注意空格)"></a>2.列表(注意空格)</h2><ul>
<li>* ：无序列表</li>
<li>+ ：无序列表</li>
<li>- ：无序列表</li>
</ul>
<ol>
<li>：有序列表</li>
<li>：有序列表</li>
<li>：有序列表<h2 id="3-换行"><a href="#3-换行" class="headerlink" title="3.换行"></a>3.换行</h2></li>
</ol>
<ul>
<li>按两次回车</li>
<li>html中的标签br</li>
<li>&lt;可识别的内容&gt;<h2 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h2></li>
<li>--- 连续输入三个-</li>
</ul>
<hr>
<ul>
<li>*** 连续输入三个*</li>
</ul>
<hr>
<h2 id="5-超链接"><a href="#5-超链接" class="headerlink" title="5.超链接"></a>5.超链接</h2><ul>
<li><p>[超链接名字](超链接的地址src)</p>
<p> <a href="zhaoweixu.com">WeiXu’blog</a></p>
<h2 id="6-粗体和斜体"><a href="#6-粗体和斜体" class="headerlink" title="6.粗体和斜体"></a>6.粗体和斜体</h2></li>
<li><p>*内容* ：一个*号代表 斜体</p>
<p> <em>这是斜体文字</em></p>
</li>
<li><p>**内容** ：两个*号代表 粗体</p>
<p> <strong>这是粗体文字</strong></p>
</li>
<li><p>***内容*** ：三个*号代表 斜体+粗体</p>
<p> <strong><em>这是斜体+粗体文字</em></strong></p>
<h2 id="7-引用"><a href="#7-引用" class="headerlink" title="7.引用"></a>7.引用</h2></li>
<li><p>&gt; 引用一段话</p>
</li>
</ul>
<blockquote>
<p>这是引用的话的示例</p>
</blockquote>
<ul>
<li>```代码``` 引用代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul&#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">ul li&#123;</span><br><span class="line">    margin-top: 15px; </span><br><span class="line">    font:12px 宋体;</span><br><span class="line">&#125;</span><br><span class="line">ul li a&#123;</span><br><span class="line">    text-decoration: none; </span><br><span class="line">    color: black; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="8-空格"><a href="#8-空格" class="headerlink" title="8.空格"></a>8.空格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;emsp;   &#x2F;&#x2F;敲一次就是缩进一个汉字的位置,两次就是两个</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>markdown常用语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo文章插入图片</title>
    <url>/2019/10/11/Hexo/191011hexo%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h2><h4 id="images文件夹"><a href="#images文件夹" class="headerlink" title="images文件夹"></a>images文件夹</h4><p>如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中,然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<p>例如:</p>
<p><code>![1.png](/images/1.png)</code></p>
<a id="more"></a>

<h2 id="方法二-推荐使用"><a href="#方法二-推荐使用" class="headerlink" title="方法二:(推荐使用)"></a>方法二:(推荐使用)</h2><h4 id="1-将-config-yml-文件中的-post-asset-folder-选项设为-“true”-。"><a href="#1-将-config-yml-文件中的-post-asset-folder-选项设为-“true”-。" class="headerlink" title="1.将 config.yml 文件中的 post_asset_folder 选项设为 “true” 。"></a>1.将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 “true” 。</h4><p>&emsp;&emsp;之后在你每次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建xxx.md时会自动创建一个同名资源文件夹xxx,你可以把跟这篇文章有关的图片资源放在关联文件夹中。</p>
<p><code>_config.ymlpost_asset_folder: true</code></p>
<h4 id="2-安装插件-在blog目录下输入下边的命令安装插件"><a href="#2-安装插件-在blog目录下输入下边的命令安装插件" class="headerlink" title="2.安装插件:在blog目录下输入下边的命令安装插件:"></a>2.安装插件:在blog目录下输入下边的命令安装插件:</h4><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p>
<h4 id="3-添加图片"><a href="#3-添加图片" class="headerlink" title="3.添加图片:"></a>3.添加图片:</h4><p>在想添加的位置写入<code>![](资源文件夹名字/图片名字.图片格式)</code>,例如:</p>
<p><code>![](xxx/1.png)</code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>资源文件夹</tag>
        <tag>图片标签插件</tag>
      </tags>
  </entry>
  <entry>
    <title>更换NexT主题后访问报错</title>
    <url>/2020/01/15/Hexo/200115%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E8%AE%BF%E9%97%AE%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>hexo博客更换NexT主题后访问显示报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro&#x2F;post.swig‘ as post</span><br><span class="line">_template %&#125;</span><br></pre></td></tr></table></figure>

<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<p>在博客目录下右键“Git Bash Here”输入以下命令即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>NexT主题点击日志报错</title>
    <url>/2020/01/16/Hexo/200116NexT%E4%B8%BB%E9%A2%98%E7%82%B9%E5%87%BB%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99-md/</url>
    <content><![CDATA[<p>NexT主题点击日志时报错：</p>
<p><img src="/2020/01/16/Hexo/200116NexT%E4%B8%BB%E9%A2%98%E7%82%B9%E5%87%BB%E6%97%A5%E5%BF%97%E6%8A%A5%E9%94%99-md/%E6%97%A5%E5%BF%97404.png"></p>
<p>打开主题目录下/layout/_macro/sidebar.swig</p>
<p>找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#123;&#123;url_for(theme.menu.archives.split(&#39;||&#39;)[0])| trim&#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>记得清除浏览器缓存</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>DeepFaceLab</title>
    <url>/2020/05/11/Soft/200511DeepFaceLab/</url>
    <content><![CDATA[<h2 id="训练参数设置："><a href="#训练参数设置：" class="headerlink" title="训练参数设置："></a>训练参数设置：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Enable autobackup? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：自动备份模型，一小时备份一次，开启会自动备份最近15次模型。<br>默认不开启 n 开启输入 y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Write preview history? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：每10秒自动在model / history文件夹生成一张预览图。<br>默认不开启 n 开启输入 y</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Target iteration (skip:unlimited&#x2F;default) :</span><br></pre></td></tr></table></figure>

<p>翻译：训练次数，推荐默认设置。<br>默认无限训练，开启此功能可以输入想要的数字。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Batch_size (?:help skip:0&#x2F;default) :</span><br></pre></td></tr></table></figure>

<p>翻译：Batch_size数值，大概可以理解为一次有多少图像被发送到神经网络训练。<br>取决于你的硬件性能，建议取大于4的数值，训练伊始可以设置低数值，收敛困难时增加数值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Feed faces to network sorted by yaw? (y&#x2F;n ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：偏航排序，data_dst和data_src素材种类一致可以开启。<br>默认开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flip faces randomly? (y&#x2F;n ?:help skip:y) :</span><br></pre></td></tr></table></figure>

<p>翻译：随机翻转脸部，data_src素材丰富时关闭会更自然，反之效果很差。<br>默认开启，建议开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Src face scale modifier % ( -30…30, ?:help skip:0) :</span><br></pre></td></tr></table></figure>

<p>翻译：data_src面部比例大小，输入数值会改变data_src脸部大小。<br>默认为不开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use lightweight autoencoder? (y&#x2F;n, ?:help skip:n) :</span><br></pre></td></tr></table></figure>

<p>翻译：是否使用轻量级编码模式，配置较低时使用，牺牲部分质量。<br>默认开启，建议不开启。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Use pixel loss? (y&#x2F;n, ?:help skip: n&#x2F;default ) :</span><br></pre></td></tr></table></figure>


<p>翻译：是否使用像素丢失。开启后能增强细节，比如牙齿或其它需要增强的细节，但不宜过量，可以在合成之前开启一段时间。否则将有可能使模型损坏。<br>默认不开启，建议后期开启。</p>
]]></content>
      <categories>
        <category>Soft</category>
      </categories>
  </entry>
  <entry>
    <title>Cmder的使用</title>
    <url>/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p><a href="https://cmder.net/">官网下载</a></p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/1.png"></p>
<p>下载分为mini版和完整版，完整版功能更为全面，可运行linux下的所有命令</p>
<a id="more"></a>

<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/2.png"></p>
<p>不需要安装，解压后可直接使用。</p>
<p>首次打开会有个警告弹窗，选择第一个即可：</p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/4.png"></p>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><ul>
<li>配置环境变量</li>
</ul>
<p>下载解压后将cmder.exe的所在目录添加到环境变量path中。</p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/3.path.png"></p>
<ul>
<li>配置右键快捷启动</li>
</ul>
<p>管理员身份运行cmd，执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cmder.exe &#x2F;REGISTER ALL  &#x2F;&#x2F; 设置任意地方鼠标右键启动Cmder</span><br></pre></td></tr></table></figure>

<p>之后可在任意地方点击右键使用cmder，会直接跳转到该路径下，而无需cd</p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/6.png"></p>
<ul>
<li><p>语言设置</p>
<p>Setting–&gt;General–&gt;Interface language</p>
</li>
</ul>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/9.png"></p>
<ul>
<li>命令提示符”λ”改为”$”</li>
</ul>
<p>cmder的光标是以”λ”开始的，我们可以修改为常用的$，找到cmder目录下的vendor文件夹中的clink.lua文件，修改local lambda值即可。</p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/7.png"></p>
<ul>
<li>设置中文编码</li>
</ul>
<p>打开setting，在Start-up下的environment中加入: <code>set LANG=zh_CN.UTF8</code></p>
<p><img src="/2020/11/22/Soft/201122Cmder%E7%9A%84%E4%BD%BF%E7%94%A8/8.png"></p>
<h3 id="3-快捷键"><a href="#3-快捷键" class="headerlink" title="3.快捷键"></a>3.快捷键</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tab       自动路径补全</span><br><span class="line">Ctrl+T    建立新页签</span><br><span class="line">Ctrl+W    关闭页签</span><br><span class="line">Ctrl+Tab  切换页签</span><br><span class="line">Alt+F4    关闭所有页签</span><br><span class="line">Alt+Shift+<span class="number">1</span> 开启cmd.exe</span><br><span class="line">Alt+Shift+<span class="number">2</span> 开启powershell.exe</span><br><span class="line">Alt+Shift+<span class="number">3</span> 开启powershell.exe (系统管理员权限)</span><br><span class="line">Ctrl+<span class="number">1</span>      快速切换到第<span class="number">1</span>个页签</span><br><span class="line">Ctrl+n      快速切换到第n个页签(n值无上限)</span><br><span class="line">Alt + enter 切换到全屏状态</span><br><span class="line">Ctr+r       历史命令搜索</span><br><span class="line">Tab         自动路径补全</span><br><span class="line">Ctrl+T      建立新页签</span><br><span class="line">Ctrl+W      关闭页签</span><br><span class="line">Ctrl+Tab    切换页签</span><br><span class="line">Alt+F4      关闭所有页签</span><br><span class="line">Alt+Shift+<span class="number">1</span> 开启cmd.exe</span><br><span class="line">Alt+Shift+<span class="number">2</span> 开启powershell.exe</span><br><span class="line">Alt+Shift+<span class="number">3</span> 开启powershell.exe (系统管理员权限)</span><br><span class="line">Ctrl+<span class="number">1</span>      快速切换到第<span class="number">1</span>个页签</span><br><span class="line">Ctrl+n      快速切换到第n个页签(n值无上限)</span><br><span class="line">Alt + enter 切换到全屏状态</span><br><span class="line">Ctr+r       历史命令搜索</span><br><span class="line">Win+Alt+P   开启工具选项视窗</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Soft</category>
      </categories>
  </entry>
  <entry>
    <title>Java基础入门</title>
    <url>/2019/08/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190802Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-Java概述"><a href="#1-Java概述" class="headerlink" title="1. Java概述"></a>1. Java概述</h2><h3 id="1-1-Java语言发展史"><a href="#1-1-Java语言发展史" class="headerlink" title="1.1 Java语言发展史"></a>1.1 Java语言发展史</h3><p>语言：人与人交流沟通的表达方式</p>
<p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p>
<p>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言</p>
<p>Java之父：詹姆斯·高斯林（James Gosling）</p>
<p>2009年，Sun公司被甲骨文公司收购，所以现在访问oracle官网即可：<a href="https://www.oracle.com/">https://www.oracle.com</a> </p>
<a id="more"></a>

<h3 id="1-2-Java语言跨平台原理"><a href="#1-2-Java语言跨平台原理" class="headerlink" title="1.2 Java语言跨平台原理"></a>1.2 Java语言跨平台原理</h3><p>Java程序并非是直接运行的，Java编译器将Java源程序编译成与平台无关的字节码文件(class文件)，然后由Java虚拟机（JVM）对字节码文件解释执行。所以在不同的操作系统下，只需安装不同的Java虚拟机即可实现java程序的跨平台。</p>
<h3 id="1-3-JRE和JDK"><a href="#1-3-JRE和JDK" class="headerlink" title="1.3 JRE和JDK"></a>1.3 JRE和JDK</h3><p>JVM（Java Virtual Machine），Java虚拟机</p>
<p>JRE（Java Runtime Environment），Java运行环境，包含了JVM和Java的核心类库（Java API）</p>
<p>JDK（Java Development Kit）称为Java开发工具，包含了JRE和开发工具</p>
<p>总结：我们只需安装JDK即可，它包含了java的运行环境和虚拟机。</p>
<h3 id="1-4-JDK的下载和安装"><a href="#1-4-JDK的下载和安装" class="headerlink" title="1.4 JDK的下载和安装"></a>1.4 JDK的下载和安装</h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1 下载"></a>1.4.1 下载</h4><p><a href="http://www.oracle.com/">Oracle官网</a></p>
<p><strong>注意</strong>：针对不同的操作系统，需要下载对应版本的JDK。</p>
<h4 id="1-4-2-安装"><a href="#1-4-2-安装" class="headerlink" title="1.4.2 安装"></a>1.4.2 安装</h4><p><strong>注意</strong>：安装路径不要包含中文或者空格等特殊字符（使用纯英文目录）。</p>
<h4 id="1-4-3-JDK的安装目录介绍"><a href="#1-4-3-JDK的安装目录介绍" class="headerlink" title="1.4.3 JDK的安装目录介绍"></a>1.4.3 JDK的安装目录介绍</h4><table>
<thead>
<tr>
<th>目录名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bin</td>
<td>该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td>
</tr>
<tr>
<td>conf</td>
<td>该路径下存放了JDK的相关配置文件。</td>
</tr>
<tr>
<td>include</td>
<td>该路径下存放了一些平台特定的头文件。</td>
</tr>
<tr>
<td>jmods</td>
<td>该路径下存放了JDK的各种模块。</td>
</tr>
<tr>
<td>legal</td>
<td>该路径下存放了JDK各模块的授权文档。</td>
</tr>
<tr>
<td>lib</td>
<td>该路径下存放了JDK工具的一些补充JAR包。</td>
</tr>
</tbody></table>
<h3 id="1-5-常用DOS命令"><a href="#1-5-常用DOS命令" class="headerlink" title="1.5 常用DOS命令"></a>1.5 常用DOS命令</h3><p>在接触集成开发环境之前，我们需要使用命令行窗口对java程序进行编译和运行，所以需要知道一些常用DOS命令。</p>
<p>1、打开命令行窗口的方式：win + r打开运行窗口，输入cmd，回车。</p>
<p>2、常用命令及其作用</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>盘符名称:</td>
<td>盘符切换。E:回车，表示切换到E盘。</td>
</tr>
<tr>
<td>dir</td>
<td>查看当前路径下的内容。</td>
</tr>
<tr>
<td>cd 目录</td>
<td>进入单级目录。cd itheima</td>
</tr>
<tr>
<td>cd ..</td>
<td>回退到上一级目录。</td>
</tr>
<tr>
<td>cd 目录1\目录2...</td>
<td>进入多级目录。cd itheima\JavaSE</td>
</tr>
<tr>
<td>cd \</td>
<td>回退到盘符目录。</td>
</tr>
<tr>
<td>cls</td>
<td>清屏。</td>
</tr>
<tr>
<td>exit</td>
<td>退出命令提示符窗口。</td>
</tr>
</tbody></table>
<h3 id="1-6-为什么配置环境变量"><a href="#1-6-为什么配置环境变量" class="headerlink" title="1.6 为什么配置环境变量"></a>1.6 为什么配置环境变量</h3><p>开发Java程序，需要使用JDK提供的开发工具（比如javac.exe、java.exe等命令），而这些工具在JDK的安装目录的bin目录下，如果不配置环境变量，那么这些命令只可以在该目录下执行。我们不可能把所有的java文件都放到JDK的bin目录下，所以配置环境变量的作用就是可以使bin目录下的java相关命令可以在任意目录下使用。  </p>
<h2 id="2-Java基础语法"><a href="#2-Java基础语法" class="headerlink" title="2. Java基础语法"></a>2. Java基础语法</h2><h4 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1 注释"></a>2.1 注释</h4><p>注释是对代码的解释和说明文字，可以提高程序的可读性，因此在程序中添加必要的注释文字十分重要。Java中的注释分为三种：</p>
<p>单行注释。单行注释的格式是使用//，从//开始至本行结尾的文字将作为注释文字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是单行注释文字</span></span><br></pre></td></tr></table></figure>

<p>多行注释。多行注释的格式是使用/* 和 */将一段较长的注释括起来。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">这是多行注释文字</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：多行注释不能嵌套使用。</span><br></pre></td></tr></table></figure>

<p>文档注释。文档注释以<code>/**</code>开始，以<code>*/</code>结束。（以后讲）</p>
<h4 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h4><p>关键字是指被java语言赋予了特殊含义的单词。</p>
<p>关键字的特点：</p>
<p>&emsp;&emsp;关键字的字母全部小写。</p>
<p>&emsp;&emsp;常用的代码编辑器对关键字都有高亮显示，比如现在我们能看到的public、class、static等。</p>
<h4 id="2-3-常量"><a href="#2-3-常量" class="headerlink" title="2.3 常量"></a>2.3 常量</h4><p>常量：在程序运行过程中，其值不可以发生改变的量。</p>
<p>Java中的常量分类：</p>
<ul>
<li><p>字符串常量  用双引号括起来的多个字符（可以包含0个、一个或多个），例如”a”、”abc”、”中国”等</p>
</li>
<li><p>整数常量  整数，例如：-10、0、88等</p>
</li>
<li><p>小数常量  小数，例如：-5.5、1.0、88.88等</p>
</li>
<li><p>字符常量  用单引号括起来的一个字符，例如：’a’、’5’、’B’、’中’等</p>
</li>
<li><p>布尔常量  布尔值，表示真假，只有两个值true和false</p>
</li>
<li><p>空常量  一个特殊的值，空值，值为null</p>
</li>
</ul>
<p>除空常量外，其他常量均可使用输出语句直接输出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">10</span>); <span class="comment">// 输出一个整数</span></span><br><span class="line">        System.out.println(<span class="number">5.5</span>); <span class="comment">// 输出一个小数</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span>); <span class="comment">// 输出一个字符</span></span><br><span class="line">        System.out.println(<span class="keyword">true</span>); <span class="comment">// 输出boolean值true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好&quot;</span>); <span class="comment">// 输出字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-数据类型"><a href="#2-4-数据类型" class="headerlink" title="2.4 数据类型"></a>2.4 数据类型</h4><h5 id="2-4-1-计算机存储单元"><a href="#2-4-1-计算机存储单元" class="headerlink" title="2.4.1 计算机存储单元"></a>2.4.1 计算机存储单元</h5><p>&emsp;&emsp;我们知道计算机是可以用来存储数据的，但是无论是内存还是硬盘，计算机存储设备的最小信息单元叫“位（bit）”，我们又称之为“比特位”，通常用小写的字母”b”表示。而计算机中最基本的存储单元叫“字节（byte）”，</p>
<p>通常用大写字母”””B”表示，字节是由连续的8个位组成。</p>
<p>除了字节外还有一些常用的存储单位，其换算单位如下：</p>
<p>1B（字节） = 8bit</p>
<p>1KB = 1024B</p>
<p>1MB = 1024KB</p>
<p>1GB = 1024MB</p>
<p>1TB = 1024GB</p>
<h5 id="2-4-2-Java中的数据类型"><a href="#2-4-2-Java中的数据类型" class="headerlink" title="2.4.2 Java中的数据类型"></a>2.4.2 Java中的数据类型</h5><p>&emsp;&emsp;Java是一个强类型语言，Java中的数据必须明确数据类型。在Java中的数据类型包括基本数据类型和引用数据类型两种。</p>
<p>Java中的基本数据类型：</p>
<table>
<thead>
<tr>
<th align="left">数据类型</th>
<th>关键字</th>
<th>内存占用</th>
<th align="left">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="left">整数类型</td>
<td>byte</td>
<td>1</td>
<td align="left">-128~127</td>
</tr>
<tr>
<td align="left"></td>
<td>short</td>
<td>2</td>
<td align="left">-32768~32767</td>
</tr>
<tr>
<td align="left"></td>
<td>int(默认)</td>
<td>4</td>
<td align="left">-2的31次方到2的31次方-1</td>
</tr>
<tr>
<td align="left"></td>
<td>long</td>
<td>8</td>
<td align="left">-2的63次方到2的63次方-1</td>
</tr>
<tr>
<td align="left">浮点类型</td>
<td>float</td>
<td>4</td>
<td align="left">负数：-3.402823E+38到-1.401298E-45                                                             正数：   1.401298E-45到3.402823E+38</td>
</tr>
<tr>
<td align="left"></td>
<td>double(默认)</td>
<td>8</td>
<td align="left">负数：-1.797693E+308到-4.9000000E-324                                              正数：4.9000000E-324   到1.797693E+308</td>
</tr>
<tr>
<td align="left">字符类型</td>
<td>char</td>
<td>2</td>
<td align="left">0-65535</td>
</tr>
<tr>
<td align="left">布尔类型</td>
<td>boolean</td>
<td>1</td>
<td align="left">true，false</td>
</tr>
</tbody></table>
<p>说明：</p>
<p>&emsp;&emsp;e+38表示是乘以10的38次方，同样，e-45表示乘以10的负45次方。</p>
<p>&emsp;&emsp;在java中整数默认是int类型，浮点数默认是double类型。</p>
<h4 id="2-5-变量"><a href="#2-5-变量" class="headerlink" title="2.5 变量"></a>2.5 变量</h4><h5 id="2-5-1-变量的定义"><a href="#2-5-1-变量的定义" class="headerlink" title="2.5.1 变量的定义"></a>2.5.1 变量的定义</h5><p>变量：在程序运行过程中，其值可以发生改变的量。</p>
<p>从本质上讲，变量是内存中的一小块区域，其值可以在一定范围内变化。</p>
<p>变量的定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名 = 初始化值; <span class="comment">// 声明变量并赋值</span></span><br><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先声明，后赋值（使用前赋值即可）</span></span><br><span class="line">数据类型 变量名;</span><br><span class="line">变量名 = 初始化值;</span><br><span class="line"><span class="keyword">double</span> money;</span><br><span class="line">money = <span class="number">55.5</span>;</span><br><span class="line">System.out.println(money);</span><br></pre></td></tr></table></figure>

<p>还可以在同一行定义多个同一种数据类型的变量，中间使用逗号隔开。但不建议使用这种方式，降低程序的可读性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>; <span class="comment">// 定义int类型的变量a和b，中间使用逗号隔开</span></span><br><span class="line">System.out.println(a);</span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c,d; <span class="comment">// 声明int类型的变量c和d，中间使用逗号隔开</span></span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">d = <span class="number">40</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure>

<p>变量的使用：通过变量名访问即可。</p>
<h5 id="2-5-2-使用变量时的注意事项"><a href="#2-5-2-使用变量时的注意事项" class="headerlink" title="2.5.2 使用变量时的注意事项"></a>2.5.2 使用变量时的注意事项</h5><ol>
<li>在同一对花括号中，变量名不能重复。</li>
<li>变量在使用之前，必须初始化（赋值）。</li>
<li>定义long类型的变量时，需要在整数的后面加L（大小写均可，建议大写）。因为整数默认是int类型，整数太大可能超出int范围。</li>
<li>定义float类型的变量时，需要在小数的后面加F（大小写均可，建议大写）。因为浮点数的默认类型是double， double的取值范围是大于float的，类型不兼容。</li>
</ol>
<h4 id="2-6-标识符"><a href="#2-6-标识符" class="headerlink" title="2.6 标识符"></a>2.6 标识符</h4><p>标识符是用户编程时使用的名字，用于给类、方法、变量、常量等命名。</p>
<p>Java中标识符的组成规则：</p>
<ul>
<li><p>由字母、数字、下划线“_”、美元符号“$”组成，第一个字符不能是数字。</p>
</li>
<li><p>不能使用java中的关键字作为标识符。    </p>
</li>
<li><p>标识符对大小写敏感（区分大小写）。</p>
</li>
</ul>
<p>Java中标识符的命名约定：</p>
<ul>
<li><p>小驼峰式命名：变量名、方法名 &emsp;(首字母小写，从第二个单词开始每个单词的首字母大写)</p>
</li>
<li><p>大驼峰式命名：类名&emsp;(每个单词的首字母都大写)</p>
</li>
<li><p>标识符的命名最好可以做到见名知意。例如：username、studentNumber等。</p>
</li>
</ul>
<h4 id="2-7-类型转换"><a href="#2-7-类型转换" class="headerlink" title="2.7 类型转换"></a>2.7 类型转换</h4><p>在Java中，一些数据类型之间是可以相互转换的。分为两种情况：自动类型转换和强制类型转换。</p>
<p>自动类型转换：</p>
<p>&emsp;&emsp;把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量。这种转换方式是自动的，直接书写即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num = <span class="number">10</span>; <span class="comment">// 将int类型的10直接赋值给double类型</span></span><br><span class="line">System.out.println(num); <span class="comment">// 输出10.0</span></span><br></pre></td></tr></table></figure>

<p>强制类型转换：把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量。</p>
<p>强制类型转换格式：目标数据类型 变量名 = (目标数据类型)值或者变量;</p>
<p>&emsp;&emsp;例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> num1 = <span class="number">5.5</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = (<span class="keyword">int</span>) num1; <span class="comment">// 将double类型的num1强制转换为int类型</span></span><br><span class="line">System.out.println(num2); <span class="comment">// 输出5（小数位直接舍弃）</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/08/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190802Java%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/1.png">说明：</p>
<ol>
<li>char类型的数据转换为int类型是按照码表中对应的int值进行计算的。比如在ASCII码表中，‘a’对应97。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(a); <span class="comment">// 将输出97</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>整数默认是int类型，byte、short和char类型数据参与运算均会自动转换为int类型。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">byte</span> b3 = b1 + b2; </span><br><span class="line"><span class="comment">// 第三行代码会报错，b1和b2会自动转换为int类型，计算结果为int，int赋值给byte需要强制类型转换。</span></span><br><span class="line"><span class="comment">// 修改为:</span></span><br><span class="line"><span class="keyword">int</span> num = b1 + b2;</span><br><span class="line"><span class="comment">// 或者：</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2);</span><br></pre></td></tr></table></figure>

<ul>
<li>boolean类型不能与其他基本数据类型相互转换。</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>运算符</title>
    <url>/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.1%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h2><h3 id="1-1-算术运算符（理解）"><a href="#1-1-算术运算符（理解）" class="headerlink" title="1.1 算术运算符（理解）"></a>1.1 算术运算符（理解）</h3><h4 id="1-1-1-运算符和表达式"><a href="#1-1-1-运算符和表达式" class="headerlink" title="1.1.1 运算符和表达式"></a>1.1.1 运算符和表达式</h4><p>运算符：对常量或者变量进行操作的符号</p>
<p>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。</p>
<p>​                    不同运算符连接的表达式体现的是不同类型的表达式。</p>
<p>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br></pre></td></tr></table></figure>

<p>  +：是运算符，并且是算术运算符。</p>
<p>  a + b：是表达式，由于+是算术运算符，所以这个表达式叫算术表达式。</p>
<a id="more"></a>

<h4 id="1-1-2-算术运算符"><a href="#1-1-2-算术运算符" class="headerlink" title="1.1.2 算术运算符"></a>1.1.2 算术运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>参看小学一年级</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>参看小学二年级，与“×”相同</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>参看小学二年级，与“÷”相同</td>
</tr>
<tr>
<td>%</td>
<td>取余</td>
<td>获取的是两个数据做除法的余数</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>/和%的区别：两个数据做除法，/取结果的商，%取结果的余数。</p>
<p>整数操作只能得到整数，要想得到小数，必须有浮点数参与运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">System.out.println(a / b); <span class="comment">// 输出结果3</span></span><br><span class="line">System.out.println(a % b); <span class="comment">// 输出结果1</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-字符的“-”操作"><a href="#1-1-3-字符的“-”操作" class="headerlink" title="1.1.3 字符的“+”操作"></a>1.1.3 字符的“+”操作</h4><p>char类型参与算术运算，使用的是计算机底层对应的十进制数值。需要我们记住三个字符对应的数值：</p>
<p>‘a’  –  97        a-z是连续的，所以’b’对应的数值是98，’c’是99，依次递加</p>
<p>‘A’  –  65        A-Z是连续的，所以’B’对应的数值是66，’C’是67，依次递加</p>
<p>‘0’  –  48        0-9是连续的，所以’1’对应的数值是49，’2’是50，依次递加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以通过使用字符与整数做算术运算，得出字符对应的数值是多少</span></span><br><span class="line"><span class="keyword">char</span> ch1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println(ch1 + <span class="number">1</span>); <span class="comment">// 输出98，97 + 1 = 98</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch2 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">System.out.println(ch2 + <span class="number">1</span>); <span class="comment">// 输出66，65 + 1 = 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch3 = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">System.out.println(ch3 + <span class="number">1</span>); <span class="comment">// 输出49，48 + 1 = 49</span></span><br></pre></td></tr></table></figure>

<p>算术表达式中包含不同的基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p>
<p>提升规则：</p>
<p>byte类型，short类型和char类型将被提升到int类型，不管是否有其他类型参与运算。</p>
<p>整个表达式的类型自动提升到与表达式中最高等级的操作数相同的类型</p>
<p>​       等级顺序：byte,short,char –&gt; int –&gt; long –&gt; float –&gt; double</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// byte b3 = b1 + b2; // 该行报错，因为byte类型参与算术运算会自动提示为int，int赋值给byte可能损失精度</span></span><br><span class="line"><span class="keyword">int</span> i3 = b1 + b2; <span class="comment">// 应该使用int接收</span></span><br><span class="line"><span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>) (b1 + b2); <span class="comment">// 或者将结果强制转换为byte类型</span></span><br><span class="line">-------------------------------</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> num2 = <span class="number">20.0</span>;</span><br><span class="line"><span class="keyword">double</span> num3 = num1 + num2; <span class="comment">// 使用double接收，因为num1会自动提升为double类型</span></span><br></pre></td></tr></table></figure>

<p>tips：正是由于上述原因，所以在程序开发中我们很少使用byte或者short类型定义整数。也很少会使用char类型定义字符，而使用字符串类型，更不会使用char类型做算术运算。</p>
<h4 id="1-1-4-字符串的“-”操作"><a href="#1-1-4-字符串的“-”操作" class="headerlink" title="1.1.4 字符串的“+”操作"></a>1.1.4 字符串的“+”操作</h4><p>当“+”操作中出现字符串时，这个”+”是字符串连接符，而不是算术运算。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;itheima&quot;</span>+ <span class="number">666</span>); <span class="comment">// 输出：itheima666</span></span><br></pre></td></tr></table></figure>

<p>在”+”操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行“+”操作时，从左到右逐个执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">99</span> + <span class="string">&quot;Java&quot;</span>); <span class="comment">// 输出：199Java</span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;Java&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 输出：3Java34</span></span><br><span class="line"><span class="comment">// 可以使用小括号改变运算的优先级 </span></span><br><span class="line">System.out.println(<span class="number">1</span> + <span class="number">2</span> + <span class="string">&quot;Java&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>)); <span class="comment">// 输出：3Java7</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-赋值运算符（应用）"><a href="#1-2-赋值运算符（应用）" class="headerlink" title="1.2 赋值运算符（应用）"></a>1.2 赋值运算符（应用）</h3><p>赋值运算符的作用是将一个表达式的值赋给左边，左边必须是可修改的，不能是常量。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=10，将10赋值给变量a</td>
</tr>
<tr>
<td>+=</td>
<td>加后赋值</td>
<td>a+=b，将a+b的值给a</td>
</tr>
<tr>
<td>-=</td>
<td>减后赋值</td>
<td>a-=b，将a-b的值给a</td>
</tr>
<tr>
<td>*=</td>
<td>乘后赋值</td>
<td>a*=b，将a×b的值给a</td>
</tr>
<tr>
<td>/=</td>
<td>除后赋值</td>
<td>a/=b，将a÷b的商给a</td>
</tr>
<tr>
<td>%=</td>
<td>取余后赋值</td>
<td>a%=b，将a÷b的余数给a</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>扩展的赋值运算符隐含了强制类型转换。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">10</span>;</span><br><span class="line">s = s + <span class="number">10</span>; <span class="comment">// 此行代码报出，因为运算中s提升为int类型，运算结果int赋值给short可能损失精度</span></span><br><span class="line"></span><br><span class="line">s += <span class="number">10</span>; <span class="comment">// 此行代码没有问题，隐含了强制类型转换，相当于 s = (short) (s + 10);</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-自增自减运算符（理解）"><a href="#1-3-自增自减运算符（理解）" class="headerlink" title="1.3 自增自减运算符（理解）"></a>1.3 自增自减运算符（理解）</h3><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>++</td>
<td>自增</td>
<td>变量的值加1</td>
</tr>
<tr>
<td>–</td>
<td>自减</td>
<td>变量的值减1</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    ++和– 既可以放在变量的后边，也可以放在变量的前边。</p>
<p>​    单独使用的时候， ++和– 无论是放在变量的前边还是后边，结果是一样的。</p>
<p>​    参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–。</p>
<p>​    参与操作的时候，如果放在变量的前边，先拿变量做++或者–，后拿变量参与操作。</p>
<p>​    最常见的用法：单独使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">i++; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;i:&quot;</span> + i); <span class="comment">// i:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">++j; <span class="comment">// 单独使用</span></span><br><span class="line">System.out.println(<span class="string">&quot;j:&quot;</span> + j); <span class="comment">// j:11</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++; <span class="comment">// 赋值运算，++在后边，所以是使用x原来的值赋值给y，x本身自增1</span></span><br><span class="line">System.out.println(<span class="string">&quot;x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y); <span class="comment">// x:11，y:10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = ++m; <span class="comment">// 赋值运算，++在前边，所以是使用m自增后的值赋值给n，m本身自增1</span></span><br><span class="line">System.out.println(<span class="string">&quot;m:&quot;</span> + m + <span class="string">&quot;, m:&quot;</span> + m); <span class="comment">// m:11，m:11</span></span><br></pre></td></tr></table></figure>

<p>练习：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = x++ + x++ + x++;</span><br><span class="line">System.out.println(y); <span class="comment">// y的值是多少？</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解析，三个表达式都是++在后，所以每次使用的都是自增前的值，但程序自左至右执行，所以第一次自增时，使用的是10进行计算，但第二次自增时，x的值已经自增到11了，所以第二次使用的是11，然后再次自增。。。</span></span><br><span class="line"><span class="comment">所以整个式子应该是：int y = 10 + 11 + 12;</span></span><br><span class="line"><span class="comment">输出结果为33。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">注意：通过此练习深刻理解自增和自减的规律，但实际开发中强烈建议不要写这样的代码！小心挨打！</span><br></pre></td></tr></table></figure>

<h3 id="1-4-关系运算符（应用）"><a href="#1-4-关系运算符（应用）" class="headerlink" title="1.4 关系运算符（应用）"></a>1.4 关系运算符（应用）</h3><p>关系运算符有6种关系，分别为小于、小于等于、大于、等于、大于等于、不等于。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>!=</td>
<td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;</td>
<td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&gt;=</td>
<td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;</td>
<td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td>
</tr>
<tr>
<td>&lt;=</td>
<td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td>
</tr>
</tbody></table>
<p>注意事项：</p>
<p>​    关系运算符的结果都是boolean类型，要么是true，要么是false。</p>
<p>​    千万不要把“==”误写成“=”，”==”是判断是否相等的关系，”=”是赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a != b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &gt; b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &gt;= b); <span class="comment">// false</span></span><br><span class="line">System.out.println(a &lt; b); <span class="comment">// true</span></span><br><span class="line">System.out.println(a &lt;= b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关系运算的结果肯定是boolean类型，所以也可以将运算结果赋值给boolean类型的变量</span></span><br><span class="line"><span class="keyword">boolean</span> flag = a &gt; b;</span><br><span class="line">System.out.println(flag); <span class="comment">// 输出false</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-逻辑运算符（应用）"><a href="#1-5-逻辑运算符（应用）" class="headerlink" title="1.5 逻辑运算符（应用）"></a>1.5 逻辑运算符（应用）</h3><p>逻辑运算符把各个运算的关系表达式连接起来组成一个复杂的逻辑表达式，以判断程序中的表达式是否成立，判断的结果是 true 或 false。</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>逻辑与</td>
<td>a&amp;b，a和b都是true，结果为true，否则为false</td>
</tr>
<tr>
<td>|</td>
<td>逻辑或</td>
<td>a|b，a和b都是false，结果为false，否则为true</td>
</tr>
<tr>
<td>^</td>
<td>逻辑异或</td>
<td>a^b，a和b结果不同为true，相同为false</td>
</tr>
<tr>
<td>!</td>
<td>逻辑非</td>
<td>!a，结果和a的结果正好相反</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义变量</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&amp; “与”，并且的关系，只要表达式中有一个值为false，结果即为false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &gt; k)); <span class="comment">//false &amp; false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &gt; k)); <span class="comment">//true &amp; false,输出false</span></span><br><span class="line">System.out.println((i &gt; j) &amp; (i &lt; k)); <span class="comment">//false &amp; true,输出false</span></span><br><span class="line">System.out.println((i &lt; j) &amp; (i &lt; k)); <span class="comment">//true &amp; true,输出true</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//| “或”，或者的关系，只要表达式中有一个值为true，结果即为true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &gt; k)); <span class="comment">//false | false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) | (i &gt; k)); <span class="comment">//true | false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) | (i &lt; k)); <span class="comment">//false | true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) | (i &lt; k)); <span class="comment">//true | true,输出true</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//^ “异或”，相同为false，不同为true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &gt; k)); <span class="comment">//false ^ false,输出false</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &gt; k)); <span class="comment">//true ^ false,输出true</span></span><br><span class="line">System.out.println((i &gt; j) ^ (i &lt; k)); <span class="comment">//false ^ true,输出true</span></span><br><span class="line">System.out.println((i &lt; j) ^ (i &lt; k)); <span class="comment">//true ^ true,输出false</span></span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//! “非”，取反</span></span><br><span class="line">System.out.println((i &gt; j)); <span class="comment">//false</span></span><br><span class="line">System.out.println(!(i &gt; j)); <span class="comment">//!false，,输出true</span></span><br></pre></td></tr></table></figure>

<h4 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h4><table>
<thead>
<tr>
<th>符号</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>短路与</td>
<td>作用和&amp;相同，但是有短路效果</td>
</tr>
<tr>
<td>||</td>
<td>短路或</td>
<td>作用和|相同，但是有短路效果</td>
</tr>
</tbody></table>
<p>在逻辑与运算中，只要有一个表达式的值为false，那么结果就可以判定为false了，没有必要将所有表达式的值都计算出来，短路与操作就有这样的效果，可以提高效率。同理在逻辑或运算中，一旦发现值为true，右边的表达式将不再参与运算。</p>
<ul>
<li>逻辑与&amp;，无论左边真假，右边都要执行。</li>
<li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行。</li>
<li>逻辑或|，无论左边真假，右边都要执行。</li>
<li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 两个表达都会运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">System.out.println((x++ &gt; <span class="number">4</span>) &amp;&amp; (y++ &gt; <span class="number">5</span>)); <span class="comment">// 左边已经可以确定结果为false，右边不参与运算</span></span><br><span class="line">System.out.println(x); <span class="comment">// 4</span></span><br><span class="line">System.out.println(y); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-三元运算符（理解）"><a href="#1-6-三元运算符（理解）" class="headerlink" title="1.6 三元运算符（理解）"></a>1.6 三元运算符（理解）</h3><p>三元运算符语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">关系表达式 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>解释：问号前面的位置是判断的条件，判断结果为boolean型，为true时调用表达式1，为false时调用表达式2。其逻辑为：如果条件表达式成立或者满足则执行表达式1，否则执行第二个。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a &gt; b ? a : b; <span class="comment">// 判断 a&gt;b 是否为真，如果为真取a的值，如果为假，取b的值</span></span><br></pre></td></tr></table></figure>

<p>三元运算符案例：</p>
<p>1、需求：动物园里有两只老虎，已知两只老虎的体重分别为180kg、200kg，请用程序实现判断两只老虎的体重是否相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1：定义两个变量用于保存老虎的体重，单位为kg，这里仅仅体现数值即可。</span></span><br><span class="line">		<span class="keyword">int</span> weight1 = <span class="number">180</span>;</span><br><span class="line">		<span class="keyword">int</span> weight2 = <span class="number">200</span>;	</span><br><span class="line">		<span class="comment">//2：用三元运算符实现老虎体重的判断，体重相同，返回true，否则，返回false。</span></span><br><span class="line">		<span class="keyword">boolean</span> b = weight1 == weight2 ? <span class="keyword">true</span> : <span class="keyword">false</span>;	</span><br><span class="line">		<span class="comment">//3：输出结果</span></span><br><span class="line">		System.out.println(<span class="string">&quot;b:&quot;</span> + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、需求：一座寺庙里住着三个和尚，已知他们的身高分别为150cm、210cm、165cm，请用程序实现获取这三个和尚的最高身高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//1：定义三个变量用于保存和尚的身高，单位为cm，这里仅仅体现数值即可。</span></span><br><span class="line">		<span class="keyword">int</span> height1 = <span class="number">150</span>;</span><br><span class="line">		<span class="keyword">int</span> height2 = <span class="number">210</span>;</span><br><span class="line">		<span class="keyword">int</span> height3 = <span class="number">165</span>;	</span><br><span class="line">		<span class="comment">//2：用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span></span><br><span class="line">		<span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;		</span><br><span class="line">		<span class="comment">//3：用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span></span><br><span class="line">		<span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;	</span><br><span class="line">		<span class="comment">//4：输出结果</span></span><br><span class="line">		System.out.println(<span class="string">&quot;maxHeight:&quot;</span> + maxHeight);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Scanner和if</title>
    <url>/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.2Scanner%E5%92%8Cif/</url>
    <content><![CDATA[<h2 id="1-数据输入（应用）"><a href="#1-数据输入（应用）" class="headerlink" title="1. 数据输入（应用）"></a>1. 数据输入（应用）</h2><p>我们可以通过 Scanner 类来获取用户的输入。使用步骤如下：</p>
<p>1、导包。Scanner 类在java.util包下，所以需要将该类导入。导包的语句需要定义在类的上面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br></pre></td></tr></table></figure>

<p>2、创建Scanner对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);<span class="comment">// 创建Scanner对象，sc表示变量名，其他均不可变</span></span><br></pre></td></tr></table></figure>

<p>3、接收数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = sc.nextInt(); <span class="comment">// 表示将键盘录入的值作为int数返回。</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//创建对象</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//接收数据</span></span><br><span class="line">		<span class="keyword">int</span> x = sc.nextInt();</span><br><span class="line">		<span class="comment">//输出数据</span></span><br><span class="line">		System.out.println(<span class="string">&quot;x:&quot;</span> + x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改写三个和尚案例，数据使用键盘录入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//身高未知，采用键盘录入实现。首先导包，然后创建对象。</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		<span class="comment">//键盘录入三个身高分别赋值给三个变量。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第一个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height1 = sc.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第二个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height2 = sc.nextInt();</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入第三个和尚的身高：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> height3 = sc.nextInt();</span><br><span class="line">		<span class="comment">//用三元运算符获取前两个和尚的较高身高值，并用临时身高变量保存起来。</span></span><br><span class="line">		<span class="keyword">int</span> tempHeight = height1 &gt; height2 ? height1 : height2;</span><br><span class="line">		<span class="comment">//用三元运算符获取临时身高值和第三个和尚身高较高值，并用最大身高变量保存。</span></span><br><span class="line">		<span class="keyword">int</span> maxHeight = tempHeight &gt; height3 ? tempHeight : height3;</span><br><span class="line">		<span class="comment">//输出结果。</span></span><br><span class="line">		System.out.println(<span class="string">&quot;这三个和尚中身高最高的是：&quot;</span> + maxHeight +<span class="string">&quot;cm&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-流程控制语句（应用）"><a href="#2-流程控制语句（应用）" class="headerlink" title="2. 流程控制语句（应用）"></a>2. 流程控制语句（应用）</h2><p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>
<h3 id="2-1-流程控制语句分类"><a href="#2-1-流程控制语句分类" class="headerlink" title="2.1 流程控制语句分类"></a>2.1 流程控制语句分类</h3><p>​    顺序结构</p>
<p>​    分支结构(if, switch)</p>
<p>​    循环结构(for, while, do…while)</p>
<h3 id="2-2-顺序结构"><a href="#2-2-顺序结构" class="headerlink" title="2.2 顺序结构"></a>2.2 顺序结构</h3><p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>
<p>顺序结构执行流程图：</p>
<p><img src="/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.2Scanner%E5%92%8Cif/1908031.png"></p>
<h3 id="2-3-分支结构之if语"><a href="#2-3-分支结构之if语" class="headerlink" title="2.3 分支结构之if语"></a>2.3 分支结构之if语</h3><h4 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体</p>
<p>③如果关系表达式的值为false就不执行语句体</p>
<p>④继续执行后面的语句内容</p>
<p><img src="/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.2Scanner%E5%92%8Cif/1908032.png"></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);	</span><br><span class="line">		<span class="comment">//定义两个变量</span></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;	</span><br><span class="line">		<span class="comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span></span><br><span class="line">		<span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a等于b&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span></span><br><span class="line">		<span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span>(a == c) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a等于c&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式的值</p>
<p>②如果关系表达式的值为true就执行语句体1</p>
<p>③如果关系表达式的值为false就执行语句体2</p>
<p>④继续执行后面的语句内容</p>
<p><img src="/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.2Scanner%E5%92%8Cif/1908033.png"></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);		</span><br><span class="line">		<span class="comment">//定义两个变量</span></span><br><span class="line">		<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">		b = <span class="number">5</span>;	</span><br><span class="line">		<span class="comment">//需求：判断a是否大于b，如果是，在控制台输出：a的值大于b，否则，在控制台输出：a的值不大于b</span></span><br><span class="line">		<span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a的值大于b&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;a的值不大于b&quot;</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if语句案例：奇偶数</p>
<p>需求：任意给出一个整数，请用程序实现判断该整数是奇数还是偶数，并在控制台输出该整数是奇数还是偶数。</p>
<p>分析：</p>
<p>​    ①为了体现任意给出一个整数，采用键盘录入一个数据</p>
<p>​    ②判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构</p>
<p>​    ③判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</p>
<p>​    ④根据判定情况，在控制台输出对应的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//为了体现任意给出一个整数，采用键盘录入一个数据。(导包，创建对象，接收数据)</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);		</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> number = sc.nextInt();	</span><br><span class="line">		<span class="comment">//判断整数是偶数还是奇数要分两种情况进行判断，使用if..else结构		</span></span><br><span class="line">		<span class="comment">//判断是否偶数需要使用取余运算符实现该功能 number % 2 == 0</span></span><br><span class="line">		<span class="comment">//根据判定情况，在控制台输出对应的内容</span></span><br><span class="line">		<span class="keyword">if</span>(number%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(number + <span class="string">&quot;是偶数&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(number + <span class="string">&quot;是奇数&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">格式：</span><br><span class="line"><span class="keyword">if</span> (关系表达式<span class="number">1</span>) &#123;</span><br><span class="line">    语句体<span class="number">1</span>;	</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (关系表达式<span class="number">2</span>) &#123;</span><br><span class="line">    语句体<span class="number">2</span>;	</span><br><span class="line">&#125; </span><br><span class="line">…</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行流程：</p>
<p>①首先计算关系表达式1的值</p>
<p>②如果值为true就执行语句体1；如果值为false就计算关系表达式2的值</p>
<p>③如果值为true就执行语句体2；如果值为false就计算关系表达式3的值</p>
<p>④…</p>
<p>⑤如果没有任何关系表达式为true，就执行语句体n+1。</p>
<p><img src="/2019/08/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190803.2Scanner%E5%92%8Cif/1908034.png"></p>
<p>示例：键盘录入一个星期数(1,2,…7)，输出对应的星期一，星期二，…星期日</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfDemo03</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">		<span class="comment">// 需求：键盘录入一个星期数(1,2,...7)，输出对应的星期一，星期二，...星期日</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个星期数(1-7)：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line">		<span class="keyword">if</span>(week == <span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期一&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">2</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期二&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">3</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期三&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">4</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期四&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">5</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期五&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(week == <span class="number">6</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期六&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;星期日&quot;</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">		System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>if语句格式3案例：</p>
<p>需求：小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p>
<p>分析：</p>
<p>​    ①小明的考试成绩未知，可以使用键盘录入的方式获取值</p>
<p>​    ②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p>
<p>​    ③为每种判断设置对应的条件</p>
<p>​    ④为每种判断设置对应的奖励</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IfTest02</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//小明的考试成绩未知，可以使用键盘录入的方式获取值</span></span><br><span class="line">		Scanner sc = <span class="keyword">new</span> Scanner(System.in);	</span><br><span class="line">		System.out.println(<span class="string">&quot;请输入一个分数：&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">		<span class="comment">//由于奖励种类较多，属于多种判断，采用if...else...if格式实现</span></span><br><span class="line">		<span class="comment">//为每种判断设置对应的条件</span></span><br><span class="line">		<span class="comment">//为每种判断设置对应的奖励	</span></span><br><span class="line">		<span class="comment">//数据测试：正确数据，边界数据，错误数据</span></span><br><span class="line">		<span class="keyword">if</span>(score&gt;<span class="number">100</span> || score&lt;<span class="number">0</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;你输入的分数有误&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">95</span> &amp;&amp; score&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;山地自行车一辆&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">90</span> &amp;&amp; score&lt;=<span class="number">94</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;游乐场玩一次&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span> &amp;&amp; score&lt;=<span class="number">89</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;变形金刚玩具一个&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;胖揍一顿&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2019/08/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190804%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><h3 id="1-1什么是数组"><a href="#1-1什么是数组" class="headerlink" title="1.1什么是数组"></a>1.1什么是数组</h3><p>​    数组就是存储数据长度固定的容器，存储多个数据的数据类型要一致。 </p>
<h3 id="1-2数组定义格式"><a href="#1-2数组定义格式" class="headerlink" title="1.2数组定义格式"></a>1.2数组定义格式</h3><h4 id="1-2-1第一种"><a href="#1-2-1第一种" class="headerlink" title="1.2.1第一种"></a>1.2.1第一种</h4><p>​    数据类型[] 数组名</p>
<p>​    示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr;        </span><br><span class="line"><span class="keyword">double</span>[] arr;      </span><br><span class="line"><span class="keyword">char</span>[] arr;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2第二种"><a href="#1-2-2第二种" class="headerlink" title="1.2.2第二种"></a>1.2.2第二种</h4><p>​    数据类型 数组名[]</p>
<p>​    示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[];</span><br><span class="line"><span class="keyword">double</span> arr[];</span><br><span class="line"><span class="keyword">char</span> arr[];</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-3数组动态初始化"><a href="#1-3数组动态初始化" class="headerlink" title="1.3数组动态初始化"></a>1.3数组动态初始化</h3><h4 id="1-3-1什么是动态初始化"><a href="#1-3-1什么是动态初始化" class="headerlink" title="1.3.1什么是动态初始化"></a>1.3.1什么是动态初始化</h4><p>​    数组动态初始化就是只给定数组的长度，由系统给出默认初始化值</p>
<h4 id="1-3-2动态初始化格式"><a href="#1-3-2动态初始化格式" class="headerlink" title="1.3.2动态初始化格式"></a>1.3.2动态初始化格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[数组长度];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3动态初始化格式详解"><a href="#1-3-3动态初始化格式详解" class="headerlink" title="1.3.3动态初始化格式详解"></a>1.3.3动态初始化格式详解</h4><ul>
<li>等号左边：<ul>
<li>int:数组的数据类型</li>
<li>[]:代表这是一个数组</li>
<li>arr:代表数组的名称</li>
</ul>
</li>
<li>等号右边：<ul>
<li>new:为数组开辟内存空间</li>
<li>int:数组的数据类型</li>
<li>[]:代表这是一个数组</li>
<li>5:代表数组的长度</li>
</ul>
</li>
</ul>
<h3 id="1-4数组元素访问"><a href="#1-4数组元素访问" class="headerlink" title="1.4数组元素访问"></a>1.4数组元素访问</h3><h4 id="1-4-1什么是索引"><a href="#1-4-1什么是索引" class="headerlink" title="1.4.1什么是索引"></a>1.4.1什么是索引</h4><p>​    每一个存储到数组的元素，都会自动的拥有一个编号，从0开始。</p>
<p>​    这个自动编号称为数组索引(index)，可以通过数组的索引访问到数组中的元素。     </p>
<h4 id="1-4-2访问数组元素格式"><a href="#1-4-2访问数组元素格式" class="headerlink" title="1.4.2访问数组元素格式"></a>1.4.2访问数组元素格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名[索引];</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3示例代码"><a href="#1-4-3示例代码" class="headerlink" title="1.4.3示例代码"></a>1.4.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组名</span></span><br><span class="line">        System.out.println(arr); <span class="comment">//[I@880ec60</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5内存分配"><a href="#1-5内存分配" class="headerlink" title="1.5内存分配"></a>1.5内存分配</h3><h4 id="1-5-1内存概述"><a href="#1-5-1内存概述" class="headerlink" title="1.5.1内存概述"></a>1.5.1内存概述</h4><p>​    内存是计算机中的重要原件，临时存储区域，作用是运行程序。</p>
<p>​    我们编写的程序是存放在硬盘中的，在硬盘中的程序是不会运行的。</p>
<p>​    必须放进内存中才能运行，运行完毕后会清空内存。 </p>
<p>​    Java虚拟机要运行程序，必须要对内存进行空间的分配和管理。 </p>
<h4 id="1-5-2java中的内存分配"><a href="#1-5-2java中的内存分配" class="headerlink" title="1.5.2java中的内存分配"></a>1.5.2java中的内存分配</h4><ul>
<li>目前我们只需要记住两个内存，分别是：栈内存和堆内存</li>
</ul>
<table>
<thead>
<tr>
<th>区域名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>寄存器</td>
<td>给CPU使用，和我们开发无关。</td>
</tr>
<tr>
<td>本地方法栈</td>
<td>JVM在使用操作系统功能的时候使用，和我们开发无关。</td>
</tr>
<tr>
<td>方法区</td>
<td>存储可以运行的class文件。</td>
</tr>
<tr>
<td>堆内存</td>
<td>存储对象或者数组，new来创建的，都存储在堆内存。</td>
</tr>
<tr>
<td>方法栈</td>
<td>方法运行时使用的内存，比如main方法运行，进入方法栈中执行。</td>
</tr>
</tbody></table>
<h3 id="1-6单个数组的内存图"><a href="#1-6单个数组的内存图" class="headerlink" title="1.6单个数组的内存图"></a>1.6单个数组的内存图</h3><h3 id="1-7多个数组的内存图"><a href="#1-7多个数组的内存图" class="headerlink" title="1.7多个数组的内存图"></a>1.7多个数组的内存图</h3><h3 id="1-8多个数组指向相同内存图"><a href="#1-8多个数组指向相同内存图" class="headerlink" title="1.8多个数组指向相同内存图"></a>1.8多个数组指向相同内存图</h3><h3 id="1-9数组静态初始化"><a href="#1-9数组静态初始化" class="headerlink" title="1.9数组静态初始化"></a>1.9数组静态初始化</h3><h4 id="1-9-1什么是静态初始化"><a href="#1-9-1什么是静态初始化" class="headerlink" title="1.9.1什么是静态初始化"></a>1.9.1什么是静态初始化</h4><p>​    在创建数组时，直接将元素确定    </p>
<h4 id="1-9-2静态初始化格式"><a href="#1-9-2静态初始化格式" class="headerlink" title="1.9.2静态初始化格式"></a>1.9.2静态初始化格式</h4><ul>
<li><p>完整版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = <span class="keyword">new</span> 数据类型[]&#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>简化版格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型[] 数组名 = &#123;元素<span class="number">1</span>,元素<span class="number">2</span>,...&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-9-3示例代码"><a href="#1-9-3示例代码" class="headerlink" title="1.9.3示例代码"></a>1.9.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组名</span></span><br><span class="line">        System.out.println(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-10数组操作的两个常见小问题"><a href="#1-10数组操作的两个常见小问题" class="headerlink" title="1.10数组操作的两个常见小问题"></a>1.10数组操作的两个常见小问题</h3><h4 id="1-10-1索引越界异常"><a href="#1-10-1索引越界异常" class="headerlink" title="1.10.1索引越界异常"></a>1.10.1索引越界异常</h4><ul>
<li><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数组长度为3，索引范围是0~2，但是我们却访问了一个3的索引。</p>
<p>程序运行后，将会抛出ArrayIndexOutOfBoundsException 数组越界异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。 </p>
</li>
<li><p>解决方案</p>
<p>将错误的索引修改为正确的索引范围即可！</p>
</li>
</ul>
<h4 id="1-10-2空指针异常"><a href="#1-10-2空指针异常" class="headerlink" title="1.10.2空指针异常"></a>1.10.2空指针异常</h4><ul>
<li><p>出现原因</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把null赋值给数组</span></span><br><span class="line">        arr = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>arr = null 这行代码，意味着变量arr将不会在保存数组的内存地址，也就不允许再操作数组了，因此运行的时候会抛出 NullPointerException 空指针异常。在开发中，数组的越界异常是不能出现的，一旦出现了，就必须要修改我们编写的代码。</p>
</li>
<li><p>解决方案</p>
<p>给数组一个真正的堆内存空间引用即可！</p>
</li>
</ul>
<h3 id="1-11数组遍历"><a href="#1-11数组遍历" class="headerlink" title="1.11数组遍历"></a>1.11数组遍历</h3><ul>
<li><p>数组遍历：就是将数组中的每个元素分别获取出来，就是遍历。遍历也是数组操作中的基石。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">		System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">2</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">		System.out.println(arr[<span class="number">4</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 以上代码是可以将数组中每个元素全部遍历出来，但是如果数组元素非常多，这种写法肯定不行，因此我们需要改造成循环的写法。数组的索引是 0 到 lenght-1 ，可以作为循环的条件出现。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用通用的遍历格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            System.out.println(arr[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-12数组最值"><a href="#1-12数组最值" class="headerlink" title="1.12数组最值"></a>1.12数组最值</h3><ul>
<li><p>最大值获取：从数组的所有元素中找出最大值。</p>
</li>
<li><p>实现思路：</p>
<ul>
<li>定义变量，保存数组0索引上的元素</li>
<li>遍历数组，获取出数组中的每个元素</li>
<li>将遍历到的元素和保存数组0索引上值的变量进行比较</li>
<li>如果数组元素的值大于了变量的值，变量记录住新的值</li>
<li>数组循环遍历结束，变量保存的就是数组中的最大值 </li>
</ul>
</li>
<li><p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量，用于保存最大值</span></span><br><span class="line">        <span class="comment">//取数组中第一个数据作为变量的初始值</span></span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//与数组中剩余的数据逐个比对，每次比对将最大值保存到变量中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; max) &#123;</span><br><span class="line">                max = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环结束后打印变量的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;max:&quot;</span> + max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>面向对象基础</title>
    <url>/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><h3 id="1-1-类和对象的理解【理解】"><a href="#1-1-类和对象的理解【理解】" class="headerlink" title="1.1 类和对象的理解【理解】"></a>1.1 类和对象的理解【理解】</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p>
<ul>
<li><p>类</p>
<ul>
<li>类的理解<ul>
<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>
<li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li>
<li>简单理解：类就是对现实事物的一种描述</li>
</ul>
</li>
<li>类的组成<ul>
<li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li>
<li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li>
</ul>
</li>
</ul>
</li>
<li><p>类和对象的关系</p>
<ul>
<li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li>
<li>对象：是能够看得到摸的着的真实存在的实体</li>
<li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li>
</ul>
<a id="more"></a>

</li>
</ul>
<h3 id="1-2-类的定义【应用】"><a href="#1-2-类的定义【应用】" class="headerlink" title="1.2 类的定义【应用】"></a>1.2 类的定义【应用】</h3><p>类的组成是由属性和行为两部分组成</p>
<ul>
<li>属性：在类中通过成员变量来体现（类中方法外的变量）</li>
<li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li>
</ul>
<p>类的定义步骤：</p>
<p>①定义类</p>
<p>②编写类的成员变量</p>
<p>③编写类的成员方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">	<span class="comment">// 成员变量</span></span><br><span class="line">	变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>；</span><br><span class="line">	变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">	…</span><br><span class="line">	<span class="comment">// 成员方法</span></span><br><span class="line">	方法<span class="number">1</span>;</span><br><span class="line">	方法<span class="number">2</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手机类：</span></span><br><span class="line"><span class="comment">        类名：</span></span><br><span class="line"><span class="comment">        手机(Phone)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员变量：</span></span><br><span class="line"><span class="comment">        品牌(brand)</span></span><br><span class="line"><span class="comment">        价格(price)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员方法：</span></span><br><span class="line"><span class="comment">        打电话(call)</span></span><br><span class="line"><span class="comment">        发短信(sendMessage)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-3-对象的使用【应用】"><a href="#1-3-对象的使用【应用】" class="headerlink" title="1.3 对象的使用【应用】"></a>1.3 对象的使用【应用】</h3><ul>
<li>创建对象的格式：<ul>
<li>类名 对象名 = new 类名();</li>
</ul>
</li>
<li>调用成员的格式：<ul>
<li>对象名.成员变量</li>
<li>对象名.成员方法();</li>
</ul>
</li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象</span></span><br><span class="line"><span class="comment">        格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">        范例：Phone p = new Phone();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用对象</span></span><br><span class="line"><span class="comment">        1：使用成员变量</span></span><br><span class="line"><span class="comment">            格式：对象名.变量名</span></span><br><span class="line"><span class="comment">            范例：p.brand</span></span><br><span class="line"><span class="comment">        2：使用成员方法</span></span><br><span class="line"><span class="comment">            格式：对象名.方法名()</span></span><br><span class="line"><span class="comment">            范例：p.call()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员方法</span></span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4-学生对象-练习【应用】"><a href="#1-4-学生对象-练习【应用】" class="headerlink" title="1.4 学生对象-练习【应用】"></a>1.4 学生对象-练习【应用】</h3><ul>
<li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li>
<li>分析：<ul>
<li>成员变量：姓名，年龄…</li>
<li>成员方法：学习，做作业…</li>
</ul>
</li>
<li>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHomework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图【理解】"><a href="#2-1-单个对象内存图【理解】" class="headerlink" title="2.1 单个对象内存图【理解】"></a>2.1 单个对象内存图【理解】</h3><ul>
<li>成员变量使用过程</li>
</ul>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/1.png" alt="1"></p>
<ul>
<li>成员方法调用过程</li>
</ul>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/2.png" alt="2"></p>
<h3 id="2-2-多个对象内存图【理解】"><a href="#2-2-多个对象内存图【理解】" class="headerlink" title="2.2 多个对象内存图【理解】"></a>2.2 多个对象内存图【理解】</h3><ul>
<li>成员变量使用过程</li>
</ul>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/3.png" alt="3"></p>
<ul>
<li>成员方法调用过程</li>
</ul>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/4.png" alt="4"></p>
<ul>
<li><p>总结：</p>
<p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p>
</li>
</ul>
<h3 id="2-3-多个对象指向相同内存图【理解】"><a href="#2-3-多个对象指向相同内存图【理解】" class="headerlink" title="2.3 多个对象指向相同内存图【理解】"></a>2.3 多个对象指向相同内存图【理解】</h3><p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/4.bmp" alt="4"></p>
<ul>
<li><p>总结</p>
<p>当多个对象的引用指向同一个内存空间（变量所记录的地址值是一样的）</p>
<p>只要有任何一个对象修改了内存中的数据，随后，无论使用哪一个对象进行数据获取，都是修改后的数据。</p>
</li>
</ul>
<h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别【理解】"><a href="#3-1-成员变量和局部变量的区别【理解】" class="headerlink" title="3.1 成员变量和局部变量的区别【理解】"></a>3.1 成员变量和局部变量的区别【理解】</h3><ul>
<li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li>
<li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li>
<li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li>
<li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li>
</ul>
<h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-private关键字【理解】"><a href="#4-1-private关键字【理解】" class="headerlink" title="4.1 private关键字【理解】"></a>4.1 private关键字【理解】</h3><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p>
<ul>
<li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p>
<ul>
<li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li>
<li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//调用show方法</span></span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-2-private的使用【应用】"><a href="#4-2-private的使用【应用】" class="headerlink" title="4.2 private的使用【应用】"></a>4.2 private的使用【应用】</h3><ul>
<li><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 </p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用set方法给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用get方法获取成员变量的值</span></span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;---&quot;</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-3-this关键字【应用】"><a href="#4-3-this关键字【应用】" class="headerlink" title="4.3 this关键字【应用】"></a>4.3 this关键字【应用】</h3><ul>
<li>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<ul>
<li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li>
<li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-this内存原理【理解】"><a href="#4-4-this内存原理【理解】" class="headerlink" title="4.4 this内存原理【理解】"></a>4.4 this内存原理【理解】</h3><ul>
<li><p>this代表当前调用方法的引用，哪个对象调用的方法，this就代表哪一个对象</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setName(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>图解：</p>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/5.png" alt="5"></p>
<p><img src="/2019/08/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190809%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/Java%E8%B5%84%E6%96%99/1.JavaSE/day07(%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80)/%E7%AC%94%E8%AE%B0/img/6.png" alt="6"></p>
</li>
</ul>
<h3 id="4-5-封装思想【理解】"><a href="#4-5-封装思想【理解】" class="headerlink" title="4.5 封装思想【理解】"></a>4.5 封装思想【理解】</h3><ol>
<li>封装概述<br>是面向对象三大特征之一（封装，继承，多态）<br>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</li>
<li>封装原则<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()/setXxx()方法</li>
<li>封装好处<br>通过方法来控制成员变量的操作，提高了代码的安全性<br>把代码用方法进行封装，提高了代码的复用性</li>
</ol>
<h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述【理解】"><a href="#5-1-构造方法概述【理解】" class="headerlink" title="5.1 构造方法概述【理解】"></a>5.1 构造方法概述【理解】</h3><p>构造方法是一种特殊的方法</p>
<ul>
<li><p>作用：创建对象   Student stu = <strong>new Student();</strong></p>
</li>
<li><p>格式：</p>
<p>public class 类名{</p>
<p>​        修饰符 类名( 参数 ) {</p>
<p>​        }</p>
<p>}</p>
</li>
<li><p>功能：主要是完成对象数据的初始化</p>
</li>
<li><p>示例代码：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-2-构造方法的注意事项【理解】"><a href="#5-2-构造方法的注意事项【理解】" class="headerlink" title="5.2 构造方法的注意事项【理解】"></a>5.2 构造方法的注意事项【理解】</h3><ul>
<li>构造方法的创建</li>
</ul>
<p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p>
<ul>
<li>构造方法的重载</li>
</ul>
<p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p>
<ul>
<li>推荐的使用方式</li>
</ul>
<p>无论是否使用，都手工书写无参数构造方法</p>
<ul>
<li>重要功能！</li>
</ul>
<p>可以使用带参构造，为成员变量进行初始化</p>
<ul>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-3-标准类制作【应用】"><a href="#5-3-标准类制作【应用】" class="headerlink" title="5.3 标准类制作【应用】"></a>5.3 标准类制作【应用】</h3><ul>
<li>需求：定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 </li>
<li>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象并为其成员变量赋值的两种方式</span></span><br><span class="line"><span class="comment">        1:无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line"><span class="comment">        2:使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2019/08/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190819.1%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h2><h3 id="1-1-继承的实现（掌握）"><a href="#1-1-继承的实现（掌握）" class="headerlink" title="1.1 继承的实现（掌握）"></a>1.1 继承的实现（掌握）</h3><ul>
<li><p>继承的概念</p>
<ul>
<li>继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，以及追加属性和方法</li>
</ul>
</li>
<li><p>实现继承的格式</p>
<ul>
<li><p>继承通过extends实现</p>
</li>
<li><p>格式：class 子类 extends 父类 { } </p>
<ul>
<li><p>举例：class Dog extends Animal { }</p>
<a id="more"></a>
</li>
</ul>
</li>
</ul>
</li>
<li><p>继承带来的好处</p>
<ul>
<li>继承可以让类与类之间产生关系，子父类关系，产生子父类后，子类则可以使用父类中非私有的成员。</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        Fu f = <span class="keyword">new</span> Fu();</span><br><span class="line">        f.show();</span><br><span class="line"></span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        z.method();</span><br><span class="line">        z.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-继承的好处和弊端（理解）"><a href="#1-2-继承的好处和弊端（理解）" class="headerlink" title="1.2 继承的好处和弊端（理解）"></a>1.2 继承的好处和弊端（理解）</h3><ul>
<li>继承好处<ul>
<li>提高了代码的复用性(多个类相同的成员可以放到同一个类中)</li>
<li>提高了代码的维护性(如果方法的代码需要修改，修改一处即可)</li>
</ul>
</li>
<li>继承弊端<ul>
<li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li>
</ul>
</li>
<li>继承的应用场景：<ul>
<li>使用继承，需要考虑类与类之间是否存在is..a的关系，不能盲目使用继承<ul>
<li>is..a的关系：谁是谁的一种，例如：老师和学生是人的一种，那人就是父类，学生和老师就是子类</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-继承中的成员访问特点"><a href="#2-继承中的成员访问特点" class="headerlink" title="2. 继承中的成员访问特点"></a>2. 继承中的成员访问特点</h2><h3 id="2-1-继承中变量的访问特点（掌握）"><a href="#2-1-继承中变量的访问特点（掌握）" class="headerlink" title="2.1 继承中变量的访问特点（掌握）"></a>2.1 继承中变量的访问特点（掌握）</h3><p>在子类方法中访问一个变量，采用的是就近原则。</p>
<ol>
<li>子类局部范围找</li>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ol>
<ul>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">        z.show();	<span class="comment">// 输出show方法中的局部变量30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-super（掌握）"><a href="#2-2-super（掌握）" class="headerlink" title="2.2 super（掌握）"></a>2.2 super（掌握）</h3><ul>
<li>this&amp;super关键字：<ul>
<li>this：代表本类对象的引用</li>
<li>super：代表父类存储空间的标识(可以理解为父类对象引用)</li>
</ul>
</li>
<li>this和super的使用分别<ul>
<li>成员变量：<ul>
<li>this.成员变量    -   访问本类成员变量</li>
<li>super.成员变量 -   访问父类成员变量</li>
</ul>
</li>
<li>成员方法：<ul>
<li>this.成员方法  - 访问本类成员方法</li>
<li>super.成员方法 - 访问父类成员方法</li>
</ul>
</li>
</ul>
</li>
<li>构造方法：<ul>
<li>this(…)  -  访问本类构造方法</li>
<li>super(…)  -  访问父类构造方法</li>
</ul>
</li>
</ul>
<h3 id="2-3-继承中构造方法的访问特点（理解）"><a href="#2-3-继承中构造方法的访问特点（理解）" class="headerlink" title="2.3 继承中构造方法的访问特点（理解）"></a>2.3 继承中构造方法的访问特点（理解）</h3><p><strong>注意：子类中所有的构造方法默认都会访问父类中无参的构造方法</strong></p>
<p>​    子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化，原因在于，每一个子类构造方法的第一条语句默认都是：super()</p>
<p><strong>问题：如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 通过使用super关键字去显示的调用父类的带参构造方法</span><br><span class="line">2. 在父类中自己提供一个无参构造方法</span><br></pre></td></tr></table></figure>

<p><strong>推荐方案：</strong></p>
<p>​    自己给出无参构造方法</p>
<h3 id="2-4-继承中成员方法的访问特点（掌握）"><a href="#2-4-继承中成员方法的访问特点（掌握）" class="headerlink" title="2.4 继承中成员方法的访问特点（掌握）"></a>2.4 继承中成员方法的访问特点（掌握）</h3><p>通过子类对象访问一个方法</p>
<ol>
<li>子类成员范围找</li>
<li>父类成员范围找</li>
<li>如果都没有就报错(不考虑父亲的父亲…)</li>
</ol>
<h3 id="2-5-super内存图（理解）"><a href="#2-5-super内存图（理解）" class="headerlink" title="2.5 super内存图（理解）"></a>2.5 super内存图（理解）</h3><ul>
<li><p>对象在堆内存中，会单独存在一块super区域，用来存放父类的数据 </p>
<p><img src="/2019/08/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190819.1%E7%BB%A7%E6%89%BF/1.%E7%BB%A7%E6%89%BF.png"></p>
</li>
</ul>
<h3 id="2-6-方法重写（掌握）"><a href="#2-6-方法重写（掌握）" class="headerlink" title="2.6 方法重写（掌握）"></a>2.6 方法重写（掌握）</h3><ul>
<li>1、方法重写概念<ul>
<li>子类出现了和父类中一模一样的方法声明（方法名一样，参数列表也必须一样）</li>
</ul>
</li>
<li>2、方法重写的应用场景<ul>
<li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</li>
</ul>
</li>
<li>3、Override注解<ul>
<li>用来检测当前的方法，是否是重写的方法，起到【校验】的作用</li>
</ul>
</li>
</ul>
<h3 id="2-7-方法重写的注意事项（掌握）"><a href="#2-7-方法重写的注意事项（掌握）" class="headerlink" title="2.7 方法重写的注意事项（掌握）"></a>2.7 方法重写的注意事项（掌握）</h3><ul>
<li>方法重写的注意事项</li>
</ul>
<ol>
<li>私有方法不能被重写(父类私有成员子类是不能继承的)</li>
<li>子类方法访问权限不能更低(public &gt; 默认 &gt; 私有)</li>
</ol>
<ul>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu中show()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fu中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 编译【出错】，子类不能重写父类私有的方法*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中show()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* 编译【出错】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 编译【通过】，子类重写父类方法的时候，访问权限需要大于等于父类 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Zi中method()方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8-Java中继承的注意事项（掌握）"><a href="#2-8-Java中继承的注意事项（掌握）" class="headerlink" title="2.8. Java中继承的注意事项（掌握）"></a>2.8. Java中继承的注意事项（掌握）</h3><ul>
<li><p>Java中继承的注意事项</p>
<ol>
<li>Java中类只支持单继承，不支持多继承<ul>
<li>错误范例：class A extends B, C { }</li>
</ul>
</li>
<li>Java中类支持多层继承</li>
</ol>
</li>
<li><p>多层继承示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爷爷爱喝酒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Granddad</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爸爸爱抽烟&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;妈妈爱跳舞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 此时，Son类中就同时拥有drink方法以及smoke方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-继承练习"><a href="#3-继承练习" class="headerlink" title="3. 继承练习"></a>3. 继承练习</h2><h3 id="3-1-老师和学生（应用）"><a href="#3-1-老师和学生（应用）" class="headerlink" title="3.1 老师和学生（应用）"></a>3.1 老师和学生（应用）</h3><ul>
<li><p>需求：定义老师类和学生类，然后写代码测试；最后找到老师类和学生类当中的共性内容，抽取出一个父类，用继承的方式改写代码，并进行测试 </p>
</li>
<li><p>步骤：</p>
<p>①定义老师类(姓名，年龄，教书())</p>
<p>②定义学生类(姓名，年龄，学习())</p>
<p>③定义测试类，写代码测试</p>
<p>④共性抽取父类，定义人类(姓名，年龄)</p>
<p>⑤定义老师类，继承人类，并给出自己特有方法：教书()</p>
<p>⑥定义学生类，继承人类，并给出自己特有方法：学习()</p>
<p>⑦定义测试类，写代码测试</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用爱成就每一位学员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name,age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建老师类对象并进行测试</span></span><br><span class="line">        Teacher t1 = <span class="keyword">new</span> Teacher();</span><br><span class="line">        t1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        t1.setAge(<span class="number">30</span>);</span><br><span class="line">        System.out.println(t1.getName() + <span class="string">&quot;,&quot;</span> + t1.getAge());</span><br><span class="line">        t1.teach();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Teacher t2 = <span class="keyword">new</span> Teacher(<span class="string">&quot;风清扬&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        System.out.println(t2.getName() + <span class="string">&quot;,&quot;</span> + t2.getAge());</span><br><span class="line">        t2.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建学生类对象测试</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>，<span class="number">23</span>)；</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        s.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-猫和狗（-应用）"><a href="#3-2-猫和狗（-应用）" class="headerlink" title="3.2 猫和狗（ 应用）"></a>3.2 猫和狗（ 应用）</h3><ul>
<li><p>需求：请采用继承的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>分析：</p>
<p>①猫：</p>
<p>​    成员变量：姓名，年龄</p>
<p>​    构造方法：无参，带参</p>
<p>​    成员方法：get/set方法，抓老鼠()</p>
<p>②狗：</p>
<p>​    成员变量：姓名，年龄</p>
<p>​    构造方法：无参，带参</p>
<p>​    成员方法：get/set方法，看门()</p>
<p>③共性：</p>
<p>​    成员变量：姓名，年龄；构造方法：无参，带参；成员方法：get/set方法</p>
</li>
<li><p>步骤：</p>
<p>1、定义动物类(Animal)</p>
<p>​    【成员变量：姓名，年龄】【 构造方法：无参，带参】【成员方法：get/set方法】</p>
<p>2、定义猫类(Cat)，继承动物类</p>
<p>​    【构造方法：无参，带参】【成员方法：抓老鼠() 】</p>
<p>3、定义狗类(Dog)，继承动物类</p>
<p>​    【构造方法：无参，带参】【成员方法：看门() 】</p>
<p>4、定义测试类(AnimalDemo)，写代码测试</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗看门&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建猫类对象并进行测试</span></span><br><span class="line">        Cat c1 = <span class="keyword">new</span> Cat();</span><br><span class="line">        c1.setName(<span class="string">&quot;加菲猫&quot;</span>);</span><br><span class="line">        c1.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(c1.getName() + <span class="string">&quot;,&quot;</span> + c1.getAge());</span><br><span class="line">        c1.catchMouse();</span><br><span class="line"></span><br><span class="line">        Cat c2 = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲猫&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(c2.getName() + <span class="string">&quot;,&quot;</span> + c2.getAge());</span><br><span class="line">        c2.catchMouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>修饰符</title>
    <url>/2019/08/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190819.2%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="1-1-package（了解）"><a href="#1-1-package（了解）" class="headerlink" title="1.1 package（了解）"></a>1.1 package（了解）</h3><ul>
<li><p>1、包的概念</p>
<ul>
<li>包就是文件夹，用来管理类文件的</li>
</ul>
</li>
<li><p>2、包的定义格式</p>
<ul>
<li>package 包名; (多级包用.分开)</li>
<li>例如：package com.heima.demo;</li>
</ul>
</li>
<li><p>3、带包编译&amp;带包运行</p>
<ul>
<li><p>带包编译：javac –d . 类名.java</p>
<ul>
<li>例如：javac  -d  . com.heima.demo.HelloWorld.java</li>
</ul>
</li>
<li><p>带包运行：java 包名+类名</p>
<ul>
<li><p>例如：java com.heima.demo.HelloWorld</p>
<a id="more"></a>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-2-import（理解）"><a href="#1-2-import（理解）" class="headerlink" title="1.2 import（理解）"></a>1.2 import（理解）</h3><ul>
<li><p>导包的意义</p>
<p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了</p>
<p>为了简化带包的操作，Java就提供了导包的功能</p>
</li>
<li><p>导包的格式</p>
<p>格式：import 包名;</p>
<p>范例：import java.util.Scanner;</p>
</li>
<li><p>示例代码（没有使用导包，创建的Scanner对象）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 没有导包，创建Scnaner对象</span></span><br><span class="line">        java.util.Scanner sc = <span class="keyword">new</span> java.util.Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>示例代码（使用导包后，创建的Scanner对象）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 没有导包，创建Scnaner对象</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-权限修饰符（理解）"><a href="#1-3-权限修饰符（理解）" class="headerlink" title="1.3 权限修饰符（理解）"></a>1.3 权限修饰符（理解）</h3><p><img src="/2019/08/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190819.2%E4%BF%AE%E9%A5%B0%E7%AC%A6/1.%E4%BF%AE%E9%A5%B0%E7%AC%A6.png"></p>
<h3 id="1-4-final（应用）"><a href="#1-4-final（应用）" class="headerlink" title="1.4 final（应用）"></a>1.4 final（应用）</h3><ul>
<li>fianl关键字的作用<ul>
<li>final代表最终的意思，可以修饰成员方法，成员变量，类</li>
</ul>
</li>
<li>final修饰类、方法、变量的效果  <ul>
<li>fianl修饰类：该类不能被继承（不能有子类，但是可以有父类）</li>
<li>final修饰方法：该方法不能被重写</li>
<li>final修饰变量：表明该变量是一个常量，不能再次赋值</li>
</ul>
</li>
</ul>
<h3 id="1-5-final修饰局部变量（理解）"><a href="#1-5-final修饰局部变量（理解）" class="headerlink" title="1.5 final修饰局部变量（理解）"></a>1.5 final修饰局部变量（理解）</h3><ul>
<li><p>fianl修饰基本数据类型变量</p>
<ul>
<li>final 修饰指的是基本类型的数据值不能发生改变</li>
</ul>
</li>
<li><p>final修饰引用数据类型变量  </p>
<ul>
<li><p>final 修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的</p>
</li>
<li><p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Student s = <span class="keyword">new</span> Student(<span class="number">23</span>);</span><br><span class="line">  	s = <span class="keyword">new</span> Student(<span class="number">24</span>);  <span class="comment">// 错误</span></span><br><span class="line"> 	s.setAge(<span class="number">24</span>);  <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-6-static（应用）"><a href="#1-6-static（应用）" class="headerlink" title="1.6 static（应用）"></a>1.6 static（应用）</h3><ul>
<li>static的概念<ul>
<li>static关键字是静态的意思，可以修饰【成员方法】，【成员变量】</li>
</ul>
</li>
<li>static修饰的特点 <ol>
<li>被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li>
<li>可以通过类名调用当然，也可以通过对象名调用<strong>【推荐使用类名调用】</strong></li>
</ol>
</li>
<li>示例代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name; <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String university; <span class="comment">//学校	共享数据！所以设计为静态！</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age + <span class="string">&quot;,&quot;</span> + university);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 为对象的共享数据赋值</span></span><br><span class="line">        Student.university = <span class="string">&quot;传智大学&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">30</span>;</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.name = <span class="string">&quot;风清扬&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">33</span>;</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7-static访问特点（掌握）"><a href="#1-7-static访问特点（掌握）" class="headerlink" title="1.7 static访问特点（掌握）"></a>1.7 static访问特点（掌握）</h3><ul>
<li>static的访问特点<ul>
<li>非静态的成员方法<ul>
<li>能访问静态的成员变量</li>
<li>能访问非静态的成员变量</li>
<li>能访问静态的成员方法</li>
<li>能访问非静态的成员方法</li>
</ul>
</li>
<li>静态的成员方法<ul>
<li>能访问静态的成员变量</li>
<li>能访问静态的成员方法</li>
</ul>
</li>
<li>总结成一句话就是：<ul>
<li><strong>静态成员方法只能访问静态成员</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2019/08/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190820.1%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<h2 id="1-多态"><a href="#1-多态" class="headerlink" title="1.多态"></a>1.多态</h2><h3 id="1-1多态的概述（记忆）"><a href="#1-1多态的概述（记忆）" class="headerlink" title="1.1多态的概述（记忆）"></a>1.1多态的概述（记忆）</h3><ul>
<li><p>什么是多态</p>
<p>​    同一个对象，在不同时刻表现出来的不同形态</p>
</li>
<li><p>多态的前提</p>
<ul>
<li><p>要有继承或实现关系</p>
</li>
<li><p>要有方法的重写</p>
</li>
<li><p>要有父类引用指向子类对象</p>
<a id="more"></a>

</li>
</ul>
</li>
</ul>
<h3 id="1-2多态中的成员访问特点（记忆）"><a href="#1-2多态中的成员访问特点（记忆）" class="headerlink" title="1.2多态中的成员访问特点（记忆）"></a>1.2多态中的成员访问特点（记忆）</h3><ul>
<li><p>成员访问特点</p>
<ul>
<li><p>成员变量</p>
<p>​    编译看父类，运行看父类</p>
</li>
<li><p>成员方法</p>
<p>​    编译看父类，运行看子类</p>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li><p>动物类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>猫类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> weight = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫捉迷藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//有父类引用指向子类对象</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line"></span><br><span class="line">        System.out.println(a.age);</span><br><span class="line"><span class="comment">//        System.out.println(a.weight);</span></span><br><span class="line"></span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//        a.playGame();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-3多态的好处和弊端（记忆）"><a href="#1-3多态的好处和弊端（记忆）" class="headerlink" title="1.3多态的好处和弊端（记忆）"></a>1.3多态的好处和弊端（记忆）</h3><ul>
<li><p>好处</p>
<p>​    提高程序的扩展性。定义方法时候，使用父类型作为参数，在使用的时候，使用具体的子类型参与操作</p>
</li>
<li><p>弊端</p>
<p>​    不能使用子类的特有成员</p>
</li>
</ul>
<h3 id="1-4多态中的转型（应用）"><a href="#1-4多态中的转型（应用）" class="headerlink" title="1.4多态中的转型（应用）"></a>1.4多态中的转型（应用）</h3><ul>
<li><p>向上转型</p>
<p>​    父类引用指向子类对象就是向上转型</p>
</li>
<li><p>向下转型</p>
<p>​    格式：子类型 对象名 = (子类型)父类引用;</p>
</li>
<li><p>代码演示</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫捉迷藏&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多态</span></span><br><span class="line">        <span class="comment">//向上转型</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//      a.playGame();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//向下转型</span></span><br><span class="line">        Cat c = (Cat)a;</span><br><span class="line">        c.eat();</span><br><span class="line">        c.playGame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5多态的案例（应用）"><a href="#1-5多态的案例（应用）" class="headerlink" title="1.5多态的案例（应用）"></a>1.5多态的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    请采用多态的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>狗类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建猫类对象进行测试</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName() + <span class="string">&quot;,&quot;</span> + a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName() + <span class="string">&quot;,&quot;</span> + a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>抽象类</title>
    <url>/2019/08/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190820.2%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="1-1抽象类的概述（理解）"><a href="#1-1抽象类的概述（理解）" class="headerlink" title="1.1抽象类的概述（理解）"></a>1.1抽象类的概述（理解）</h3><p>​    当我们在做子类共性功能抽取时，有些方法在父类中并没有具体的体现，这个时候就需要抽象类了！</p>
<p>​    在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类！</p>
<h3 id="1-2抽象类的特点（记忆）"><a href="#1-2抽象类的特点（记忆）" class="headerlink" title="1.2抽象类的特点（记忆）"></a>1.2抽象类的特点（记忆）</h3><ul>
<li><p>抽象类和抽象方法必须使用 abstract 关键字修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象方法的定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p>
</li>
<li><p>抽象类不能实例化</p>
<p>​    抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，这叫抽象类多态</p>
</li>
<li><p>抽象类的子类</p>
<p>​    要么重写抽象类中的所有抽象方法</p>
<p>​    要么是抽象类</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-3抽象类的成员特点（记忆）"><a href="#1-3抽象类的成员特点（记忆）" class="headerlink" title="1.3抽象类的成员特点（记忆）"></a>1.3抽象类的成员特点（记忆）</h3><ul>
<li><p>成员的特点</p>
<ul>
<li>成员变量<ul>
<li>既可以是变量</li>
<li>也可以是常量</li>
</ul>
</li>
<li>构造方法<ul>
<li>空参构造</li>
<li>有参构造</li>
</ul>
</li>
<li>成员方法<ul>
<li>抽象方法</li>
<li>普通方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String city = <span class="string">&quot;北京&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        age = <span class="number">40</span>;</span><br><span class="line">        System.out.println(age);</span><br><span class="line"><span class="comment">//        city = &quot;上海&quot;;</span></span><br><span class="line">        System.out.println(city);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4抽象类的案例（应用）"><a href="#1-4抽象类的案例（应用）" class="headerlink" title="1.4抽象类的案例（应用）"></a>1.4抽象类的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    请采用抽象类的思想实现猫和狗的案例，并在测试类中进行测试</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>狗类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，按照多态的方式</span></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>接口</title>
    <url>/2019/08/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190820.3%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h2><h3 id="1-1接口的概述（理解）"><a href="#1-1接口的概述（理解）" class="headerlink" title="1.1接口的概述（理解）"></a>1.1接口的概述（理解）</h3><p>​    接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用。</p>
<p>​    Java中的接口更多的体现在对行为的抽象！</p>
<h3 id="1-2接口的特点（记忆）"><a href="#1-2接口的特点（记忆）" class="headerlink" title="1.2接口的特点（记忆）"></a>1.2接口的特点（记忆）</h3><ul>
<li><p>接口用关键字interface修饰</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>类实现接口用implements表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不能实例化</p>
<p>​    接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态。</p>
<p>​    多态的形式：具体类多态，抽象类多态，接口多态。 </p>
</li>
<li><p>接口的子类</p>
<p>​    要么重写接口中的所有抽象方法</p>
<p>​    要么子类也是抽象类</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-3接口的成员特点（记忆）"><a href="#1-3接口的成员特点（记忆）" class="headerlink" title="1.3接口的成员特点（记忆）"></a>1.3接口的成员特点（记忆）</h3><ul>
<li><p>成员特点</p>
<ul>
<li><p>成员变量</p>
<p>​     只能是常量<br>​     默认修饰符：public static final</p>
</li>
<li><p>构造方法</p>
<p>​    没有，因为接口主要是扩展功能的，而没有具体存在</p>
</li>
<li><p>成员方法</p>
<p>​    只能是抽象方法</p>
<p>​    默认修饰符：public abstract</p>
<p>​    关于接口中的方法，JDK8和JDK9中有一些新特性，后面再讲解</p>
</li>
</ul>
</li>
<li><p>代码演示</p>
<ul>
<li>接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    public static final int num3 = 30;</span></span><br><span class="line">    <span class="keyword">int</span> num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public Inter() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void show() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InterImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Inter i = <span class="keyword">new</span> InterImpl();</span><br><span class="line"><span class="comment">//        i.num = 20;</span></span><br><span class="line">        System.out.println(i.num);</span><br><span class="line"><span class="comment">//        i.num2 = 40;</span></span><br><span class="line">        System.out.println(i.num2);</span><br><span class="line">        System.out.println(Inter.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4接口的案例（应用）"><a href="#1-4接口的案例（应用）" class="headerlink" title="1.4接口的案例（应用）"></a>1.4接口的案例（应用）</h3><ul>
<li><p>案例需求</p>
<p>​    对猫和狗进行训练，他们就可以跳高了，这里加入跳高功能。</p>
<p>​    请采用抽象类和接口来实现猫狗案例，并在测试类中进行测试。</p>
</li>
<li><p>代码实现</p>
<ul>
<li>动物类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>跳高接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>猫类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象，调用方法</span></span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        j.jump();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        a.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        a.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line"><span class="comment">//        a.jump();</span></span><br><span class="line"></span><br><span class="line">        a = <span class="keyword">new</span> Cat(<span class="string">&quot;加菲&quot;</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.getName()+<span class="string">&quot;,&quot;</span>+a.getAge());</span><br><span class="line">        a.eat();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        c.setName(<span class="string">&quot;加菲&quot;</span>);</span><br><span class="line">        c.setAge(<span class="number">5</span>);</span><br><span class="line">        System.out.println(c.getName()+<span class="string">&quot;,&quot;</span>+c.getAge());</span><br><span class="line">        c.eat();</span><br><span class="line">        c.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5类和接口的关系（记忆）"><a href="#1-5类和接口的关系（记忆）" class="headerlink" title="1.5类和接口的关系（记忆）"></a>1.5类和接口的关系（记忆）</h3><ul>
<li><p>类与类的关系</p>
<p>​    继承关系，只能单继承，但是可以多层继承</p>
</li>
<li><p>类与接口的关系</p>
<p>​    实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口</p>
</li>
<li><p>接口与接口的关系</p>
<p>​    继承关系，可以单继承，也可以多继承</p>
</li>
</ul>
<h3 id="1-6抽象类和接口的区别（记忆）"><a href="#1-6抽象类和接口的区别（记忆）" class="headerlink" title="1.6抽象类和接口的区别（记忆）"></a>1.6抽象类和接口的区别（记忆）</h3><ul>
<li><p>成员区别</p>
<ul>
<li><p>抽象类</p>
<p>​    变量,常量；有构造方法；有抽象方法,也有非抽象方法</p>
</li>
<li><p>接口</p>
<p>​    常量；抽象方法</p>
</li>
</ul>
</li>
<li><p>关系区别</p>
<ul>
<li><p>类与类</p>
<p>​    继承，单继承</p>
</li>
<li><p>类与接口</p>
<p>​    实现，可以单实现，也可以多实现</p>
</li>
<li><p>接口与接口</p>
<p>​    继承，单继承，多继承</p>
</li>
</ul>
</li>
<li><p>设计理念区别</p>
<ul>
<li><p>抽象类</p>
<p>​    对类抽象，包括属性、行为</p>
</li>
<li><p>接口</p>
<p>​    对行为抽象，主要是行为</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-综合案例"><a href="#2-综合案例" class="headerlink" title="2.综合案例"></a>2.综合案例</h2><h3 id="2-1案例需求（理解）"><a href="#2-1案例需求（理解）" class="headerlink" title="2.1案例需求（理解）"></a>2.1案例需求（理解）</h3><p>​    我们现在有乒乓球运动员和篮球运动员，乒乓球教练和篮球教练。</p>
<p>​    为了出国交流，跟乒乓球相关的人员都需要学习英语。</p>
<p>​    请用所学知识分析，这个案例中有哪些具体类，哪些抽象类，哪些接口，并用代码实现。</p>
<p><img src="/2019/08/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190820.3%E6%8E%A5%E5%8F%A3/1.%E6%8E%A5%E5%8F%A3%E8%BF%90%E5%8A%A8%E5%91%98.png"></p>
<h3 id="2-2代码实现（应用）"><a href="#2-2代码实现（应用）" class="headerlink" title="2.2代码实现（应用）"></a>2.2代码实现（应用）</h3><ul>
<li>抽象人类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象运动员类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>抽象教练类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>学英语接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>蓝球教练</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasketballCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球教练教如何运球和投篮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球教练吃羊肉，喝羊奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>乒乓球教练</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PingPangCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练教如何发球和接球&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练吃小白菜，喝大米粥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球教练说英语&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>乒乓球运动员</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PingPangPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员学习如何发球和接球&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员吃大白菜，喝小米粥&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员说英语&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>篮球运动员</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasketballPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球运动员学习如何运球和投篮&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;篮球运动员吃牛肉，喝牛奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>内部类</title>
    <url>/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.1%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="1-参数传递"><a href="#1-参数传递" class="headerlink" title="1. 参数传递"></a>1. 参数传递</h2><h3 id="1-1-类名作为形参和返回值（应用）"><a href="#1-1-类名作为形参和返回值（应用）" class="headerlink" title="1.1 类名作为形参和返回值（应用）"></a>1.1 类名作为形参和返回值（应用）</h3><ul>
<li><p>1、类名作为方法的形参</p>
<p>方法的形参是类名，其实需要的是该类的对象</p>
<p>实际传递的是该对象的【地址值】</p>
</li>
<li><p>2、类名作为方法的返回值</p>
<p>方法的返回值是类名，其实返回的是该类的对象</p>
<p>实际传递的，也是该对象的【地址值】</p>
<a id="more"></a>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CatOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useCat</span><span class="params">(Cat c)</span> </span>&#123; <span class="comment">//Cat c = new Cat();</span></span><br><span class="line">        c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        CatOperator co = <span class="keyword">new</span> CatOperator();</span><br><span class="line">        Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">        co.useCat(c);</span><br><span class="line"></span><br><span class="line">        Cat c2 = co.getCat(); <span class="comment">//new Cat()</span></span><br><span class="line">        c2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-抽象类作为形参和返回值（理解）"><a href="#1-2-抽象类作为形参和返回值（理解）" class="headerlink" title="1.2 抽象类作为形参和返回值（理解）"></a>1.2 抽象类作为形参和返回值（理解）</h3><ul>
<li><p>抽象类作为形参和返回值</p>
<ul>
<li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li>
<li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useAnimal</span><span class="params">(Animal a)</span> </span>&#123; <span class="comment">//Animal a = new Cat();</span></span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">getAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        AnimalOperator ao = <span class="keyword">new</span> AnimalOperator();</span><br><span class="line">        Animal a = <span class="keyword">new</span> Cat();</span><br><span class="line">        ao.useAnimal(a);</span><br><span class="line"></span><br><span class="line">        Animal a2 = ao.getAnimal(); <span class="comment">//new Cat()</span></span><br><span class="line">        a2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3-接口名作为形参和返回值（理解）"><a href="#1-3-接口名作为形参和返回值（理解）" class="headerlink" title="1.3 接口名作为形参和返回值（理解）"></a>1.3 接口名作为形参和返回值（理解）</h3><ul>
<li><p>接口作为形参和返回值</p>
<ul>
<li>方法的形参是接口名，其实需要的是该接口的实现类对象</li>
<li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useJumpping</span><span class="params">(Jumpping j)</span> </span>&#123; <span class="comment">//Jumpping j = new Cat();</span></span><br><span class="line">        j.jump();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jumpping <span class="title">getJumpping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumppingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建操作类对象，并调用方法</span></span><br><span class="line">        JumppingOperator jo = <span class="keyword">new</span> JumppingOperator();</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        jo.useJumpping(j);</span><br><span class="line"></span><br><span class="line">        Jumpping j2 = jo.getJumpping(); <span class="comment">//new Cat()</span></span><br><span class="line">        j2.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-内部类"><a href="#2-内部类" class="headerlink" title="2. 内部类"></a>2. 内部类</h2><h3 id="2-1-内部类的基本使用（理解）"><a href="#2-1-内部类的基本使用（理解）" class="headerlink" title="2.1 内部类的基本使用（理解）"></a>2.1 内部类的基本使用（理解）</h3><ul>
<li><p>内部类概念</p>
<ul>
<li>在一个类中定义一个类。举例：在一个类A的内部定义一个类B，类B就被称为内部类</li>
</ul>
</li>
<li><p>内部类定义格式</p>
<ul>
<li><p>格式&amp;举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	格式：</span></span><br><span class="line"><span class="comment">    class 外部类名&#123;</span></span><br><span class="line"><span class="comment">    	修饰符 class 内部类名&#123;</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    	&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>内部类的访问特点 </p>
<ul>
<li>内部类可以直接访问外部类的成员，包括私有</li>
<li>外部类要访问内部类的成员，必须创建对象</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    内部类访问特点：</span></span><br><span class="line"><span class="comment">        内部类可以直接访问外部类的成员，包括私有</span></span><br><span class="line"><span class="comment">        外部类要访问内部类的成员，必须创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-成员内部类（理解）"><a href="#2-2-成员内部类（理解）" class="headerlink" title="2.2 成员内部类（理解）"></a>2.2 成员内部类（理解）</h3><ul>
<li><p>成员内部类的定义位置</p>
<ul>
<li>在类中方法，跟成员变量是一个位置</li>
</ul>
</li>
<li><p>外界创建成员内部类格式</p>
<ul>
<li>格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象;</li>
<li>举例：Outer.Inner oi = new Outer().new Inner();</li>
</ul>
</li>
<li><p>成员内部类的推荐使用方案</p>
<ul>
<li>将一个类，设计为内部类的目的，大多数都是不想让外界去访问，所以内部类的定义应该私有化，私有化之后，再提供一个可以让外界调用的方法，方法内部创建内部类对象并调用。</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Outer.Inner oi = new Outer().new Inner();</span></span><br><span class="line">		<span class="comment">//oi.show();</span></span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        o.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-局部内部类（理解）"><a href="#2-3-局部内部类（理解）" class="headerlink" title="2.3 局部内部类（理解）"></a>2.3 局部内部类（理解）</h3><ul>
<li><p>局部内部类定义位置</p>
<ul>
<li>局部内部类是在方法中定义的类</li>
</ul>
</li>
<li><p>局部内部类方式方式</p>
<ul>
<li>局部内部类，外界是无法直接使用，需要在方法内部创建对象并使用</li>
<li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">                System.out.println(num2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner i = <span class="keyword">new</span> Inner();</span><br><span class="line">        i.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer o = <span class="keyword">new</span> Outer();</span><br><span class="line">        o.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-匿名内部类（应用）"><a href="#2-4-匿名内部类（应用）" class="headerlink" title="2.4 匿名内部类（应用）"></a>2.4 匿名内部类（应用）</h3><ul>
<li><p>匿名内部类的前提</p>
<ul>
<li>存在一个类或者接口，这里的类可以是具体类也可以是抽象类</li>
</ul>
</li>
<li><p>匿名内部类的格式</p>
<ul>
<li><p>格式：new 类名 ( ) {  重写方法 }    new  接口名 ( ) { 重写方法 }</p>
</li>
<li><p>举例： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Inter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>匿名内部类的本质</p>
<ul>
<li>本质：是一个继承了该类或者实现了该接口的子类匿名对象</li>
</ul>
</li>
<li><p>匿名内部类的细节</p>
<ul>
<li><p>匿名内部类可以通过多态的形式接受</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Inter i = <span class="keyword">new</span> Inter()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>匿名内部类直接调用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Inter()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我是匿名内部类&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method();	<span class="comment">// 直接调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-匿名内部类在开发中的使用（应用）"><a href="#2-4-匿名内部类在开发中的使用（应用）" class="headerlink" title="2.4 匿名内部类在开发中的使用（应用）"></a>2.4 匿名内部类在开发中的使用（应用）</h3><ul>
<li><p>匿名内部类在开发中的使用</p>
<ul>
<li>当发现某个方法需要，接口或抽象类的子类对象，我们就可以传递一个匿名内部类过去，来简化传统的代码</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗可以跳高了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingOperator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Jumpping j)</span> </span>&#123; <span class="comment">//new Cat();   new Dog();</span></span><br><span class="line">        j.jump();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumppingDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需求：创建接口操作类的对象，调用method方法</span></span><br><span class="line">        JumppingOperator jo = <span class="keyword">new</span> JumppingOperator();</span><br><span class="line">        Jumpping j = <span class="keyword">new</span> Cat();</span><br><span class="line">        jo.method(j);</span><br><span class="line"></span><br><span class="line">        Jumpping j2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        jo.method(j2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名内部类的简化</span></span><br><span class="line">        jo.method(<span class="keyword">new</span> Jumpping() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;猫可以跳高了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">		<span class="comment">// 匿名内部类的简化</span></span><br><span class="line">        jo.method(<span class="keyword">new</span> Jumpping() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;狗可以跳高了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>异常</title>
    <url>/2019/08/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190823%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="1-异常（记忆）"><a href="#1-异常（记忆）" class="headerlink" title="1.异常（记忆）"></a>1.异常（记忆）</h3><ul>
<li>异常的概述</li>
</ul>
<p>​    异常就是程序出现了不正常的情况</p>
<ul>
<li>异常的体系结构</li>
</ul>
<p>​    <img src="/2019/08/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190823%E5%BC%82%E5%B8%B8/1%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.png"></p>
<a id="more"></a>

<h3 id="2-JVM默认处理异常的方式（理解）"><a href="#2-JVM默认处理异常的方式（理解）" class="headerlink" title="2.JVM默认处理异常的方式（理解）"></a>2.JVM默认处理异常的方式（理解）</h3><ul>
<li>如果程序出现了问题，我们没有做任何处理，最终JVM 会做默认的处理，处理方式有如下两个步骤：</li>
<li>把异常的名称，错误原因及异常出现的位置等信息输出在了控制台</li>
<li>程序停止执行</li>
</ul>
<h3 id="3-try-catch方式处理异常（应用）"><a href="#3-try-catch方式处理异常（应用）" class="headerlink" title="3.try-catch方式处理异常（应用）"></a>3.try-catch方式处理异常（应用）</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	可能出现异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">	异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行流程</p>
<ul>
<li>程序从 try 里面的代码开始执行</li>
<li>出现异常，就会跳转到对应的 catch 里面去执行</li>
<li>执行完毕之后，程序还可以继续往下执行</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;这里能够访问到吗&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(&quot;你访问的数组索引不存在，请回去修改为正确的索引&quot;);</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-Throwable成员方法（应用）"><a href="#4-Throwable成员方法（应用）" class="headerlink" title="4.Throwable成员方法（应用）"></a>4.Throwable成员方法（应用）</h3><ul>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public String getMessage()</td>
<td>返回此 throwable 的详细消息字符串</td>
</tr>
<tr>
<td>public String toString()</td>
<td>返回此可抛出的简短描述</td>
</tr>
<tr>
<td>public void printStackTrace()</td>
<td>把异常的错误信息输出在控制台</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]); <span class="comment">//new ArrayIndexOutOfBoundsException();</span></span><br><span class="line">            System.out.println(<span class="string">&quot;这里能够访问到吗&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123; <span class="comment">//new ArrayIndexOutOfBoundsException();</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public String getMessage():返回此 throwable 的详细消息字符串</span></span><br><span class="line"><span class="comment">//            System.out.println(e.getMessage());</span></span><br><span class="line">            <span class="comment">//Index 3 out of bounds for length 3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public String toString():返回此可抛出的简短描述</span></span><br><span class="line"><span class="comment">//            System.out.println(e.toString());</span></span><br><span class="line">            <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//public void printStackTrace():把异常的错误信息输出在控制台</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line"><span class="comment">//            java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line"><span class="comment">//            at com.itheima_02.ExceptionDemo02.method(ExceptionDemo02.java:18)</span></span><br><span class="line"><span class="comment">//            at com.itheima_02.ExceptionDemo02.main(ExceptionDemo02.java:11)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-编译时异常和运行时异常的区别（记忆）"><a href="#5-编译时异常和运行时异常的区别（记忆）" class="headerlink" title="5.编译时异常和运行时异常的区别（记忆）"></a>5.编译时异常和运行时异常的区别（记忆）</h3><ul>
<li>编译时异常<ul>
<li>都是Exception类及其子类</li>
<li>必须显示处理，否则程序就会发生错误，无法通过编译</li>
</ul>
</li>
<li>运行时异常<ul>
<li>都是RuntimeException类及其子类</li>
<li>无需显示处理，也可以和编译时异常一样处理</li>
</ul>
</li>
</ul>
<h3 id="6-throws方式处理异常（应用）"><a href="#6-throws方式处理异常（应用）" class="headerlink" title="6.throws方式处理异常（应用）"></a>6.throws方式处理异常（应用）</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> 方法() <span class="keyword">throws</span> 异常类名 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="comment">//        method();</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编译时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;2048-08-09&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date d = sdf.parse(s);</span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ArrayIndexOutOfBoundsException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>这个throws格式是跟在方法的括号后面的</li>
<li>编译时异常必须要进行处理，两种处理方案：try…catch …或者 throws，如果采用 throws 这种方案，将来谁调用谁处理</li>
<li>运行时异常可以不处理，出现问题后，需要我们回来修改代码</li>
</ul>
</li>
</ul>
<h3 id="7-throws和throw的区别（记忆）"><a href="#7-throws和throw的区别（记忆）" class="headerlink" title="7.throws和throw的区别（记忆）"></a>7.throws和throw的区别（记忆）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="8-自定义异常（应用）"><a href="#8-自定义异常（应用）" class="headerlink" title="8.自定义异常（应用）"></a>8.自定义异常（应用）</h3><ul>
<li><p>自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>老师类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkScore</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> ScoreException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>) &#123;</span><br><span class="line"><span class="comment">//            throw new ScoreException();</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ScoreException(<span class="string">&quot;你给的分数有误，分数应该在0-100之间&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成绩正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入分数：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.checkScore(score);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScoreException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Collection集合</title>
    <url>/2019/08/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190825Collection%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Collection集合"><a href="#1-Collection集合" class="headerlink" title="1.Collection集合"></a>1.Collection集合</h2><h3 id="1-1集合体系结构【记忆】"><a href="#1-1集合体系结构【记忆】" class="headerlink" title="1.1集合体系结构【记忆】"></a>1.1集合体系结构【记忆】</h3><ul>
<li><p>集合类的特点</p>
<p>​    提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p>
</li>
<li><p>集合类的体系图</p>
<p>​    <img src="/2019/08/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190825Collection%E9%9B%86%E5%90%88/1%E9%9B%86%E5%90%88%E4%BD%93%E7%B3%BB%E5%9B%BE.png" alt="01"></p>
</li>
</ul>
<a id="more"></a>

<h3 id="1-2Collection集合概述和基本使用【应用】"><a href="#1-2Collection集合概述和基本使用【应用】" class="headerlink" title="1.2Collection集合概述和基本使用【应用】"></a>1.2Collection集合概述和基本使用【应用】</h3><ul>
<li><p>Collection集合概述</p>
<ul>
<li>是单列集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素</li>
<li>JDK 不提供此接口的任何直接实现，它提供更具体的子接口（如Set和List）实现</li>
</ul>
</li>
<li><p>Collection集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Collection集合的对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素：boolean add(E e)</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3Collection集合的常用方法【应用】"><a href="#1-3Collection集合的常用方法【应用】" class="headerlink" title="1.3Collection集合的常用方法【应用】"></a>1.3Collection集合的常用方法【应用】</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean add(E e)</td>
<td>添加元素</td>
</tr>
<tr>
<td>boolean remove(Object o)</td>
<td>从集合中移除指定的元素</td>
</tr>
<tr>
<td>void   clear()</td>
<td>清空集合中的元素</td>
</tr>
<tr>
<td>boolean contains(Object o)</td>
<td>判断集合中是否存在指定的元素</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>int   size()</td>
<td>集合的长度，也就是集合中元素的个数</td>
</tr>
</tbody></table>
<h3 id="1-4Collection集合的遍历【应用】"><a href="#1-4Collection集合的遍历【应用】" class="headerlink" title="1.4Collection集合的遍历【应用】"></a>1.4Collection集合的遍历【应用】</h3><ul>
<li>迭代器的介绍<ul>
<li>迭代器，集合的专用遍历方式</li>
<li>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</E></li>
<li>迭代器是通过集合的iterator()方法得到的，所以我们说它是依赖于集合而存在的</li>
</ul>
</li>
<li>Collection集合的遍历</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line">        Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用while循环改进元素的判断和获取</span></span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5集合使用步骤图解【理解】"><a href="#1-5集合使用步骤图解【理解】" class="headerlink" title="1.5集合使用步骤图解【理解】"></a>1.5集合使用步骤图解【理解】</h3><ul>
<li>使用步骤</li>
</ul>
<p><img src="/2019/08/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190825Collection%E9%9B%86%E5%90%88/2%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4.png" alt="02"></p>
<h3 id="1-6集合的案例-Collection集合存储学生对象并遍历【应用】"><a href="#1-6集合的案例-Collection集合存储学生对象并遍历【应用】" class="headerlink" title="1.6集合的案例-Collection集合存储学生对象并遍历【应用】"></a>1.6集合的案例-Collection集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li>学生类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Collection集合对象</span></span><br><span class="line">        Collection&lt;Student&gt; c = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        c.add(s1);</span><br><span class="line">        c.add(s2);</span><br><span class="line">        c.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合(迭代器方式)</span></span><br><span class="line">        Iterator&lt;Student&gt; it = c.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-List集合"><a href="#2-List集合" class="headerlink" title="2.List集合"></a>2.List集合</h2><h3 id="2-1List集合概述和特点【记忆】"><a href="#2-1List集合概述和特点【记忆】" class="headerlink" title="2.1List集合概述和特点【记忆】"></a>2.1List集合概述和特点【记忆】</h3><ul>
<li>List集合概述<ul>
<li>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素</li>
<li>与Set集合不同，列表通常允许重复的元素</li>
</ul>
</li>
<li>List集合特点<ul>
<li>有索引</li>
<li>可以存储重复元素</li>
<li>元素存取有序</li>
</ul>
</li>
</ul>
<h3 id="2-2List集合的特有方法【应用】"><a href="#2-2List集合的特有方法【应用】" class="headerlink" title="2.2List集合的特有方法【应用】"></a>2.2List集合的特有方法【应用】</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void add(int index,E   element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
<tr>
<td>E remove(int   index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>E set(int index,E   element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>E get(int   index)</td>
<td>返回指定索引处的元素</td>
</tr>
</tbody></table>
<h3 id="2-3集合的案例-List集合存储学生对象并遍历【应用】"><a href="#2-3集合的案例-List集合存储学生对象并遍历【应用】" class="headerlink" title="2.3集合的案例-List集合存储学生对象并遍历【应用】"></a>2.3集合的案例-List集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for循环方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-4并发修改异常【应用】"><a href="#2-4并发修改异常【应用】" class="headerlink" title="2.4并发修改异常【应用】"></a>2.4并发修改异常【应用】</h3><ul>
<li><p>出现的原因</p>
<p>​    迭代器遍历的过程中，通过集合对象修改了集合中的元素，造成了迭代器获取元素中判断预期修改值和实际修改值不一致，则会出现：ConcurrentModificationException</p>
</li>
<li><p>解决的方案</p>
<p>​    用for循环遍历，然后用集合对象做对应的操作即可</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个元素，看有没有&quot;world&quot;这个元素，如果有，我就添加一个&quot;javaee&quot;元素，请写代码实现</span></span><br><span class="line"><span class="comment">//        Iterator&lt;String&gt; it = list.iterator();</span></span><br><span class="line"><span class="comment">//        while (it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">//            String s = it.next();</span></span><br><span class="line"><span class="comment">//            if(s.equals(&quot;world&quot;)) &#123;</span></span><br><span class="line"><span class="comment">//                list.add(&quot;javaee&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                list.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5列表迭代器【应用】"><a href="#2-5列表迭代器【应用】" class="headerlink" title="2.5列表迭代器【应用】"></a>2.5列表迭代器【应用】</h3><ul>
<li><p>ListIterator介绍</p>
<ul>
<li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器</li>
<li>用于允许程序员沿任一方向遍历的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取列表迭代器</span></span><br><span class="line">        ListIterator&lt;String&gt; lit = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (lit.hasNext()) &#123;</span><br><span class="line">            String s = lit.next();</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;world&quot;</span>)) &#123;</span><br><span class="line">                lit.add(<span class="string">&quot;javaee&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6增强for循环【应用】"><a href="#2-6增强for循环【应用】" class="headerlink" title="2.6增强for循环【应用】"></a>2.6增强for循环【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名 : 数组/集合对象名) &#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(String s : strArray) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//内部原理是一个Iterator迭代器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        for(String s : list) &#123;</span></span><br><span class="line"><span class="comment">            if(s.equals(&quot;world&quot;)) &#123;</span></span><br><span class="line"><span class="comment">                list.add(&quot;javaee&quot;); //ConcurrentModificationException</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7集合的案例-List集合存储学生对象三种方式遍历【应用】"><a href="#2-7集合的案例-List集合存储学生对象三种方式遍历【应用】" class="headerlink" title="2.7集合的案例-List集合存储学生对象三种方式遍历【应用】"></a>2.7集合的案例-List集合存储学生对象三种方式遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器：集合特有的遍历方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for：带有索引的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class="line">            Student s = list.get(i);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for：最方便的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(Student s : list) &#123;</span><br><span class="line">            System.out.println(s.getName()+<span class="string">&quot;,&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3.数据结构"></a>3.数据结构</h2><h3 id="3-1数据结构之栈和队列【记忆】"><a href="#3-1数据结构之栈和队列【记忆】" class="headerlink" title="3.1数据结构之栈和队列【记忆】"></a>3.1数据结构之栈和队列【记忆】</h3><ul>
<li><p>栈结构</p>
<p>​    先进后出</p>
</li>
<li><p>队列结构</p>
<p>​    先进先出</p>
</li>
</ul>
<h3 id="3-2数据结构之数组和链表【记忆】"><a href="#3-2数据结构之数组和链表【记忆】" class="headerlink" title="3.2数据结构之数组和链表【记忆】"></a>3.2数据结构之数组和链表【记忆】</h3><ul>
<li><p>数组结构</p>
<p>​    查询快、增删慢</p>
</li>
<li><p>队列结构</p>
<p>​    查询慢、增删快</p>
</li>
</ul>
<h2 id="4-List集合的实现类"><a href="#4-List集合的实现类" class="headerlink" title="4.List集合的实现类"></a>4.List集合的实现类</h2><h3 id="4-1List集合子类的特点【记忆】"><a href="#4-1List集合子类的特点【记忆】" class="headerlink" title="4.1List集合子类的特点【记忆】"></a>4.1List集合子类的特点【记忆】</h3><ul>
<li><p>ArrayList集合</p>
<p>​    底层是数组结构实现，查询快、增删慢</p>
</li>
<li><p>LinkedList集合</p>
<p>​    底层是链表结构实现，查询慢、增删快</p>
</li>
</ul>
<h3 id="4-2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】"><a href="#4-2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】" class="headerlink" title="4.2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】"></a>4.2集合的案例-ArrayList集合存储学生对象三种方式遍历【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//迭代器：集合特有的遍历方式</span></span><br><span class="line">        Iterator&lt;Student&gt; it = array.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            Student s = it.next();</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//普通for：带有索引的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增强for：最方便的遍历方式</span></span><br><span class="line">        <span class="keyword">for</span>(Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="4-3LinkedList集合的特有功能【应用】"><a href="#4-3LinkedList集合的特有功能【应用】" class="headerlink" title="4.3LinkedList集合的特有功能【应用】"></a>4.3LinkedList集合的特有功能【应用】</h3><ul>
<li><p>特有方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public void addFirst(E e)</td>
<td>在该列表开头插入指定的元素</td>
</tr>
<tr>
<td>public void addLast(E e)</td>
<td>将指定的元素追加到此列表的末尾</td>
</tr>
<tr>
<td>public E getFirst()</td>
<td>返回此列表中的第一个元素</td>
</tr>
<tr>
<td>public   E getLast()</td>
<td>返回此列表中的最后一个元素</td>
</tr>
<tr>
<td>public E removeFirst()</td>
<td>从此列表中删除并返回第一个元素</td>
</tr>
<tr>
<td>public   E removeLast()</td>
<td>从此列表中删除并返回最后一个元素</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>类加载器</title>
    <url>/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.1%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="1-1类加载【理解】"><a href="#1-1类加载【理解】" class="headerlink" title="1.1类加载【理解】"></a>1.1类加载【理解】</h3><ul>
<li><p>类加载的描述</p>
<ul>
<li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载，类的连接，类的初始化这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化</li>
</ul>
</li>
<li><p>类的加载</p>
<ul>
<li>就是指将class文件读入内存，并为之创建一个 java.lang.Class 对象</li>
<li>任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</li>
</ul>
<a id="more"></a></li>
<li><p>类的连接</p>
<ul>
<li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li>
<li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li>
<li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li>
</ul>
</li>
<li><p>类的初始化</p>
<ul>
<li>在该阶段，主要就是对类变量进行初始化</li>
</ul>
</li>
<li><p>类的初始化步骤</p>
<ul>
<li>假如类还未被加载和连接，则程序先加载并连接该类</li>
<li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li>
<li>假如类中有初始化语句，则系统依次执行这些初始化语句</li>
<li>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li>
</ul>
</li>
<li><p>类的初始化时机</p>
<ul>
<li>创建类的实例</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
</li>
</ul>
<h3 id="1-2类加载器【理解】"><a href="#1-2类加载器【理解】" class="headerlink" title="1.2类加载器【理解】"></a>1.2类加载器【理解】</h3><h4 id="1-2-1类加载器的作用"><a href="#1-2-1类加载器的作用" class="headerlink" title="1.2.1类加载器的作用"></a>1.2.1类加载器的作用</h4><ul>
<li>负责将.class文件加载到内存中，并为之生成对应的 java.lang.Class 对象。虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行！</li>
</ul>
<h4 id="1-2-2JVM的类加载机制"><a href="#1-2-2JVM的类加载机制" class="headerlink" title="1.2.2JVM的类加载机制"></a>1.2.2JVM的类加载机制</h4><ul>
<li>全盘负责：就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
<li>父类委托：就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
<li>缓存机制：保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li>
</ul>
<h4 id="1-2-3Java中的内置类加载器"><a href="#1-2-3Java中的内置类加载器" class="headerlink" title="1.2.3Java中的内置类加载器"></a>1.2.3Java中的内置类加载器</h4><ul>
<li>Bootstrap class loader：它是虚拟机的内置类加载器，通常表示为null ，并且没有父null</li>
<li>Platform class loader：平台类加载器可以看到所有平台类 ，平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类</li>
<li>System class loader：它也被称为应用程序类加载器 ，与平台类加载器不同。 系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类</li>
<li>类加载器的继承关系：System的父加载器为Platform，而Platform的父加载器为Bootstrap</li>
</ul>
<h4 id="1-2-4ClassLoader-中的两个方法"><a href="#1-2-4ClassLoader-中的两个方法" class="headerlink" title="1.2.4ClassLoader 中的两个方法"></a>1.2.4ClassLoader 中的两个方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>static ClassLoader getSystemClassLoader()</td>
<td>返回用于委派的系统类加载器</td>
</tr>
<tr>
<td>ClassLoader getParent()</td>
<td>返回父类加载器进行委派</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemClassLoader()：返回用于委派的系统类加载器</span></span><br><span class="line">        ClassLoader c = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(c); <span class="comment">//AppClassLoader</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ClassLoader getParent()：返回父类加载器进行委派</span></span><br><span class="line">        ClassLoader c2 = c.getParent();</span><br><span class="line">        System.out.println(c2); <span class="comment">//PlatformClassLoader</span></span><br><span class="line"></span><br><span class="line">        ClassLoader c3 = c2.getParent();</span><br><span class="line">        System.out.println(c3); <span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>模块化</title>
    <url>/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="1-1模块化概述【理解】"><a href="#1-1模块化概述【理解】" class="headerlink" title="1.1模块化概述【理解】"></a>1.1模块化概述【理解】</h3><p>Java语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台，系统都采用Java语言编写。但是，伴随着发展，Java也越来越庞大，逐渐发展成为一门“臃肿” 的语言。而且，无论是运行一个大型的软件系统，还是运行一个小的程序，即使程序只需要使用Java的部分核心功能， JVM也要加载整个JRE环境。<br>为了给Java“瘦身”，让Java实现轻量化，Java 9正式的推出了模块化系统。Java被拆分为N多个模块，并允许Java程序可以根据需要选择加载程序必须的Java模块，这样就可以让Java以轻量化的方式来运行</p>
<p>其实，Java 7的时候已经提出了模块化的概念，但由于其过于复杂，Java 7，Java 8都一直未能真正推出，直到Java 9才真正成熟起来。对于Java语言来说，模块化系统是一次真正的自我革新，这种革新使得“古老而庞大”的Java语言重新焕发年轻的活力</p>
<a id="more"></a>

<h3 id="1-2模块的基本使用【应用】"><a href="#1-2模块的基本使用【应用】" class="headerlink" title="1.2模块的基本使用【应用】"></a>1.2模块的基本使用【应用】</h3><ol>
<li><p>在项目中创建两个模块。一个是myOne,一个是myTwo</p>
</li>
<li><p>在myOne模块中创建以下包和以下类，并在类中添加方法</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/01.png" alt="01"></p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/02.png" alt="02"></p>
</li>
<li><p>在myTwo模块中创建以下包和以下类，并在类中创建对象并使用</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/03.png" alt="03"></p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/04.png" alt="04"></p>
</li>
<li><p>在myOne模块中src目录下，创建module-info.java，并写入以下内容</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/05.png" alt="05"></p>
</li>
<li><p>在myTwo模块中src目录下，创建module-info.java，并写入以下内容</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/06.png" alt="06"></p>
</li>
</ol>
<h3 id="1-3模块服务的基本使用【应用】"><a href="#1-3模块服务的基本使用【应用】" class="headerlink" title="1.3模块服务的基本使用【应用】"></a>1.3模块服务的基本使用【应用】</h3><ol>
<li><p>在myOne模块中新建一个包，提供一个接口和两个实现类</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/07.png" alt="07"></p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/08.png" alt="08"></p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/09.png" alt="09"></p>
</li>
<li><p>在myOne模块中修改module-info.java文件，添加以下内容</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/10.png" alt="10"></p>
</li>
<li><p>在myTwo模块中新建一个测试类</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/11.png" alt="11"></p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/12.png" alt="12"></p>
</li>
<li><p>在myTwo模块中修改module-info.java文件，添加以下内容</p>
<p><img src="/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.3%E6%A8%A1%E5%9D%97%E5%8C%96/Java%E8%B5%84%E6%96%99/2.JavaEE/day15(%E5%8F%8D%E5%B0%84)/%E7%AC%94%E8%AE%B0/img/13.png" alt="13"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL约束</title>
    <url>/2019/09/14/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190914MySQL%E7%BA%A6%E6%9D%9F/</url>
    <content><![CDATA[<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li><p>概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。    </p>
</li>
<li><p>分类：</p>
<ol>
<li><p>主键约束：primary key</p>
</li>
<li><p>非空约束：not null</p>
</li>
<li><p>唯一约束：unique</p>
</li>
<li><p>外键约束：foreign key</p>
<a id="more"></a>

</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 非空约束：not null，值不能为null</span><br><span class="line">	1. 创建表时添加约束</span><br><span class="line">		CREATE TABLE stu(</span><br><span class="line">			id INT,</span><br><span class="line">			NAME VARCHAR(20) NOT NULL -- name为非空</span><br><span class="line">		);</span><br><span class="line">	2. 创建表完后，添加非空约束</span><br><span class="line">		ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;</span><br><span class="line"></span><br><span class="line">	3. 删除name的非空约束</span><br><span class="line">		ALTER TABLE stu MODIFY NAME VARCHAR(20);</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 唯一约束：unique，值不能重复</span><br><span class="line">	1. 创建表时，添加唯一约束</span><br><span class="line">		CREATE TABLE stu(</span><br><span class="line">			id INT,</span><br><span class="line">			phone_number VARCHAR(20) UNIQUE -- 添加了唯一约束</span><br><span class="line">		</span><br><span class="line">		);</span><br><span class="line">		* 注意mysql中，唯一约束限定的列的值可以有多个null</span><br><span class="line">	2. 删除唯一约束</span><br><span class="line">	</span><br><span class="line">		ALTER TABLE stu DROP INDEX phone_number;</span><br><span class="line">	</span><br><span class="line">	3. 在创建表后，添加唯一约束</span><br><span class="line">		ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 主键约束：primary key。</span><br><span class="line">	1. 注意：</span><br><span class="line">		1. 含义：非空且唯一</span><br><span class="line">		2. 一张表只能有一个字段为主键</span><br><span class="line">		3. 主键就是表中记录的唯一标识</span><br><span class="line"></span><br><span class="line">	2. 在创建表时，添加主键约束</span><br><span class="line">		create table stu(</span><br><span class="line">			id int primary key,-- 给id添加主键约束</span><br><span class="line">			name varchar(20)</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">	3. 删除主键</span><br><span class="line">		-- 错误 alter table stu modify id int ;</span><br><span class="line">		ALTER TABLE stu DROP PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">	4. 创建完表后，添加主键</span><br><span class="line">		ALTER TABLE stu MODIFY id INT PRIMARY KEY;</span><br><span class="line"></span><br><span class="line">	5. 自动增长：</span><br><span class="line">		1.  概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长</span><br><span class="line"></span><br><span class="line">		2. 在创建表时，添加主键约束，并且完成主键自增长</span><br><span class="line">		create table stu(</span><br><span class="line">			id int primary key auto_increment,-- 给id添加主键约束</span><br><span class="line">			name varchar(20)</span><br><span class="line">		);</span><br><span class="line">		3. 删除自动增长</span><br><span class="line">		ALTER TABLE stu MODIFY id INT;</span><br><span class="line">		4. 添加自动增长</span><br><span class="line">		ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 外键约束：foreign key,让表于表产生关系，从而保证数据的正确性。</span><br><span class="line">	1. 在创建表时，可以添加外键</span><br><span class="line">		* 语法：</span><br><span class="line">			create table 表名(</span><br><span class="line">				....</span><br><span class="line">				外键列</span><br><span class="line">				constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">	2. 删除外键</span><br><span class="line">		ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;</span><br><span class="line"></span><br><span class="line">	3. 创建表之后，添加外键</span><br><span class="line">		ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);</span><br><span class="line">	4. 级联操作</span><br><span class="line">		1. 添加级联操作</span><br><span class="line">			语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 </span><br><span class="line">					FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;</span><br><span class="line">		2. 分类：</span><br><span class="line">			1. 级联更新：ON UPDATE CASCADE </span><br><span class="line">			2. 级联删除：ON DELETE CASCADE </span><br></pre></td></tr></table></figure>

<h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 多表之间的关系</span><br><span class="line">	1. 分类：</span><br><span class="line">		1. 一对一(了解)：</span><br><span class="line">			* 如：人和身份证</span><br><span class="line">			* 分析：一个人只有一个身份证，一个身份证只能对应一个人</span><br><span class="line">		2. 一对多(多对一)：</span><br><span class="line">			* 如：部门和员工</span><br><span class="line">			* 分析：一个部门有多个员工，一个员工只能对应一个部门</span><br><span class="line">		3. 多对多：</span><br><span class="line">			* 如：学生和课程</span><br><span class="line">			* 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择</span><br><span class="line">	2. 实现关系：</span><br><span class="line">		1. 一对多(多对一)：</span><br><span class="line">			* 如：部门和员工</span><br><span class="line">			* 实现方式：在多的一方建立外键，指向一的一方的主键。</span><br><span class="line">		2. 多对多：</span><br><span class="line">			* 如：学生和课程</span><br><span class="line">			* 实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键</span><br><span class="line">		3. 一对一(了解)：</span><br><span class="line">			* 如：人和身份证</span><br><span class="line">			* 实现方式：一对一关系实现，可以在任意一方添加唯一外键指向另一方的主键。</span><br><span class="line"></span><br><span class="line">	3. 案例</span><br><span class="line">		-- 创建旅游线路分类表 tab_category</span><br><span class="line">		-- cid 旅游线路分类主键，自动增长</span><br><span class="line">		-- cname 旅游线路分类名称非空，唯一，字符串 100</span><br><span class="line">		CREATE TABLE tab_category (</span><br><span class="line">			cid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">			cname VARCHAR(100) NOT NULL UNIQUE</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		-- 创建旅游线路表 tab_route</span><br><span class="line">		&#x2F;*</span><br><span class="line">		rid 旅游线路主键，自动增长</span><br><span class="line">		rname 旅游线路名称非空，唯一，字符串 100</span><br><span class="line">		price 价格</span><br><span class="line">		rdate 上架时间，日期类型</span><br><span class="line">		cid 外键，所属分类</span><br><span class="line">		*&#x2F;</span><br><span class="line">		CREATE TABLE tab_route(</span><br><span class="line">			rid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">			rname VARCHAR(100) NOT NULL UNIQUE,</span><br><span class="line">			price DOUBLE,</span><br><span class="line">			rdate DATE,</span><br><span class="line">			cid INT,</span><br><span class="line">			FOREIGN KEY (cid) REFERENCES tab_category(cid)</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		&#x2F;*创建用户表 tab_user</span><br><span class="line">		uid 用户主键，自增长</span><br><span class="line">		username 用户名长度 100，唯一，非空</span><br><span class="line">		password 密码长度 30，非空</span><br><span class="line">		name 真实姓名长度 100</span><br><span class="line">		birthday 生日</span><br><span class="line">		sex 性别，定长字符串 1</span><br><span class="line">		telephone 手机号，字符串 11</span><br><span class="line">		email 邮箱，字符串长度 100</span><br><span class="line">		*&#x2F;</span><br><span class="line">		CREATE TABLE tab_user (</span><br><span class="line">			uid INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">			username VARCHAR(100) UNIQUE NOT NULL,</span><br><span class="line">			PASSWORD VARCHAR(30) NOT NULL,</span><br><span class="line">			NAME VARCHAR(100),</span><br><span class="line">			birthday DATE,</span><br><span class="line">			sex CHAR(1) DEFAULT &#39;男&#39;,</span><br><span class="line">			telephone VARCHAR(11),</span><br><span class="line">			email VARCHAR(100)</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		&#x2F;*</span><br><span class="line">		创建收藏表 tab_favorite</span><br><span class="line">		rid 旅游线路 id，外键</span><br><span class="line">		date 收藏时间</span><br><span class="line">		uid 用户 id，外键</span><br><span class="line">		rid 和 uid 不能重复，设置复合主键，同一个用户不能收藏同一个线路两次</span><br><span class="line">		*&#x2F;</span><br><span class="line">		CREATE TABLE tab_favorite (</span><br><span class="line">			rid INT, -- 线路id</span><br><span class="line">			DATE DATETIME,</span><br><span class="line">			uid INT, -- 用户id</span><br><span class="line">			-- 创建复合主键</span><br><span class="line">			PRIMARY KEY(rid,uid), -- 联合主键</span><br><span class="line">			FOREIGN KEY (rid) REFERENCES tab_route(rid),</span><br><span class="line">			FOREIGN KEY(uid) REFERENCES tab_user(uid)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 数据库设计的范式</span><br><span class="line">	* 概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求</span><br><span class="line"></span><br><span class="line">		设计关系数据库时，遵从不同的规范要求，设计出合理的关系型数据库，这些不同的规范要求被称为不同的范式，各种范式呈递次规范，越高的范式数据库冗余越小。</span><br><span class="line">		目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。</span><br><span class="line"></span><br><span class="line">	* 分类：</span><br><span class="line">		1. 第一范式（1NF）：每一列都是不可分割的原子数据项</span><br><span class="line">		2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）</span><br><span class="line">			* 几个概念：</span><br><span class="line">				1. 函数依赖：A--&gt;B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A</span><br><span class="line">					例如：学号--&gt;姓名。  （学号，课程名称） --&gt; 分数</span><br><span class="line">				2. 完全函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。</span><br><span class="line">					例如：（学号，课程名称） --&gt; 分数</span><br><span class="line">				3. 部分函数依赖：A--&gt;B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。</span><br><span class="line">					例如：（学号，课程名称） -- &gt; 姓名</span><br><span class="line">				4. 传递函数依赖：A--&gt;B, B -- &gt;C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A</span><br><span class="line">					例如：学号--&gt;系名，系名--&gt;系主任</span><br><span class="line">				5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码</span><br><span class="line">					例如：该表中码为：（学号，课程名称）</span><br><span class="line">					* 主属性：码属性组中的所有属性</span><br><span class="line">					* 非主属性：除过码属性组的属性</span><br><span class="line">					</span><br><span class="line">		3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）</span><br></pre></td></tr></table></figure>

<h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 命令行：</span><br><span class="line">	* 语法：</span><br><span class="line">		* 备份： mysqldump -u用户名 -p密码 数据库名称 &gt; 保存的路径</span><br><span class="line">		* 还原：</span><br><span class="line">			1. 登录数据库</span><br><span class="line">			2. 创建数据库</span><br><span class="line">			3. 使用数据库</span><br><span class="line">			4. 执行文件。source 文件路径</span><br><span class="line">2. 图形化工具：</span><br></pre></td></tr></table></figure>



<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.约束</span><br><span class="line">非空约束(重要!!!) ---&gt; not null</span><br><span class="line">	1.在创建表时添加</span><br><span class="line">		create table 表名(</span><br><span class="line">			列名 列的类型 not null</span><br><span class="line">		);</span><br><span class="line">	2.表创建完成之后添加非空约束</span><br><span class="line">		alter table 表名 modify 列名 数据类型 not null;</span><br><span class="line">		举例:</span><br><span class="line">			alter table student modify sname varchar(50) not null;</span><br><span class="line">	3.删除非空约束</span><br><span class="line">		alter table 表名 modify 列名 数据类型;</span><br><span class="line">		举例:</span><br><span class="line">			alter table student modify sname varchar(50);</span><br><span class="line">唯一约束(重要!!!) ---&gt;保证一列的值不能重复, 但是不包含null</span><br><span class="line">	1.在创建表的时候添加</span><br><span class="line">		create table 表名(</span><br><span class="line">			列名 列的类型 unique</span><br><span class="line">		);</span><br><span class="line">	2.表创建完成之后添加唯一约束</span><br><span class="line">		alter table 表名 modify 列名 数据类型 unique;</span><br><span class="line">	3.删除唯一约束</span><br><span class="line">		alter table 表名 drop index 列名;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">主键约束(重要!!!)</span><br><span class="line">	是一条数据的唯一标识, 要求非空且唯一, 而且一张表只有一个主键,但是主键可以多个或者一个列组成</span><br><span class="line">	1.在创建表时添加</span><br><span class="line">	create table 表名(</span><br><span class="line">			列名 列的类型 primary key</span><br><span class="line">	);</span><br><span class="line">	2.表创建完成之后添加主键约束</span><br><span class="line">		alter table 表名 modify 列名 数据类型 primary key ;</span><br><span class="line">	3.删除主键</span><br><span class="line">		alter table 表名 drop primary key;</span><br><span class="line">	注意:</span><br><span class="line">		主键是每一条数据唯一标识</span><br><span class="line">		整数: </span><br><span class="line">			使用auto_increment,让主键自动增长(不适合企业开发)</span><br><span class="line">		字符串:</span><br><span class="line">			可以采用UUID.randomUUID() ---&gt;可以生成一个不会重复的字符串	</span><br><span class="line">外键约束(重要!!!)</span><br><span class="line">	作用:约束表和表之间的数据,保证数据的有效性和完整性</span><br><span class="line">	1.创建表时进行外键添加</span><br><span class="line">		create table 表名(</span><br><span class="line">				外键列名 列的类型,</span><br><span class="line">				[contraint 外键名] foreign key (外键列名) references 主表表名(主表的主键);</span><br><span class="line">		);</span><br><span class="line">	2.创建表时完成后进行外键添加</span><br><span class="line">		alter table 表名 add [contraint 外键名] foreign key (外键列名) reference 主表表名(主表的主键);</span><br><span class="line">	3.删除外键</span><br><span class="line">		alter table 表名 drop foreign key 外键名;</span><br><span class="line">	注意事项:</span><br><span class="line">		其实外键名可以有,可以没有,如果我们不给, 系统会自动生成一个, 外键名的唯一作用就是在删除外键时要用!!!!!</span><br><span class="line">	如何查询系统默认的给定的外键的名称:</span><br><span class="line">			show create table 表名</span><br><span class="line">	概念:</span><br><span class="line">		主表:被别的表关联的表,例如(分类表被商品表所关联,则分类表我们称为是商品表的&quot;主表&quot;) </span><br><span class="line">		从表:关联别的表的表, 我们成为从表(分类表被商品表所关联,则商品表我们称为是分类表的&quot;从表&quot;) </span><br><span class="line">级联操作:(慎用或者不用!!!!!!!)</span><br><span class="line">	ON UPDATE CASCADE  ----&gt;级联更新</span><br><span class="line">	ON DELETE CASCADE  ----&gt;级联删除</span><br><span class="line">2.数据库的设计</span><br><span class="line">表和表的关系</span><br><span class="line">	一对一:(了解)</span><br><span class="line">		丈夫和妻子</span><br><span class="line">		如何设计:</span><br><span class="line">			搞成一张表就行了</span><br><span class="line">			专业: 在任何一方创建唯一外键指向另外一方的主键</span><br><span class="line">	一对多:</span><br><span class="line">		母亲和孩子</span><br><span class="line">		如何设计:</span><br><span class="line">			在多的一方创建外键,关联一的一方的主键</span><br><span class="line">	多对多:</span><br><span class="line">		餐厅和菜谱</span><br><span class="line">		如何设计:</span><br><span class="line">			需要额外创建一个中间表,这个中间至少有两个字段, 分别作为外键关联主表的主键</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC连接池&amp;JDBCTemplate</title>
    <url>/2019/09/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190917JDBC%E8%BF%9E%E6%8E%A5%E6%B1%A0&amp;JDBCTemplate/</url>
    <content><![CDATA[<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。</span><br><span class="line">	    当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，用户访问完之后，会将连接对象归还给容器。</span><br><span class="line"></span><br><span class="line">2. 好处：</span><br><span class="line">	1. 节约资源</span><br><span class="line">	2. 用户访问高效</span><br><span class="line"></span><br><span class="line">3. 实现：</span><br><span class="line">	1. 标准接口：DataSource   javax.sql包下的</span><br><span class="line">		1. 方法：</span><br><span class="line">			* 获取连接：getConnection()</span><br><span class="line">			* 归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，则不会再关闭连接了。而是归还连接</span><br><span class="line"></span><br><span class="line">	2. 一般我们不去实现它，有数据库厂商来实现</span><br><span class="line">		1. C3P0：数据库连接池技术</span><br><span class="line">		2. Druid：数据库连接池实现技术，由阿里巴巴提供的</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. C3P0：数据库连接池技术</span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，</span><br><span class="line">			* 不要忘记导入数据库驱动jar包</span><br><span class="line">		2. 定义配置文件：</span><br><span class="line">			* 名称： c3p0.properties 或者 c3p0-config.xml</span><br><span class="line">			* 路径：直接将文件放在src目录下即可。</span><br><span class="line"></span><br><span class="line">		3. 创建核心对象 数据库连接池对象 ComboPooledDataSource</span><br><span class="line">		4. 获取连接： getConnection</span><br><span class="line">	* 代码：</span><br><span class="line">		 &#x2F;&#x2F;1.创建数据库连接池对象</span><br><span class="line">        DataSource ds  &#x3D; new ComboPooledDataSource();</span><br><span class="line">        &#x2F;&#x2F;2. 获取连接对象</span><br><span class="line">        Connection conn &#x3D; ds.getConnection();</span><br><span class="line">5. Druid：数据库连接池实现技术，由阿里巴巴提供的</span><br><span class="line">	1. 步骤：</span><br><span class="line">		1. 导入jar包 druid-1.0.9.jar</span><br><span class="line">		2. 定义配置文件：</span><br><span class="line">			* 是properties形式的</span><br><span class="line">			* 可以叫任意名称，可以放在任意目录下</span><br><span class="line">		3. 加载配置文件。Properties</span><br><span class="line">		4. 获取数据库连接池对象：通过工厂来来获取  DruidDataSourceFactory</span><br><span class="line">		5. 获取连接：getConnection</span><br><span class="line">	* 代码：</span><br><span class="line">		 &#x2F;&#x2F;3.加载配置文件</span><br><span class="line">        Properties pro &#x3D; new Properties();</span><br><span class="line">        InputStream is &#x3D; DruidDemo.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">        pro.load(is);</span><br><span class="line">        &#x2F;&#x2F;4.获取连接池对象</span><br><span class="line">        DataSource ds &#x3D; DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">        &#x2F;&#x2F;5.获取连接</span><br><span class="line">        Connection conn &#x3D; ds.getConnection();</span><br><span class="line">	2. 定义工具类</span><br><span class="line">		1. 定义一个类 JDBCUtils</span><br><span class="line">		2. 提供静态代码块加载配置文件，初始化连接池对象</span><br><span class="line">		3. 提供方法</span><br><span class="line">			1. 获取连接方法：通过数据库连接池获取连接</span><br><span class="line">			2. 释放资源</span><br><span class="line">			3. 获取连接池的方法</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 代码：</span><br><span class="line">	public class JDBCUtils &#123;</span><br><span class="line"></span><br><span class="line">	    &#x2F;&#x2F;1.定义成员变量 DataSource</span><br><span class="line">	    private static DataSource ds ;</span><br><span class="line">	</span><br><span class="line">	    static&#123;</span><br><span class="line">	        try &#123;</span><br><span class="line">	            &#x2F;&#x2F;1.加载配置文件</span><br><span class="line">	            Properties pro &#x3D; new Properties();</span><br><span class="line">	            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;));</span><br><span class="line">	            &#x2F;&#x2F;2.获取DataSource</span><br><span class="line">	            ds &#x3D; DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">	        &#125; catch (IOException e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125; catch (Exception e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    &#x2F;**</span><br><span class="line">	     * 获取连接</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">	        return ds.getConnection();</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    &#x2F;**</span><br><span class="line">	     * 释放资源</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public static void close(Statement stmt,Connection conn)&#123;</span><br><span class="line">	       &#x2F;* if(stmt !&#x3D; null)&#123;</span><br><span class="line">	            try &#123;</span><br><span class="line">	                stmt.close();</span><br><span class="line">	            &#125; catch (SQLException e) &#123;</span><br><span class="line">	                e.printStackTrace();</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;</span><br><span class="line">	</span><br><span class="line">	        if(conn !&#x3D; null)&#123;</span><br><span class="line">	            try &#123;</span><br><span class="line">	                conn.close();&#x2F;&#x2F;归还连接</span><br><span class="line">	            &#125; catch (SQLException e) &#123;</span><br><span class="line">	                e.printStackTrace();</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;*&#x2F;</span><br><span class="line">	</span><br><span class="line">	       close(null,stmt,conn);</span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void close(ResultSet rs , Statement stmt, Connection conn)&#123;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(rs !&#x3D; null)&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        rs.close();</span><br><span class="line">    &#125; catch (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        if(stmt !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(conn !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();&#x2F;&#x2F;归还连接</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 获取连接池方法</span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    public static DataSource getDataSource()&#123;</span><br><span class="line">        return  ds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-JDBC"><a href="#Spring-JDBC" class="headerlink" title="Spring JDBC"></a>Spring JDBC</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发</span><br><span class="line">* 步骤：</span><br><span class="line">	1. 导入jar包</span><br><span class="line">	2. 创建JdbcTemplate对象。依赖于数据源DataSource</span><br><span class="line">		* JdbcTemplate template &#x3D; new JdbcTemplate(ds);</span><br><span class="line"></span><br><span class="line">	3. 调用JdbcTemplate的方法来完成CRUD的操作</span><br><span class="line">		* update():执行DML语句。增、删、改语句</span><br><span class="line">		* queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合</span><br><span class="line">			* 注意：这个方法查询的结果集长度只能是1</span><br><span class="line">		* queryForList():查询结果将结果集封装为list集合</span><br><span class="line">			* 注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中</span><br><span class="line">		* query():查询结果，将结果封装为JavaBean对象</span><br><span class="line">			* query的参数：RowMapper</span><br><span class="line">				* 一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装</span><br><span class="line">				* new BeanPropertyRowMapper&lt;类型&gt;(类型.class)</span><br><span class="line">		* queryForObject：查询结果，将结果封装为对象</span><br><span class="line">			* 一般用于聚合函数的查询</span><br><span class="line"></span><br><span class="line">	4. 练习：</span><br><span class="line">		* 需求：</span><br><span class="line">			1. 修改1号数据的 salary 为 10000</span><br><span class="line">			2. 添加一条记录</span><br><span class="line">			3. 删除刚才添加的记录</span><br><span class="line">			4. 查询id为1的记录，将其封装为Map集合</span><br><span class="line">			5. 查询所有记录，将其封装为List</span><br><span class="line">			6. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line">			7. 查询总记录数</span><br><span class="line"></span><br><span class="line">		* 代码：</span><br><span class="line">			</span><br><span class="line">			import cn.itcast.domain.Emp;</span><br><span class="line">			import cn.itcast.utils.JDBCUtils;</span><br><span class="line">			import org.junit.Test;</span><br><span class="line">			import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">			import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">			import org.springframework.jdbc.core.RowMapper;</span><br><span class="line">			</span><br><span class="line">			import java.sql.Date;</span><br><span class="line">			import java.sql.ResultSet;</span><br><span class="line">			import java.sql.SQLException;</span><br><span class="line">			import java.util.List;</span><br><span class="line">			import java.util.Map;</span><br><span class="line">			</span><br><span class="line">			public class JdbcTemplateDemo2 &#123;</span><br><span class="line">			</span><br><span class="line">			    &#x2F;&#x2F;Junit单元测试，可以让方法独立执行</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;1. 获取JDBCTemplate对象</span><br><span class="line">private JdbcTemplate template &#x3D; new JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 1. 修改1号数据的 salary 为 10000</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void test1()&#123;</span><br><span class="line">			</span><br><span class="line">    &#x2F;&#x2F;2. 定义sql</span><br><span class="line">    String sql &#x3D; &quot;update emp set salary &#x3D; 10000 where id &#x3D; 1001&quot;;</span><br><span class="line">    &#x2F;&#x2F;3. 执行sql</span><br><span class="line">    int count &#x3D; template.update(sql);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 2. 添加一条记录</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void test2()&#123;</span><br><span class="line">    String sql &#x3D; &quot;insert into emp(id,ename,dept_id) values(?,?,?)&quot;;</span><br><span class="line">    int count &#x3D; template.update(sql, 1015, &quot;郭靖&quot;, 10);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 3.删除刚才添加的记录</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void test3()&#123;</span><br><span class="line">    String sql &#x3D; &quot;delete from emp where id &#x3D; ?&quot;;</span><br><span class="line">    int count &#x3D; template.update(sql, 1015);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 4.查询id为1001的记录，将其封装为Map集合</span><br><span class="line"> * 注意：这个方法查询的结果集长度只能是1</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void test4()&#123;</span><br><span class="line">    String sql &#x3D; &quot;select * from emp where id &#x3D; ? or id &#x3D; ?&quot;;</span><br><span class="line">    Map&lt;String, Object&gt; map &#x3D; template.queryForMap(sql, 1001,1002);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">    &#x2F;&#x2F;&#123;id&#x3D;1001, ename&#x3D;孙悟空, job_id&#x3D;4, mgr&#x3D;1004, joindate&#x3D;2000-12-17, salary&#x3D;10000.00, bonus&#x3D;null, dept_id&#x3D;20&#125;</span><br><span class="line">			</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 5. 查询所有记录，将其封装为List</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Test</span><br><span class="line">public void test5()&#123;</span><br><span class="line">    String sql &#x3D; &quot;select * from emp&quot;;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; list &#x3D; template.queryForList(sql);</span><br><span class="line">			</span><br><span class="line">    for (Map&lt;String, Object&gt; stringObjectMap : list) &#123;</span><br><span class="line">        System.out.println(stringObjectMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">			</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 6. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line"> *&#x2F;</span><br><span class="line">			</span><br><span class="line">@Test</span><br><span class="line">public void test6()&#123;</span><br><span class="line">    String sql &#x3D; &quot;select * from emp&quot;;</span><br><span class="line">    List&lt;Emp&gt; list &#x3D; template.query(sql, new RowMapper&lt;Emp&gt;() &#123;</span><br><span class="line">			</span><br><span class="line">        @Override</span><br><span class="line">        public Emp mapRow(ResultSet rs, int i) throws SQLException &#123;</span><br><span class="line">            Emp emp &#x3D; new Emp();</span><br><span class="line">            int id &#x3D; rs.getInt(&quot;id&quot;);</span><br><span class="line">            String ename &#x3D; rs.getString(&quot;ename&quot;);</span><br><span class="line">            int job_id &#x3D; rs.getInt(&quot;job_id&quot;);</span><br><span class="line">            int mgr &#x3D; rs.getInt(&quot;mgr&quot;);</span><br><span class="line">            Date joindate &#x3D; rs.getDate(&quot;joindate&quot;);</span><br><span class="line">            double salary &#x3D; rs.getDouble(&quot;salary&quot;);</span><br><span class="line">            double bonus &#x3D; rs.getDouble(&quot;bonus&quot;);</span><br><span class="line">            int dept_id &#x3D; rs.getInt(&quot;dept_id&quot;);</span><br><span class="line">			</span><br><span class="line">            emp.setId(id);</span><br><span class="line">            emp.setEname(ename);</span><br><span class="line">            emp.setJob_id(job_id);</span><br><span class="line">            emp.setMgr(mgr);</span><br><span class="line">            emp.setJoindate(joindate);</span><br><span class="line">            emp.setSalary(salary);</span><br><span class="line">            emp.setBonus(bonus);</span><br><span class="line">            emp.setDept_id(dept_id);</span><br><span class="line">			</span><br><span class="line">            return emp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        for (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 6. 查询所有记录，将其封装为Emp对象的List集合</span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test6_2()&#123;</span><br><span class="line">        String sql &#x3D; &quot;select * from emp&quot;;</span><br><span class="line">        List&lt;Emp&gt; list &#x3D; template.query(sql, new BeanPropertyRowMapper&lt;Emp&gt;(Emp.class));</span><br><span class="line">        for (Emp emp : list) &#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 7. 查询总记录数</span><br><span class="line">     *&#x2F;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void test7()&#123;</span><br><span class="line">        String sql &#x3D; &quot;select count(id) from emp&quot;;</span><br><span class="line">        Long total &#x3D; template.queryForObject(sql, Long.class);</span><br><span class="line">        System.out.println(total);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.连接池</span><br><span class="line">	他是解决频繁创建连接和关闭连接的动作, 节约了内存,节约时间</span><br><span class="line">	本质: 就是一个容器, 它里面的连接的close方法被改变了, 不是释放而是归还.</span><br><span class="line">2.C3P0:</span><br><span class="line">	1.导包(2个c3p0的包),2.(数据库驱动包)</span><br><span class="line">	2.编写配置文件xml,而且名字只能叫c3p0-config.xml,这个配置文件放到src下</span><br><span class="line">		这样c3p0才可以找到这个配置文件自动解析里面的数据</span><br><span class="line">	3.创建核心对象 ComboPooledDataSource();</span><br><span class="line">	4.通过连接池获取连接,操作数据库</span><br><span class="line">	</span><br><span class="line">3.Druid(重点!!!!)</span><br><span class="line">	1.导包(1个druid,1个驱动包)</span><br><span class="line">	2.编写配置文件 ----&gt; druid.properties</span><br><span class="line">	3.手动加载配置文件Properties对象中</span><br><span class="line">	4.创建核心对象 new DruidDataSource()</span><br><span class="line">		DruidDataSourceFactory.createDataSourse();</span><br><span class="line">	5.获取连接使用</span><br><span class="line">4.JdbcTemplate</span><br><span class="line">	作用: 简化java操作数据库的步骤</span><br><span class="line">	步骤:</span><br><span class="line">		1.导入jar(5个)</span><br><span class="line">		2.创建核心对象 JdbcTemplate,需要传入数据源(连接池)</span><br><span class="line">		3.使用方法</span><br><span class="line">			DML:</span><br><span class="line">				update()</span><br><span class="line">			DQL:</span><br><span class="line">				queryForMap()(了解) ---&gt;查询结果有且只有一条,并且将这条数据封装成map集合</span><br><span class="line">				queryForList()(了解) --&gt; 查询多个结果, 将每一个结果封装成map集合,然后一堆的map集合放到list集合中</span><br><span class="line">				query() ---&gt;查询多个结果, 将多个结果封装javabean,并且将多个javabean装到list集合返回</span><br><span class="line">					如何指定封装数据的类型:  </span><br><span class="line">						通过BeanPropertyRowMapper来指定</span><br><span class="line">				queryForObject()查询有且只有一个结果, 将一个结果封装javabean,或者将结果封装基本数据类型对应的包装类</span><br><span class="line">					如何指定封装数据的类型:  </span><br><span class="line">						如果是聚合函数:通过基本数据类型的包装类</span><br><span class="line">						如果是自定义javabean:通过BeanPropertyRowMapper来指定</span><br><span class="line">						</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2019/09/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190918HTML/</url>
    <content><![CDATA[<h2 id="1-web概念概述"><a href="#1-web概念概述" class="headerlink" title="1.web概念概述"></a>1.web概念概述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaWeb：</span><br><span class="line">	* 使用Java语言开发基于互联网的项目</span><br><span class="line"></span><br><span class="line">* 软件架构：</span><br><span class="line">	1. C&#x2F;S: Client&#x2F;Server 客户端&#x2F;服务器端</span><br><span class="line">		* 在用户本地有一个客户端程序，在远程有一个服务器端程序</span><br><span class="line">		* 如：QQ，迅雷...</span><br><span class="line">		* 优点：</span><br><span class="line">			1. 用户体验好</span><br><span class="line">		* 缺点：</span><br><span class="line">			1. 开发、安装，部署，维护 麻烦</span><br><span class="line">	2. B&#x2F;S: Browser&#x2F;Server 浏览器&#x2F;服务器端</span><br><span class="line">		* 只需要一个浏览器，用户通过不同的网址(URL)，客户访问不同的服务器端程序</span><br><span class="line">		* 优点：</span><br><span class="line">			1. 开发、安装，部署，维护 简单</span><br><span class="line">		* 缺点：</span><br><span class="line">			1. 如果应用过大，用户的体验可能会受到影响</span><br><span class="line">			2. 对硬件要求过高</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* B&#x2F;S架构详解</span><br><span class="line">	* 资源分类：</span><br><span class="line">		1. 静态资源：</span><br><span class="line">			* 使用静态网页开发技术发布的资源。</span><br><span class="line">			* 特点：</span><br><span class="line">				* 所有用户访问，得到的结果是一样的。</span><br><span class="line">				* 如：文本，图片，音频、视频, HTML,CSS,JavaScript</span><br><span class="line">				* 如果用户请求的是静态资源，那么服务器会直接将静态资源发送给浏览器。浏览器中内置了静态资源的解析引擎，可以展示静态资源</span><br><span class="line">		2. 动态资源：</span><br><span class="line">			* 使用动态网页及时发布的资源。</span><br><span class="line">			* 特点：</span><br><span class="line">				* 所有用户访问，得到的结果可能不一样。</span><br><span class="line">				* 如：jsp&#x2F;servlet,php,asp...</span><br><span class="line">				* 如果用户请求的是动态资源，那么服务器会执行动态资源，转换为静态资源，再发送给浏览器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 我们要学习动态资源，必须先学习静态资源！</span><br><span class="line"></span><br><span class="line">* 静态资源：</span><br><span class="line">	* HTML：用于搭建基础网页，展示页面的内容</span><br><span class="line">	* CSS：用于美化页面，布局页面</span><br><span class="line">	* JavaScript：控制页面的元素，让页面有一些动态的效果</span><br></pre></td></tr></table></figure>

<h2 id="2-HTML"><a href="#2-HTML" class="headerlink" title="2.HTML"></a>2.HTML</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：是最基础的网页开发语言</span><br><span class="line">	* Hyper Text Markup Language 超文本标记语言</span><br><span class="line">		* 超文本:</span><br><span class="line">			* 超文本是用超链接的方法，将各种不同空间的文字信息组织在一起的网状文本.</span><br><span class="line">		* 标记语言:</span><br><span class="line">			* 由标签构成的语言。&lt;标签名称&gt; 如 html，xml</span><br><span class="line">			* 标记语言不是编程语言</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line">	* 语法：</span><br><span class="line">		1. html文档后缀名 .html 或者 .htm</span><br><span class="line">		2. 标签分为</span><br><span class="line">			1. 围堵标签：有开始标签和结束标签。如 &lt;html&gt; &lt;&#x2F;html&gt;</span><br><span class="line">			2. 自闭和标签：开始标签和结束标签在一起。如 &lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">		3. 标签可以嵌套：</span><br><span class="line">			需要正确嵌套，不能你中有我，我中有你</span><br><span class="line">			错误：&lt;a&gt;&lt;b&gt;&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;</span><br><span class="line">			正确：&lt;a&gt;&lt;b&gt;&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">		4. 在开始标签中可以定义属性。属性是由键值对构成，值需要用引号(单双都可)引起来</span><br><span class="line">		5. html的标签不区分大小写，但是建议使用小写。</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		&lt;html&gt;</span><br><span class="line">		</span><br><span class="line">			&lt;head&gt;</span><br><span class="line">				&lt;title&gt;title&lt;&#x2F;title&gt;</span><br><span class="line">			&lt;&#x2F;head&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;body&gt;</span><br><span class="line">				&lt;FONT color&#x3D;&#39;red&#39;&gt;Hello World&lt;&#x2F;font&gt;&lt;br&#x2F;&gt;</span><br><span class="line">				</span><br><span class="line">				&lt;font color&#x3D;&#39;green&#39;&gt;Hello World&lt;&#x2F;font&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;&#x2F;body&gt;</span><br><span class="line">	</span><br><span class="line">		&lt;&#x2F;html&gt;</span><br><span class="line">3. 标签学习：</span><br><span class="line">	1. 文件标签：构成html最基本的标签</span><br><span class="line">		* html:html文档的根标签</span><br><span class="line">		* head：头标签。用于指定html文档的一些属性。引入外部的资源</span><br><span class="line">		* title：标题标签。</span><br><span class="line">		* body：体标签</span><br><span class="line">		* &lt;!DOCTYPE html&gt;：html5中定义该文档是html文档</span><br><span class="line">	2. 文本标签：和文本有关的标签</span><br><span class="line">		* 注释：&lt;!-- 注释内容 --&gt;</span><br><span class="line">		* &lt;h1&gt; to &lt;h6&gt;：标题标签</span><br><span class="line">			* h1~h6:字体大小逐渐递减</span><br><span class="line">		* &lt;p&gt;：段落标签</span><br><span class="line">		* &lt;br&gt;：换行标签</span><br><span class="line">		* &lt;hr&gt;：展示一条水平线</span><br><span class="line">			* 属性：</span><br><span class="line">				* color：颜色</span><br><span class="line">				* width：宽度</span><br><span class="line">				* size：高度</span><br><span class="line">				* align：对其方式</span><br><span class="line">					* center：居中</span><br><span class="line">					* left：左对齐</span><br><span class="line">					* right：右对齐</span><br><span class="line">		* &lt;b&gt;：字体加粗</span><br><span class="line">		* &lt;i&gt;：字体斜体</span><br><span class="line">		* &lt;font&gt;:字体标签</span><br><span class="line">		* &lt;center&gt;:文本居中</span><br><span class="line">			* 属性：</span><br><span class="line">				* color：颜色</span><br><span class="line">				* size：大小</span><br><span class="line">				* face：字体</span><br><span class="line"></span><br><span class="line">		* 属性定义：</span><br><span class="line">			* color：</span><br><span class="line">				1. 英文单词：red,green,blue</span><br><span class="line">				2. rgb(值1，值2，值3)：值的范围：0~255  如  rgb(0,0,255)</span><br><span class="line">				3. #值1值2值3：值的范围：00~FF之间。如： #FF00FF</span><br><span class="line">			* width：</span><br><span class="line">				1. 数值：width&#x3D;&#39;20&#39; ,数值的单位，默认是 px(像素)</span><br><span class="line">				2. 数值%：占比相对于父元素的比例</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 图片标签：</span><br><span class="line">	* img：展示图片</span><br><span class="line">		* 属性：</span><br><span class="line">			* src：指定图片的位置</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		 &lt;!--展示一张图片 img--&gt;</span><br><span class="line"></span><br><span class="line">	    &lt;img src&#x3D;&quot;image&#x2F;jingxuan_2.jpg&quot; align&#x3D;&quot;right&quot; alt&#x3D;&quot;古镇&quot; width&#x3D;&quot;500&quot; height&#x3D;&quot;500&quot;&#x2F;&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;!--</span><br><span class="line">	        相对路径</span><br><span class="line">	            * 以.开头的路径</span><br><span class="line">	                * .&#x2F;：代表当前目录  .&#x2F;image&#x2F;1.jpg</span><br><span class="line">	                * ..&#x2F;:代表上一级目录</span><br><span class="line">	     --&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;img src&#x3D;&quot;.&#x2F;image&#x2F;jiangwai_1.jpg&quot;&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;img src&#x3D;&quot;..&#x2F;image&#x2F;jiangwai_1.jpg&quot;&gt;</span><br><span class="line">4. 列表标签：</span><br><span class="line">	* 有序列表：</span><br><span class="line">		* ol:</span><br><span class="line">		* li:</span><br><span class="line">	* 无序列表：</span><br><span class="line">		* ul:</span><br><span class="line">		* li:</span><br><span class="line">5. 链接标签：</span><br><span class="line">	* a:定义一个超链接</span><br><span class="line">		* 属性：</span><br><span class="line">			* href：指定访问资源的URL(统一资源定位符)</span><br><span class="line">			* target：指定打开资源的方式</span><br><span class="line">				* _self:默认值，在当前页面打开</span><br><span class="line">				* _blank：在空白页面打开</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		 &lt;!--超链接  a--&gt;</span><br><span class="line"></span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot; target&#x3D;&quot;_self&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot; target&#x3D;&quot;_blank&quot;&gt;点我&lt;&#x2F;a&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;a href&#x3D;&quot;.&#x2F;5_列表标签.html&quot;&gt;列表标签&lt;&#x2F;a&gt;&lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;zhaoweixu.com&quot;&gt;联系我&lt;&#x2F;a&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;br&gt;</span><br><span class="line">	    &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;zhaoweixu.com&quot;&gt;&lt;img src&#x3D;&quot;image&#x2F;win_1.jpg&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">6. div和span：</span><br><span class="line">	* div:每一个div占满一整行。块级标签</span><br><span class="line">   	* span：文本信息在一行展示，行内标签 内联标签</span><br><span class="line"></span><br><span class="line">7. 语义化标签：html5中为了提高程序的可读性，提供了一些标签。</span><br><span class="line">	1. &lt;header&gt;：页眉</span><br><span class="line">	2. &lt;footer&gt;：页脚</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8. 表格标签：</span><br><span class="line">	* table：定义表格</span><br><span class="line">		* width：宽度</span><br><span class="line">		* border：边框</span><br><span class="line">		* cellpadding：定义内容和单元格的距离</span><br><span class="line">		* cellspacing：定义单元格之间的距离。如果指定为0，则单元格的线会合为一条、</span><br><span class="line">		* bgcolor：背景色</span><br><span class="line">		* align：对齐方式</span><br><span class="line">	* tr：定义行</span><br><span class="line">		* bgcolor：背景色</span><br><span class="line">		* align：对齐方式</span><br><span class="line">	* td：定义单元格</span><br><span class="line">		* colspan：合并列</span><br><span class="line">		* rowspan：合并行</span><br><span class="line">	* th：定义表头单元格</span><br><span class="line">	* &lt;caption&gt;：表格标题</span><br><span class="line">	* &lt;thead&gt;：表示表格的头部分</span><br><span class="line">	* &lt;tbody&gt;：表示表格的体部分</span><br><span class="line">	* &lt;tfoot&gt;：表示表格的脚部分</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9.表单标签：</span><br><span class="line">	* 概念：用于采集用户输入的数据的。用于和服务器进行交互。</span><br><span class="line">	* form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围</span><br><span class="line">     	  * 属性：</span><br><span class="line">         	  * action：指定提交数据的URL</span><br><span class="line">         	  * method:指定提交方式</span><br><span class="line">              	 * 分类：一共7种，2种比较常用</span><br><span class="line">               	   * get：</span><br><span class="line">                     	  1. 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。</span><br><span class="line">                     	  2. 请求参数大小是有限制的。</span><br><span class="line">                     	  3. 不太安全。</span><br><span class="line">               	   * post：</span><br><span class="line">                     	  1. 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)</span><br><span class="line">                     	  2. 请求参数的大小没有限制。</span><br><span class="line">                     	  3. 较为安全。</span><br><span class="line"></span><br><span class="line">       	* 表单项中的数据要想被提交：必须指定其name属性</span><br><span class="line"></span><br><span class="line">10.表单项标签：</span><br><span class="line">	* input：可以通过type属性值，改变元素展示的样式</span><br><span class="line">		* type属性：</span><br><span class="line">			* text：文本输入框，默认值</span><br><span class="line">				* placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息	</span><br><span class="line">			* password：密码输入框</span><br><span class="line">			* radio:单选框</span><br><span class="line">				* 注意：</span><br><span class="line">					1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。</span><br><span class="line">					2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line">					3. checked属性，可以指定默认值</span><br><span class="line">			* checkbox：复选框</span><br><span class="line">				* 注意：</span><br><span class="line">					1. 一般会给每一个单选框提供value属性，指定其被选中后提交的值</span><br><span class="line">					2. checked属性，可以指定默认值</span><br><span class="line"></span><br><span class="line">			* file：文件选择框</span><br><span class="line">			* hidden：隐藏域，用于提交一些信息。</span><br><span class="line">			* 按钮：</span><br><span class="line">				* submit：提交按钮。可以提交表单</span><br><span class="line">				* button：普通按钮</span><br><span class="line">				* image：图片提交按钮</span><br><span class="line">					* src属性指定图片的路径	</span><br><span class="line"></span><br><span class="line">	   * label：指定输入项的文字描述信息</span><br><span class="line">		   * 注意：</span><br><span class="line">			   * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。</span><br><span class="line">	* select: 下拉列表</span><br><span class="line">		* 子元素：option，指定列表项</span><br><span class="line">		</span><br><span class="line">	* textarea：文本域</span><br><span class="line">		* cols：指定列数，每一行有多少个字符</span><br><span class="line">		* rows：默认多少行。</span><br></pre></td></tr></table></figure>



<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前后端：</span><br><span class="line"></span><br><span class="line">软件的架构：</span><br><span class="line"></span><br><span class="line">​	C&#x2F;S架构：Client Server 客户端服务器端框架 端游 用户体验（游戏过程中的），在个人电脑上安装了一个客户端，可以充分利用本机的各种资源。用户体验差（需要更新）</span><br><span class="line"></span><br><span class="line">​	B&#x2F;S架构：Browser Server 浏览器服务器端框架 页游 用户体验差（游戏过程中），浏览器不能完全利用计算机的资源，显示效果差。用户体验好，不需要单独更新。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JavaWeb阶段学习的就是BS架构。</span><br><span class="line"></span><br><span class="line">​	在BS架构中，运行在浏览器端的部分（页面的内容、页面的样式、页面的交互行为，这些部分就叫做前端）。运行在服务器端的部分（重点部分）。</span><br><span class="line"></span><br><span class="line">前端包括的内容：页面的内容（HTML）、页面的样式（CSS）、页面的交互行为（JavaScript）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">资源的概念：</span><br><span class="line"></span><br><span class="line">​	互联网上，我们的所有内容都是资源。</span><br><span class="line"></span><br><span class="line">​	资源可以分为静态资源和动态资源。每次访问看是否相同。</span><br><span class="line"></span><br><span class="line">​	静态资源就是直接写死的。</span><br><span class="line"></span><br><span class="line">​	动态资源就是使用程序动态生成的。（JSP&#x2F;Servlet、PHP、asp.net、Python、Java</span><br><span class="line">Script）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTML：（Hyper Text Markup Language，超文本标记语言）</span><br><span class="line"></span><br><span class="line">​	是什么？就是由标签组成的一个文本文件。</span><br><span class="line"></span><br><span class="line">​	解决什么问题？用来描述页面中的布局以及内容。</span><br><span class="line"></span><br><span class="line">​	怎么用？基本语法：</span><br><span class="line"></span><br><span class="line">​		1、文件扩展名必须是.html或htm</span><br><span class="line"></span><br><span class="line">​		2、文件是由标签组成的，标签分为围堵标签和自闭合标签</span><br><span class="line"></span><br><span class="line">​		3、标签可以嵌套，但不能交叉嵌套</span><br><span class="line"></span><br><span class="line">​		4、标签可以有属性，属性的值需要用引号引起来（单双都可）</span><br><span class="line"></span><br><span class="line">​		5、html文件不区分大小写，但建议小写</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTML的文件标签：</span><br><span class="line"></span><br><span class="line">​	html</span><br><span class="line"></span><br><span class="line">​	head</span><br><span class="line"></span><br><span class="line">​	title</span><br><span class="line"></span><br><span class="line">​	body</span><br><span class="line"></span><br><span class="line">​	&lt;!DOCTYPE html&gt;</span><br><span class="line"></span><br><span class="line">字体标签：</span><br><span class="line"></span><br><span class="line">​	h1 ~ h6</span><br><span class="line"></span><br><span class="line">​	br</span><br><span class="line"></span><br><span class="line">​	hr</span><br><span class="line"></span><br><span class="line">​	p</span><br><span class="line"></span><br><span class="line">​	b</span><br><span class="line"></span><br><span class="line">​	i</span><br><span class="line"></span><br><span class="line">​	font：</span><br><span class="line"></span><br><span class="line">​	center：</span><br><span class="line"></span><br><span class="line">图片标签（image）：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">&lt;img src&#x3D;&quot;图片路径&quot;&gt;</span><br><span class="line">	. 代表当前路径</span><br><span class="line">	.. 代表不同路径</span><br><span class="line"></span><br><span class="line">html文件和图片在一个目录中</span><br><span class="line">	图片路径 .&#x2F;图片名 或者 图片名</span><br><span class="line">图片位于html文件所在目录的子目录中</span><br><span class="line">	.&#x2F;子文件夹&#x2F;图片名称 或者 子文件夹&#x2F;图片名称</span><br><span class="line">图片在html文件的上一级目录下</span><br><span class="line">	..&#x2F;图片名</span><br><span class="line">图片和html分别在一个不同的子目录中</span><br><span class="line">	..&#x2F;图片所在目录&#x2F;图片名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">列表标签：</span><br><span class="line"></span><br><span class="line">​	ul： unorder list</span><br><span class="line"></span><br><span class="line">​	ol：order list</span><br><span class="line"></span><br><span class="line">​	li：list</span><br><span class="line"></span><br><span class="line">超链接标签：</span><br><span class="line"></span><br><span class="line">​	a:  href ：目标资源的路径（URL地址）</span><br><span class="line"></span><br><span class="line">​		 target：目标，在何处打开新的资源 _self  _blank</span><br><span class="line"></span><br><span class="line">URL：统一资源定位符:</span><br><span class="line"></span><br><span class="line">​		作用：在互联网上唯一的定位一个资源的地址。</span><br><span class="line"></span><br><span class="line">​		格式：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">协议:[子协议:[孙子协议:]]&#x2F;&#x2F;域名或ip地址:端口号&#x2F;资源路径</span><br><span class="line">http:&#x2F;&#x2F;www.baidu.com:80</span><br><span class="line">jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db3</span><br><span class="line">tencent:&#x2F;&#x2F;&#x2F;?q&#x3D;123456</span><br><span class="line"></span><br><span class="line">http:&#x2F;&#x2F;www.baidu.com&#x2F;index.html</span><br><span class="line"></span><br><span class="line">file:&#x2F;&#x2F;&#x2F;d:&#x2F;ascii.png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">span和div：</span><br><span class="line"></span><br><span class="line">​	作为容器，用来装其他标签元素。什么样式都没有。</span><br><span class="line"></span><br><span class="line">行内元素和块级元素：</span><br><span class="line"></span><br><span class="line">​	html中的布局方式：流式布局</span><br><span class="line"></span><br><span class="line">​	行内元素（inline），如果最下一行还有空间，就放在最后一下。如果没有空间，就另起一行。span</span><br><span class="line"></span><br><span class="line">​	块级元素（block）：不管最下一行有没有空间，直接另起一行。div</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语义化：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">	见名知意</span><br><span class="line">&lt;header&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表格标签：（table）</span><br><span class="line"></span><br><span class="line">​	用来展示数据。</span><br><span class="line"></span><br><span class="line">​	表格标签中需要先有行，再有列。</span><br><span class="line"></span><br><span class="line">​	每行的列数必须一致。</span><br><span class="line"></span><br><span class="line">​	table  tr  td（th）</span><br><span class="line"></span><br><span class="line">​	caption（表格标题） thead（表格头部） tbody（表格体） tfoot（表格底部）</span><br><span class="line"></span><br><span class="line">​	td的属性 colspan rowspan 用途合并单元格</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">表单标签&#96;*****&#96;：</span><br><span class="line"></span><br><span class="line">​	form:  一个容器，其中可以放置输入项</span><br><span class="line"></span><br><span class="line">​		action：数据提交到什么位置</span><br><span class="line"></span><br><span class="line">​		method：以什么方式提交</span><br><span class="line"></span><br><span class="line">​				GET方式：数据会拼接在地址栏中，对于用户可见，相对比较危险</span><br><span class="line"></span><br><span class="line">​				POST方式：数据不会出现在地址栏中，所以相对安全</span><br><span class="line"></span><br><span class="line">​	input：输入框</span><br><span class="line"></span><br><span class="line">​		针对不同的数据，展示不同的效果，收集不同类型的数据。</span><br><span class="line"></span><br><span class="line">​		1、数据收集功能：数据需要提交服务器，必须指定name属性（表示数据的内容）。对于数据的内容使用value属性进行指定（text和password可以不指定value属性，因为用户输入的内容就是值）。</span><br><span class="line"></span><br><span class="line">对于单选和复选框，可以提供默认选中项（checked&#x3D;&quot;checked&quot;）</span><br><span class="line"></span><br><span class="line">​			type属性：</span><br><span class="line"></span><br><span class="line">​				text：文本框（默认值）</span><br><span class="line"></span><br><span class="line">​					placeholder: 空间占位符</span><br><span class="line"></span><br><span class="line">​				password：密码</span><br><span class="line"></span><br><span class="line">​					placeholder: 空间占位符</span><br><span class="line"></span><br><span class="line">​				radio：单选框 </span><br><span class="line"></span><br><span class="line">​				checkbox：复选框</span><br><span class="line"></span><br><span class="line">​				file： 文件选择框（用于文件上传）</span><br><span class="line"></span><br><span class="line">​				hidden：隐藏（对于有必须提交的数据，但是数据只有一个值。）</span><br><span class="line"></span><br><span class="line">​		2、按钮类的类型：不需要设置name属性。</span><br><span class="line"></span><br><span class="line">​			submit：提交。将数据提交到服务器</span><br><span class="line"></span><br><span class="line">​			image：图片提交按钮。将数据提交到服务器</span><br><span class="line"></span><br><span class="line">​			button：没有功能的按钮。（结合将来的js来自定义功能）</span><br><span class="line"></span><br><span class="line">​			reset：重置按钮，清空已经填写的内容。</span><br><span class="line"></span><br><span class="line">​		3、H5新增的类型：</span><br><span class="line"></span><br><span class="line">​			color：</span><br><span class="line"></span><br><span class="line">​			date：</span><br><span class="line"></span><br><span class="line">​			datetime-local：</span><br><span class="line"></span><br><span class="line">​			number：</span><br><span class="line"></span><br><span class="line">​			email：</span><br><span class="line"></span><br><span class="line">​	select：下拉列表框，需要设置name属性，数据才可以提交</span><br><span class="line"></span><br><span class="line">​			option：可选项，可以设置value属性</span><br><span class="line"></span><br><span class="line">​				 selected属性： 表示这个选项默认选中</span><br><span class="line"></span><br><span class="line">​	textarea：文本域，收集多行的文本，需要设置name属性才能提交数据</span><br><span class="line"></span><br><span class="line">​		textarea是一个围堵标签，开始标签和结束标签中间的内容就是value的值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2019/09/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190919CSS/</url>
    <content><![CDATA[<h2 id="CSS：页面美化和布局控制"><a href="#CSS：页面美化和布局控制" class="headerlink" title="CSS：页面美化和布局控制"></a>CSS：页面美化和布局控制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： Cascading Style Sheets 层叠样式表</span><br><span class="line">	* 层叠：多个样式可以作用在同一个html的元素上，同时生效</span><br><span class="line"></span><br><span class="line">2. 好处：</span><br><span class="line">	1. 功能强大</span><br><span class="line">	2. 将内容展示和样式控制分离</span><br><span class="line">		* 降低耦合度。解耦</span><br><span class="line">		* 让分工协作更容易</span><br><span class="line">		* 提高开发效率</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. CSS的使用：CSS与html结合方式</span><br><span class="line">	1. 内联样式</span><br><span class="line">		 * 在标签内使用style属性指定css代码</span><br><span class="line">		 * 如：&lt;div style&#x3D;&quot;color:red;&quot;&gt;hello css&lt;&#x2F;div&gt;</span><br><span class="line">	2. 内部样式</span><br><span class="line">		* 在head标签内，定义style标签，style标签的标签体内容就是css代码</span><br><span class="line">		* 如：</span><br><span class="line">			&lt;style&gt;</span><br><span class="line">		        div&#123;</span><br><span class="line">		            color:blue;</span><br><span class="line">		        &#125;</span><br><span class="line">		</span><br><span class="line">		    &lt;&#x2F;style&gt;</span><br><span class="line">			&lt;div&gt;hello css&lt;&#x2F;div&gt;</span><br><span class="line">	3. 外部样式</span><br><span class="line">		1. 定义css资源文件。</span><br><span class="line">		2. 在head标签内，定义link标签，引入外部的资源文件</span><br><span class="line">		* 如：</span><br><span class="line">    		* a.css文件：</span><br><span class="line">				div&#123;</span><br><span class="line">				    color:green;</span><br><span class="line">				&#125;</span><br><span class="line">			&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;a.css&quot;&gt;</span><br><span class="line">			&lt;div&gt;hello css&lt;&#x2F;div&gt;</span><br><span class="line">			&lt;div&gt;hello css&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">	* 注意：</span><br><span class="line">		* 1,2,3种方式 css作用范围越来越大</span><br><span class="line">		* 1方式不常用，后期常用2,3</span><br><span class="line">		* 3种格式可以写为：</span><br><span class="line">			&lt;style&gt;</span><br><span class="line">		        @import &quot;css&#x2F;a.css&quot;;</span><br><span class="line">		    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">4. css语法：</span><br><span class="line">	* 格式：</span><br><span class="line">		选择器 &#123;</span><br><span class="line">			属性名1:属性值1;</span><br><span class="line">			属性名2:属性值2;</span><br><span class="line">			...</span><br><span class="line">		&#125;</span><br><span class="line">	* 选择器:筛选具有相似特征的元素</span><br><span class="line">	* 注意：</span><br><span class="line">		* 每一对属性需要使用；隔开，最后一对属性可以不加；</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 选择器：筛选具有相似特征的元素</span><br><span class="line">	* 分类：</span><br><span class="line">		1. 基础选择器</span><br><span class="line">			1. id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一</span><br><span class="line">		        * 语法：#id属性值&#123;&#125;</span><br><span class="line">		    2. 元素选择器：选择具有相同标签名称的元素</span><br><span class="line">		        * 语法： 标签名称&#123;&#125;</span><br><span class="line">		        * 注意：id选择器优先级高于元素选择器</span><br><span class="line">		    3. 类选择器：选择具有相同的class属性值的元素。</span><br><span class="line">		        * 语法：.class属性值&#123;&#125;</span><br><span class="line">		        * 注意：类选择器选择器优先级高于元素选择器</span><br><span class="line">		2. 扩展选择器：</span><br><span class="line">			1. 选择所有元素：</span><br><span class="line">				* 语法： *&#123;&#125;</span><br><span class="line">			2. 并集选择器：</span><br><span class="line">				* 选择器1,选择器2&#123;&#125;</span><br><span class="line">			</span><br><span class="line">			3. 子选择器：筛选选择器1元素下的选择器2元素</span><br><span class="line">				* 语法：  选择器1 选择器2&#123;&#125;</span><br><span class="line">			4. 父选择器：筛选选择器2的父元素选择器1</span><br><span class="line">				* 语法：  选择器1 &gt; 选择器2&#123;&#125;</span><br><span class="line"></span><br><span class="line">			5. 属性选择器：选择元素名称，属性名&#x3D;属性值的元素</span><br><span class="line">				* 语法：  元素名称[属性名&#x3D;&quot;属性值&quot;]&#123;&#125;</span><br><span class="line"></span><br><span class="line">			6. 伪类选择器：选择一些元素具有的状态</span><br><span class="line">				* 语法： 元素:状态&#123;&#125;</span><br><span class="line">				* 如： &lt;a&gt;</span><br><span class="line">					* 状态：</span><br><span class="line">						* link：初始化的状态</span><br><span class="line">						* visited：被访问过的状态</span><br><span class="line">						* active：正在访问状态</span><br><span class="line">						* hover：鼠标悬浮状态</span><br><span class="line">6. 属性</span><br><span class="line">	1. 字体、文本</span><br><span class="line">		* font-size：字体大小</span><br><span class="line">		* color：文本颜色</span><br><span class="line">		* text-align：对其方式</span><br><span class="line">		* line-height：行高 </span><br><span class="line">	2. 背景</span><br><span class="line">		* background：</span><br><span class="line">	3. 边框</span><br><span class="line">		* border：设置边框，符合属性</span><br><span class="line">	4. 尺寸</span><br><span class="line">		* width：宽度</span><br><span class="line">		* height：高度</span><br><span class="line">	5. 盒子模型：控制布局</span><br><span class="line">		* margin：外边距</span><br><span class="line">		* padding：内边距</span><br><span class="line">			* 默认情况下内边距会影响整个盒子的大小</span><br><span class="line">			* box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小</span><br><span class="line"></span><br><span class="line">		* float：浮动</span><br><span class="line">			* left</span><br><span class="line">			* right</span><br></pre></td></tr></table></figure>

<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;注册页面&lt;&#x2F;title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;</span><br><span class="line">        margin: 0px;</span><br><span class="line">        padding: 0px;</span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line">    body&#123;</span><br><span class="line">        background: url(&quot;img&#x2F;register_bg.png&quot;) no-repeat center;</span><br><span class="line">        padding-top: 25px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rg_layout&#123;</span><br><span class="line">        width: 900px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        border: 8px solid #EEEEEE;</span><br><span class="line">        background-color: white;</span><br><span class="line">        &#x2F;*让div水平居中*&#x2F;</span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rg_left&#123;</span><br><span class="line">        &#x2F;*border: 1px solid red;*&#x2F;</span><br><span class="line">        float: left;</span><br><span class="line">        margin: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .rg_left &gt; p:first-child&#123;</span><br><span class="line">        color:#FFD026;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rg_left &gt; p:last-child&#123;</span><br><span class="line">        color:#A6A6A6;</span><br><span class="line">        font-size: 20px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    .rg_center&#123;</span><br><span class="line">        float: left;</span><br><span class="line">       &#x2F;* border: 1px solid red;*&#x2F;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rg_right&#123;</span><br><span class="line">        &#x2F;*border: 1px solid red;*&#x2F;</span><br><span class="line">        float: right;</span><br><span class="line">        margin: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .rg_right &gt; p:first-child&#123;</span><br><span class="line">        font-size: 15px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    .rg_right p a &#123;</span><br><span class="line">        color:pink;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .td_left&#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        text-align: right;</span><br><span class="line">        height: 45px;</span><br><span class="line">    &#125;</span><br><span class="line">    .td_right&#123;</span><br><span class="line">        padding-left: 50px ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #username,#password,#email,#name,#tel,#birthday,#checkcode&#123;</span><br><span class="line">        width: 251px;</span><br><span class="line">        height: 32px;</span><br><span class="line">        border: 1px solid #A6A6A6 ;</span><br><span class="line">        &#x2F;*设置边框圆角*&#x2F;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        padding-left: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">    #checkcode&#123;</span><br><span class="line">        width: 110px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #img_check&#123;</span><br><span class="line">        height: 32px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #btn_sub&#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        background-color: #FFD026;</span><br><span class="line">        border: 1px solid #FFD026 ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class&#x3D;&quot;rg_layout&quot;&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;rg_left&quot;&gt;</span><br><span class="line">        &lt;p&gt;新用户注册&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;p&gt;USER REGISTER&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;rg_center&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;rg_form&quot;&gt;</span><br><span class="line">            &lt;!--定义表单 form--&gt;</span><br><span class="line">            &lt;form action&#x3D;&quot;#&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">                &lt;table&gt;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;username&quot;&gt;用户名&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;username&quot; placeholder&#x3D;&quot;请输入用户名&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;password&quot;&gt;密码&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;password&quot; id&#x3D;&quot;password&quot; placeholder&#x3D;&quot;请输入密码&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;email&quot;&gt;Email&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;email&quot; name&#x3D;&quot;email&quot; id&#x3D;&quot;email&quot; placeholder&#x3D;&quot;请输入邮箱&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;name&quot;&gt;姓名&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot; id&#x3D;&quot;name&quot; placeholder&#x3D;&quot;请输入姓名&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;tel&quot;&gt;手机号&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;tel&quot; id&#x3D;&quot;tel&quot; placeholder&#x3D;&quot;请输入手机号&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label&gt;性别&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;</span><br><span class="line">                            &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt; 男</span><br><span class="line">                            &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;female&quot;&gt; 女</span><br><span class="line">                        &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;birthday&quot;&gt;出生日期&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;date&quot; name&#x3D;&quot;birthday&quot; id&#x3D;&quot;birthday&quot; placeholder&#x3D;&quot;请输入出生日期&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_left&quot;&gt;&lt;label for&#x3D;&quot;checkcode&quot; &gt;验证码&lt;&#x2F;label&gt;&lt;&#x2F;td&gt;</span><br><span class="line">                        &lt;td class&#x3D;&quot;td_right&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;checkcode&quot; id&#x3D;&quot;checkcode&quot; placeholder&#x3D;&quot;请输入验证码&quot;&gt;</span><br><span class="line">                            &lt;img id&#x3D;&quot;img_check&quot; src&#x3D;&quot;img&#x2F;verify_code.jpg&quot;&gt;</span><br><span class="line">                        &lt;&#x2F;td&gt;</span><br><span class="line">                    &lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; id&#x3D;&quot;btn_sub&quot; value&#x3D;&quot;注册&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">	</span><br><span class="line">&lt;&#x2F;form&gt;	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;rg_right&quot;&gt;</span><br><span class="line">        &lt;p&gt;已有账号?&lt;a href&#x3D;&quot;#&quot;&gt;立即登录&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;		</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;	&lt;&#x2F;div&gt;	    </span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS：层叠样式表（cascade style sheet）</span><br><span class="line"></span><br><span class="line">​	层叠：</span><br><span class="line"></span><br><span class="line">​	样式表：</span><br><span class="line"></span><br><span class="line">CSS与HTML的结合方式：</span><br><span class="line"></span><br><span class="line">​	1、内联：在元素内添加style属性</span><br><span class="line"></span><br><span class="line">​	2、内部：在head标签中添加style标签，在里面写样式</span><br><span class="line"></span><br><span class="line">​	3、外部：使用link标签引入外部的css文件。（href属性）</span><br><span class="line"></span><br><span class="line">CSS的语法：</span><br><span class="line">选择器 &#123;</span><br><span class="line">	属性1: 值1;  &#x2F;* 值不需要加引号，但是必须加单位, 多个键值对之间必须使用;分割 *&#x2F;</span><br><span class="line">	font-size: 40px;	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​	选择器的作用：</span><br><span class="line"></span><br><span class="line">​		找到需要设置样式的那些元素（标签）</span><br><span class="line"></span><br><span class="line">​		属性就是要设置的样式的名字.</span><br><span class="line"></span><br><span class="line">选择器：（Selector）</span><br><span class="line"></span><br><span class="line">​	基本选择器：</span><br><span class="line"></span><br><span class="line">​		id选择器： #id名，按照id的值选择元素（html中元素标签id值应该是唯一的）</span><br><span class="line"></span><br><span class="line">​		类选择器： .类名 ， 按照元素的class属性的值选择元素。</span><br><span class="line"></span><br><span class="line">​		标签选择器： 标签名， 按照标签名选择元素</span><br><span class="line"></span><br><span class="line">​		并列选择器： 选择器1, 选择器2,....   选择1和2选中的元素都采用同样的样式 </span><br><span class="line"></span><br><span class="line">​		*选择器： 选取所有的元素</span><br><span class="line"></span><br><span class="line">​	扩展选择器：</span><br><span class="line"></span><br><span class="line">​		层级选择器：</span><br><span class="line"></span><br><span class="line">​			子类（后代）选择器： 父选择器 子选择器 选择父选择器下所有子选择器选中的元素（不考虑中间有几个层级）</span><br><span class="line"></span><br><span class="line">​			直接子类（后代）选择器：父选择器 &gt;子选择器 选择父选择器直接子代中的子选择器选中的元素（只能选择直接子代）</span><br><span class="line"></span><br><span class="line">​		筛选选择器：</span><br><span class="line"></span><br><span class="line">​			在前面选择器的基础上，进行过滤或筛选，选中其中的几个元素</span><br><span class="line"></span><br><span class="line">​		属性选择器：</span><br><span class="line"></span><br><span class="line">​			按照元素是否有某个属性，或者属性有特定的取值。按照属性来选择元素</span><br><span class="line"></span><br><span class="line">​		伪类选择器：</span><br><span class="line"></span><br><span class="line">​			按照某个状态选择元素</span><br><span class="line"></span><br><span class="line">​				比如超链接，可以设置鼠标滑过、鼠标点击（激活）状态、访问过</span><br><span class="line"></span><br><span class="line">​	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">高内聚、低耦合：（关我屁事、关你屁事）</span><br><span class="line"></span><br><span class="line">​	程序开发的原则。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">选择器&#123;</span><br><span class="line">	属性1: 值1; &#x2F;* 值不需要添加引号，值必须有单位，一个属性必须以;结尾 *&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​	选择器：(重要)</span><br><span class="line"></span><br><span class="line">​		基本选择器：(必须掌握)</span><br><span class="line"></span><br><span class="line">​			id选择器： #id名</span><br><span class="line"></span><br><span class="line">​			类选择器： .类名</span><br><span class="line"></span><br><span class="line">​			标签选择器: 标签名</span><br><span class="line">​            并列选择器: 选择器1,选择器2,.....</span><br><span class="line">​            通用*选择器: *</span><br><span class="line">​        扩展选择器</span><br><span class="line">​            层级选择器(必须掌握)</span><br><span class="line">​              后代选择器(子类选择器):祖宗选择器 空格 后代选择器</span><br><span class="line">​              直接后代选择器:父选择器&gt;子选择器</span><br><span class="line">​            筛选选择器:</span><br><span class="line">​                属性筛选选择器: &#123;属性名&#x3D;属性值&#125;</span><br><span class="line">​                伪类选择器:</span><br><span class="line">​                    a标签的不同状态:     hover ; active;visited;link</span><br><span class="line"></span><br><span class="line">​				输入框状态选择器：</span><br><span class="line"></span><br><span class="line">​					:enable :disabled :checked :selected</span><br><span class="line"></span><br><span class="line">​	属性：</span><br><span class="line"></span><br><span class="line">​		文本相关属性：</span><br><span class="line"></span><br><span class="line">​				color:颜色</span><br><span class="line"></span><br><span class="line">​				font-size：字体大小</span><br><span class="line"></span><br><span class="line">​				font-family： 字体</span><br><span class="line"></span><br><span class="line">​				text-align： 文本的对齐方式（水平方向） center</span><br><span class="line"></span><br><span class="line">​				line-height：行高（设置这个属性值和外边容器的height属性一样高，文字在垂直方向就会居中）</span><br><span class="line"></span><br><span class="line">​		尺寸有关的属性：</span><br><span class="line"></span><br><span class="line">​			width：宽 </span><br><span class="line"></span><br><span class="line">​			height：高</span><br><span class="line"></span><br><span class="line">​		边框相关属性：</span><br><span class="line"></span><br><span class="line">​			border： 边框    border：边框宽度 边框样式 颜色；</span><br><span class="line"></span><br><span class="line">​		背景相关的属性：</span><br><span class="line"></span><br><span class="line">​				background： 背景 background：url(图片路径) no-repeat center；</span><br><span class="line"></span><br><span class="line">​				background-color： 背景颜色</span><br><span class="line"></span><br><span class="line">​		盒子模型相关的属性：</span><br><span class="line"></span><br><span class="line">​			margin：外边距</span><br><span class="line"></span><br><span class="line">​			padding：内边距</span><br><span class="line"></span><br><span class="line">​			box-sizing：盒子模型中宽高代表的意思</span><br><span class="line"></span><br><span class="line">​				border-box： 宽高就是整个盒子所占的空间大小</span><br><span class="line"></span><br><span class="line">​				content-box：（默认值）宽高设置的是内容物的大小，此时盒子的实际占用空间大小等于内容物大小+内边距大小+边框大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​			并列选择器：  选择器1, 选择器2,....</span><br><span class="line"></span><br><span class="line">​			通用*选择器： *</span><br><span class="line"></span><br><span class="line">​		扩展选择器：</span><br><span class="line"></span><br><span class="line">​			层级选择器：（必须掌握）</span><br><span class="line"></span><br><span class="line">​				后代选择器（子类选择器）： 祖宗选择器 空格 后代选择器</span><br><span class="line"></span><br><span class="line">​				直接后代选择器： 父选择器 &gt; 子选择器</span><br><span class="line"></span><br><span class="line">​			筛选选择器：</span><br><span class="line"></span><br><span class="line">​				属性筛选选择器： [属性名&#x3D;属性值]</span><br><span class="line"></span><br><span class="line">​				伪类选择器：</span><br><span class="line"></span><br><span class="line">​					a标签的不同状态： :hover  :active :visited :link</span><br><span class="line"></span><br><span class="line">​				输入框状态选择器：</span><br><span class="line"></span><br><span class="line">​					:enable  :disabled :checked :selected</span><br><span class="line"></span><br><span class="line">​	常用属性：（了解）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2019/09/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190920JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：	一门客户端脚本语言</span><br><span class="line">	* 运行在客户端浏览器中的。每一个浏览器都有JavaScript的解析引擎</span><br><span class="line">	* 脚本语言：不需要编译，直接就可以被浏览器解析执行了</span><br><span class="line"></span><br><span class="line">* 功能：</span><br><span class="line">	* 可以来增强用户和html页面的交互过程，可以来控制html元素，让页面有一些动态的效果，增强用户的体验。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaScript发展史：</span><br><span class="line">	1. 1992年，Nombase公司，开发出第一门客户端脚本语言，专门用于表单的校验。命名为 ： C--	，后来更名为：ScriptEase</span><br><span class="line">	2. 1995年，Netscape(网景)公司，开发了一门客户端脚本语言：LiveScript。后来，请来SUN公司的专家，修改LiveScript，命名为JavaScript</span><br><span class="line">	3. 1996年，微软抄袭JavaScript开发出JScript语言</span><br><span class="line">	4. 1997年，ECMA(欧洲计算机制造商协会)，制定出客户端脚本语言的标准：ECMAScript，就是统一了所有客户端脚本语言的编码方式。</span><br><span class="line"></span><br><span class="line">	* JavaScript &#x3D; ECMAScript + JavaScript自己特有的东西(BOM+DOM)</span><br><span class="line"></span><br><span class="line">* ECMAScript：客户端脚本语言的标准</span><br><span class="line">	1. 基本语法：</span><br><span class="line">		1. 与html结合方式</span><br><span class="line">			1. 内部JS：</span><br><span class="line">				* 定义&lt;script&gt;，标签体内容就是js代码</span><br><span class="line">			2. 外部JS：</span><br><span class="line">				* 定义&lt;script&gt;，通过src属性引入外部的js文件</span><br><span class="line"></span><br><span class="line">			* 注意：</span><br><span class="line">				1. &lt;script&gt;可以定义在html页面的任何地方。但是定义的位置会影响执行顺序。</span><br><span class="line">				2. &lt;script&gt;可以定义多个。</span><br><span class="line">		2. 注释</span><br><span class="line">			1. 单行注释：&#x2F;&#x2F;注释内容</span><br><span class="line">			2. 多行注释：&#x2F;*注释内容*&#x2F;</span><br><span class="line">		3. 数据类型：</span><br><span class="line">			1. 原始数据类型(基本数据类型)：</span><br><span class="line">				1. number：数字。 整数&#x2F;小数&#x2F;NaN(not a number 一个不是数字的数字类型)</span><br><span class="line">				2. string：字符串。 字符串  &quot;abc&quot; &quot;a&quot; &#39;abc&#39;</span><br><span class="line">				3. boolean: true和false</span><br><span class="line">				4. null：一个对象为空的占位符</span><br><span class="line">				5. undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined</span><br><span class="line">				</span><br><span class="line">			2. 引用数据类型：对象</span><br><span class="line">			</span><br><span class="line">		4. 变量</span><br><span class="line">			* 变量：一小块存储数据的内存空间</span><br><span class="line">			* Java语言是强类型语言，而JavaScript是弱类型语言。</span><br><span class="line">				* 强类型：在开辟变量存储空间时，定义了空间将来存储的数据的数据类型。只能存储固定类型的数据</span><br><span class="line">				* 弱类型：在开辟变量存储空间时，不定义空间将来的存储数据类型，可以存放任意类型的数据。</span><br><span class="line">			* 语法：</span><br><span class="line">				* var 变量名 &#x3D; 初始化值;</span><br><span class="line">			</span><br><span class="line">			* typeof运算符：获取变量的类型。</span><br><span class="line">				* 注：null运算后得到的是object</span><br><span class="line">		5. 运算符</span><br><span class="line">			1. 一元运算符：只有一个运算数的运算符</span><br><span class="line">				++，-- ， +(正号)  </span><br><span class="line">				* ++ --: 自增(自减)</span><br><span class="line">					* ++(--) 在前，先自增(自减)，再运算</span><br><span class="line">					* ++(--) 在后，先运算，再自增(自减)</span><br><span class="line">				* +(-)：正负号</span><br><span class="line">			    * 注意：在JS中，如果运算数不是运算符所要求的类型，那么js引擎会自动的将运算数进行类型转换</span><br><span class="line">                    * 其他类型转number：</span><br><span class="line">                        * string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）</span><br><span class="line">                        * boolean转number：true转为1，false转为0</span><br><span class="line">			2. 算数运算符</span><br><span class="line">				+ - * &#x2F; % ...</span><br><span class="line"></span><br><span class="line">			3. 赋值运算符</span><br><span class="line">				&#x3D; +&#x3D; -+....</span><br><span class="line"></span><br><span class="line">			4. 比较运算符</span><br><span class="line">				&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; &#x3D;&#x3D;&#x3D;(全等于)</span><br><span class="line">				* 比较方式</span><br><span class="line">                  1. 类型相同：直接比较</span><br><span class="line">                      * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。</span><br><span class="line">                  2. 类型不同：先进行类型转换，再比较</span><br><span class="line">                      * &#x3D;&#x3D;&#x3D;：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	5. 逻辑运算符</span><br><span class="line">		&amp;&amp; || !</span><br><span class="line">		* 其他类型转boolean：</span><br><span class="line">                 1. number：0或NaN为假，其他为真</span><br><span class="line">                 2. string：除了空字符串(&quot;&quot;)，其他都是true</span><br><span class="line">                 3. null&amp;undefined:都是false</span><br><span class="line">                 4. 对象：所有对象都为true</span><br><span class="line">	</span><br><span class="line">	6. 三元运算符</span><br><span class="line">		? : 表达式</span><br><span class="line">		var a &#x3D; 3;</span><br><span class="line">        var b &#x3D; 4;</span><br><span class="line"></span><br><span class="line">        var c &#x3D; a &gt; b ? 1:0;</span><br><span class="line">		* 语法：</span><br><span class="line">			* 表达式? 值1:值2;</span><br><span class="line">			* 判断表达式的值，如果是true则取值1，如果是false则取值2；</span><br><span class="line">	</span><br><span class="line">6. 流程控制语句：</span><br><span class="line">	1. if...else...</span><br><span class="line">	2. switch:</span><br><span class="line">		* 在java中，switch语句可以接受的数据类型： byte int shor char,枚举(1.5) ,String(1.7)</span><br><span class="line">			* switch(变量):</span><br><span class="line">				case 值:</span><br><span class="line">		* 在JS中,switch语句可以接受任意的原始数据类型</span><br><span class="line">	3. while</span><br><span class="line">	4. do...while</span><br><span class="line">	5. for</span><br><span class="line">7. JS特殊语法：</span><br><span class="line">	1. 语句以;结尾，如果一行只有一条语句则 ;可以省略 (不建议)</span><br><span class="line">	2. 变量的定义使用var关键字，也可以不使用</span><br><span class="line">      		* 用： 定义的变量是局部变量</span><br><span class="line">              * 不用：定义的变量是全局变量(不建议)</span><br><span class="line"></span><br><span class="line">8. 练习：99乘法表</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;99乘法表&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        td&#123;</span><br><span class="line">            border: 1px solid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line"></span><br><span class="line">        document.write(&quot;&lt;table  align&#x3D;&#39;center&#39;&gt;&quot;);</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		        &#x2F;&#x2F;1.完成基本的for循环嵌套，展示乘法表</span><br><span class="line">		        for (var i &#x3D; 1; i &lt;&#x3D; 9 ; i++) &#123;</span><br><span class="line">		            document.write(&quot;&lt;tr&gt;&quot;);</span><br><span class="line">		            for (var j &#x3D; 1; j &lt;&#x3D;i ; j++) &#123;</span><br><span class="line">		                document.write(&quot;&lt;td&gt;&quot;);</span><br><span class="line">		</span><br><span class="line">		                &#x2F;&#x2F;输出  1 * 1 &#x3D; 1</span><br><span class="line">		                document.write(i + &quot; * &quot; + j + &quot; &#x3D; &quot; + ( i*j) +&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;);</span><br><span class="line">		</span><br><span class="line">		                document.write(&quot;&lt;&#x2F;td&gt;&quot;);</span><br><span class="line">		            &#125;</span><br><span class="line">		            &#x2F;*&#x2F;&#x2F;输出换行</span><br><span class="line">		            document.write(&quot;&lt;br&gt;&quot;);*&#x2F;</span><br><span class="line">		</span><br><span class="line">		            document.write(&quot;&lt;&#x2F;tr&gt;&quot;);</span><br><span class="line">		        &#125;</span><br><span class="line">		</span><br><span class="line">		        &#x2F;&#x2F;2.完成表格嵌套</span><br><span class="line">		        document.write(&quot;&lt;&#x2F;table&gt;&quot;);</span><br><span class="line">		</span><br><span class="line">		    &lt;&#x2F;script&gt;</span><br><span class="line">		&lt;&#x2F;head&gt;</span><br><span class="line">		&lt;body&gt;</span><br><span class="line">		</span><br><span class="line">		&lt;&#x2F;body&gt;</span><br><span class="line">		&lt;&#x2F;html&gt;</span><br><span class="line"></span><br><span class="line">	2. 基本对象：</span><br><span class="line">		1. Function：函数(方法)对象</span><br><span class="line">            1. 创建：</span><br><span class="line">                1. var fun &#x3D; new Function(形式参数列表,方法体);  &#x2F;&#x2F;忘掉吧</span><br><span class="line">                2. </span><br><span class="line">                    function 方法名称(形式参数列表)&#123;</span><br><span class="line">                        方法体</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                3. </span><br><span class="line">                   var 方法名 &#x3D; function(形式参数列表)&#123;</span><br><span class="line">                        方法体</span><br><span class="line">                   &#125;</span><br><span class="line">            2. 方法：</span><br><span class="line"></span><br><span class="line">            3. 属性：</span><br><span class="line">                length:代表形参的个数</span><br><span class="line">            4. 特点：</span><br><span class="line">                1. 方法定义是，形参的类型不用写,返回值类型也不写。</span><br><span class="line">                2. 方法是一个对象，如果定义名称相同的方法，会覆盖</span><br><span class="line">                3. 在JS中，方法的调用只与方法的名称有关，和参数列表无关</span><br><span class="line">                4. 在方法声明中有一个隐藏的内置对象（数组），arguments,封装所有的实际参数</span><br><span class="line">            5. 调用：</span><br><span class="line">                方法名称(实际参数列表);</span><br><span class="line">		</span><br><span class="line">		2. Array:数组对象</span><br><span class="line">            1. 创建：</span><br><span class="line">                1. var arr &#x3D; new Array(元素列表);</span><br><span class="line">                2. var arr &#x3D; new Array(默认长度);</span><br><span class="line">                3. var arr &#x3D; [元素列表];</span><br><span class="line">            2. 方法</span><br><span class="line">                join(参数):将数组中的元素按照指定的分隔符拼接为字符串</span><br><span class="line">                push()	向数组的末尾添加一个或更多元素，并返回新的长度。</span><br><span class="line">            3. 属性</span><br><span class="line">                length:数组的长度</span><br><span class="line">            4. 特点：</span><br><span class="line">                1. JS中，数组元素的类型可变的。</span><br><span class="line">                2. JS中，数组长度可变的。</span><br><span class="line">		3. Boolean</span><br><span class="line">		4. Date：日期对象</span><br><span class="line">            1. 创建：</span><br><span class="line">                var date &#x3D; new Date();</span><br><span class="line"></span><br><span class="line">            2. 方法：</span><br><span class="line">                toLocaleString()：返回当前date对象对应的时间本地字符串格式</span><br><span class="line">                getTime():获取毫秒值。返回当前如期对象描述的时间到1970年1月1日零点的毫秒值差</span><br><span class="line">		5. Math：数学对象</span><br><span class="line">            1. 创建：</span><br><span class="line">                * 特点：Math对象不用创建，直接使用。  Math.方法名();</span><br><span class="line"></span><br><span class="line">            2. 方法：</span><br><span class="line">                random():返回 0 ~ 1 之间的随机数。 含0不含1</span><br><span class="line">                ceil(x)：对数进行上舍入。</span><br><span class="line">                floor(x)：对数进行下舍入。</span><br><span class="line">                round(x)：把数四舍五入为最接近的整数。</span><br><span class="line">            3. 属性：</span><br><span class="line">                PI</span><br><span class="line">		6. Number</span><br><span class="line">		7. String</span><br><span class="line">		8. RegExp：正则表达式对象</span><br><span class="line">			1. 正则表达式：定义字符串的组成规则。</span><br><span class="line">				1. 单个字符:[]</span><br><span class="line">					如： [a] [ab] [a-zA-Z0-9_]</span><br><span class="line">					* 特殊符号代表特殊含义的单个字符:</span><br><span class="line">						\d:单个数字字符 [0-9]</span><br><span class="line">						\w:单个单词字符[a-zA-Z0-9_]</span><br><span class="line">				2. 量词符号：</span><br><span class="line">					?：表示出现0次或1次</span><br><span class="line">					*：表示出现0次或多次</span><br><span class="line">					+：出现1次或多次</span><br><span class="line">					&#123;m,n&#125;:表示 m&lt;&#x3D; 数量 &lt;&#x3D; n</span><br><span class="line">						* m如果缺省： &#123;,n&#125;:最多n次</span><br><span class="line">						* n如果缺省：&#123;m,&#125; 最少m次</span><br><span class="line">				3. 开始结束符号</span><br><span class="line">					* ^:开始</span><br><span class="line">					* $:结束</span><br><span class="line">			2. 正则对象：</span><br><span class="line">				1. 创建</span><br><span class="line">					1. var reg &#x3D; new RegExp(&quot;正则表达式&quot;);</span><br><span class="line">					2. var reg &#x3D; &#x2F;正则表达式&#x2F;;</span><br><span class="line">				2. 方法	</span><br><span class="line">					1. test(参数):验证指定的字符串是否符合正则定义的规范	</span><br><span class="line">		9. Global</span><br><span class="line">			1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();</span><br><span class="line">			2. 方法：</span><br><span class="line">			    encodeURI():url编码</span><br><span class="line">			    decodeURI():url解码</span><br><span class="line"></span><br><span class="line">			    encodeURIComponent():url编码,编码的字符更多</span><br><span class="line">			    decodeURIComponent():url解码</span><br><span class="line"></span><br><span class="line">			    parseInt():将字符串转为数字</span><br><span class="line">			        * 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number</span><br><span class="line">			    isNaN():判断一个值是否是NaN</span><br><span class="line">			        * NaN六亲不认，连自己都不认。NaN参与的&#x3D;&#x3D;比较全部问false</span><br><span class="line"></span><br><span class="line">			    eval():讲 JavaScript 字符串，并把它作为脚本代码来执行。</span><br><span class="line">            3. URL编码</span><br><span class="line">               传智播客 &#x3D;  %E4%BC%A0%E6%99%BA%E6%92%AD%E5%AE%A2</span><br><span class="line"></span><br><span class="line">* BOM</span><br><span class="line"></span><br><span class="line">* DOM</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h4><p>​    数据类型和变量：</p>
<p>​        5种原始数据类型： number string boolean null undefined</p>
<p>​        var 变量名 = 值;</p>
<p>​    运算符：</p>
<p>​        算术运算符：</p>
<p>​            +： 两种作用：</p>
<p>​                1、当两端有一端是字符串，就执行拼接（另外一端会直接转换为字符串）</p>
<p>​                2、当两端都是数值类型，执行相加操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Java，String a &#x3D; s + 123;创建了几个对象</span><br><span class="line"></span><br><span class="line">	String s &#x3D; &quot;abc&quot;;</span><br><span class="line"></span><br><span class="line">	String a &#x3D; s + 123; </span><br><span class="line"></span><br><span class="line">			String a &#x3D; new StringBuilder().append(s).append(String.valueOf(123)).toString();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        比较运算符：</p>
<p>​            ==  ===</p>
<p>​        逻辑运算符：</p>
<p>​        赋值运算符：</p>
<p>​        三元运算符：</p>
<p>​        有6种数据可以转换为false：</p>
<p>​            0、NaN、””, false, null, undefefind</p>
<p>​    流程控制语句：</p>
<p>​    函数（方法）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义方式：</span></span><br><span class="line"><span class="comment">// 具名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">	函数体;</span><br><span class="line">	[<span class="keyword">return</span> 返回值];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params">形参列表</span>)</span>&#123;</span><br><span class="line">	函数体;</span><br><span class="line">	[<span class="keyword">return</span> 返回值];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数的调用:</span></span><br><span class="line"><span class="comment">// 参数问题：</span></span><br><span class="line"><span class="comment">// 在JS种没有方法重载，如果有同名方法会覆盖</span></span><br><span class="line"><span class="comment">// 在JS种形参和实参的数量不需要一样</span></span><br><span class="line"><span class="comment">// 在函数种使用arguments数组获取所有的实参</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值的问题：</span></span><br><span class="line"><span class="comment">// 在JS种，所有的函数都有返回值，如果显式指定返回值，返回值就是返回的值，如果没有指定，返回undefefind</span></span><br></pre></td></tr></table></figure>

<p>​    常用的数据结构（数组）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在JS种，数组种可以存储任意类型的，任意个数的数据。数据的个数可以动态变化。</span></span><br><span class="line"><span class="comment">// 数组也是对象，也有方法</span></span><br><span class="line"><span class="comment">// 定义：</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(数组的长度);<span class="comment">// 创建一个长度为指定个数的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(元素列表); <span class="comment">// 创建一个含有指定元素的数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">// 创建了一个数组，使用[]创建数组</span></span><br><span class="line"><span class="comment">// 常用属性和方法：</span></span><br><span class="line">arr.length <span class="comment">// 数组长度</span></span><br><span class="line">arr[索引] <span class="comment">// 获取或设置元素</span></span><br><span class="line">arr.push(新的元素列表) <span class="comment">// 往数组的最后，追加一个或一些元素</span></span><br><span class="line">arr.pop() <span class="comment">// 从数组的最后取出一个元素。</span></span><br><span class="line">arr.join(分隔符) <span class="comment">// 使用分隔符将数组生成一个字符串，如果不设置分隔符默认使用,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="JS中的对象"><a href="#JS中的对象" class="headerlink" title="JS中的对象"></a>JS中的对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JS中的对象，就是内存中的一片空间，是一个数据（属性）和方法（函数）的结合体。</span></span><br><span class="line"><span class="comment">// 创建对象：</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;zs&quot;</span>, </span><br><span class="line">    age: <span class="number">18</span>, </span><br><span class="line">    sayNihao: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">&quot;nihao&quot;</span>) &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象的属性和方法可以动态添加或获取</span></span><br><span class="line"><span class="keyword">var</span> name = obj.name <span class="comment">// 获取属性的值</span></span><br><span class="line">obj.name = <span class="string">&quot;ls&quot;</span> <span class="comment">// 设置属性的值</span></span><br><span class="line">obj.gender = <span class="string">&quot;male&quot;</span> <span class="comment">// 如果对象原来没有这个属性，就会动态添加这个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在JS中，函数或方法也是对象，函数或方法名就是指向函数对象的一个引用</span></span><br><span class="line"><span class="comment">// 可以把函数的引用赋值给对象的属性</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;Hi&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">obj.sayHi = fun;</span><br><span class="line">obj.sayHi();</span><br><span class="line"></span><br><span class="line">obj.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>​    </p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript高级</title>
    <url>/2019/09/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190921JavaScript%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. JavaScript：</span><br><span class="line">	1. ECMAScript：</span><br><span class="line">	2. BOM：</span><br><span class="line">	3. DOM：</span><br><span class="line">		1. 事件</span><br></pre></td></tr></table></figure>

<h2 id="DOM简单学习：为了满足案例要求"><a href="#DOM简单学习：为了满足案例要求" class="headerlink" title="DOM简单学习：为了满足案例要求"></a>DOM简单学习：为了满足案例要求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 功能：控制html文档的内容</span><br><span class="line">* 获取页面标签(元素)对象：Element</span><br><span class="line">	* document.getElementById(&quot;id值&quot;):通过元素的id获取元素对象</span><br><span class="line"></span><br><span class="line">* 操作Element对象：</span><br><span class="line">	1. 修改属性值：</span><br><span class="line">		1. 明确获取的对象是哪一个？</span><br><span class="line">		2. 查看API文档，找其中有哪些属性可以设置</span><br><span class="line">	2. 修改标签体内容：</span><br><span class="line">		* 属性：innerHTML</span><br><span class="line">		1. 获取元素对象</span><br><span class="line">		2. 使用innerHTML属性修改标签体内容</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="事件简单学习"><a href="#事件简单学习" class="headerlink" title="事件简单学习"></a>事件简单学习</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 功能： 某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line">	* 造句：  xxx被xxx,我就xxx</span><br><span class="line">		* 我方水晶被摧毁后，我就责备对友。</span><br><span class="line">		* 敌方水晶被摧毁后，我就夸奖自己。</span><br><span class="line"></span><br><span class="line">* 如何绑定事件</span><br><span class="line">	1. 直接在html标签上，指定事件的属性(操作)，属性值就是js代码</span><br><span class="line">		1. 事件：onclick--- 单击事件</span><br><span class="line"></span><br><span class="line">	2. 通过js获取元素对象，指定事件属性，设置一个函数</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		&lt;body&gt;</span><br><span class="line">			&lt;img id&#x3D;&quot;light&quot; src&#x3D;&quot;img&#x2F;off.gif&quot;  onclick&#x3D;&quot;fun();&quot;&gt;</span><br><span class="line">			&lt;img id&#x3D;&quot;light2&quot; src&#x3D;&quot;img&#x2F;off.gif&quot;&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;script&gt;</span><br><span class="line">			    function fun()&#123;</span><br><span class="line">			        alert(&#39;我被点了&#39;);</span><br><span class="line">			        alert(&#39;我又被点了&#39;);</span><br><span class="line">			    &#125;</span><br><span class="line">			</span><br><span class="line">			    function fun2()&#123;</span><br><span class="line">			        alert(&#39;咋老点我？&#39;);</span><br><span class="line">			    &#125;</span><br><span class="line">			</span><br><span class="line">			    &#x2F;&#x2F;1.获取light2对象</span><br><span class="line">			    var light2 &#x3D; document.getElementById(&quot;light2&quot;);</span><br><span class="line">			    &#x2F;&#x2F;2.绑定事件</span><br><span class="line">			    light2.onclick &#x3D; fun2;</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">			&lt;&#x2F;script&gt;</span><br><span class="line">		&lt;&#x2F;body&gt;</span><br><span class="line"></span><br><span class="line">* 案例1：电灯开关</span><br><span class="line">	&lt;!DOCTYPE html&gt;</span><br><span class="line">	&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">	    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	    &lt;title&gt;电灯开关&lt;&#x2F;title&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;img id&#x3D;&quot;light&quot; src&#x3D;&quot;img&#x2F;off.gif&quot;&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;script&gt;</span><br><span class="line">	    &#x2F;*</span><br><span class="line">	        分析：</span><br><span class="line">	            1.获取图片对象</span><br><span class="line">	            2.绑定单击事件</span><br><span class="line">	            3.每次点击切换图片</span><br><span class="line">	                * 规则：</span><br><span class="line">	                    * 如果灯是开的 on,切换图片为 off</span><br><span class="line">	                    * 如果灯是关的 off,切换图片为 on</span><br><span class="line">	                * 使用标记flag来完成</span><br><span class="line">	</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	</span><br><span class="line">	    &#x2F;&#x2F;1.获取图片对象</span><br><span class="line">	    var light &#x3D; document.getElementById(&quot;light&quot;);</span><br><span class="line">	</span><br><span class="line">	    var flag &#x3D; false;&#x2F;&#x2F;代表灯是灭的。 off图片</span><br><span class="line">	</span><br><span class="line">	    &#x2F;&#x2F;2.绑定单击事件</span><br><span class="line">	    light.onclick &#x3D; function()&#123;</span><br><span class="line">	        if(flag)&#123;&#x2F;&#x2F;判断如果灯是开的，则灭掉</span><br><span class="line">	            light.src &#x3D; &quot;img&#x2F;off.gif&quot;;</span><br><span class="line">	            flag &#x3D; false;</span><br><span class="line">	</span><br><span class="line">	        &#125;else&#123;</span><br><span class="line">	            &#x2F;&#x2F;如果灯是灭的，则打开</span><br><span class="line">	</span><br><span class="line">	            light.src &#x3D; &quot;img&#x2F;on.gif&quot;;</span><br><span class="line">	            flag &#x3D; true;</span><br><span class="line">	        &#125;</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM:"></a>BOM:</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：Browser Object Model 浏览器对象模型</span><br><span class="line">	* 将浏览器的各个组成部分封装成对象。</span><br><span class="line"></span><br><span class="line">2. 组成：</span><br><span class="line">	* Window：窗口对象</span><br><span class="line">	* Navigator：浏览器对象</span><br><span class="line">	* Screen：显示器屏幕对象</span><br><span class="line">	* History：历史记录对象</span><br><span class="line">	* Location：地址栏对象</span><br><span class="line"></span><br><span class="line">3. Window：窗口对象</span><br><span class="line">    1. 创建</span><br><span class="line">    2. 方法</span><br><span class="line">         1. 与弹出框有关的方法：</span><br><span class="line">            alert()	显示带有一段消息和一个确认按钮的警告框。</span><br><span class="line">            confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。</span><br><span class="line">                * 如果用户点击确定按钮，则方法返回true</span><br><span class="line">                * 如果用户点击取消按钮，则方法返回false</span><br><span class="line">            prompt()	显示可提示用户输入的对话框。</span><br><span class="line">                * 返回值：获取用户输入的值</span><br><span class="line">         2. 与打开关闭有关的方法：</span><br><span class="line">            close()	关闭浏览器窗口。</span><br><span class="line">                * 谁调用我 ，我关谁</span><br><span class="line">            open()	打开一个新的浏览器窗口</span><br><span class="line">                * 返回新的Window对象</span><br><span class="line">         3. 与定时器有关的方式</span><br><span class="line">            setTimeout()	在指定的毫秒数后调用函数或计算表达式。</span><br><span class="line">                * 参数：</span><br><span class="line">                    1. js代码或者方法对象</span><br><span class="line">                    2. 毫秒值</span><br><span class="line">                * 返回值：唯一标识，用于取消定时器</span><br><span class="line">            clearTimeout()	取消由 setTimeout() 方法设置的 timeout。</span><br><span class="line"></span><br><span class="line">            setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。</span><br><span class="line">            clearInterval()	取消由 setInterval() 设置的 timeout。</span><br><span class="line"></span><br><span class="line">    3. 属性：</span><br><span class="line">        1. 获取其他BOM对象：</span><br><span class="line">            history</span><br><span class="line">            location</span><br><span class="line">            Navigator</span><br><span class="line">            Screen:</span><br><span class="line">        2. 获取DOM对象</span><br><span class="line">            document</span><br><span class="line">    4. 特点</span><br><span class="line">        * Window对象不需要创建可以直接使用 window使用。 window.方法名();</span><br><span class="line">        * window引用可以省略。  方法名();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. Location：地址栏对象</span><br><span class="line">	1. 创建(获取)：</span><br><span class="line">		1. window.location</span><br><span class="line">		2. location</span><br><span class="line"></span><br><span class="line">	2. 方法：</span><br><span class="line">		* reload()	重新加载当前文档。刷新</span><br><span class="line">	3. 属性</span><br><span class="line">		* href	设置或返回完整的 URL。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. History：历史记录对象</span><br><span class="line">    1. 创建(获取)：</span><br><span class="line">        1. window.history</span><br><span class="line">        2. history</span><br><span class="line"></span><br><span class="line">    2. 方法：</span><br><span class="line">        * back()	加载 history 列表中的前一个 URL。</span><br><span class="line">        * forward()	加载 history 列表中的下一个 URL。</span><br><span class="line">        * go(参数)	加载 history 列表中的某个具体页面。</span><br><span class="line">            * 参数：</span><br><span class="line">                * 正数：前进几个历史记录</span><br><span class="line">                * 负数：后退几个历史记录</span><br><span class="line">    3. 属性：</span><br><span class="line">        * length	返回当前窗口历史列表中的 URL 数量。</span><br></pre></td></tr></table></figure>



<h2 id="DOM："><a href="#DOM：" class="headerlink" title="DOM："></a>DOM：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念： Document Object Model 文档对象模型</span><br><span class="line">	* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line"></span><br><span class="line">* W3C DOM 标准被分为 3 个不同的部分：</span><br><span class="line"></span><br><span class="line">	* 核心 DOM - 针对任何结构化文档的标准模型</span><br><span class="line">		* Document：文档对象</span><br><span class="line">		* Element：元素对象</span><br><span class="line">		* Attribute：属性对象</span><br><span class="line">		* Text：文本对象</span><br><span class="line">		* Comment:注释对象</span><br><span class="line"></span><br><span class="line">		* Node：节点对象，其他5个的父对象</span><br><span class="line">	* XML DOM - 针对 XML 文档的标准模型</span><br><span class="line">	* HTML DOM - 针对 HTML 文档的标准模型</span><br></pre></td></tr></table></figure>





<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 核心DOM模型：</span><br><span class="line">	* Document：文档对象</span><br><span class="line">		1. 创建(获取)：在html dom模型中可以使用window对象来获取</span><br><span class="line">			1. window.document</span><br><span class="line">			2. document</span><br><span class="line">		2. 方法：</span><br><span class="line">			1. 获取Element对象：</span><br><span class="line">				1. getElementById()	： 根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line">				2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</span><br><span class="line">				3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line">				4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line">			2. 创建其他DOM对象：</span><br><span class="line">				createAttribute(name)</span><br><span class="line">            	createComment()</span><br><span class="line">            	createElement()</span><br><span class="line">            	createTextNode()</span><br><span class="line">		3. 属性</span><br><span class="line">	* Element：元素对象</span><br><span class="line">		1. 获取&#x2F;创建：通过document来获取和创建</span><br><span class="line">		2. 方法：</span><br><span class="line">			1. removeAttribute()：删除属性</span><br><span class="line">			2. setAttribute()：设置属性</span><br><span class="line">	* Node：节点对象，其他5个的父对象</span><br><span class="line">		* 特点：所有dom对象都可以被认为是一个节点</span><br><span class="line">		* 方法：</span><br><span class="line">			* CRUD dom树：</span><br><span class="line">				* appendChild()：向节点的子节点列表的结尾添加新的子节点。</span><br><span class="line">				* removeChild()	：删除（并返回）当前节点的指定子节点。</span><br><span class="line">				* replaceChild()：用新节点替换一个子节点。</span><br><span class="line">		* 属性：</span><br><span class="line">			* parentNode 返回节点的父节点。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* HTML DOM</span><br><span class="line">	1. 标签体的设置和获取：innerHTML</span><br><span class="line">	2. 使用html元素对象的属性</span><br><span class="line">	3. 控制元素样式</span><br><span class="line">		1. 使用元素的style属性来设置</span><br><span class="line">			如：</span><br><span class="line">				 &#x2F;&#x2F;修改样式方式1</span><br><span class="line">		        div1.style.border &#x3D; &quot;1px solid red&quot;;</span><br><span class="line">		        div1.style.width &#x3D; &quot;200px&quot;;</span><br><span class="line">		        &#x2F;&#x2F;font-size--&gt; fontSize</span><br><span class="line">		        div1.style.fontSize &#x3D; &quot;20px&quot;;</span><br><span class="line">		2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</span><br></pre></td></tr></table></figure>

<h2 id="事件监听机制："><a href="#事件监听机制：" class="headerlink" title="事件监听机制："></a>事件监听机制：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：某些组件被执行了某些操作后，触发某些代码的执行。	</span><br><span class="line">	* 事件：某些操作。如： 单击，双击，键盘按下了，鼠标移动了</span><br><span class="line">	* 事件源：组件。如： 按钮 文本输入框...</span><br><span class="line">	* 监听器：代码。</span><br><span class="line">	* 注册监听：将事件，事件源，监听器结合在一起。 当事件源上发生了某个事件，则触发执行某个监听器代码。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 常见的事件：</span><br><span class="line">	1. 点击事件：</span><br><span class="line">		1. onclick：单击事件</span><br><span class="line">		2. ondblclick：双击事件</span><br><span class="line">	2. 焦点事件</span><br><span class="line">		1. onblur：失去焦点</span><br><span class="line">		2. onfocus:元素获得焦点。</span><br><span class="line"></span><br><span class="line">	3. 加载事件：</span><br><span class="line">		1. onload：一张页面或一幅图像完成加载。</span><br><span class="line"></span><br><span class="line">	4. 鼠标事件：</span><br><span class="line">		1. onmousedown	鼠标按钮被按下。</span><br><span class="line">		2. onmouseup	鼠标按键被松开。</span><br><span class="line">		3. onmousemove	鼠标被移动。</span><br><span class="line">		4. onmouseover	鼠标移到某元素之上。</span><br><span class="line">		5. onmouseout	鼠标从某元素移开。</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 键盘事件：</span><br><span class="line">	1. onkeydown	某个键盘按键被按下。	</span><br><span class="line">	2. onkeyup		某个键盘按键被松开。</span><br><span class="line">	3. onkeypress	某个键盘按键被按下并松开。</span><br><span class="line"></span><br><span class="line">6. 选择和改变</span><br><span class="line">	1. onchange	域的内容被改变。</span><br><span class="line">	2. onselect	文本被选中。</span><br><span class="line"></span><br><span class="line">7. 表单事件：</span><br><span class="line">	1. onsubmit	确认按钮被点击。</span><br><span class="line">	2. onreset	重置按钮被点击。</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="正则表达式及正则表达式对象"><a href="#正则表达式及正则表达式对象" class="headerlink" title="正则表达式及正则表达式对象"></a>正则表达式及正则表达式对象</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正则表达式：</span><br><span class="line">	1、字符表示形式</span><br><span class="line">		 直接写，就表示匹配相同的字符</span><br><span class="line"></span><br><span class="line">		 多选一, [字符的列表]         1[3456789][0-9]</span><br><span class="line">			多选一可以使用范围，范围就是一个-</span><br><span class="line">			^如果用在多选一的中括号中表示取反。  [^0-9]</span><br><span class="line">		 特殊定义好的字符：</span><br><span class="line">		 	\d 代表了[0-9]</span><br><span class="line">		 	\w 代表了所有的文档字符[a-zA-Z0-9_-]</span><br><span class="line">	2、数量词</span><br><span class="line">		?: 没有或出现一次</span><br><span class="line">		*：出现任意次或不出现</span><br><span class="line">		+：至少出现一次</span><br><span class="line">		&#123;m, n&#125;： 出现m-n次（包含m和n） &#123;0,n&#125; 表示最多出现n次</span><br><span class="line">		&#123;m,&#125;: 出现最少m次（包含m）</span><br><span class="line">		&#123;m&#125;: 出现正好m次</span><br><span class="line">	3、其他语法</span><br><span class="line">		^: 匹配字符串的开始</span><br><span class="line">		$：匹配字符串的结束</span><br><span class="line">		i: 忽略大小写</span><br><span class="line">		g：全局匹配</span><br><span class="line">	</span><br><span class="line">正则表达式对象：</span><br><span class="line">	创建：</span><br><span class="line">	var reg &#x3D; new RegExp(&quot;正则表达式&quot;); &#x2F;&#x2F; 不推荐使用</span><br><span class="line">	var reg &#x3D; &#x2F;正则表达式&#x2F;;</span><br><span class="line">	</span><br><span class="line">	使用：</span><br><span class="line">		reg.test(要校验的字符串) 返回值是true或false</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h4><p>parseInt() 把字符串转换为数字，如果转换不了，返回NaN</p>
<p>parseFloat()</p>
<p>isNaN() 判断一个数据是否不能转换为数字：</p>
<p>​        如果可以转换为数字，返回false</p>
<p>​        如果不能转换为数字，返回true</p>
<p>eval() 可以把一个字符串当作一个js代码进行执行</p>
<h4 id="BOM和DOM"><a href="#BOM和DOM" class="headerlink" title="BOM和DOM"></a>BOM和DOM</h4><p>BOM：Browser Object Model，浏览器对象模型，是以对象的形式操作浏览器的功能。</p>
<p>DOM：Document Object Model。文档对象模型，是以对象的形式操作HTML标签和CSS样式。</p>
<p>​        1、获取对象（知道对象的功能）</p>
<p>​        2、操作对象的属性或方法（对象有哪些属性和方法）</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>​    是什么？能干什么？</p>
<p>​    就是把HTML中的各种标签，抽象层了很多对象，然后用面向对象的方式来操作这些元素（标签）。</p>
<p>​    怎么用？</p>
<p>​        如何获取标签对象：</p>
<p>​            var elementObj = document.getElementById(id属性的值)； // 根据元素的id属性的值去获取一个对象</p>
<p>​            document.getElementsByClassName(类名);  // 根据元素的class属性的值去获取一个元素对象数组（伪数组）</p>
<p>​            document.getelementsByTagName(标签名); // 根据元素的标签名去获取一个元素对象数组（伪数组）</p>
<p>​        标签对象都有哪些属性和方法可以被操作？</p>
<p>​            a: href</p>
<p>​            img: src</p>
<p>​            操作内容，innerHTML, 操作的是元素开始标签和结束标签中间的内容。</p>
<h4 id="事件及事件驱动"><a href="#事件及事件驱动" class="headerlink" title="事件及事件驱动"></a>事件及事件驱动</h4><p>​    事件的三个要素：</p>
<p>​        事件源：发生事件的那个东西</p>
<p>​        事件的处理程序（监听器）：发生事件之后，执行的程序</p>
<p>​        事件（事件自身）：发生的那件事</p>
<p>​    事件驱动程序编写的三个步骤：</p>
<p>​        1、搞一个事件源</p>
<p>​        2、编写一个事件处理函数（监听器）</p>
<p>​        3、绑定事件源和事件处理程序</p>
<h3 id="BOM中的常用对象"><a href="#BOM中的常用对象" class="headerlink" title="BOM中的常用对象"></a>BOM中的常用对象</h3><h4 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h4><p>​    是什么？有什么用？</p>
<p>​        window对象就是浏览器中打开的某个标签页的抽象出来的对象。window对象可以操作当前标签页中的所有内容。</p>
<p>​    怎么用？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、怎么获取</span></span><br><span class="line">	<span class="comment">// 在浏览器中，可以直接使用window变量使用Window对象不需要创建/window对象是浏览器中的顶级对象，所有的属性和方法都是window对象的子属性或子对象，window.可以省略。</span></span><br><span class="line"><span class="comment">// 2、常用的方法：</span></span><br><span class="line">	<span class="comment">// 跟弹框相关的方法</span></span><br><span class="line">	alert()</span><br><span class="line">	confirm()</span><br><span class="line">	prompt()</span><br><span class="line">	<span class="comment">// 跟窗口打开关闭相关的</span></span><br><span class="line">	open()</span><br><span class="line">	close()</span><br><span class="line">	<span class="comment">// 跟定时器相关的方法(重要)</span></span><br><span class="line">	<span class="built_in">setTimeout</span>()</span><br><span class="line">	<span class="built_in">clearTimeout</span>()</span><br><span class="line"></span><br><span class="line">	<span class="built_in">setInterval</span>()</span><br><span class="line">	<span class="built_in">clearInterval</span>()</span><br><span class="line">	<span class="comment">// setTimeout的参数</span></span><br><span class="line">		<span class="keyword">var</span> 定时器的id = <span class="built_in">setTimeout</span>(函数对象, 毫秒值)</span><br><span class="line">        列：</span><br><span class="line">        	<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="string">&quot;boom~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        	<span class="built_in">setTimeout</span>(<span class="string">&quot;fun();&quot;</span>, <span class="number">2000</span>); <span class="comment">// 忘掉吧</span></span><br><span class="line">			<span class="built_in">setTimeout</span>(fun, <span class="number">2000</span>); <span class="comment">// 重点掌握</span></span><br><span class="line"> <span class="comment">// 3、常用属性：</span></span><br><span class="line">	<span class="built_in">document</span></span><br><span class="line">    history</span><br><span class="line">    location</span><br><span class="line">    navigator</span><br><span class="line">    screen</span><br><span class="line">    <span class="built_in">console</span>(控制台对象)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>xml</title>
    <url>/2019/09/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190923xml/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XML：</span><br><span class="line">	1. 概念</span><br><span class="line">	2. 语法</span><br><span class="line">	3. 解析</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="XML："><a href="#XML：" class="headerlink" title="XML："></a>XML：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：Extensible Markup Language 可扩展标记语言</span><br><span class="line">	* 可扩展：标签都是自定义的。 &lt;user&gt;  &lt;student&gt;</span><br><span class="line"></span><br><span class="line">	* 功能</span><br><span class="line">		* 存储数据</span><br><span class="line">			1. 配置文件</span><br><span class="line">			2. 在网络中传输</span><br><span class="line">	* xml与html的区别</span><br><span class="line">		1. xml标签都是自定义的，html标签是预定义。</span><br><span class="line">		2. xml的语法严格，html语法松散</span><br><span class="line">		3. xml是存储数据的，html是展示数据</span><br><span class="line"></span><br><span class="line">	* w3c:万维网联盟</span><br><span class="line"></span><br><span class="line">2. 语法：</span><br><span class="line">	* 基本语法：</span><br><span class="line">		1. xml文档的后缀名 .xml</span><br><span class="line">		2. xml第一行必须定义为文档声明</span><br><span class="line">		3. xml文档中有且仅有一个根标签</span><br><span class="line">		4. 属性值必须使用引号(单双都可)引起来</span><br><span class="line">		5. 标签必须正确关闭</span><br><span class="line">		6. xml标签名称区分大小写</span><br><span class="line">	* 快速入门：</span><br><span class="line">		&lt;?xml version&#x3D;&#39;1.0&#39; ?&gt;</span><br><span class="line">		&lt;users&gt;</span><br><span class="line">			&lt;user id&#x3D;&#39;1&#39;&gt;</span><br><span class="line">				&lt;name&gt;zhangsan&lt;&#x2F;name&gt;</span><br><span class="line">				&lt;age&gt;23&lt;&#x2F;age&gt;</span><br><span class="line">				&lt;gender&gt;male&lt;&#x2F;gender&gt;</span><br><span class="line">				&lt;br&#x2F;&gt;</span><br><span class="line">			&lt;&#x2F;user&gt;</span><br><span class="line">			</span><br><span class="line">			&lt;user id&#x3D;&#39;2&#39;&gt;</span><br><span class="line">				&lt;name&gt;lisi&lt;&#x2F;name&gt;</span><br><span class="line">				&lt;age&gt;24&lt;&#x2F;age&gt;</span><br><span class="line">				&lt;gender&gt;female&lt;&#x2F;gender&gt;</span><br><span class="line">			&lt;&#x2F;user&gt;</span><br><span class="line">		&lt;&#x2F;users&gt;</span><br><span class="line">		</span><br><span class="line">	* 组成部分：</span><br><span class="line">		1. 文档声明</span><br><span class="line">			1. 格式：&lt;?xml 属性列表 ?&gt;</span><br><span class="line">			2. 属性列表：</span><br><span class="line">				* version：版本号，必须的属性</span><br><span class="line">				* encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1</span><br><span class="line">				* standalone：是否独立</span><br><span class="line">					* 取值：</span><br><span class="line">						* yes：不依赖其他文件</span><br><span class="line">						* no：依赖其他文件</span><br><span class="line">		2. 指令(了解)：结合css的</span><br><span class="line">			* &lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;a.css&quot; ?&gt;</span><br><span class="line">		3. 标签：标签名称自定义的</span><br><span class="line">			* 规则：</span><br><span class="line">				* 名称可以包含字母、数字以及其他的字符 </span><br><span class="line">				* 名称不能以数字或者标点符号开始 </span><br><span class="line">				* 名称不能以字母 xml（或者 XML、Xml 等等）开始 </span><br><span class="line">				* 名称不能包含空格 </span><br><span class="line"></span><br><span class="line">		4. 属性：</span><br><span class="line">			id属性值唯一</span><br><span class="line">		5. 文本：</span><br><span class="line">			* CDATA区：在该区域中的数据会被原样展示</span><br><span class="line">				* 格式：  &lt;![CDATA[ 数据 ]]&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 约束：规定xml文档的书写规则</span><br><span class="line">	* 作为框架的使用者(程序员)：</span><br><span class="line">		1. 能够在xml中引入约束文档</span><br><span class="line">		2. 能够简单的读懂约束文档</span><br><span class="line">	</span><br><span class="line">	* 分类：</span><br><span class="line">		1. DTD:一种简单的约束技术</span><br><span class="line">		2. Schema:一种复杂的约束技术</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* DTD：</span><br><span class="line">	* 引入dtd文档到xml文档中</span><br><span class="line">		* 内部dtd：将约束规则定义在xml文档中</span><br><span class="line">		* 外部dtd：将约束的规则定义在外部的dtd文件中</span><br><span class="line">			* 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;</span><br><span class="line">			* 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Schema:</span><br><span class="line">	* 引入：</span><br><span class="line">		1.填写xml文档的根元素</span><br><span class="line">		2.引入xsi前缀.  xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">		3.引入xsd文件命名空间.  xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml  student.xsd&quot;</span><br><span class="line">		4.为每一个xsd约束声明一个前缀,作为标识  xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml&quot; </span><br><span class="line"></span><br><span class="line">	&lt;students   xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">		xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml&quot;</span><br><span class="line">		xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.itcast.cn&#x2F;xml  student.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 解析：操作xml文档，将文档中的数据读取到内存中</span><br><span class="line">	* 操作xml文档</span><br><span class="line">		1. 解析(读取)：将文档中的数据读取到内存中</span><br><span class="line">		2. 写入：将内存中的数据保存到xml文档中。持久化的存储</span><br><span class="line"></span><br><span class="line">	* 解析xml的方式：</span><br><span class="line">		1. DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树</span><br><span class="line">			* 优点：操作方便，可以对文档进行CRUD的所有操作</span><br><span class="line">			* 缺点：占内存</span><br><span class="line">		2. SAX：逐行读取，基于事件驱动的。</span><br><span class="line">			* 优点：不占内存。</span><br><span class="line">			* 缺点：只能读取，不能增删改</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* xml常见的解析器：</span><br><span class="line">	1. JAXP：sun公司提供的解析器，支持dom和sax两种思想</span><br><span class="line">	2. DOM4J：一款非常优秀的解析器</span><br><span class="line">	3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">	4. PULL：Android操作系统内置的解析器，sax方式的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</span><br><span class="line">	* 快速入门：</span><br><span class="line">		* 步骤：</span><br><span class="line">			1. 导入jar包</span><br><span class="line">			2. 获取Document对象</span><br><span class="line">			3. 获取对应的标签Element对象</span><br><span class="line">			4. 获取数据</span><br><span class="line"></span><br><span class="line">	* 代码：</span><br><span class="line">		 &#x2F;&#x2F;2.1获取student.xml的path</span><br><span class="line">        String path &#x3D; JsoupDemo1.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">        &#x2F;&#x2F;2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document</span><br><span class="line">        Document document &#x3D; Jsoup.parse(new File(path), &quot;utf-8&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.获取元素对象 Element</span><br><span class="line">        Elements elements &#x3D; document.getElementsByTag(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line">        &#x2F;&#x2F;3.1获取第一个name的Element对象</span><br><span class="line">        Element element &#x3D; elements.get(0);</span><br><span class="line">        &#x2F;&#x2F;3.2获取数据</span><br><span class="line">        String name &#x3D; element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">* 对象的使用：</span><br><span class="line">	1. Jsoup：工具类，可以解析html或xml文档，返回Document</span><br><span class="line">		* parse：解析html或xml文档，返回Document</span><br><span class="line">			* parse​(File in, String charsetName)：解析xml或html文件的。</span><br><span class="line">			* parse​(String html)：解析xml或html字符串</span><br><span class="line">			* parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象</span><br><span class="line">	2. Document：文档对象。代表内存中的dom树</span><br><span class="line">		* 获取Element对象</span><br><span class="line">			* getElementById​(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">			* getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">			* getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</span><br><span class="line">			* getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br><span class="line">	3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用</span><br><span class="line">	4. Element：元素对象</span><br><span class="line">		1. 获取子元素对象</span><br><span class="line">			* getElementById​(String id)：根据id属性值获取唯一的element对象</span><br><span class="line">			* getElementsByTag​(String tagName)：根据标签名称获取元素对象集合</span><br><span class="line">			* getElementsByAttribute​(String key)：根据属性名称获取元素对象集合</span><br><span class="line">			* getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合</span><br><span class="line"></span><br><span class="line">		2. 获取属性值</span><br><span class="line">			* String attr(String key)：根据属性名称获取属性值</span><br><span class="line">		3. 获取文本内容</span><br><span class="line">			* String text():获取文本内容</span><br><span class="line">			* String html():获取标签体的所有内容(包括字标签的字符串内容)</span><br><span class="line">	5. Node：节点对象</span><br><span class="line">		* 是Document和Element的父类</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 快捷查询方式：</span><br><span class="line">	1. selector:选择器</span><br><span class="line">		* 使用的方法：Elements	select​(String cssQuery)</span><br><span class="line">			* 语法：参考Selector类中定义的语法</span><br><span class="line">	2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言</span><br><span class="line">		* 使用Jsoup的Xpath需要额外导入jar包。</span><br><span class="line">		* 查询w3cshool参考手册，使用xpath的语法完成查询</span><br><span class="line">		* 代码：</span><br><span class="line">			&#x2F;&#x2F;1.获取student.xml的path</span><br><span class="line">	        String path &#x3D; JsoupDemo6.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line">	        &#x2F;&#x2F;2.获取Document对象</span><br><span class="line">	        Document document &#x3D; Jsoup.parse(new File(path), &quot;utf-8&quot;);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;3.根据document对象，创建JXDocument对象</span><br><span class="line">	        JXDocument jxDocument &#x3D; new JXDocument(document);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;4.结合xpath语法查询</span><br><span class="line">	        &#x2F;&#x2F;4.1查询所有student标签</span><br><span class="line">	        List&lt;JXNode&gt; jxNodes &#x3D; jxDocument.selN(&quot;&#x2F;&#x2F;student&quot;);</span><br><span class="line">	        for (JXNode jxNode : jxNodes) &#123;</span><br><span class="line">	            System.out.println(jxNode);</span><br><span class="line">	        &#125;</span><br><span class="line">	</span><br><span class="line">	        System.out.println(&quot;--------------------&quot;);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;4.2查询所有student标签下的name标签</span><br><span class="line">	        List&lt;JXNode&gt; jxNodes2 &#x3D; jxDocument.selN(&quot;&#x2F;&#x2F;student&#x2F;name&quot;);</span><br><span class="line">	        for (JXNode jxNode : jxNodes2) &#123;</span><br><span class="line">	            System.out.println(jxNode);</span><br><span class="line">	        &#125;</span><br><span class="line">	</span><br><span class="line">	        System.out.println(&quot;--------------------&quot;);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;4.3查询student标签下带有id属性的name标签</span><br><span class="line">	        List&lt;JXNode&gt; jxNodes3 &#x3D; jxDocument.selN(&quot;&#x2F;&#x2F;student&#x2F;name[@id]&quot;);</span><br><span class="line">	        for (JXNode jxNode : jxNodes3) &#123;</span><br><span class="line">	            System.out.println(jxNode);</span><br><span class="line">	        &#125;</span><br><span class="line">	        System.out.println(&quot;--------------------&quot;);</span><br><span class="line">	        &#x2F;&#x2F;4.4查询student标签下带有id属性的name标签 并且id属性值为itcast</span><br><span class="line">	</span><br><span class="line">	        List&lt;JXNode&gt; jxNodes4 &#x3D; jxDocument.selN(&quot;&#x2F;&#x2F;student&#x2F;name[@id&#x3D;&#39;itcast&#39;]&quot;);</span><br><span class="line">	        for (JXNode jxNode : jxNodes4) &#123;</span><br><span class="line">	            System.out.println(jxNode);</span><br><span class="line">	        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat&amp;Servlet</title>
    <url>/2019/09/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190925.1Tomcat&amp;Servlet/</url>
    <content><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. web相关概念回顾</span><br><span class="line">2. web服务器软件：Tomcat</span><br><span class="line">3. Servlet入门学习</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="web相关概念回顾"><a href="#web相关概念回顾" class="headerlink" title="web相关概念回顾"></a>web相关概念回顾</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 软件架构</span><br><span class="line">	1. C&#x2F;S：客户端&#x2F;服务器端</span><br><span class="line">	2. B&#x2F;S：浏览器&#x2F;服务器端</span><br><span class="line"></span><br><span class="line">2. 资源分类</span><br><span class="line">	1. 静态资源：所有用户访问后，得到的结果都是一样的，称为静态资源.静态资源可以直接被浏览器解析</span><br><span class="line">		* 如： html,css,JavaScript</span><br><span class="line">	2. 动态资源:每个用户访问相同资源后，得到的结果可能不一样。称为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</span><br><span class="line">		* 如：servlet&#x2F;jsp,php,asp....</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 网络通信三要素</span><br><span class="line">	1. IP：电子设备(计算机)在网络中的唯一标识。</span><br><span class="line">	2. 端口：应用程序在计算机中的唯一标识。 0~65536</span><br><span class="line">	3. 传输协议：规定了数据传输的规则</span><br><span class="line">		1. 基础协议：</span><br><span class="line">			1. tcp:安全协议，三次握手。 速度稍慢</span><br><span class="line">			2. udp：不安全协议。 速度快</span><br></pre></td></tr></table></figure>

<h2 id="web服务器软件："><a href="#web服务器软件：" class="headerlink" title="web服务器软件："></a>web服务器软件：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 服务器：安装了服务器软件的计算机</span><br><span class="line">* 服务器软件：接收用户的请求，处理请求，做出响应</span><br><span class="line">* web服务器软件：接收用户的请求，处理请求，做出响应。</span><br><span class="line">	* 在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</span><br><span class="line">	* web容器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 常见的java相关的web服务器软件：</span><br><span class="line">	* webLogic：oracle公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">	* webSphere：IBM公司，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">	* JBOSS：JBOSS公司的，大型的JavaEE服务器，支持所有的JavaEE规范，收费的。</span><br><span class="line">	* Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet&#x2F;jsp。开源的，免费的。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* JavaEE：Java语言在企业级开发中使用的技术规范的总和，一共规定了13项大的规范</span><br><span class="line"></span><br><span class="line">* Tomcat：web服务器软件</span><br><span class="line">	1. 下载：http:&#x2F;&#x2F;tomcat.apache.org&#x2F;</span><br><span class="line">	2. 安装：解压压缩包即可。</span><br><span class="line">		* 注意：安装目录建议不要有中文和空格</span><br><span class="line">	3. 卸载：删除目录就行了</span><br><span class="line">	4. 启动：</span><br><span class="line">		* bin&#x2F;startup.bat ,双击运行该文件即可</span><br><span class="line">		* 访问：浏览器输入：http:&#x2F;&#x2F;localhost:8080 回车访问自己</span><br><span class="line">						  http:&#x2F;&#x2F;别人的ip:8080 访问别人</span><br><span class="line">		</span><br><span class="line">		* 可能遇到的问题：</span><br><span class="line">			1. 黑窗口一闪而过：</span><br><span class="line">				* 原因： 没有正确配置JAVA_HOME环境变量</span><br><span class="line">				* 解决方案：正确配置JAVA_HOME环境变量</span><br><span class="line"></span><br><span class="line">			2. 启动报错：</span><br><span class="line">				1. 暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</span><br><span class="line">					* netstat -ano</span><br><span class="line">				2. 温柔：修改自身的端口号</span><br><span class="line">					* conf&#x2F;server.xml</span><br><span class="line">					* &lt;Connector port&#x3D;&quot;8888&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span><br><span class="line">		               connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">		               redirectPort&#x3D;&quot;8445&quot; &#x2F;&gt;</span><br><span class="line">					* 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。</span><br><span class="line">						* 好处：在访问时，就不用输入端口号</span><br><span class="line">	5. 关闭：</span><br><span class="line">		1. 正常关闭：</span><br><span class="line">			* bin&#x2F;shutdown.bat</span><br><span class="line">			* ctrl+c</span><br><span class="line">		2. 强制关闭：</span><br><span class="line">			* 点击启动窗口的×</span><br><span class="line">	6. 配置:</span><br><span class="line">		* 部署项目的方式：</span><br><span class="line">			1. 直接将项目放到webapps目录下即可。</span><br><span class="line">				* &#x2F;hello：项目的访问路径--&gt;虚拟目录</span><br><span class="line">				* 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。</span><br><span class="line">					* war包会自动解压缩</span><br><span class="line"></span><br><span class="line">			2. 配置conf&#x2F;server.xml文件</span><br><span class="line">				在&lt;Host&gt;标签体中配置</span><br><span class="line">				&lt;Context docBase&#x3D;&quot;D:\hello&quot; path&#x3D;&quot;&#x2F;hehe&quot; &#x2F;&gt;</span><br><span class="line">				* docBase:项目存放的路径</span><br><span class="line">				* path：虚拟目录</span><br><span class="line"></span><br><span class="line">			3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</span><br><span class="line">				&lt;Context docBase&#x3D;&quot;D:\hello&quot; &#x2F;&gt;</span><br><span class="line">				* 虚拟目录：xml文件的名称</span><br><span class="line">		</span><br><span class="line">		* 静态项目和动态项目：</span><br><span class="line">			* 目录结构</span><br><span class="line">				* java动态项目的目录结构：</span><br><span class="line">					-- 项目的根目录</span><br><span class="line">						-- WEB-INF目录：</span><br><span class="line">							-- web.xml：web项目的核心配置文件</span><br><span class="line">							-- classes目录：放置字节码文件的目录</span><br><span class="line">							-- lib目录：放置依赖的jar包</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 将Tomcat集成到IDEA中，并且创建JavaEE的项目，部署项目。</span><br></pre></td></tr></table></figure>





<h2 id="Servlet：-server-applet"><a href="#Servlet：-server-applet" class="headerlink" title="Servlet：  server applet"></a>Servlet：  server applet</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：运行在服务器端的小程序</span><br><span class="line">	* Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat识别)的规则。</span><br><span class="line">	* 将来我们自定义一个类，实现Servlet接口，复写方法。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 快速入门：</span><br><span class="line">	1. 创建JavaEE项目</span><br><span class="line">	2. 定义一个类，实现Servlet接口</span><br><span class="line">		* public class ServletDemo1 implements Servlet</span><br><span class="line">	3. 实现接口中的抽象方法</span><br><span class="line">	4. 配置Servlet</span><br><span class="line">		 在web.xml中配置：</span><br><span class="line">	    &lt;!--配置Servlet --&gt;</span><br><span class="line">	    &lt;servlet&gt;</span><br><span class="line">	        &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	        &lt;servlet-class&gt;cn.itcast.web.servlet.ServletDemo1&lt;&#x2F;servlet-class&gt;</span><br><span class="line">	    &lt;&#x2F;servlet&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;servlet-mapping&gt;</span><br><span class="line">	        &lt;servlet-name&gt;demo1&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	        &lt;url-pattern&gt;&#x2F;demo1&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	    &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">* 执行原理：</span><br><span class="line">	1. 当服务器接受到客户端浏览器的请求后，会解析请求URL路径，获取访问的Servlet的资源路径</span><br><span class="line">	2. 查找web.xml文件，是否有对应的&lt;url-pattern&gt;标签体内容。</span><br><span class="line">	3. 如果有，则在找到对应的&lt;servlet-class&gt;全类名</span><br><span class="line">	4. tomcat会将字节码文件加载进内存，并且创建其对象</span><br><span class="line">	5. 调用其方法</span><br><span class="line"></span><br><span class="line">* Servlet中的生命周期方法：</span><br><span class="line">	1. 被创建：执行init方法，只执行一次</span><br><span class="line">		* Servlet什么时候被创建？</span><br><span class="line">			* 默认情况下，第一次被访问时，Servlet被创建</span><br><span class="line">			* 可以配置执行Servlet的创建时机。</span><br><span class="line">				* 在&lt;servlet&gt;标签下配置</span><br><span class="line">					1. 第一次被访问时，创建</span><br><span class="line">                		* &lt;load-on-startup&gt;的值为负数</span><br><span class="line">		            2. 在服务器启动时，创建</span><br><span class="line">		                * &lt;load-on-startup&gt;的值为0或正整数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		* Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的</span><br><span class="line">			* 多个用户同时访问时，可能存在线程安全问题。</span><br><span class="line">			* 解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对修改值</span><br><span class="line"></span><br><span class="line">	2. 提供服务：执行service方法，执行多次</span><br><span class="line">		* 每次访问Servlet时，Service方法都会被调用一次。</span><br><span class="line">	3. 被销毁：执行destroy方法，只执行一次</span><br><span class="line">		* Servlet被销毁时执行。服务器关闭时，Servlet被销毁</span><br><span class="line">		* 只有服务器正常关闭时，才会执行destroy方法。</span><br><span class="line">		* destroy方法在Servlet被销毁之前执行，一般用于释放资源</span><br><span class="line"></span><br><span class="line">* Servlet3.0：</span><br><span class="line">	* 好处：</span><br><span class="line">		* 支持注解配置。可以不需要web.xml了。</span><br><span class="line"></span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml</span><br><span class="line">		2. 定义一个类，实现Servlet接口</span><br><span class="line">		3. 复写方法</span><br><span class="line">		4. 在类上使用@WebServlet注解，进行配置</span><br><span class="line">			* @WebServlet(&quot;资源路径&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface WebServlet &#123;</span><br><span class="line">    String name() default &quot;&quot;;&#x2F;&#x2F;相当于&lt;Servlet-name&gt;</span><br><span class="line"></span><br><span class="line">    String[] value() default &#123;&#125;;&#x2F;&#x2F;代表urlPatterns()属性配置</span><br><span class="line"></span><br><span class="line">    String[] urlPatterns() default &#123;&#125;;&#x2F;&#x2F;相当于&lt;url-pattern&gt;</span><br><span class="line"></span><br><span class="line">    int loadOnStartup() default -1;&#x2F;&#x2F;相当于&lt;load-on-startup&gt;</span><br><span class="line"></span><br><span class="line">    WebInitParam[] initParams() default &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    boolean asyncSupported() default false;</span><br><span class="line"></span><br><span class="line">    String smallIcon() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    String largeIcon() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    String description() default &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    String displayName() default &quot;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="IDEA与tomcat的相关配置"><a href="#IDEA与tomcat的相关配置" class="headerlink" title="IDEA与tomcat的相关配置"></a>IDEA与tomcat的相关配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件</span><br><span class="line">	* 查看控制台的log：Using CATALINA_BASE:   &quot;C:\Users\fqy\.IntelliJIdea2018.1\system\tomcat\_itcast&quot;</span><br><span class="line"></span><br><span class="line">2. 工作空间项目    和     tomcat部署的web项目</span><br><span class="line">	* tomcat真正访问的是“tomcat部署的web项目”，&quot;tomcat部署的web项目&quot;对应着&quot;工作空间项目&quot; 的web目录下的所有资源</span><br><span class="line">	* WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line">3. 断点调试：使用&quot;小虫子&quot;启动 dubug 启动</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><p>​    常见注解：</p>
<p>​        @Deprecated   加在方法上，说明该方法已经过时了。显示为一个删除线。</p>
<p>​        @Override 加在方法上，说明方法是重写的父类的方法。如果重写的方法和接口中的方法不一致，说明写错了。帮助我们调错。</p>
<p>​        @SuppressWarnings(“ALL”) 压制警告信息，编辑器在看到这个注解时，忽略警告。</p>
<p>​    注解有什么作用，怎么用？</p>
<p>​        注解可以结合反射来使用。可以在类上或方法上设置一些配置信息。可以省去配置文件。</p>
<p>​    用法：</p>
<p>​        1、创建一个注解 @interface声明</p>
<p>​        2、在注解中添加一个属性， 属性写法  类型 属性名()；</p>
<p>​        3、在需要使用的类上添加注解并指定参数（属性=值）</p>
<p>​        4、在主方法中，通过反射获取配置的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 获取目标类的字节码对向</span><br><span class="line">* 使用getAnnotations()获取类上的所有的注解对向</span><br><span class="line">* 找到自己添加的注解对象，将对象转换为注解类型（强转）</span><br><span class="line">* 使用属性方法获取值</span><br></pre></td></tr></table></figure>



<p>​    创建一个注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public @interface 注解名&#123;</span><br><span class="line">	</span><br><span class="line">&#125; &#x2F;&#x2F; 这个注解没有一点用, 默认情况下，注解都出现在源代码编写阶段。</span><br></pre></td></tr></table></figure>

<p>​    元注解：</p>
<p>​        添加在注解声明上的注解。        </p>
<p>​        @Retention： 说明这个自定义注解运行在哪个阶段</p>
<p>​        @Target： 说明自定义注解可以添加在什么位置，TYPE表示类上，FIELD表示属性 METHOD表示方法</p>
<p>​    java程序编写、编译、执行时分为三个阶段：</p>
<p>​        源代码阶段：编写代码 RetentionPolicy.SOURCE</p>
<p>​        字节码阶段：把源代码编译成字节码文件 RetentionPolicy.CLASS</p>
<p>​        执行阶段： 把字节码加载进内存进行执行 RetentionPolicy.RUNTIME</p>
<p>​        </p>
<h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p>​    是一个运行在服务器端的Java小程序，可以接受用户发送过来的数据（请求Request），执行Java代码进行处理，最后再给用户返回一些数据（响应Response）。</p>
<h4 id="编写步骤："><a href="#编写步骤：" class="headerlink" title="编写步骤："></a>编写步骤：</h4><p>​        1、创建JavaWeb项目</p>
<p>​        2、编写一个类，实现Servlet接口。</p>
<p>​             编写一个类，继承GenericServlet抽象类。</p>
<p>​             编写一个类，继承HttpServlet抽象类。</p>
<p>​        3、配置路径的映射：</p>
<p>​            在web.xml中配置：</p>
<p>​                servlet   servlet-mapping</p>
<p>​            使用注解配置  在类上添加@WebServlet(“映射路径”)</p>
<h4 id="Servlet中的生命周期相关方法"><a href="#Servlet中的生命周期相关方法" class="headerlink" title="Servlet中的生命周期相关方法"></a>Servlet中的生命周期相关方法</h4><p>​    init： 在Servlet对象创建之后被执行，可以进行初始化操作。只执行1次。</p>
<p>​        默认情况下，Servlet是在第一次被访问时创建，也可以设置服务器启动时创建</p>
<p>​                load-on-startup的值为正数</p>
<p>​    service：用户每次访问资源时都会执行。</p>
<p>​    destroy：在Servlet即将销毁时执行，可以做资源回收工作。</p>
<h4 id="继承的体系"><a href="#继承的体系" class="headerlink" title="继承的体系"></a>继承的体系</h4><p>​    Servlet接口： 有5个需要重写的方法</p>
<p>​    GenericServlet抽象类：有1个需要重写的方法</p>
<p>​    HttpServlet抽象类：根据需要重写doGet或doPost方法</p>
<h4 id="Url-Pattern的配置"><a href="#Url-Pattern的配置" class="headerlink" title="Url-Pattern的配置"></a>Url-Pattern的配置</h4><p>​    1、一个Servlet可以配置多个资源地址</p>
<p>​    2、配置规则：</p>
<ul>
<li><p>精确匹配：  /资源名称</p>
</li>
<li><p>目录匹配：  /目录名/*   只要目录相同，*表示任意的路径</p>
</li>
<li><p>扩展名匹配： *.扩展名  只要扩展名相同，就可以匹配上</p>
<p>优先级： 精确匹配 &gt; 目录匹配 &gt; 扩展名匹配</p>
<p>注意： Servlet的路径要么以/开头, 要么以*开头。  </p>
<p>​    目录匹配和扩展名匹配不能同时使用.  /*.do</p>
</li>
</ul>
<h4 id="404的解决方案"><a href="#404的解决方案" class="headerlink" title="404的解决方案"></a>404的解决方案</h4><p>​    Not Found（请求资源不存在）</p>
<p>​    1、模块没有发布成功（模块前面是叹号或叉号）</p>
<p>​    2、模块发布错误（发布的是其他的模块）查看deployment选项卡删除错误的，添加正确的</p>
<p>​    3、核对模块的映射的虚拟路径错误 设置虚拟路径，在访问时要一致</p>
<p>​    4、检查是否为Servlet添加了正确的映射地址</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet</title>
    <url>/2019/09/25/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190925.2Servlet/</url>
    <content><![CDATA[<h2 id="Servlet："><a href="#Servlet：" class="headerlink" title="Servlet："></a>Servlet：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念</span><br><span class="line">2. 步骤</span><br><span class="line">3. 执行原理</span><br><span class="line">4. 生命周期</span><br><span class="line">5. Servlet3.0 注解配置</span><br><span class="line">6. Servlet的体系结构	</span><br><span class="line">	Servlet -- 接口</span><br><span class="line">		|</span><br><span class="line">	GenericServlet -- 抽象类</span><br><span class="line">		|</span><br><span class="line">	HttpServlet  -- 抽象类</span><br><span class="line"></span><br><span class="line">	* GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象</span><br><span class="line">		* 将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可</span><br><span class="line"></span><br><span class="line">	* HttpServlet：对http协议的一种封装，简化操作</span><br><span class="line">		1. 定义类继承HttpServlet</span><br><span class="line">		2. 复写doGet&#x2F;doPost方法</span><br><span class="line"></span><br><span class="line">7. Servlet相关配置</span><br><span class="line">	1. urlpartten:Servlet访问路径</span><br><span class="line">		1. 一个Servlet可以定义多个访问路径 ： @WebServlet(&#123;&quot;&#x2F;d4&quot;,&quot;&#x2F;dd4&quot;,&quot;&#x2F;ddd4&quot;&#125;)</span><br><span class="line">		2. 路径定义规则：</span><br><span class="line">			1. &#x2F;xxx：路径匹配</span><br><span class="line">			2. &#x2F;xxx&#x2F;xxx:多层路径，目录结构</span><br><span class="line">			3. *.do：扩展名匹配</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>HTTP</title>
    <url>/2019/09/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190926HTTP/</url>
    <content><![CDATA[<h2 id="HTTP："><a href="#HTTP：" class="headerlink" title="HTTP："></a>HTTP：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：Hyper Text Transfer Protocol 超文本传输协议</span><br><span class="line">	* 传输协议：定义了，客户端和服务器端通信时，发送数据的格式</span><br><span class="line">	* 特点：</span><br><span class="line">		1. 基于TCP&#x2F;IP的高级协议</span><br><span class="line">		2. 默认端口号:80</span><br><span class="line">		3. 基于请求&#x2F;响应模型的:一次请求对应一次响应</span><br><span class="line">		4. 无状态的：每次请求之间相互独立，不能交互数据</span><br><span class="line">	* 历史版本：</span><br><span class="line">		* 1.0：每一次请求响应都会建立新的连接</span><br><span class="line">		* 1.1：复用连接</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 请求消息数据格式</span><br><span class="line">	1. 请求行</span><br><span class="line">		请求方式 请求url 请求协议&#x2F;版本</span><br><span class="line">		GET &#x2F;login.html	HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line">		* 请求方式：</span><br><span class="line">			* HTTP协议有7中请求方式，常用的有2种</span><br><span class="line">				* GET：</span><br><span class="line">					1. 请求参数在请求行中，在url后。</span><br><span class="line">					2. 请求的url长度有限制的</span><br><span class="line">					3. 不太安全</span><br><span class="line">				* POST：</span><br><span class="line">					1. 请求参数在请求体中</span><br><span class="line">					2. 请求的url长度没有限制的</span><br><span class="line">					3. 相对安全</span><br><span class="line">	2. 请求头：客户端浏览器告诉服务器一些信息</span><br><span class="line">		请求头名称: 请求头值</span><br><span class="line">		* 常见的请求头：</span><br><span class="line">			1. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息</span><br><span class="line">				* 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span><br><span class="line"></span><br><span class="line">			2. Referer：http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">				* 告诉服务器，我(当前请求)从哪里来？</span><br><span class="line">					* 作用：</span><br><span class="line">						1. 防盗链：</span><br><span class="line">						2. 统计工作：</span><br><span class="line">	3. 请求空行</span><br><span class="line">		空行，就是用于分割POST请求的请求头，和请求体的。</span><br><span class="line">	4. 请求体(正文)：</span><br><span class="line">		* 封装POST请求消息的请求参数的</span><br><span class="line"></span><br><span class="line">	* 字符串格式：</span><br><span class="line">		POST &#x2F;login.html	HTTP&#x2F;1.1</span><br><span class="line">		Host: localhost</span><br><span class="line">		User-Agent: Mozilla&#x2F;5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko&#x2F;20100101 Firefox&#x2F;60.0</span><br><span class="line">		Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">		Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">		Accept-Encoding: gzip, deflate</span><br><span class="line">		Referer: http:&#x2F;&#x2F;localhost&#x2F;login.html</span><br><span class="line">		Connection: keep-alive</span><br><span class="line">		Upgrade-Insecure-Requests: 1</span><br><span class="line">		</span><br><span class="line">		username&#x3D;zhangsan	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 响应消息数据格式</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Request</title>
    <url>/2019/09/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190927Request/</url>
    <content><![CDATA[<h2 id="Request："><a href="#Request：" class="headerlink" title="Request："></a>Request：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. request对象和response对象的原理</span><br><span class="line">	1. request和response对象是由服务器创建的。我们来使用它们</span><br><span class="line">	2. request对象是来获取请求消息，response对象是来设置响应消息</span><br><span class="line"></span><br><span class="line">2. request对象继承体系结构：	</span><br><span class="line">	ServletRequest		--	接口</span><br><span class="line">		|	继承</span><br><span class="line">	HttpServletRequest	-- 接口</span><br><span class="line">		|	实现</span><br><span class="line">	org.apache.catalina.connector.RequestFacade 类(tomcat)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. request功能：</span><br><span class="line">	1. 获取请求消息数据</span><br><span class="line">		1. 获取请求行数据</span><br><span class="line">			* GET &#x2F;day14&#x2F;demo1?name&#x3D;zhangsan HTTP&#x2F;1.1</span><br><span class="line">			* 方法：</span><br><span class="line">				1. 获取请求方式 ：GET</span><br><span class="line">					* String getMethod()  </span><br><span class="line">				2. (*)获取虚拟目录：&#x2F;day14</span><br><span class="line">					* String getContextPath()</span><br><span class="line">				3. 获取Servlet路径: &#x2F;demo1</span><br><span class="line">					* String getServletPath()</span><br><span class="line">				4. 获取get方式请求参数：name&#x3D;zhangsan</span><br><span class="line">					* String getQueryString()</span><br><span class="line">				5. (*)获取请求URI：&#x2F;day14&#x2F;demo1</span><br><span class="line">					* String getRequestURI():		&#x2F;day14&#x2F;demo1</span><br><span class="line">					* StringBuffer getRequestURL()  :http:&#x2F;&#x2F;localhost&#x2F;day14&#x2F;demo1</span><br><span class="line"></span><br><span class="line">					* URL:统一资源定位符 ： http:&#x2F;&#x2F;localhost&#x2F;day14&#x2F;demo1	中华人民共和国</span><br><span class="line">					* URI：统一资源标识符 : &#x2F;day14&#x2F;demo1					共和国</span><br><span class="line">				</span><br><span class="line">				6. 获取协议及版本：HTTP&#x2F;1.1</span><br><span class="line">					* String getProtocol()</span><br><span class="line"></span><br><span class="line">				7. 获取客户机的IP地址：</span><br><span class="line">					* String getRemoteAddr()</span><br><span class="line">				</span><br><span class="line">		2. 获取请求头数据</span><br><span class="line">			* 方法：</span><br><span class="line">				* (*)String getHeader(String name):通过请求头的名称获取请求头的值</span><br><span class="line">				* Enumeration&lt;String&gt; getHeaderNames():获取所有的请求头名称</span><br><span class="line">			</span><br><span class="line">		3. 获取请求体数据:</span><br><span class="line">			* 请求体：只有POST请求方式，才有请求体，在请求体中封装了POST请求的请求参数</span><br><span class="line">			* 步骤：</span><br><span class="line">				1. 获取流对象</span><br><span class="line">					*  BufferedReader getReader()：获取字符输入流，只能操作字符数据</span><br><span class="line">					*  ServletInputStream getInputStream()：获取字节输入流，可以操作所有类型数据</span><br><span class="line">						* 在文件上传知识点后讲解</span><br><span class="line"></span><br><span class="line">				2. 再从流对象中拿数据</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 其他功能：</span><br><span class="line">	1. 获取请求参数通用方式：不论get还是post请求方式都可以使用下列方法来获取请求参数</span><br><span class="line">		1. String getParameter(String name):根据参数名称获取参数值    username&#x3D;zs&amp;password&#x3D;123</span><br><span class="line">		2. String[] getParameterValues(String name):根据参数名称获取参数值的数组  hobby&#x3D;xx&amp;hobby&#x3D;game</span><br><span class="line">		3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span><br><span class="line">		4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</span><br><span class="line"></span><br><span class="line">		* 中文乱码问题：</span><br><span class="line">			* get方式：tomcat 8 已经将get方式乱码问题解决了</span><br><span class="line">			* post方式：会乱码</span><br><span class="line">				* 解决：在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;);</span><br></pre></td></tr></table></figure>

<p>​                    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 请求转发：一种在服务器内部的资源跳转方式</span><br><span class="line">	1. 步骤：</span><br><span class="line">		1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">		2. 使用RequestDispatcher对象来进行转发：forward(ServletRequest request, ServletResponse response) </span><br><span class="line"></span><br><span class="line">	2. 特点：</span><br><span class="line">		1. 浏览器地址栏路径不发生变化</span><br><span class="line">		2. 只能转发到当前服务器内部资源中。</span><br><span class="line">		3. 转发是一次请求</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 共享数据：</span><br><span class="line">	* 域对象：一个有作用范围的对象，可以在范围内共享数据</span><br><span class="line">	* request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span><br><span class="line">	* 方法：</span><br><span class="line">		1. void setAttribute(String name,Object obj):存储数据</span><br><span class="line">		2. Object getAttitude(String name):通过键获取值</span><br><span class="line">		3. void removeAttribute(String name):通过键移除键值对</span><br><span class="line"></span><br><span class="line">4. 获取ServletContext：</span><br><span class="line">	* ServletContext getServletContext()</span><br></pre></td></tr></table></figure>



<h2 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 用户登录案例需求：</span><br><span class="line">	1.编写login.html登录页面</span><br><span class="line">		username &amp; password 两个输入框</span><br><span class="line">	2.使用Druid数据库连接池技术,操作mysql，day14数据库中user表</span><br><span class="line">	3.使用JdbcTemplate技术封装JDBC</span><br><span class="line">	4.登录成功跳转到SuccessServlet展示：登录成功！用户名,欢迎您</span><br><span class="line">	5.登录失败跳转到FailServlet展示：登录失败，用户名或密码错误</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 分析</span><br><span class="line"></span><br><span class="line">* 开发步骤</span><br><span class="line">	1. 创建项目，导入html页面，配置文件，jar包</span><br><span class="line">	2. 创建数据库环境</span><br><span class="line">		CREATE DATABASE day14;</span><br><span class="line">		USE day14;</span><br><span class="line">		CREATE TABLE USER(</span><br><span class="line">		</span><br><span class="line">			id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">			username VARCHAR(32) UNIQUE NOT NULL,</span><br><span class="line">			PASSWORD VARCHAR(32) NOT NULL</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">	3. 创建包cn.itcast.domain,创建类User</span><br><span class="line">		package cn.itcast.domain;</span><br><span class="line">		&#x2F;**</span><br><span class="line">		 * 用户的实体类</span><br><span class="line">		 *&#x2F;</span><br><span class="line">		public class User &#123;</span><br><span class="line">		</span><br><span class="line">		    private int id;</span><br><span class="line">		    private String username;</span><br><span class="line">		    private String password;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	    public int getId() &#123;</span><br><span class="line">	        return id;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    public void setId(int id) &#123;</span><br><span class="line">	        this.id &#x3D; id;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    public String getUsername() &#123;</span><br><span class="line">	        return username;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    public void setUsername(String username) &#123;</span><br><span class="line">	        this.username &#x3D; username;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    public String getPassword() &#123;</span><br><span class="line">	        return password;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    public void setPassword(String password) &#123;</span><br><span class="line">	        this.password &#x3D; password;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    @Override</span><br><span class="line">	    public String toString() &#123;</span><br><span class="line">	        return &quot;User&#123;&quot; +</span><br><span class="line">	                &quot;id&#x3D;&quot; + id +</span><br><span class="line">	                &quot;, username&#x3D;&#39;&quot; + username + &#39;\&#39;&#39; +</span><br><span class="line">	                &quot;, password&#x3D;&#39;&quot; + password + &#39;\&#39;&#39; +</span><br><span class="line">	                &#39;&#125;&#39;;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">4. 创建包cn.itcast.util,编写工具类JDBCUtils</span><br><span class="line">	package cn.itcast.util;</span><br><span class="line"></span><br><span class="line">	import com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line">	</span><br><span class="line">	import javax.sql.DataSource;</span><br><span class="line">	import javax.xml.crypto.Data;</span><br><span class="line">	import java.io.IOException;</span><br><span class="line">	import java.io.InputStream;</span><br><span class="line">	import java.sql.Connection;</span><br><span class="line">	import java.sql.SQLException;</span><br><span class="line">	import java.util.Properties;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * JDBC工具类 使用Durid连接池</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public class JDBCUtils &#123;</span><br><span class="line">	</span><br><span class="line">	    private static DataSource ds ;</span><br><span class="line">	</span><br><span class="line">	    static &#123;</span><br><span class="line">	</span><br><span class="line">	        try &#123;</span><br><span class="line">	            &#x2F;&#x2F;1.加载配置文件</span><br><span class="line">	            Properties pro &#x3D; new Properties();</span><br><span class="line">	            &#x2F;&#x2F;使用ClassLoader加载配置文件，获取字节输入流</span><br><span class="line">	            InputStream is &#x3D; JDBCUtils.class.getClassLoader().getResourceAsStream(&quot;druid.properties&quot;);</span><br><span class="line">	            pro.load(is);</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;2.初始化连接池对象</span><br><span class="line">	            ds &#x3D; DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">	</span><br><span class="line">	        &#125; catch (IOException e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125; catch (Exception e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    &#x2F;**</span><br><span class="line">	     * 获取连接池对象</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public static DataSource getDataSource()&#123;</span><br><span class="line">	        return ds;</span><br><span class="line">	    &#125;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	    &#x2F;**</span><br><span class="line">	     * 获取连接Connection对象</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">	        return  ds.getConnection();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">5. 创建包cn.itcast.dao,创建类UserDao,提供login方法</span><br><span class="line">	</span><br><span class="line">	package cn.itcast.dao;</span><br><span class="line"></span><br><span class="line">	import cn.itcast.domain.User;</span><br><span class="line">	import cn.itcast.util.JDBCUtils;</span><br><span class="line">	import org.springframework.dao.DataAccessException;</span><br><span class="line">	import org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line">	import org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line">	</span><br><span class="line">	&#x2F;**</span><br><span class="line">	 * 操作数据库中User表的类</span><br><span class="line">	 *&#x2F;</span><br><span class="line">	public class UserDao &#123;</span><br><span class="line">	</span><br><span class="line">	    &#x2F;&#x2F;声明JDBCTemplate对象共用</span><br><span class="line">	    private JdbcTemplate template &#x3D; new JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line">	</span><br><span class="line">	    &#x2F;**</span><br><span class="line">	     * 登录方法</span><br><span class="line">	     * @param loginUser 只有用户名和密码</span><br><span class="line">	     * @return user包含用户全部数据,没有查询到，返回null</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public User login(User loginUser)&#123;</span><br><span class="line">	        try &#123;</span><br><span class="line">	            &#x2F;&#x2F;1.编写sql</span><br><span class="line">	            String sql &#x3D; &quot;select * from user where username &#x3D; ? and password &#x3D; ?&quot;;</span><br><span class="line">	            &#x2F;&#x2F;2.调用query方法</span><br><span class="line">	            User user &#x3D; template.queryForObject(sql,</span><br><span class="line">	                    new BeanPropertyRowMapper&lt;User&gt;(User.class),</span><br><span class="line">	                    loginUser.getUsername(), loginUser.getPassword());</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	            return user;</span><br><span class="line">	        &#125; catch (DataAccessException e) &#123;</span><br><span class="line">	            e.printStackTrace();&#x2F;&#x2F;记录日志</span><br><span class="line">	            return null;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">6. 编写cn.itcast.web.servlet.LoginServlet类</span><br><span class="line">	package cn.itcast.web.servlet;</span><br><span class="line"></span><br><span class="line">	import cn.itcast.dao.UserDao;</span><br><span class="line">	import cn.itcast.domain.User;</span><br><span class="line">	</span><br><span class="line">	import javax.servlet.ServletException;</span><br><span class="line">	import javax.servlet.annotation.WebServlet;</span><br><span class="line">	import javax.servlet.http.HttpServlet;</span><br><span class="line">	import javax.servlet.http.HttpServletRequest;</span><br><span class="line">	import javax.servlet.http.HttpServletResponse;</span><br><span class="line">	import java.io.IOException;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;&#x2F;loginServlet&quot;)</span><br><span class="line">public class LoginServlet extends HttpServlet &#123;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	    @Override</span><br><span class="line">	    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">	        &#x2F;&#x2F;1.设置编码</span><br><span class="line">	        req.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">	        &#x2F;&#x2F;2.获取请求参数</span><br><span class="line">	        String username &#x3D; req.getParameter(&quot;username&quot;);</span><br><span class="line">	        String password &#x3D; req.getParameter(&quot;password&quot;);</span><br><span class="line">	        &#x2F;&#x2F;3.封装user对象</span><br><span class="line">	        User loginUser &#x3D; new User();</span><br><span class="line">	        loginUser.setUsername(username);</span><br><span class="line">	        loginUser.setPassword(password);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;4.调用UserDao的login方法</span><br><span class="line">	        UserDao dao &#x3D; new UserDao();</span><br><span class="line">	        User user &#x3D; dao.login(loginUser);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;5.判断user</span><br><span class="line">	        if(user &#x3D;&#x3D; null)&#123;</span><br><span class="line">	            &#x2F;&#x2F;登录失败</span><br><span class="line">	            req.getRequestDispatcher(&quot;&#x2F;failServlet&quot;).forward(req,resp);</span><br><span class="line">	        &#125;else&#123;</span><br><span class="line">	            &#x2F;&#x2F;登录成功</span><br><span class="line">	            &#x2F;&#x2F;存储数据</span><br><span class="line">	            req.setAttribute(&quot;user&quot;,user);</span><br><span class="line">	            &#x2F;&#x2F;转发</span><br><span class="line">	            req.getRequestDispatcher(&quot;&#x2F;successServlet&quot;).forward(req,resp);</span><br><span class="line">	        &#125;</span><br><span class="line">	</span><br><span class="line">	    &#125;</span><br><span class="line">	</span><br><span class="line">	    @Override</span><br><span class="line">	    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">	        this.doGet(req,resp);</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">7. 编写FailServlet和SuccessServlet类</span><br><span class="line">	@WebServlet(&quot;&#x2F;successServlet&quot;)</span><br><span class="line">	public class SuccessServlet extends HttpServlet &#123;</span><br><span class="line">	    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">	        &#x2F;&#x2F;获取request域中共享的user对象</span><br><span class="line">	        User user &#x3D; (User) request.getAttribute(&quot;user&quot;);</span><br><span class="line">	</span><br><span class="line">	        if(user !&#x3D; null)&#123;</span><br><span class="line">	            &#x2F;&#x2F;给页面写一句话</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;设置编码</span><br><span class="line">	            response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">	            &#x2F;&#x2F;输出</span><br><span class="line">	            response.getWriter().write(&quot;登录成功！&quot;+user.getUsername()+&quot;,欢迎您&quot;);</span><br><span class="line">	        &#125;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#125;		</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;&#x2F;failServlet&quot;)</span><br><span class="line">public class FailServlet extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;给页面写一句话</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;设置编码</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">        &#x2F;&#x2F;输出</span><br><span class="line">        response.getWriter().write(&quot;登录失败，用户名或密码错误&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        this.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8. login.html中form表单的action路径的写法</span><br><span class="line">	* 虚拟目录+Servlet的资源路径</span><br><span class="line"></span><br><span class="line">9. BeanUtils工具类，简化数据封装</span><br><span class="line">	* 用于封装JavaBean的</span><br><span class="line">	1. JavaBean：标准的Java类</span><br><span class="line">		1. 要求：</span><br><span class="line">			1. 类必须被public修饰</span><br><span class="line">			2. 必须提供空参的构造器</span><br><span class="line">			3. 成员变量必须使用private修饰</span><br><span class="line">			4. 提供公共setter和getter方法</span><br><span class="line">		2. 功能：封装数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 概念：</span><br><span class="line">	成员变量：</span><br><span class="line">	属性：setter和getter方法截取后的产物</span><br><span class="line">		例如：getUsername() --&gt; Username--&gt; username</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 方法：</span><br><span class="line">	1. setProperty()</span><br><span class="line">	2. getProperty()</span><br><span class="line">	3. populate(Object obj , Map map):将map集合的键值对信息，封装到对应的JavaBean对象中</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Response</title>
    <url>/2019/09/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190928Response/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. HTTP协议：响应消息</span><br><span class="line">2. Response对象</span><br><span class="line">3. ServletContext对象</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 请求消息：客户端发送给服务器端的数据</span><br><span class="line">	* 数据格式：</span><br><span class="line">		1. 请求行</span><br><span class="line">		2. 请求头</span><br><span class="line">		3. 请求空行</span><br><span class="line">		4. 请求体</span><br><span class="line">2. 响应消息：服务器端发送给客户端的数据</span><br><span class="line">	* 数据格式：</span><br><span class="line">		1. 响应行</span><br><span class="line">			1. 组成：协议&#x2F;版本 响应状态码 状态码描述</span><br><span class="line">			2. 响应状态码：服务器告诉客户端浏览器本次请求和响应的一个状态。</span><br><span class="line">				1. 状态码都是3位数字 </span><br><span class="line">				2. 分类：</span><br><span class="line">					1. 1xx：服务器就收客户端消息，但没有接受完成，等待一段时间后，发送1xx多状态码</span><br><span class="line">					2. 2xx：成功。代表：200</span><br><span class="line">					3. 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line">					4. 4xx：客户端错误。</span><br><span class="line">						* 代表：</span><br><span class="line">							* 404（请求路径没有对应的资源） </span><br><span class="line">							* 405：请求方式没有对应的doXxx方法</span><br><span class="line">					5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br></pre></td></tr></table></figure>

<p>​                    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 响应头：</span><br><span class="line">	1. 格式：头名称： 值</span><br><span class="line">	2. 常见的响应头：</span><br><span class="line">		1. Content-Type：服务器告诉客户端本次响应体数据格式以及编码格式</span><br><span class="line">		2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据</span><br><span class="line">			* 值：</span><br><span class="line">				* in-line:默认值,在当前页面内打开</span><br><span class="line">				* attachment;filename&#x3D;xxx：以附件形式打开响应体。文件下载</span><br><span class="line">3. 响应空行</span><br><span class="line">4. 响应体:传输的数据</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 响应字符串格式</span><br><span class="line">	HTTP&#x2F;1.1 200 OK</span><br><span class="line">	Content-Type: text&#x2F;html;charset&#x3D;UTF-8</span><br><span class="line">	Content-Length: 101</span><br><span class="line">	Date: Wed, 06 Jun 2018 07:08:42 GMT</span><br><span class="line"></span><br><span class="line">	&lt;html&gt;</span><br><span class="line">	  &lt;head&gt;</span><br><span class="line">	    &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">	  &lt;&#x2F;head&gt;</span><br><span class="line">	  &lt;body&gt;</span><br><span class="line">	  hello , response</span><br><span class="line">	  &lt;&#x2F;body&gt;</span><br><span class="line">	&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 功能：设置响应消息</span><br><span class="line">	1. 设置响应行</span><br><span class="line">		1. 格式：HTTP&#x2F;1.1 200 ok</span><br><span class="line">		2. 设置状态码：setStatus(int sc) </span><br><span class="line">	2. 设置响应头：setHeader(String name, String value) </span><br><span class="line">		</span><br><span class="line">	3. 设置响应体：</span><br><span class="line">		* 使用步骤：</span><br><span class="line">			1. 获取输出流</span><br><span class="line">				* 字符输出流：PrintWriter getWriter()</span><br><span class="line"></span><br><span class="line">				* 字节输出流：ServletOutputStream getOutputStream()</span><br><span class="line"></span><br><span class="line">			2. 使用输出流，将数据输出到客户端浏览器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 案例：</span><br><span class="line">	1. 完成重定向</span><br><span class="line">		* 重定向：资源跳转的方式</span><br><span class="line">		* 代码实现：</span><br><span class="line">			&#x2F;&#x2F;1. 设置状态码为302</span><br><span class="line">	        response.setStatus(302);</span><br><span class="line">	        &#x2F;&#x2F;2.设置响应头location</span><br><span class="line">	        response.setHeader(&quot;location&quot;,&quot;&#x2F;day15&#x2F;responseDemo2&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       &#x2F;&#x2F;简单的重定向方法</span><br><span class="line">       response.sendRedirect(&quot;&#x2F;day15&#x2F;responseDemo2&quot;);</span><br><span class="line"></span><br><span class="line">* 重定向的特点:redirect</span><br><span class="line">	1. 地址栏发生变化</span><br><span class="line">	2. 重定向可以访问其他站点(服务器)的资源</span><br><span class="line">	3. 重定向是两次请求。不能使用request对象来共享数据</span><br><span class="line">* 转发的特点：forward</span><br><span class="line">	1. 转发地址栏路径不变</span><br><span class="line">	2. 转发只能访问当前服务器下的资源</span><br><span class="line">	3. 转发是一次请求，可以使用request对象来共享数据</span><br><span class="line"></span><br><span class="line">* forward 和  redirect 区别</span><br><span class="line">	</span><br><span class="line">* 路径写法：</span><br><span class="line">	1. 路径分类</span><br><span class="line">		1. 相对路径：通过相对路径不可以确定唯一资源</span><br><span class="line">			* 如：.&#x2F;index.html</span><br><span class="line">			* 不以&#x2F;开头，以.开头路径</span><br><span class="line"></span><br><span class="line">			* 规则：找到当前资源和目标资源之间的相对位置关系</span><br><span class="line">				* .&#x2F;：当前目录</span><br><span class="line">				* ..&#x2F;:后退一级目录</span><br><span class="line">		2. 绝对路径：通过绝对路径可以确定唯一资源</span><br><span class="line">			* 如：http:&#x2F;&#x2F;localhost&#x2F;day15&#x2F;responseDemo2		&#x2F;day15&#x2F;responseDemo2</span><br><span class="line">			* 以&#x2F;开头的路径</span><br><span class="line"></span><br><span class="line">			* 规则：判断定义的路径是给谁用的？判断请求将来从哪儿发出</span><br><span class="line">				* 给客户端浏览器使用：需要加虚拟目录(项目的访问路径)</span><br><span class="line">					* 建议虚拟目录动态获取：request.getContextPath()</span><br><span class="line">					* &lt;a&gt; , &lt;form&gt; 重定向...</span><br><span class="line">				* 给服务器使用：不需要加虚拟目录</span><br><span class="line">					* 转发路径</span><br></pre></td></tr></table></figure>

<p>​<br>​                        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 服务器输出字符数据到浏览器</span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 获取字符输出流</span><br><span class="line">		2. 输出数据</span><br><span class="line"></span><br><span class="line">	* 注意：</span><br><span class="line">		* 乱码问题：</span><br><span class="line">			1. PrintWriter pw &#x3D; response.getWriter();获取的流的默认编码是ISO-8859-1</span><br><span class="line">			2. 设置该流的默认编码</span><br><span class="line">			3. 告诉浏览器响应体使用的编码</span><br><span class="line"></span><br><span class="line">			&#x2F;&#x2F;简单的形式，设置编码，是在获取流之前设置</span><br><span class="line">   			response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line">3. 服务器输出字节数据到浏览器</span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 获取字节输出流</span><br><span class="line">		2. 输出数据</span><br><span class="line"></span><br><span class="line">4. 验证码</span><br><span class="line">	1. 本质：图片</span><br><span class="line">	2. 目的：防止恶意表单注册</span><br></pre></td></tr></table></figure>



<h2 id="ServletContext对象："><a href="#ServletContext对象：" class="headerlink" title="ServletContext对象："></a>ServletContext对象：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：代表整个web应用，可以和程序的容器(服务器)来通信</span><br><span class="line">2. 获取：</span><br><span class="line">	1. 通过request对象获取</span><br><span class="line">		request.getServletContext();</span><br><span class="line">	2. 通过HttpServlet获取</span><br><span class="line">		this.getServletContext();</span><br><span class="line">3. 功能：</span><br><span class="line">	1. 获取MIME类型：</span><br><span class="line">		* MIME类型:在互联网通信过程中定义的一种文件数据类型</span><br><span class="line">			* 格式： 大类型&#x2F;小类型   text&#x2F;html		image&#x2F;jpeg</span><br><span class="line"></span><br><span class="line">		* 获取：String getMimeType(String file)  </span><br><span class="line">	2. 域对象：共享数据</span><br><span class="line">		1. setAttribute(String name,Object value)</span><br><span class="line">		2. getAttribute(String name)</span><br><span class="line">		3. removeAttribute(String name)</span><br><span class="line"></span><br><span class="line">		* ServletContext对象范围：所有用户所有请求的数据</span><br><span class="line">	3. 获取文件的真实(服务器)路径</span><br><span class="line">		1. 方法：String getRealPath(String path)  </span><br><span class="line">			 String b &#x3D; context.getRealPath(&quot;&#x2F;b.txt&quot;);&#x2F;&#x2F;web目录下资源访问</span><br><span class="line">	         System.out.println(b);</span><br><span class="line">	</span><br><span class="line">	        String c &#x3D; context.getRealPath(&quot;&#x2F;WEB-INF&#x2F;c.txt&quot;);&#x2F;&#x2F;WEB-INF目录下的资源访问</span><br><span class="line">	        System.out.println(c);</span><br><span class="line">	</span><br><span class="line">	        String a &#x3D; context.getRealPath(&quot;&#x2F;WEB-INF&#x2F;classes&#x2F;a.txt&quot;);&#x2F;&#x2F;src目录下的资源访问</span><br><span class="line">	        System.out.println(a);</span><br></pre></td></tr></table></figure>



<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 文件下载需求：</span><br><span class="line">	1. 页面显示超链接</span><br><span class="line">	2. 点击超链接后弹出下载提示框</span><br><span class="line">	3. 完成图片文件下载</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 分析：</span><br><span class="line">	1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求</span><br><span class="line">	2. 任何资源都必须弹出下载提示框</span><br><span class="line">	3. 使用响应头设置资源的打开方式：</span><br><span class="line">		* content-disposition:attachment;filename&#x3D;xxx</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 步骤：</span><br><span class="line">	1. 定义页面，编辑超链接href属性，指向Servlet，传递资源名称filename</span><br><span class="line">	2. 定义Servlet</span><br><span class="line">		1. 获取文件名称</span><br><span class="line">		2. 使用字节输入流加载文件进内存</span><br><span class="line">		3. 指定response的响应头： content-disposition:attachment;filename&#x3D;xxx</span><br><span class="line">		4. 将数据写出到response输出流</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 问题：</span><br><span class="line">	* 中文文件问题</span><br><span class="line">		* 解决思路：</span><br><span class="line">			1. 获取客户端使用的浏览器版本信息</span><br><span class="line">			2. 根据不同的版本信息，设置filename的编码方式不同</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Cookie&amp;Session</title>
    <url>/2019/09/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190929Cookie&amp;Session/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 会话技术</span><br><span class="line">	1. Cookie</span><br><span class="line">	2. Session</span><br><span class="line">2. JSP：入门学习</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 会话：一次会话中包含多次请求和响应。</span><br><span class="line">	* 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止</span><br><span class="line">2. 功能：在一次会话的范围内的多次请求间，共享数据</span><br><span class="line">3. 方式：</span><br><span class="line">	1. 客户端会话技术：Cookie</span><br><span class="line">	2. 服务器端会话技术：Session</span><br></pre></td></tr></table></figure>

<h2 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：客户端会话技术，将数据保存到客户端</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line">	* 使用步骤：</span><br><span class="line">		1. 创建Cookie对象，绑定数据</span><br><span class="line">			* new Cookie(String name, String value) </span><br><span class="line">		2. 发送Cookie对象</span><br><span class="line">			* response.addCookie(Cookie cookie) </span><br><span class="line">		3. 获取Cookie，拿到数据</span><br><span class="line">			* Cookie[]  request.getCookies()  </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 实现原理</span><br><span class="line">	* 基于响应头set-cookie和请求头cookie实现</span><br><span class="line"></span><br><span class="line">4. cookie的细节</span><br><span class="line">	1. 一次可不可以发送多个cookie?</span><br><span class="line">		* 可以</span><br><span class="line">		* 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。</span><br><span class="line">	2. cookie在浏览器中保存多长时间？</span><br><span class="line">		1. 默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line">		2. 持久化存储：</span><br><span class="line">			* setMaxAge(int seconds)</span><br><span class="line">				1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效</span><br><span class="line">				2. 负数：默认值</span><br><span class="line">				3. 零：删除cookie信息</span><br><span class="line">	3. cookie能不能存中文？</span><br><span class="line">		* 在tomcat 8 之前 cookie中不能直接存储中文数据。</span><br><span class="line">			* 需要将中文数据转码---一般采用URL编码(%E3)</span><br><span class="line">		* 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析</span><br><span class="line">	4. cookie共享问题？</span><br><span class="line">		1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？</span><br><span class="line">			* 默认情况下cookie不能共享</span><br><span class="line"></span><br><span class="line">			* setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line">				* 如果要共享，则可以将path设置为&quot;&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 不同的tomcat服务器间cookie共享问题？</span><br><span class="line">	* setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line">		* setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中cookie可以共享</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. Cookie的特点和作用</span><br><span class="line">	1. cookie存储数据在客户端浏览器</span><br><span class="line">	2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</span><br><span class="line"></span><br><span class="line">	* 作用：</span><br><span class="line">		1. cookie一般用于存出少量的不太敏感的数据</span><br><span class="line">		2. 在不登录的情况下，完成服务器对客户端的身份识别</span><br><span class="line"></span><br><span class="line">6. 案例：记住上一次访问时间</span><br><span class="line">	1. 需求：</span><br><span class="line">		1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。</span><br><span class="line">		2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串</span><br><span class="line"></span><br><span class="line">	2. 分析：</span><br><span class="line">		1. 可以采用Cookie来完成</span><br><span class="line">		2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie</span><br><span class="line">			1. 有：不是第一次访问</span><br><span class="line">				1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20</span><br><span class="line">				2. 写回Cookie：lastTime&#x3D;2018年6月10日11:50:01</span><br><span class="line">			2. 没有：是第一次访问</span><br><span class="line">				1. 响应数据：您好，欢迎您首次访问</span><br><span class="line">				2. 写回Cookie：lastTime&#x3D;2018年6月10日11:50:01</span><br><span class="line"></span><br><span class="line">	3. 代码实现：</span><br><span class="line">		package cn.itcast.cookie;</span><br><span class="line"></span><br><span class="line">		import javax.servlet.ServletException;</span><br><span class="line">		import javax.servlet.annotation.WebServlet;</span><br><span class="line">		import javax.servlet.http.Cookie;</span><br><span class="line">		import javax.servlet.http.HttpServlet;</span><br><span class="line">		import javax.servlet.http.HttpServletRequest;</span><br><span class="line">		import javax.servlet.http.HttpServletResponse;</span><br><span class="line">		import java.io.IOException;</span><br><span class="line">		import java.net.URLDecoder;</span><br><span class="line">		import java.net.URLEncoder;</span><br><span class="line">		import java.text.SimpleDateFormat;</span><br><span class="line">		import java.util.Date;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@WebServlet(&quot;&#x2F;cookieTest&quot;)</span><br><span class="line">public class CookieTest extends HttpServlet &#123;</span><br><span class="line">    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;设置响应的消息体的数据格式以及编码</span><br><span class="line">        response.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;1.获取所有Cookie</span><br><span class="line">        Cookie[] cookies &#x3D; request.getCookies();</span><br><span class="line">        boolean flag &#x3D; false;&#x2F;&#x2F;没有cookie为lastTime</span><br><span class="line">        &#x2F;&#x2F;2.遍历cookie数组</span><br><span class="line">        if(cookies !&#x3D; null &amp;&amp; cookies.length &gt; 0)&#123;</span><br><span class="line">            for (Cookie cookie : cookies) &#123;</span><br><span class="line">                &#x2F;&#x2F;3.获取cookie的名称</span><br><span class="line">                String name &#x3D; cookie.getName();</span><br><span class="line">                &#x2F;&#x2F;4.判断名称是否是：lastTime</span><br><span class="line">                if(&quot;lastTime&quot;.equals(name))&#123;</span><br><span class="line">                    &#x2F;&#x2F;有该Cookie，不是第一次访问</span><br><span class="line"></span><br><span class="line">                    flag &#x3D; true;&#x2F;&#x2F;有lastTime的cookie</span><br><span class="line"></span><br><span class="line">                    &#x2F;&#x2F;设置Cookie的value</span><br><span class="line">                    &#x2F;&#x2F;获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span><br><span class="line">                    Date date  &#x3D; new Date();</span><br><span class="line">                    SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br><span class="line">                    String str_date &#x3D; sdf.format(date);</span><br><span class="line">                    System.out.println(&quot;编码前：&quot;+str_date);</span><br><span class="line">                    &#x2F;&#x2F;URL编码</span><br><span class="line">                    str_date &#x3D; URLEncoder.encode(str_date,&quot;utf-8&quot;);</span><br><span class="line">                    System.out.println(&quot;编码后：&quot;+str_date);</span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line">                    &#x2F;&#x2F;设置cookie的存活时间</span><br><span class="line">                    cookie.setMaxAge(60 * 60 * 24 * 30);&#x2F;&#x2F;一个月</span><br><span class="line">                    response.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F;响应数据</span><br><span class="line">            &#x2F;&#x2F;获取Cookie的value，时间</span><br><span class="line">            String value &#x3D; cookie.getValue();</span><br><span class="line">            System.out.println(&quot;解码前：&quot;+value);</span><br><span class="line">            &#x2F;&#x2F;URL解码：</span><br><span class="line">            value &#x3D; URLDecoder.decode(value,&quot;utf-8&quot;);</span><br><span class="line">            System.out.println(&quot;解码后：&quot;+value);</span><br><span class="line">            response.getWriter().write(&quot;&lt;h1&gt;欢迎回来，您上次访问时间为:&quot;+value+&quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">	</span><br><span class="line">            break;</span><br><span class="line">	</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(cookies &#x3D;&#x3D; null || cookies.length &#x3D;&#x3D; 0 || flag &#x3D;&#x3D; false)&#123;</span><br><span class="line">    &#x2F;&#x2F;没有，第一次访问</span><br><span class="line">	</span><br><span class="line">    &#x2F;&#x2F;设置Cookie的value</span><br><span class="line">    &#x2F;&#x2F;获取当前时间的字符串，重新设置Cookie的值，重新发送cookie</span><br><span class="line">    Date date  &#x3D; new Date();</span><br><span class="line">    SimpleDateFormat sdf &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span><br><span class="line">    String str_date &#x3D; sdf.format(date);</span><br><span class="line">    System.out.println(&quot;编码前：&quot;+str_date);</span><br><span class="line">    &#x2F;&#x2F;URL编码</span><br><span class="line">    str_date &#x3D; URLEncoder.encode(str_date,&quot;utf-8&quot;);</span><br><span class="line">    System.out.println(&quot;编码后：&quot;+str_date);</span><br><span class="line">	</span><br><span class="line">    Cookie cookie &#x3D; new Cookie(&quot;lastTime&quot;,str_date);</span><br><span class="line">    &#x2F;&#x2F;设置cookie的存活时间</span><br><span class="line">    cookie.setMaxAge(60 * 60 * 24 * 30);&#x2F;&#x2F;一个月</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">	</span><br><span class="line">    response.getWriter().write(&quot;&lt;h1&gt;您好，欢迎您首次访问&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">        this.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JSP：入门学习"><a href="#JSP：入门学习" class="headerlink" title="JSP：入门学习"></a>JSP：入门学习</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：</span><br><span class="line">	* Java Server Pages： java服务器端页面</span><br><span class="line">		* 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码</span><br><span class="line">		* 用于简化书写！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 原理</span><br><span class="line">	* JSP本质上就是一个Servlet</span><br><span class="line"></span><br><span class="line">3. JSP的脚本：JSP定义Java代码的方式</span><br><span class="line">	1. &lt;%  代码 %&gt;：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line">	2. &lt;%! 代码 %&gt;：定义的java代码，在jsp转换后的java类的成员位置。</span><br><span class="line">	3. &lt;%&#x3D; 代码 %&gt;：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. JSP的内置对象：</span><br><span class="line">	* 在jsp页面中不需要获取和创建，可以直接使用的对象</span><br><span class="line">	* jsp一共有9个内置对象。</span><br><span class="line">	* 今天学习3个：</span><br><span class="line">		* request</span><br><span class="line">		* response</span><br><span class="line">		* out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似</span><br><span class="line">			* response.getWriter()和out.write()的区别：</span><br><span class="line">				* 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。</span><br><span class="line">				* response.getWriter()数据输出永远在out.write()之前</span><br><span class="line">			</span><br><span class="line">5. 案例:改造Cookie案例</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Session：主菜"><a href="#Session：主菜" class="headerlink" title="Session：主菜"></a>Session：主菜</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession</span><br><span class="line">2. 快速入门：</span><br><span class="line">	1. 获取HttpSession对象：</span><br><span class="line">		HttpSession session &#x3D; request.getSession();</span><br><span class="line">	2. 使用HttpSession对象：</span><br><span class="line">		Object getAttribute(String name)  </span><br><span class="line">		void setAttribute(String name, Object value)</span><br><span class="line">		void removeAttribute(String name)  </span><br><span class="line"></span><br><span class="line">3. 原理</span><br><span class="line">	* Session的实现是依赖于Cookie的。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 细节：</span><br><span class="line">	1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？</span><br><span class="line">		* 默认情况下。不是。</span><br><span class="line">		* 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。</span><br><span class="line">			 Cookie c &#x3D; new Cookie(&quot;JSESSIONID&quot;,session.getId());</span><br><span class="line">	         c.setMaxAge(60*60);</span><br><span class="line">	         response.addCookie(c);</span><br><span class="line"></span><br><span class="line">	2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？</span><br><span class="line">		* 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</span><br><span class="line">			* session的钝化：</span><br><span class="line">				* 在服务器正常关闭之前，将session对象系列化到硬盘上</span><br><span class="line">			* session的活化：</span><br><span class="line">				* 在服务器启动后，将session文件转化为内存中的session对象即可。</span><br><span class="line">			</span><br><span class="line">	3. session什么时候被销毁？</span><br><span class="line">		1. 服务器关闭</span><br><span class="line">		2. session对象调用invalidate() 。</span><br><span class="line">		3. session默认失效时间 30分钟</span><br><span class="line">			选择性配置修改	</span><br><span class="line">			&lt;session-config&gt;</span><br><span class="line">		        &lt;session-timeout&gt;30&lt;&#x2F;session-timeout&gt;</span><br><span class="line">		    &lt;&#x2F;session-config&gt;</span><br><span class="line"></span><br><span class="line"> 5. session的特点</span><br><span class="line">	 1. session用于存储一次会话的多次请求的数据，存在服务器端</span><br><span class="line">	 2. session可以存储任意类型，任意大小的数据</span><br><span class="line"></span><br><span class="line">	* session与Cookie的区别：</span><br><span class="line">		1. session存储数据在服务器端，Cookie在客户端</span><br><span class="line">		2. session没有数据大小限制，Cookie有</span><br><span class="line">		3. session数据安全，Cookie相对于不安全</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="案例：验证码"><a href="#案例：验证码" class="headerlink" title="案例：验证码"></a>案例：验证码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 案例需求：</span><br><span class="line">	1. 访问带有验证码的登录页面login.jsp</span><br><span class="line">	2. 用户输入用户名，密码以及验证码。</span><br><span class="line">		* 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误</span><br><span class="line">		* 如果验证码输入有误，跳转登录页面，提示：验证码错误</span><br><span class="line">		* 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 分析：</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>EL&amp;JSTL</title>
    <url>/2019/09/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190930EL&amp;JSTL/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. JSP:</span><br><span class="line">	1. 指令</span><br><span class="line">	2. 注释</span><br><span class="line">	3. 内置对象</span><br><span class="line"></span><br><span class="line">2. MVC开发模式</span><br><span class="line">3. EL表达式</span><br><span class="line">4. JSTL标签</span><br><span class="line">5. 三层架构</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 指令</span><br><span class="line">	* 作用：用于配置JSP页面，导入资源文件</span><br><span class="line">	* 格式：</span><br><span class="line">		&lt;%@ 指令名称 属性名1&#x3D;属性值1 属性名2&#x3D;属性值2 ... %&gt;</span><br><span class="line">	* 分类：</span><br><span class="line">		1. page		： 配置JSP页面的</span><br><span class="line">			* contentType：等同于response.setContentType()</span><br><span class="line">				1. 设置响应体的mime类型以及字符集</span><br><span class="line">				2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</span><br><span class="line">			* import：导包</span><br><span class="line">			* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</span><br><span class="line">			* isErrorPage：标识当前也是是否是错误页面。</span><br><span class="line">				* true：是，可以使用内置对象exception</span><br><span class="line">				* false：否。默认值。不可以使用内置对象exception</span><br><span class="line">		2. include	： 页面包含的。导入页面的资源文件</span><br><span class="line">			* &lt;%@include file&#x3D;&quot;top.jsp&quot;%&gt;</span><br><span class="line">		3. taglib	： 导入资源</span><br><span class="line">			* &lt;%@ taglib prefix&#x3D;&quot;c&quot; uri&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;jsp&#x2F;jstl&#x2F;core&quot; %&gt;</span><br><span class="line">				* prefix：前缀，自定义的</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 注释:</span><br><span class="line">	1. html注释：</span><br><span class="line">		&lt;!-- --&gt;:只能注释html代码片段</span><br><span class="line">	2. jsp注释：推荐使用</span><br><span class="line">		&lt;%-- --%&gt;：可以注释所有</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 内置对象</span><br><span class="line">	* 在jsp页面中不需要创建，直接使用的对象</span><br><span class="line">	* 一共有9个：</span><br><span class="line">			变量名					真实类型						作用</span><br><span class="line">		* pageContext				PageContext					当前页面共享数据，还可以获取其他八个内置对象</span><br><span class="line">		* request					HttpServletRequest			一次请求访问的多个资源(转发)</span><br><span class="line">		* session					HttpSession					一次会话的多个请求间</span><br><span class="line">		* application				ServletContext				所有用户间共享数据</span><br><span class="line">		* response					HttpServletResponse			响应对象</span><br><span class="line">		* page						Object						当前页面(Servlet)的对象  this</span><br><span class="line">		* out						JspWriter					输出对象，数据输出到页面上</span><br><span class="line">		* config					ServletConfig				Servlet的配置对象</span><br><span class="line">		* exception					Throwable					异常对象</span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="MVC：开发模式"><a href="#MVC：开发模式" class="headerlink" title="MVC：开发模式"></a>MVC：开发模式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. jsp演变历史</span><br><span class="line">	1. 早期只有servlet，只能使用response输出标签数据，非常麻烦</span><br><span class="line">	2. 后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作</span><br><span class="line">	3. 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</span><br><span class="line"></span><br><span class="line">2. MVC：</span><br><span class="line">	1. M：Model，模型。JavaBean</span><br><span class="line">		* 完成具体的业务操作，如：查询数据库，封装对象</span><br><span class="line">	2. V：View，视图。JSP</span><br><span class="line">		* 展示数据</span><br><span class="line">	3. C：Controller，控制器。Servlet</span><br><span class="line">		* 获取用户的输入</span><br><span class="line">		* 调用模型</span><br><span class="line">		* 将数据交给视图进行展示</span><br><span class="line">	* 优缺点：</span><br><span class="line">		1. 优点：</span><br><span class="line">			1. 耦合性低，方便维护，可以利于分工协作</span><br><span class="line">			2. 重用性高</span><br><span class="line"></span><br><span class="line">		2. 缺点：</span><br><span class="line">			1. 使得项目架构变得复杂，对开发人员要求高</span><br></pre></td></tr></table></figure>



<h2 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：Expression Language 表达式语言</span><br><span class="line">2. 作用：替换和简化jsp页面中java代码的编写</span><br><span class="line">3. 语法：$&#123;表达式&#125;</span><br><span class="line">4. 注意：</span><br><span class="line">	* jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line">		1. 设置jsp中page指令中：isELIgnored&#x3D;&quot;true&quot; 忽略当前jsp页面中所有的el表达式</span><br><span class="line">		2. \$&#123;表达式&#125; ：忽略当前这个el表达式</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 使用：</span><br><span class="line">	1. 运算：</span><br><span class="line">		* 运算符：</span><br><span class="line">			1. 算数运算符： + - * &#x2F;(div) %(mod)</span><br><span class="line">			2. 比较运算符： &gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D;</span><br><span class="line">			3. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)</span><br><span class="line">			4. 空运算符： empty</span><br><span class="line">				* 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</span><br><span class="line">				* $&#123;empty list&#125;:判断字符串、集合、数组对象是否为null或者长度为0</span><br><span class="line">				* $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</span><br><span class="line">	2. 获取值</span><br><span class="line">		1. el表达式只能从域对象中获取值</span><br><span class="line">		2. 语法：</span><br><span class="line">			1. $&#123;域名称.键名&#125;：从指定域中获取指定键的值</span><br><span class="line">				* 域名称：</span><br><span class="line">					1. pageScope		--&gt; pageContext</span><br><span class="line">					2. requestScope 	--&gt; request</span><br><span class="line">					3. sessionScope 	--&gt; session</span><br><span class="line">					4. applicationScope --&gt; application（ServletContext）</span><br><span class="line">				* 举例：在request域中存储了name&#x3D;张三</span><br><span class="line">				* 获取：$&#123;requestScope.name&#125;</span><br><span class="line"></span><br><span class="line">			2. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 获取对象、List集合、Map集合的值</span><br><span class="line">	1. 对象：$&#123;域名称.键名.属性名&#125;</span><br><span class="line">		* 本质上会去调用对象的getter方法</span><br><span class="line"></span><br><span class="line">	2. List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line"></span><br><span class="line">	3. Map集合：</span><br><span class="line">		* $&#123;域名称.键名.key名称&#125;</span><br><span class="line">		* $&#123;域名称.键名[&quot;key名称&quot;]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 隐式对象：</span><br><span class="line">	* el表达式中有11个隐式对象</span><br><span class="line">	* pageContext：</span><br><span class="line">		* 获取jsp其他八个内置对象</span><br><span class="line">			* $&#123;pageContext.request.contextPath&#125;：动态获取虚拟目录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    </p>
<h2 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：JavaServer Pages Tag Library  JSP标准标签库</span><br><span class="line">	* 是由Apache组织提供的开源的免费的jsp标签		&lt;标签&gt;</span><br><span class="line"></span><br><span class="line">2. 作用：用于简化和替换jsp页面上的java代码		</span><br><span class="line"></span><br><span class="line">3. 使用步骤：</span><br><span class="line">	1. 导入jstl相关jar包</span><br><span class="line">	2. 引入标签库：taglib指令：  &lt;%@ taglib %&gt;</span><br><span class="line">	3. 使用标签</span><br><span class="line"></span><br><span class="line">4. 常用的JSTL标签</span><br><span class="line">	1. if:相当于java代码的if语句</span><br><span class="line">		1. 属性：</span><br><span class="line">            * test 必须属性，接受boolean表达式</span><br><span class="line">                * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line">                * 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">   		 2. 注意：</span><br><span class="line">       		 * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</span><br><span class="line">	2. choose:相当于java代码的switch语句</span><br><span class="line">		1. 使用choose标签声明         			相当于switch声明</span><br><span class="line">        2. 使用when标签做判断         			相当于case</span><br><span class="line">        3. 使用otherwise标签做其他情况的声明    	相当于default</span><br><span class="line"></span><br><span class="line">	3. foreach:相当于java代码的for语句</span><br><span class="line"></span><br><span class="line">5. 练习：</span><br><span class="line">	* 需求：在request域中有一个存有User对象的List集合。需要使用jstl+el将list集合数据展示到jsp页面的表格table中</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="三层架构：软件设计架构"><a href="#三层架构：软件设计架构" class="headerlink" title="三层架构：软件设计架构"></a>三层架构：软件设计架构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</span><br><span class="line">2. 业务逻辑层：处理业务逻辑的。</span><br><span class="line">3. 数据访问层：操作数据存储文件。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="案例：用户信息列表展示"><a href="#案例：用户信息列表展示" class="headerlink" title="案例：用户信息列表展示"></a>案例：用户信息列表展示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 需求：用户信息的增删改查操作</span><br><span class="line">2. 设计：</span><br><span class="line">	1. 技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</span><br><span class="line">	2. 数据库设计：</span><br><span class="line">		create database day17; -- 创建数据库</span><br><span class="line">		use day17; 			   -- 使用数据库</span><br><span class="line">		create table user(   -- 创建表</span><br><span class="line">			id int primary key auto_increment,</span><br><span class="line">			name varchar(20) not null,</span><br><span class="line">			gender varchar(5),</span><br><span class="line">			age int,</span><br><span class="line">			address varchar(32),</span><br><span class="line">			qq	varchar(20),</span><br><span class="line">			email varchar(50)</span><br><span class="line">		);</span><br><span class="line"></span><br><span class="line">3. 开发：</span><br><span class="line">	1. 环境搭建</span><br><span class="line">		1. 创建数据库环境</span><br><span class="line">		2. 创建项目，导入需要的jar包</span><br><span class="line"></span><br><span class="line">	2. 编码</span><br><span class="line">	</span><br><span class="line">4. 测试</span><br><span class="line">5. 部署运维</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Filter&amp;Listener</title>
    <url>/2019/10/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191001Filter&amp;Listener/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Filter：过滤器</span><br><span class="line">2. Listener：监听器</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="Filter：过滤器"><a href="#Filter：过滤器" class="headerlink" title="Filter：过滤器"></a>Filter：过滤器</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：</span><br><span class="line">	* 生活中的过滤器：净水器,空气净化器，土匪、</span><br><span class="line">	* web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。</span><br><span class="line">	* 过滤器的作用：</span><br><span class="line">		* 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line">	1. 步骤：</span><br><span class="line">		1. 定义一个类，实现接口Filter</span><br><span class="line">		2. 复写方法</span><br><span class="line">		3. 配置拦截路径</span><br><span class="line">			1. web.xml</span><br><span class="line">			2. 注解</span><br><span class="line">	2. 代码：</span><br><span class="line">		@WebFilter(&quot;&#x2F;*&quot;)&#x2F;&#x2F;访问所有资源之前，都会执行该过滤器</span><br><span class="line">		public class FilterDemo1 implements Filter &#123;</span><br><span class="line">		    @Override</span><br><span class="line">		    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">		</span><br><span class="line">		    &#125;</span><br><span class="line">		</span><br><span class="line">		    @Override</span><br><span class="line">		    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123;</span><br><span class="line">		        System.out.println(&quot;filterDemo1被执行了....&quot;);</span><br><span class="line">		        &#x2F;&#x2F;放行</span><br><span class="line">		        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">		</span><br><span class="line">		    &#125;</span><br><span class="line">		</span><br><span class="line">		    @Override</span><br><span class="line">		    public void destroy() &#123;</span><br><span class="line">		</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 过滤器细节：</span><br><span class="line">	1. web.xml配置	</span><br><span class="line">		&lt;filter&gt;</span><br><span class="line">	        &lt;filter-name&gt;demo1&lt;&#x2F;filter-name&gt;</span><br><span class="line">	        &lt;filter-class&gt;cn.itcast.web.filter.FilterDemo1&lt;&#x2F;filter-class&gt;</span><br><span class="line">	    &lt;&#x2F;filter&gt;</span><br><span class="line">	    &lt;filter-mapping&gt;</span><br><span class="line">	        &lt;filter-name&gt;demo1&lt;&#x2F;filter-name&gt;</span><br><span class="line">			&lt;!-- 拦截路径 --&gt;</span><br><span class="line">	        &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">	    &lt;&#x2F;filter-mapping&gt;</span><br><span class="line">	2. 过滤器执行流程</span><br><span class="line">		1. 执行过滤器</span><br><span class="line">		2. 执行放行后的资源</span><br><span class="line">		3. 回来执行过滤器放行代码下边的代码</span><br><span class="line">	3. 过滤器生命周期方法</span><br><span class="line">		1. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源</span><br><span class="line">		2. doFilter:每一次请求被拦截资源时，会执行。执行多次</span><br><span class="line">		3. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源</span><br><span class="line">	4. 过滤器配置详解</span><br><span class="line">		* 拦截路径配置：</span><br><span class="line">			1. 具体资源路径： &#x2F;index.jsp   只有访问index.jsp资源时，过滤器才会被执行</span><br><span class="line">			2. 拦截目录： &#x2F;user&#x2F;*	访问&#x2F;user下的所有资源时，过滤器都会被执行</span><br><span class="line">			3. 后缀名拦截： *.jsp		访问所有后缀名为jsp资源时，过滤器都会被执行</span><br><span class="line">			4. 拦截所有资源：&#x2F;*		访问所有资源时，过滤器都会被执行</span><br><span class="line">		* 拦截方式配置：资源被访问的方式</span><br><span class="line">			* 注解配置：</span><br><span class="line">				* 设置dispatcherTypes属性</span><br><span class="line">					1. REQUEST：默认值。浏览器直接请求资源</span><br><span class="line">					2. FORWARD：转发访问资源</span><br><span class="line">					3. INCLUDE：包含访问资源</span><br><span class="line">					4. ERROR：错误跳转资源</span><br><span class="line">					5. ASYNC：异步访问资源</span><br><span class="line">			* web.xml配置</span><br><span class="line">				* 设置&lt;dispatcher&gt;&lt;&#x2F;dispatcher&gt;标签即可</span><br><span class="line">			</span><br><span class="line">	5. 过滤器链(配置多个过滤器)</span><br><span class="line">		* 执行顺序：如果有两个过滤器：过滤器1和过滤器2</span><br><span class="line">			1. 过滤器1</span><br><span class="line">			2. 过滤器2</span><br><span class="line">			3. 资源执行</span><br><span class="line">			4. 过滤器2</span><br><span class="line">			5. 过滤器1 </span><br><span class="line"></span><br><span class="line">		* 过滤器先后顺序问题：</span><br><span class="line">			1. 注解配置：按照类名的字符串比较规则比较，值小的先执行</span><br><span class="line">				* 如： AFilter 和 BFilter，AFilter就先执行了。</span><br><span class="line">			2. web.xml配置： &lt;filter-mapping&gt;谁定义在上边，谁先执行</span><br><span class="line">4. 案例：</span><br><span class="line">	1. 案例1_登录验证</span><br><span class="line">		* 需求：</span><br><span class="line">			1. 访问day17_case案例的资源。验证其是否登录</span><br><span class="line">			2. 如果登录了，则直接放行。</span><br><span class="line">			3. 如果没有登录，则跳转到登录页面，提示&quot;您尚未登录，请先登录&quot;。</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 案例2_敏感词汇过滤</span><br><span class="line">	* 需求：</span><br><span class="line">		1. 对day17_case案例录入的数据进行敏感词汇过滤</span><br><span class="line">		2. 敏感词汇参考《敏感词汇.txt》</span><br><span class="line">		3. 如果是敏感词汇，替换为 *** </span><br><span class="line"></span><br><span class="line">	* 分析：</span><br><span class="line">		1. 对request对象进行增强。增强获取参数相关方法</span><br><span class="line">		2. 放行。传递代理对象</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 增强对象的功能：</span><br><span class="line">	* 设计模式：一些通用的解决固定问题的方式</span><br><span class="line">	1. 装饰模式</span><br><span class="line">	2. 代理模式</span><br><span class="line">		* 概念：</span><br><span class="line">			1. 真实对象：被代理的对象</span><br><span class="line">			2. 代理对象：</span><br><span class="line">			3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的</span><br><span class="line">	 	* 实现方式：</span><br><span class="line">		 	1. 静态代理：有一个类文件描述代理模式</span><br><span class="line">		 	2. 动态代理：在内存中形成代理类</span><br><span class="line">				* 实现步骤：</span><br><span class="line">					1. 代理对象和真实对象实现相同的接口</span><br><span class="line">					2. 代理对象 &#x3D; Proxy.newProxyInstance();</span><br><span class="line">					3. 使用代理对象调用方法。</span><br><span class="line">					4. 增强方法</span><br><span class="line"></span><br><span class="line">				* 增强方式：</span><br><span class="line">					1. 增强参数列表</span><br><span class="line">					2. 增强返回值类型</span><br><span class="line">					3. 增强方法体执行逻辑	</span><br></pre></td></tr></table></figure>

<h2 id="Listener：监听器"><a href="#Listener：监听器" class="headerlink" title="Listener：监听器"></a>Listener：监听器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 概念：web的三大组件之一。</span><br><span class="line">	* 事件监听机制</span><br><span class="line">		* 事件	：一件事情</span><br><span class="line">		* 事件源 ：事件发生的地方</span><br><span class="line">		* 监听器 ：一个对象</span><br><span class="line">		* 注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* ServletContextListener:监听ServletContext对象的创建和销毁</span><br><span class="line">	* 方法：</span><br><span class="line">		* void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法</span><br><span class="line">		* void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法</span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 定义一个类，实现ServletContextListener接口</span><br><span class="line">		2. 复写方法</span><br><span class="line">		3. 配置</span><br><span class="line">			1. web.xml</span><br><span class="line">					&lt;listener&gt;</span><br><span class="line"> 					 &lt;listener-class&gt;cn.itcast.web.listener.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line"> 					 &lt;&#x2F;listener&gt;</span><br><span class="line">					* 指定初始化参数&lt;context-param&gt;</span><br><span class="line">			2. 注解：</span><br><span class="line">				* @WebListener</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JQuery基础</title>
    <url>/2019/10/02/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191002JQuery%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. JQuery 基础：</span><br><span class="line">	1. 概念</span><br><span class="line">	2. 快速入门</span><br><span class="line">	3. JQuery对象和JS对象区别与转换</span><br><span class="line">	4. 选择器</span><br><span class="line">	5. DOM操作</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="JQuery-基础："><a href="#JQuery-基础：" class="headerlink" title="JQuery 基础："></a>JQuery 基础：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： 一个JavaScript框架。简化JS开发</span><br><span class="line">	* jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨	是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优	化HTML文档操作、事件处理、动画设计和Ajax交互。</span><br><span class="line"></span><br><span class="line">	* JavaScript框架：本质上就是一些js文件，封装了js的原生代码而已</span><br><span class="line">2. 快速入门</span><br><span class="line">	1. 步骤：</span><br><span class="line">		1. 下载JQuery</span><br><span class="line">			* 目前jQuery有三个大版本：</span><br><span class="line">				1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，</span><br><span class="line">					 功能不再新增。因此一般项目来说，使用1.x版本就可以了，</span><br><span class="line">					 最终版本：1.12.4 (2016年5月20日)</span><br><span class="line">				2.x：不兼容ie678，很少有人使用，官方只做BUG维护，</span><br><span class="line">					 功能不再新增。如果不考虑兼容低版本的浏览器可以使用2.x，</span><br><span class="line">					 最终版本：2.2.4 (2016年5月20日)</span><br><span class="line">				3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，</span><br><span class="line">					 一般不会使用3.x版本的，很多老的jQuery插件不支持这个版本。</span><br><span class="line">					 目前该版本是官方主要更新维护的版本。最新版本：3.2.1（2017年3月20日）</span><br><span class="line">			* jquery-xxx.js 与 jquery-xxx.min.js区别：</span><br><span class="line">				1. jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</span><br><span class="line">				2. jquery-xxx.min.js：生产版本。程序中使用，没有缩进。体积小一些。程序加载更快</span><br><span class="line"></span><br><span class="line">		2. 导入JQuery的js文件：导入min.js文件</span><br><span class="line">		3. 使用</span><br><span class="line">			var div1 &#x3D; $(&quot;#div1&quot;);</span><br></pre></td></tr></table></figure>

<pre><code>               alert(div1.html());</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. JQuery对象和JS对象区别与转换</span><br><span class="line">	1. JQuery对象在操作时，更加方便。</span><br><span class="line">    2. JQuery对象和js对象方法不通用的.</span><br><span class="line">    3. 两者相互转换</span><br><span class="line">        * jq -- &gt; js : jq对象[索引] 或者 jq对象.get(索引)</span><br><span class="line">        * js -- &gt; jq : $(js对象)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 选择器：筛选具有相似特征的元素(标签)</span><br><span class="line"></span><br><span class="line">	1. 基本操作学习：</span><br><span class="line">		1. 事件绑定</span><br><span class="line">			&#x2F;&#x2F;1.获取b1按钮</span><br><span class="line">            $(&quot;#b1&quot;).click(function()&#123;</span><br><span class="line">                alert(&quot;abc&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">		2. 入口函数</span><br><span class="line">			 $(function () &#123;</span><br><span class="line">	           </span><br><span class="line">   			 &#125;);</span><br><span class="line">			 window.onload  和 $(function) 区别</span><br><span class="line">                 * window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉</span><br><span class="line">                 * $(function)可以定义多次的。</span><br><span class="line">		3. 样式控制：css方法</span><br><span class="line">			 &#x2F;&#x2F; $(&quot;#div1&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br><span class="line">      		$(&quot;#div1&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	2. 分类</span><br><span class="line">		1. 基本选择器</span><br><span class="line">			1. 标签选择器（元素选择器）</span><br><span class="line">				* 语法： $(&quot;html标签名&quot;) 获得所有匹配标签名称的元素</span><br><span class="line">			2. id选择器 </span><br><span class="line">				* 语法： $(&quot;#id的属性值&quot;) 获得与指定id属性值匹配的元素</span><br><span class="line">			3. 类选择器</span><br><span class="line">				* 语法： $(&quot;.class的属性值&quot;) 获得与指定的class属性值匹配的元素</span><br><span class="line">			4. 并集选择器：</span><br><span class="line">				* 语法： $(&quot;选择器1,选择器2....&quot;) 获取多个选择器选中的所有元素</span><br><span class="line">		2. 层级选择器</span><br><span class="line">			1. 后代选择器</span><br><span class="line">				* 语法： $(&quot;A B &quot;) 选择A元素内部的所有B元素		</span><br><span class="line">			2. 子选择器</span><br><span class="line">				* 语法： $(&quot;A &gt; B&quot;) 选择A元素内部的所有B子元素</span><br><span class="line">		3. 属性选择器</span><br><span class="line">			1. 属性名称选择器 </span><br><span class="line">				* 语法： $(&quot;A[属性名]&quot;) 包含指定属性的选择器</span><br><span class="line">			2. 属性选择器</span><br><span class="line">				* 语法： $(&quot;A[属性名&#x3D;&#39;值&#39;]&quot;) 包含指定属性等于指定值的选择器</span><br><span class="line">			3. 复合属性选择器</span><br><span class="line">				* 语法： $(&quot;A[属性名&#x3D;&#39;值&#39;][]...&quot;) 包含多个属性条件的选择器</span><br><span class="line">		4. 过滤选择器</span><br><span class="line">			1. 首元素选择器 </span><br><span class="line">				* 语法： :first 获得选择的元素中的第一个元素</span><br><span class="line">			2. 尾元素选择器 </span><br><span class="line">				* 语法： :last 获得选择的元素中的最后一个元素</span><br><span class="line">			3. 非元素选择器</span><br><span class="line">				* 语法： :not(selector) 不包括指定内容的元素</span><br><span class="line">			4. 偶数选择器</span><br><span class="line">				* 语法： :even 偶数，从 0 开始计数</span><br><span class="line">			5. 奇数选择器</span><br><span class="line">				* 语法： :odd 奇数，从 0 开始计数</span><br><span class="line">			6. 等于索引选择器</span><br><span class="line">				* 语法： :eq(index) 指定索引元素</span><br><span class="line">			7. 大于索引选择器 </span><br><span class="line">				* 语法： :gt(index) 大于指定索引元素</span><br><span class="line">			8. 小于索引选择器 </span><br><span class="line">				* 语法： :lt(index) 小于指定索引元素</span><br><span class="line">			9. 标题选择器</span><br><span class="line">				* 语法： :header 获得标题（h1~h6）元素，固定写法</span><br><span class="line">		5. 表单过滤选择器</span><br><span class="line">			1. 可用元素选择器 </span><br><span class="line">				* 语法： :enabled 获得可用元素</span><br><span class="line">			2. 不可用元素选择器 </span><br><span class="line">				* 语法： :disabled 获得不可用元素</span><br><span class="line">			3. 选中选择器 </span><br><span class="line">				* 语法： :checked 获得单选&#x2F;复选框选中的元素</span><br><span class="line">			4. 选中选择器 </span><br><span class="line">				* 语法： :selected 获得下拉框选中的元素</span><br><span class="line"></span><br><span class="line">5. DOM操作</span><br><span class="line">	1. 内容操作</span><br><span class="line">		1. html(): 获取&#x2F;设置元素的标签体内容   &lt;a&gt;&lt;font&gt;内容&lt;&#x2F;font&gt;&lt;&#x2F;a&gt;  --&gt; &lt;font&gt;内容&lt;&#x2F;font&gt;</span><br><span class="line">		2. text(): 获取&#x2F;设置元素的标签体纯文本内容   &lt;a&gt;&lt;font&gt;内容&lt;&#x2F;font&gt;&lt;&#x2F;a&gt; --&gt; 内容</span><br><span class="line">		3. val()： 获取&#x2F;设置元素的value属性值</span><br><span class="line">	2. 属性操作</span><br><span class="line">		1. 通用属性操作</span><br><span class="line">			1. attr(): 获取&#x2F;设置元素的属性</span><br><span class="line">			2. removeAttr():删除属性</span><br><span class="line">			3. prop():获取&#x2F;设置元素的属性</span><br><span class="line">			4. removeProp():删除属性</span><br><span class="line"></span><br><span class="line">			* attr和prop区别？</span><br><span class="line">				1. 如果操作的是元素的固有属性，则建议使用prop</span><br><span class="line">				2. 如果操作的是元素自定义的属性，则建议使用attr</span><br><span class="line">		2. 对class属性操作</span><br><span class="line">			1. addClass():添加class属性值</span><br><span class="line">			2. removeClass():删除class属性值</span><br><span class="line">			3. toggleClass():切换class属性</span><br><span class="line">				* toggleClass(&quot;one&quot;): </span><br><span class="line">					* 判断如果元素对象上存在class&#x3D;&quot;one&quot;，则将属性值one删除掉。  如果元素对象上不存在class&#x3D;&quot;one&quot;，则添加</span><br><span class="line">			4. css():</span><br><span class="line">	3. CRUD操作:</span><br><span class="line">		1. append():父元素将子元素追加到末尾</span><br><span class="line">			* 对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾</span><br><span class="line">		2. prepend():父元素将子元素追加到开头</span><br><span class="line">			* 对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头</span><br><span class="line">		3. appendTo():</span><br><span class="line">			* 对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾</span><br><span class="line">		4. prependTo()：</span><br><span class="line">			* 对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. after():添加元素到元素后边</span><br><span class="line">	* 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系</span><br><span class="line">6. before():添加元素到元素前边</span><br><span class="line">	* 对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span><br><span class="line">7. insertAfter()</span><br><span class="line">	* 对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系</span><br><span class="line">8. insertBefore()</span><br><span class="line">	* 对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系</span><br><span class="line"></span><br><span class="line">9. remove():移除元素</span><br><span class="line">	* 对象.remove():将对象删除掉</span><br><span class="line">10. empty():清空元素的所有后代元素。</span><br><span class="line">	* 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JQuery高级</title>
    <url>/2019/10/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191003JQuery%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. JQuery 高级</span><br><span class="line">	1. 动画</span><br><span class="line">	2. 遍历</span><br><span class="line">	3. 事件绑定</span><br><span class="line">	4. 案例</span><br><span class="line">	5. 插件</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="JQuery-高级"><a href="#JQuery-高级" class="headerlink" title="JQuery 高级"></a>JQuery 高级</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 动画</span><br><span class="line">	1. 三种方式显示和隐藏元素</span><br><span class="line">		1. 默认显示和隐藏方式</span><br><span class="line">			1. show([speed,[easing],[fn]])</span><br><span class="line">				1. 参数：</span><br><span class="line">					1. speed：动画的速度。三个预定义的值(&quot;slow&quot;,&quot;normal&quot;, &quot;fast&quot;)或表示动画时长的毫秒数值(如：1000)</span><br><span class="line">					2. easing：用来指定切换效果，默认是&quot;swing&quot;，可用参数&quot;linear&quot;</span><br><span class="line">						* swing：动画执行时效果是 先慢，中间快，最后又慢</span><br><span class="line">						* linear：动画执行时速度是匀速的</span><br><span class="line">					3. fn：在动画完成时执行的函数，每个元素执行一次。</span><br><span class="line"></span><br><span class="line">			2. hide([speed,[easing],[fn]])</span><br><span class="line">			3. toggle([speed],[easing],[fn])</span><br><span class="line">		</span><br><span class="line">		2. 滑动显示和隐藏方式</span><br><span class="line">			1. slideDown([speed],[easing],[fn])</span><br><span class="line">			2. slideUp([speed,[easing],[fn]])</span><br><span class="line">			3. slideToggle([speed],[easing],[fn])</span><br><span class="line"></span><br><span class="line">		3. 淡入淡出显示和隐藏方式</span><br><span class="line">			1. fadeIn([speed],[easing],[fn])</span><br><span class="line">			2. fadeOut([speed],[easing],[fn])</span><br><span class="line">			3. fadeToggle([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 遍历</span><br><span class="line">	1. js的遍历方式</span><br><span class="line">		* for(初始化值;循环结束条件;步长)</span><br><span class="line">	2. jq的遍历方式</span><br><span class="line">		1. jq对象.each(callback)</span><br><span class="line">			1. 语法：</span><br><span class="line">				jquery对象.each(function(index,element)&#123;&#125;);</span><br><span class="line">					* index:就是元素在集合中的索引</span><br><span class="line">					* element：就是集合中的每一个元素对象</span><br><span class="line"></span><br><span class="line">					* this：集合中的每一个元素对象</span><br><span class="line">			2. 回调函数返回值：</span><br><span class="line">				* true:如果当前function返回为false，则结束循环(break)。</span><br><span class="line">				* false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)</span><br><span class="line">		2. $.each(object, [callback])</span><br><span class="line">		3. for..of: jquery 3.0 版本之后提供的方式</span><br><span class="line">			for(元素对象 of 容器对象)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 事件绑定</span><br><span class="line">	1. jquery标准的绑定方式</span><br><span class="line">		* jq对象.事件方法(回调函数)；</span><br><span class="line">		* 注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</span><br><span class="line">			* 表单对象.submit();&#x2F;&#x2F;让表单提交</span><br><span class="line">	2. on绑定事件&#x2F;off解除绑定</span><br><span class="line">		* jq对象.on(&quot;事件名称&quot;,回调函数)</span><br><span class="line">		* jq对象.off(&quot;事件名称&quot;)</span><br><span class="line">			* 如果off方法不传递任何参数，则将组件上的所有事件全部解绑</span><br><span class="line">	3. 事件切换：toggle</span><br><span class="line">		* jq对象.toggle(fn1,fn2...)</span><br><span class="line">			* 当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2.....</span><br><span class="line">			</span><br><span class="line">		* 注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</span><br><span class="line">			 &lt;script src&#x3D;&quot;..&#x2F;js&#x2F;jquery-migrate-1.0.0.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 案例</span><br><span class="line">	1. 广告显示和隐藏</span><br><span class="line">		&lt;!DOCTYPE html&gt;</span><br><span class="line">		&lt;html&gt;</span><br><span class="line">		&lt;head&gt;</span><br><span class="line">		    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">		    &lt;title&gt;广告的自动显示与隐藏&lt;&#x2F;title&gt;</span><br><span class="line">		    &lt;style&gt;</span><br><span class="line">		        #content&#123;width:100%;height:500px;background:#999&#125;</span><br><span class="line">		    &lt;&#x2F;style&gt;</span><br><span class="line">		</span><br><span class="line">		    &lt;!--引入jquery--&gt;</span><br><span class="line">		    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">		    &lt;script&gt;</span><br><span class="line">		        &#x2F;*</span><br><span class="line">		            需求：</span><br><span class="line">		                1. 当页面加载完，3秒后。自动显示广告</span><br><span class="line">		                2. 广告显示5秒后，自动消失。</span><br><span class="line">		</span><br><span class="line">		            分析：</span><br><span class="line">		                1. 使用定时器来完成。setTimeout (执行一次定时器)</span><br><span class="line">		                2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display</span><br><span class="line">		                3. 使用  show&#x2F;hide方法来完成广告的显示</span><br><span class="line">		         *&#x2F;</span><br><span class="line">		</span><br><span class="line">		        &#x2F;&#x2F;入口函数，在页面加载完成之后，定义定时器，调用这两个方法</span><br><span class="line">		        $(function () &#123;</span><br><span class="line">		           &#x2F;&#x2F;定义定时器，调用adShow方法 3秒后执行一次</span><br><span class="line">		           setTimeout(adShow,3000);</span><br><span class="line">		           &#x2F;&#x2F;定义定时器，调用adHide方法，8秒后执行一次</span><br><span class="line">		            setTimeout(adHide,8000);</span><br><span class="line">		        &#125;);</span><br><span class="line">		        &#x2F;&#x2F;显示广告</span><br><span class="line">		        function adShow() &#123;</span><br><span class="line">		            &#x2F;&#x2F;获取广告div，调用显示方法</span><br><span class="line">		            $(&quot;#ad&quot;).show(&quot;slow&quot;);</span><br><span class="line">		        &#125;</span><br><span class="line">		        &#x2F;&#x2F;隐藏广告</span><br><span class="line">		        function adHide() &#123;</span><br><span class="line">		            &#x2F;&#x2F;获取广告div，调用隐藏方法</span><br><span class="line">		            $(&quot;#ad&quot;).hide(&quot;slow&quot;);</span><br><span class="line">		        &#125;</span><br><span class="line">		    &lt;&#x2F;script&gt;</span><br><span class="line">		&lt;&#x2F;head&gt;</span><br><span class="line">		&lt;body&gt;</span><br><span class="line">		&lt;!-- 整体的DIV --&gt;</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">		    &lt;!-- 广告DIV --&gt;</span><br><span class="line">		    &lt;div id&#x3D;&quot;ad&quot; style&#x3D;&quot;display: none;&quot;&gt;</span><br><span class="line">		        &lt;img style&#x3D;&quot;width:100%&quot; src&#x3D;&quot;..&#x2F;img&#x2F;adv.jpg&quot; &#x2F;&gt;</span><br><span class="line">		    &lt;&#x2F;div&gt;</span><br><span class="line">		</span><br><span class="line">		    &lt;!-- 下方正文部分 --&gt;</span><br><span class="line">		    &lt;div id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">		        正文部分</span><br><span class="line">		    &lt;&#x2F;div&gt;</span><br><span class="line">		&lt;&#x2F;div&gt;</span><br><span class="line">		&lt;&#x2F;body&gt;</span><br><span class="line">		&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 抽奖</span><br><span class="line">	&lt;!DOCTYPE html&gt;</span><br><span class="line">	&lt;html&gt;</span><br><span class="line">	&lt;head&gt;</span><br><span class="line">	    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">	    &lt;title&gt;jquery案例之抽奖&lt;&#x2F;title&gt;</span><br><span class="line">	    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;..&#x2F;js&#x2F;jquery-3.3.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	</span><br><span class="line">	    &lt;script language&#x3D;&#39;javascript&#39; type&#x3D;&#39;text&#x2F;javascript&#39;&gt;</span><br><span class="line">	</span><br><span class="line">	        &#x2F;*</span><br><span class="line">	            分析：</span><br><span class="line">	                1. 给开始按钮绑定单击事件</span><br><span class="line">	                    1.1 定义循环定时器</span><br><span class="line">	                    1.2 切换小相框的src属性</span><br><span class="line">	                        * 定义数组，存放图片资源路径</span><br><span class="line">	                        * 生成随机数。数组索引</span><br><span class="line">					2. 给结束按钮绑定单击事件</span><br><span class="line">	                    1.1 停止定时器</span><br><span class="line">	                    1.2 给大相框设置src属性</span><br><span class="line">	</span><br><span class="line">	         *&#x2F;</span><br><span class="line">	        var imgs &#x3D; [&quot;..&#x2F;img&#x2F;man00.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man01.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man02.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man03.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man04.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man05.jpg&quot;,</span><br><span class="line">	                    &quot;..&#x2F;img&#x2F;man06.jpg&quot;,</span><br><span class="line">	                    ];</span><br><span class="line">	        var startId;&#x2F;&#x2F;开始定时器的id</span><br><span class="line">	        var index;&#x2F;&#x2F;随机角标</span><br><span class="line">	        $(function () &#123;</span><br><span class="line">	            &#x2F;&#x2F;处理按钮是否可以使用的效果</span><br><span class="line">	            $(&quot;#startID&quot;).prop(&quot;disabled&quot;,false);</span><br><span class="line">	            $(&quot;#stopID&quot;).prop(&quot;disabled&quot;,true);    	     </span><br><span class="line">	           &#x2F;&#x2F;1. 给开始按钮绑定单击事件</span><br><span class="line">	            $(&quot;#startID&quot;).click(function () &#123;</span><br><span class="line">	                &#x2F;&#x2F; 1.1 定义循环定时器 20毫秒执行一次</span><br><span class="line">	                startId &#x3D; setInterval(function () &#123;</span><br><span class="line">	                    &#x2F;&#x2F;处理按钮是否可以使用的效果</span><br><span class="line">	                    $(&quot;#startID&quot;).prop(&quot;disabled&quot;,true);</span><br><span class="line">	                    $(&quot;#stopID&quot;).prop(&quot;disabled&quot;,false);</span><br><span class="line">	                    &#x2F;&#x2F;1.2生成随机角标 0-6</span><br><span class="line">	                    index &#x3D; Math.floor(Math.random() * 7);&#x2F;&#x2F;0.000--0.999 --&gt; * 7 --&gt; 0.0-----6.9999</span><br><span class="line">	                    &#x2F;&#x2F;1.3设置小相框的src属性</span><br><span class="line">	                    $(&quot;#img1ID&quot;).prop(&quot;src&quot;,imgs[index]);</span><br><span class="line">	</span><br><span class="line">	                &#125;,20);</span><br><span class="line">	            &#125;);</span><br><span class="line">	            &#x2F;&#x2F;2. 给结束按钮绑定单击事件</span><br><span class="line">	            $(&quot;#stopID&quot;).click(function () &#123;</span><br><span class="line">	                &#x2F;&#x2F;处理按钮是否可以使用的效果</span><br><span class="line">	                $(&quot;#startID&quot;).prop(&quot;disabled&quot;,false);</span><br><span class="line">	                $(&quot;#stopID&quot;).prop(&quot;disabled&quot;,true);</span><br><span class="line">	               &#x2F;&#x2F; 1.1 停止定时器</span><br><span class="line">	                clearInterval(startId);</span><br><span class="line">	               &#x2F;&#x2F; 1.2 给大相框设置src属性</span><br><span class="line">	                $(&quot;#img2ID&quot;).prop(&quot;src&quot;,imgs[index]).hide();</span><br><span class="line">	                &#x2F;&#x2F;显示1秒之后</span><br><span class="line">	                $(&quot;#img2ID&quot;).show(1000);</span><br><span class="line">	            &#125;);</span><br><span class="line">	        &#125;);</span><br><span class="line">	    &lt;&#x2F;script&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;&#x2F;head&gt;</span><br><span class="line">	&lt;body&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 小像框 --&gt;</span><br><span class="line">	&lt;div style&#x3D;&quot;border-style:dotted;width:160px;height:100px&quot;&gt;</span><br><span class="line">	    &lt;img id&#x3D;&quot;img1ID&quot; src&#x3D;&quot;..&#x2F;img&#x2F;man00.jpg&quot; style&#x3D;&quot;width:160px;height:100px&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 大像框 --&gt;</span><br><span class="line">	&lt;div</span><br><span class="line">	        style&#x3D;&quot;border-style:double;width:800px;height:500px;position:absolute;left:500px;top:10px&quot;&gt;</span><br><span class="line">	    &lt;img id&#x3D;&quot;img2ID&quot; src&#x3D;&quot;..&#x2F;img&#x2F;man00.jpg&quot; width&#x3D;&quot;800px&quot; height&#x3D;&quot;500px&quot;&#x2F;&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 开始按钮 --&gt;</span><br><span class="line">	&lt;input</span><br><span class="line">	        id&#x3D;&quot;startID&quot;</span><br><span class="line">	        type&#x3D;&quot;button&quot;</span><br><span class="line">	        value&#x3D;&quot;点击开始&quot;</span><br><span class="line">	        style&#x3D;&quot;width:150px;height:150px;font-size:22px&quot;&gt;</span><br><span class="line">	</span><br><span class="line">	&lt;!-- 停止按钮 --&gt;</span><br><span class="line">	&lt;input</span><br><span class="line">	        id&#x3D;&quot;stopID&quot;</span><br><span class="line">	        type&#x3D;&quot;button&quot;</span><br><span class="line">	        value&#x3D;&quot;点击停止&quot;</span><br><span class="line">	        style&#x3D;&quot;width:150px;height:150px;font-size:22px&quot;&gt;</span><br><span class="line">	&lt;&#x2F;body&gt;</span><br><span class="line">	&lt;&#x2F;html&gt;		</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 插件：增强JQuery的功能</span><br><span class="line">	1. 实现方式：</span><br><span class="line">		1. $.fn.extend(object) </span><br><span class="line">			* 增强通过Jquery获取的对象的功能  $(&quot;#id&quot;)</span><br><span class="line">		2. $.extend(object)</span><br><span class="line">			* 增强JQeury对象自身的功能  $&#x2F;jQuery</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Ajax&amp;Json</title>
    <url>/2019/10/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191005Ajax&amp;Json/</url>
    <content><![CDATA[<h1 id="AJAX："><a href="#AJAX：" class="headerlink" title="AJAX："></a>AJAX：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： ASynchronous JavaScript And XML	异步的JavaScript 和 XML</span><br><span class="line">	1. 异步和同步：客户端和服务器端相互通信的基础上</span><br><span class="line">		* 客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。</span><br><span class="line">		* 客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。</span><br><span class="line"></span><br><span class="line">		Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 [1] </span><br><span class="line">		通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</span><br><span class="line">		传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。</span><br><span class="line"></span><br><span class="line">		提升用户的体验</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 实现方式：</span><br><span class="line">	1. 原生的JS实现方式（了解）</span><br><span class="line">				 &#x2F;&#x2F;1.创建核心对象</span><br><span class="line">	            var xmlhttp;</span><br><span class="line">	            if (window.XMLHttpRequest)</span><br><span class="line">	            &#123;&#x2F;&#x2F; code for IE7+, Firefox, Chrome, Opera, Safari</span><br><span class="line">	                xmlhttp&#x3D;new XMLHttpRequest();</span><br><span class="line">	            &#125;</span><br><span class="line">	            else</span><br><span class="line">	            &#123;&#x2F;&#x2F; code for IE6, IE5</span><br><span class="line">	                xmlhttp&#x3D;new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">	            &#125;</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;2. 建立连接</span><br><span class="line">	            &#x2F;*</span><br><span class="line">	                参数：</span><br><span class="line">	                    1. 请求方式：GET、POST</span><br><span class="line">	                        * get方式，请求参数在URL后边拼接。send方法为空参</span><br><span class="line">	                        * post方式，请求参数在send方法中定义</span><br><span class="line">	                    2. 请求的URL：</span><br><span class="line">	                    3. 同步或异步请求：true（异步）或 false（同步）</span><br><span class="line">	</span><br><span class="line">	             *&#x2F;</span><br><span class="line">	            xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username&#x3D;tom&quot;,true);</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;3.发送请求</span><br><span class="line">	            xmlhttp.send();</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;4.接受并处理来自服务器的响应结果</span><br><span class="line">	            &#x2F;&#x2F;获取方式 ：xmlhttp.responseText</span><br><span class="line">	            &#x2F;&#x2F;什么时候获取？当服务器响应成功后再获取</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。</span><br><span class="line">	            xmlhttp.onreadystatechange&#x3D;function()</span><br><span class="line">	            &#123;</span><br><span class="line">	                &#x2F;&#x2F;判断readyState就绪状态是否为4，判断status响应状态码是否为200</span><br><span class="line">	                if (xmlhttp.readyState&#x3D;&#x3D;4 &amp;&amp; xmlhttp.status&#x3D;&#x3D;200)</span><br><span class="line">	                &#123;</span><br><span class="line">	                   &#x2F;&#x2F;获取服务器的响应结果</span><br><span class="line">	                    var responseText &#x3D; xmlhttp.responseText;</span><br><span class="line">	                    alert(responseText);</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125;</span><br><span class="line">	2. JQeury实现方式</span><br><span class="line">		1. $.ajax()</span><br><span class="line">			* 语法：$.ajax(&#123;键值对&#125;);</span><br><span class="line">			 &#x2F;&#x2F;使用$.ajax()发送异步请求</span><br><span class="line">	            $.ajax(&#123;</span><br><span class="line">	                url:&quot;ajaxServlet1111&quot; , &#x2F;&#x2F; 请求路径</span><br><span class="line">	                type:&quot;POST&quot; , &#x2F;&#x2F;请求方式</span><br><span class="line">	                &#x2F;&#x2F;data: &quot;username&#x3D;jack&amp;age&#x3D;23&quot;,&#x2F;&#x2F;请求参数</span><br><span class="line">	                data:&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23&#125;,</span><br><span class="line">	                success:function (data) &#123;</span><br><span class="line">	                    alert(data);</span><br><span class="line">	                &#125;,&#x2F;&#x2F;响应成功后的回调函数</span><br><span class="line">	                error:function () &#123;</span><br><span class="line">	                    alert(&quot;出错啦...&quot;)</span><br><span class="line">	                &#125;,&#x2F;&#x2F;表示如果请求响应出现错误，会执行的回调函数</span><br><span class="line">	</span><br><span class="line">	                dataType:&quot;text&quot;&#x2F;&#x2F;设置接受到的响应数据的格式</span><br><span class="line">	            &#125;);</span><br><span class="line">		2. $.get()：发送get请求</span><br><span class="line">			* 语法：$.get(url, [data], [callback], [type])</span><br><span class="line">				* 参数：</span><br><span class="line">					* url：请求路径</span><br><span class="line">					* data：请求参数</span><br><span class="line">					* callback：回调函数</span><br><span class="line">					* type：响应结果的类型</span><br><span class="line"></span><br><span class="line">		3. $.post()：发送post请求</span><br><span class="line">			* 语法：$.post(url, [data], [callback], [type])</span><br><span class="line">				* 参数：</span><br><span class="line">					* url：请求路径</span><br><span class="line">					* data：请求参数</span><br><span class="line">					* callback：回调函数</span><br><span class="line">					* type：响应结果的类型</span><br></pre></td></tr></table></figure>



<h1 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： JavaScript Object Notation		JavaScript对象表示法</span><br><span class="line">	Person p &#x3D; new Person();</span><br><span class="line">	p.setName(&quot;张三&quot;);</span><br><span class="line">	p.setAge(23);</span><br><span class="line">	p.setGender(&quot;男&quot;);</span><br><span class="line"></span><br><span class="line">	var p &#x3D; &#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;;</span><br><span class="line"></span><br><span class="line">	* json现在多用于存储和交换文本信息的语法</span><br><span class="line">	* 进行数据的传输</span><br><span class="line">	* JSON 比 XML 更小、更快，更易解析。</span><br><span class="line"></span><br><span class="line">2. 语法：</span><br><span class="line">	1. 基本规则</span><br><span class="line">		* 数据在名称&#x2F;值对中：json数据是由键值对构成的</span><br><span class="line">			* 键用引号(单双都行)引起来，也可以不使用引号</span><br><span class="line">			* 值得取值类型：</span><br><span class="line">				1. 数字（整数或浮点数）</span><br><span class="line">				2. 字符串（在双引号中）</span><br><span class="line">				3. 逻辑值（true 或 false）</span><br><span class="line">				4. 数组（在方括号中）	&#123;&quot;persons&quot;:[&#123;&#125;,&#123;&#125;]&#125;</span><br><span class="line">				5. 对象（在花括号中） &#123;&quot;address&quot;:&#123;&quot;province&quot;：&quot;陕西&quot;....&#125;&#125;</span><br><span class="line">				6. null</span><br><span class="line">		* 数据由逗号分隔：多个键值对由逗号分隔</span><br><span class="line">		* 花括号保存对象：使用&#123;&#125;定义json 格式</span><br><span class="line">		* 方括号保存数组：[]</span><br><span class="line">	2. 获取数据:</span><br><span class="line">		1. json对象.键名</span><br><span class="line">		2. json对象[&quot;键名&quot;]</span><br><span class="line">		3. 数组对象[索引]</span><br><span class="line">		4. 遍历</span><br><span class="line">				 &#x2F;&#x2F;1.定义基本格式</span><br><span class="line">		        var person &#x3D; &#123;&quot;name&quot;: &quot;张三&quot;, age: 23, &#39;gender&#39;: true&#125;;</span><br><span class="line">		</span><br><span class="line">		        var ps &#x3D; [&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 23, &quot;gender&quot;: true&#125;,</span><br><span class="line">		            &#123;&quot;name&quot;: &quot;李四&quot;, &quot;age&quot;: 24, &quot;gender&quot;: true&#125;,</span><br><span class="line">		            &#123;&quot;name&quot;: &quot;王五&quot;, &quot;age&quot;: 25, &quot;gender&quot;: false&#125;];</span><br><span class="line">		        &#x2F;&#x2F;获取person对象中所有的键和值</span><br><span class="line">		        &#x2F;&#x2F;for in 循环</span><br><span class="line">		       &#x2F;* for(var key in person)&#123;</span><br><span class="line">		            &#x2F;&#x2F;这样的方式获取不行。因为相当于  person.&quot;name&quot;</span><br><span class="line">		            &#x2F;&#x2F;alert(key + &quot;:&quot; + person.key);</span><br><span class="line">		            alert(key+&quot;:&quot;+person[key]);</span><br><span class="line">		        &#125;*&#x2F;</span><br><span class="line">		</span><br><span class="line">		       &#x2F;&#x2F;获取ps中的所有值</span><br><span class="line">		        for (var i &#x3D; 0; i &lt; ps.length; i++) &#123;</span><br><span class="line">		            var p &#x3D; ps[i];</span><br><span class="line">		            for(var key in p)&#123;</span><br><span class="line">		                alert(key+&quot;:&quot;+p[key]);</span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. JSON数据和Java对象的相互转换</span><br><span class="line"></span><br><span class="line">	* JSON解析器：</span><br><span class="line">		* 常见的解析器：Jsonlib，Gson，fastjson，jackson</span><br><span class="line">	</span><br><span class="line">	1. JSON转为Java对象</span><br><span class="line">		1. 导入jackson的相关jar包</span><br><span class="line">		2. 创建Jackson核心对象 ObjectMapper</span><br><span class="line">		3. 调用ObjectMapper的相关方法进行转换</span><br><span class="line">			1. readValue(json字符串数据,Class)</span><br><span class="line">	2. Java对象转换JSON</span><br><span class="line">		1. 使用步骤：</span><br><span class="line">			1. 导入jackson的相关jar包</span><br><span class="line">			2. 创建Jackson核心对象 ObjectMapper</span><br><span class="line">			3. 调用ObjectMapper的相关方法进行转换</span><br><span class="line">				1. 转换方法：</span><br><span class="line">					* writeValue(参数1，obj):</span><br><span class="line">	                    参数1：</span><br><span class="line">	                        File：将obj对象转换为JSON字符串，并保存到指定的文件中</span><br><span class="line">	                        Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</span><br><span class="line">	                        OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</span><br><span class="line">	                * writeValueAsString(obj):将对象转为json字符串</span><br><span class="line"></span><br><span class="line">				2. 注解：</span><br><span class="line">					1. @JsonIgnore：排除属性。</span><br><span class="line">					2. @JsonFormat：属性值得格式化</span><br><span class="line">						* @JsonFormat(pattern &#x3D; &quot;yyyy-MM-dd&quot;)</span><br><span class="line"></span><br><span class="line">				3. 复杂java对象转换</span><br><span class="line">					1. List：数组</span><br><span class="line">					2. Map：对象格式一致</span><br></pre></td></tr></table></figure>

<h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 校验用户名是否存在</span><br><span class="line">	1. 服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：</span><br><span class="line">		1. $.get(type):将最后一个参数type指定为&quot;json&quot;</span><br><span class="line">		2. 在服务器端设置MIME类型</span><br><span class="line">			response.setContentType(&quot;application&#x2F;json;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2019/10/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191006redis/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. redis</span><br><span class="line">	1. 概念</span><br><span class="line">	2. 下载安装</span><br><span class="line">	3. 命令操作</span><br><span class="line">		1. 数据结构</span><br><span class="line">	4. 持久化操作</span><br><span class="line">	5. 使用Java客户端操作redis</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： redis是一款高性能的NOSQL系列的非关系型数据库</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.1.什么是NOSQL</span><br><span class="line">	NoSQL(NoSQL &#x3D; Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。</span><br><span class="line">	随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</span><br><span class="line"></span><br><span class="line">	1.1.1.	NOSQL和关系型数据库比较</span><br><span class="line">		优点：</span><br><span class="line">			1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。</span><br><span class="line">			2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。</span><br><span class="line">			3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。</span><br><span class="line">			4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</span><br><span class="line"></span><br><span class="line">		缺点：</span><br><span class="line">			1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。</span><br><span class="line">			2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。</span><br><span class="line">			3）不提供关系型数据库对事务的处理。</span><br><span class="line"></span><br><span class="line">	1.1.2.	非关系型数据库的优势：</span><br><span class="line">		1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。</span><br><span class="line">		2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</span><br><span class="line"></span><br><span class="line">	1.1.3.	关系型数据库的优势：</span><br><span class="line">		1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。</span><br><span class="line">		2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</span><br><span class="line"></span><br><span class="line">	1.1.4.	总结</span><br><span class="line">		关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，</span><br><span class="line">		让NoSQL数据库对关系型数据库的不足进行弥补。</span><br><span class="line">		一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</span><br><span class="line"></span><br><span class="line">1.2.主流的NOSQL产品</span><br><span class="line">	•	键值(Key-Value)存储数据库</span><br><span class="line">			相关产品： Tokyo Cabinet&#x2F;Tyrant、Redis、Voldemort、Berkeley DB</span><br><span class="line">			典型应用： 内容缓存，主要用于处理大量数据的高访问负载。 </span><br><span class="line">			数据模型： 一系列键值对</span><br><span class="line">			优势： 快速查询</span><br><span class="line">			劣势： 存储的数据缺少结构化</span><br><span class="line">	•	列存储数据库</span><br><span class="line">			相关产品：Cassandra, HBase, Riak</span><br><span class="line">			典型应用：分布式的文件系统</span><br><span class="line">			数据模型：以列簇式存储，将同一列数据存在一起</span><br><span class="line">			优势：查找速度快，可扩展性强，更容易进行分布式扩展</span><br><span class="line">			劣势：功能相对局限</span><br><span class="line">	•	文档型数据库</span><br><span class="line">			相关产品：CouchDB、MongoDB</span><br><span class="line">			典型应用：Web应用（与Key-Value类似，Value是结构化的）</span><br><span class="line">			数据模型： 一系列键值对</span><br><span class="line">			优势：数据结构要求不严格</span><br><span class="line">			劣势： 查询性能不高，而且缺乏统一的查询语法</span><br><span class="line">	•	图形(Graph)数据库</span><br><span class="line">			相关数据库：Neo4J、InfoGrid、Infinite Graph</span><br><span class="line">			典型应用：社交网络</span><br><span class="line">			数据模型：图结构</span><br><span class="line">			优势：利用图结构相关算法。</span><br><span class="line">			劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。</span><br><span class="line">1.3 什么是Redis</span><br><span class="line">	Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：</span><br><span class="line">		1) 字符串类型 string</span><br><span class="line">		2) 哈希类型 hash</span><br><span class="line">		3) 列表类型 list</span><br><span class="line">		4) 集合类型 set</span><br><span class="line">		5) 有序集合类型 sortedset</span><br><span class="line">	1.3.1 redis的应用场景</span><br><span class="line">		•	缓存（数据查询、短连接、新闻内容、商品内容等等）</span><br><span class="line">		•	聊天室的在线好友列表</span><br><span class="line">		•	任务队列。（秒杀、抢购、12306等等）</span><br><span class="line">		•	应用排行榜</span><br><span class="line">		•	网站访问统计</span><br><span class="line">		•	数据过期处理（可以精确到毫秒</span><br><span class="line">		•	分布式集群架构中的session分离</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 下载安装</span><br><span class="line">	1. 官网：https:&#x2F;&#x2F;redis.io</span><br><span class="line">	2. 中文网：http:&#x2F;&#x2F;www.redis.net.cn&#x2F;</span><br><span class="line">	3. 解压直接可以使用：</span><br><span class="line">		* redis.windows.conf：配置文件</span><br><span class="line">		* redis-cli.exe：redis的客户端</span><br><span class="line">		* redis-server.exe：redis服务器端</span><br><span class="line">	</span><br><span class="line">3. 命令操作</span><br><span class="line">	1. redis的数据结构：</span><br><span class="line">		* redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构</span><br><span class="line">			* value的数据结构：</span><br><span class="line">				1) 字符串类型 string</span><br><span class="line">				2) 哈希类型 hash ： map格式  </span><br><span class="line">				3) 列表类型 list ： linkedlist格式。支持重复元素</span><br><span class="line">				4) 集合类型 set  ： 不允许重复元素</span><br><span class="line">				5) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line">	</span><br><span class="line">	2. 字符串类型 string</span><br><span class="line">		1. 存储： set key value</span><br><span class="line">			127.0.0.1:6379&gt; set username zhangsan</span><br><span class="line">			OK</span><br><span class="line">		2. 获取： get key</span><br><span class="line">			127.0.0.1:6379&gt; get username</span><br><span class="line">			&quot;zhangsan&quot;</span><br><span class="line">		3. 删除： del key</span><br><span class="line">			127.0.0.1:6379&gt; del age</span><br><span class="line">			(integer) 1</span><br><span class="line">	3. 哈希类型 hash</span><br><span class="line">		1. 存储： hset key field value</span><br><span class="line">			127.0.0.1:6379&gt; hset myhash username lisi</span><br><span class="line">			(integer) 1</span><br><span class="line">			127.0.0.1:6379&gt; hset myhash password 123</span><br><span class="line">			(integer) 1</span><br><span class="line">		2. 获取： </span><br><span class="line">			* hget key field: 获取指定的field对应的值</span><br><span class="line">				127.0.0.1:6379&gt; hget myhash username</span><br><span class="line">				&quot;lisi&quot;</span><br><span class="line">			* hgetall key：获取所有的field和value</span><br><span class="line">				127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">				1) &quot;username&quot;</span><br><span class="line">				2) &quot;lisi&quot;</span><br><span class="line">				3) &quot;password&quot;</span><br><span class="line">				4) &quot;123&quot;</span><br><span class="line">				</span><br><span class="line">		3. 删除： hdel key field</span><br><span class="line">			127.0.0.1:6379&gt; hdel myhash username</span><br><span class="line">			(integer) 1</span><br><span class="line">	</span><br><span class="line">	4. 列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）</span><br><span class="line">		1. 添加：</span><br><span class="line">			1. lpush key value: 将元素加入列表左表</span><br><span class="line">				</span><br><span class="line">			2. rpush key value：将元素加入列表右边</span><br><span class="line">				</span><br><span class="line">				127.0.0.1:6379&gt; lpush myList a</span><br><span class="line">				(integer) 1</span><br><span class="line">				127.0.0.1:6379&gt; lpush myList b</span><br><span class="line">				(integer) 2</span><br><span class="line">				127.0.0.1:6379&gt; rpush myList c</span><br><span class="line">				(integer) 3</span><br><span class="line">		2. 获取：</span><br><span class="line">			* lrange key start end ：范围获取</span><br><span class="line">				127.0.0.1:6379&gt; lrange myList 0 -1</span><br><span class="line">				1) &quot;b&quot;</span><br><span class="line">				2) &quot;a&quot;</span><br><span class="line">				3) &quot;c&quot;</span><br><span class="line">		3. 删除：</span><br><span class="line">			* lpop key： 删除列表最左边的元素，并将元素返回</span><br><span class="line">			* rpop key： 删除列表最右边的元素，并将元素返回</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. 集合类型 set ： 不允许重复元素</span><br><span class="line">	1. 存储：sadd key value</span><br><span class="line">		127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">		(integer) 1</span><br><span class="line">		127.0.0.1:6379&gt; sadd myset a</span><br><span class="line">		(integer) 0</span><br><span class="line">	2. 获取：smembers key:获取set集合中所有元素</span><br><span class="line">		127.0.0.1:6379&gt; smembers myset</span><br><span class="line">		1) &quot;a&quot;</span><br><span class="line">	3. 删除：srem key value:删除set集合中的某个元素	</span><br><span class="line">		127.0.0.1:6379&gt; srem myset a</span><br><span class="line">		(integer) 1</span><br><span class="line">6. 有序集合类型 sortedset：不允许重复元素，且元素有顺序.每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</span><br><span class="line"></span><br><span class="line">	1. 存储：zadd key score value</span><br><span class="line">		127.0.0.1:6379&gt; zadd mysort 60 zhangsan</span><br><span class="line">		(integer) 1</span><br><span class="line">		127.0.0.1:6379&gt; zadd mysort 50 lisi</span><br><span class="line">		(integer) 1</span><br><span class="line">		127.0.0.1:6379&gt; zadd mysort 80 wangwu</span><br><span class="line">		(integer) 1</span><br><span class="line">	2. 获取：zrange key start end [withscores]</span><br><span class="line">		127.0.0.1:6379&gt; zrange mysort 0 -1</span><br><span class="line">		1) &quot;lisi&quot;</span><br><span class="line">		2) &quot;zhangsan&quot;</span><br><span class="line">		3) &quot;wangwu&quot;</span><br><span class="line"></span><br><span class="line">		127.0.0.1:6379&gt; zrange mysort 0 -1 withscores</span><br><span class="line">		1) &quot;zhangsan&quot;</span><br><span class="line">		2) &quot;60&quot;</span><br><span class="line">		3) &quot;wangwu&quot;</span><br><span class="line">		4) &quot;80&quot;</span><br><span class="line">		5) &quot;lisi&quot;</span><br><span class="line">		6) &quot;500&quot;</span><br><span class="line">	3. 删除：zrem key value</span><br><span class="line">		127.0.0.1:6379&gt; zrem mysort lisi</span><br><span class="line">		(integer) 1</span><br><span class="line"></span><br><span class="line">7. 通用命令</span><br><span class="line">	1. keys * : 查询所有的键</span><br><span class="line">	2. type key ： 获取键对应的value的类型</span><br><span class="line">	3. del key：删除指定的key value</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 持久化</span><br><span class="line">	1. redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</span><br><span class="line">	2. redis持久化机制：</span><br><span class="line">		1. RDB：默认方式，不需要进行配置，默认就使用这种机制</span><br><span class="line">			* 在一定的间隔时间中，检测key的变化情况，然后持久化数据</span><br><span class="line">			1. 编辑redis.windwos.conf文件</span><br><span class="line">				#   after 900 sec (15 min) if at least 1 key changed</span><br><span class="line">				save 900 1</span><br><span class="line">				#   after 300 sec (5 min) if at least 10 keys changed</span><br><span class="line">				save 300 10</span><br><span class="line">				#   after 60 sec if at least 10000 keys changed</span><br><span class="line">				save 60 10000</span><br><span class="line">				</span><br><span class="line">			2. 重新启动redis服务器，并指定配置文件名称</span><br><span class="line">				D:\JavaWeb2018\day23_redis\资料\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf	</span><br><span class="line">			</span><br><span class="line">		2. AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</span><br><span class="line">			1. 编辑redis.windwos.conf文件</span><br><span class="line">				appendonly no（关闭aof） --&gt; appendonly yes （开启aof）</span><br><span class="line">				</span><br><span class="line">				# appendfsync always ： 每一次操作都进行持久化</span><br><span class="line">				appendfsync everysec ： 每隔一秒进行一次持久化</span><br><span class="line">				# appendfsync no	 ： 不进行持久化</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5. Java客户端 Jedis</span><br><span class="line">	* Jedis: 一款java操作redis数据库的工具.</span><br><span class="line">	* 使用步骤：</span><br><span class="line">		1. 下载jedis的jar包</span><br><span class="line">		2. 使用</span><br><span class="line">			&#x2F;&#x2F;1. 获取连接</span><br><span class="line">    		Jedis jedis &#x3D; new Jedis(&quot;localhost&quot;,6379);</span><br><span class="line">   			&#x2F;&#x2F;2. 操作</span><br><span class="line">   			jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">    		&#x2F;&#x2F;3. 关闭连接</span><br><span class="line">    		jedis.close();	</span><br><span class="line">	* Jedis操作各种redis中的数据结构</span><br><span class="line">		1) 字符串类型 string</span><br><span class="line">			set</span><br><span class="line">			get</span><br><span class="line">			</span><br><span class="line">			 &#x2F;&#x2F;1. 获取连接</span><br><span class="line">	        Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">	        &#x2F;&#x2F;2. 操作</span><br><span class="line">	        &#x2F;&#x2F;存储</span><br><span class="line">	        jedis.set(&quot;username&quot;,&quot;zhangsan&quot;);</span><br><span class="line">	        &#x2F;&#x2F;获取</span><br><span class="line">	        String username &#x3D; jedis.get(&quot;username&quot;);</span><br><span class="line">	        System.out.println(username);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;可以使用setex()方法存储可以指定过期时间的 key value</span><br><span class="line">	        jedis.setex(&quot;activecode&quot;,20,&quot;hehe&quot;);&#x2F;&#x2F;将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">	        jedis.close();	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2) 哈希类型 hash ： map格式  </span><br><span class="line">	hset</span><br><span class="line">	hget</span><br><span class="line">	hgetAll</span><br><span class="line">	&#x2F;&#x2F;1. 获取连接</span><br><span class="line">       Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">       &#x2F;&#x2F;2. 操作</span><br><span class="line">       &#x2F;&#x2F; 存储hash</span><br><span class="line">       jedis.hset(&quot;user&quot;,&quot;name&quot;,&quot;lisi&quot;);</span><br><span class="line">       jedis.hset(&quot;user&quot;,&quot;age&quot;,&quot;23&quot;);</span><br><span class="line">       jedis.hset(&quot;user&quot;,&quot;gender&quot;,&quot;female&quot;);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; 获取hash</span><br><span class="line">       String name &#x3D; jedis.hget(&quot;user&quot;, &quot;name&quot;);</span><br><span class="line">       System.out.println(name);	        </span><br><span class="line">       &#x2F;&#x2F; 获取hash的所有map中的数据</span><br><span class="line">       Map&lt;String, String&gt; user &#x3D; jedis.hgetAll(&quot;user&quot;);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; keyset</span><br><span class="line">       Set&lt;String&gt; keySet &#x3D; user.keySet();</span><br><span class="line">       for (String key : keySet) &#123;</span><br><span class="line">           &#x2F;&#x2F;获取value</span><br><span class="line">           String value &#x3D; user.get(key);</span><br><span class="line">           System.out.println(key + &quot;:&quot; + value);</span><br><span class="line">       &#125;</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">       jedis.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3) 列表类型 list ： linkedlist格式。支持重复元素</span><br><span class="line">	lpush &#x2F; rpush</span><br><span class="line">	lpop &#x2F; rpop</span><br><span class="line">	lrange start end : 范围获取</span><br><span class="line">	</span><br><span class="line">	 &#x2F;&#x2F;1. 获取连接</span><br><span class="line">       Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">       &#x2F;&#x2F;2. 操作</span><br><span class="line">       &#x2F;&#x2F; list 存储</span><br><span class="line">       jedis.lpush(&quot;mylist&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);&#x2F;&#x2F;从左边存</span><br><span class="line">       jedis.rpush(&quot;mylist&quot;,&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);&#x2F;&#x2F;从右边存</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; list 范围获取</span><br><span class="line">       List&lt;String&gt; mylist &#x3D; jedis.lrange(&quot;mylist&quot;, 0, -1);</span><br><span class="line">       System.out.println(mylist);</span><br><span class="line">       </span><br><span class="line">       &#x2F;&#x2F; list 弹出</span><br><span class="line">       String element1 &#x3D; jedis.lpop(&quot;mylist&quot;);&#x2F;&#x2F;c</span><br><span class="line">       System.out.println(element1);</span><br><span class="line">	</span><br><span class="line">       String element2 &#x3D; jedis.rpop(&quot;mylist&quot;);&#x2F;&#x2F;c</span><br><span class="line">       System.out.println(element2);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; list 范围获取</span><br><span class="line">       List&lt;String&gt; mylist2 &#x3D; jedis.lrange(&quot;mylist&quot;, 0, -1);</span><br><span class="line">       System.out.println(mylist2);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">       jedis.close();</span><br><span class="line">4) 集合类型 set  ： 不允许重复元素</span><br><span class="line">	sadd</span><br><span class="line">	smembers:获取所有元素</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;1. 获取连接</span><br><span class="line">       Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">       &#x2F;&#x2F;2. 操作</span><br><span class="line">       &#x2F;&#x2F; set 存储</span><br><span class="line">       jedis.sadd(&quot;myset&quot;,&quot;java&quot;,&quot;php&quot;,&quot;c++&quot;);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; set 获取</span><br><span class="line">       Set&lt;String&gt; myset &#x3D; jedis.smembers(&quot;myset&quot;);</span><br><span class="line">       System.out.println(myset);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">       jedis.close();	        	</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">5) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line">	zadd</span><br><span class="line">	zrange</span><br><span class="line"></span><br><span class="line">	&#x2F;&#x2F;1. 获取连接</span><br><span class="line">       Jedis jedis &#x3D; new Jedis();&#x2F;&#x2F;如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span><br><span class="line">       &#x2F;&#x2F;2. 操作</span><br><span class="line">       &#x2F;&#x2F; sortedset 存储</span><br><span class="line">       jedis.zadd(&quot;mysortedset&quot;,3,&quot;亚瑟&quot;);</span><br><span class="line">       jedis.zadd(&quot;mysortedset&quot;,30,&quot;后裔&quot;);</span><br><span class="line">       jedis.zadd(&quot;mysortedset&quot;,55,&quot;孙悟空&quot;);</span><br><span class="line">	</span><br><span class="line">       &#x2F;&#x2F; sortedset 获取</span><br><span class="line">       Set&lt;String&gt; mysortedset &#x3D; jedis.zrange(&quot;mysortedset&quot;, 0, -1);</span><br><span class="line">	</span><br><span class="line">       System.out.println(mysortedset);</span><br><span class="line">       &#x2F;&#x2F;3. 关闭连接</span><br><span class="line">       jedis.close();</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* jedis连接池： JedisPool</span><br><span class="line">	* 使用：</span><br><span class="line">		1. 创建JedisPool连接池对象</span><br><span class="line">		2. 调用方法 getResource()方法获取Jedis连接</span><br><span class="line">			&#x2F;&#x2F;0.创建一个配置对象</span><br><span class="line">	        JedisPoolConfig config &#x3D; new JedisPoolConfig();</span><br><span class="line">	        config.setMaxTotal(50);</span><br><span class="line">	        config.setMaxIdle(10);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;1.创建Jedis连接池对象</span><br><span class="line">	        JedisPool jedisPool &#x3D; new JedisPool(config,&quot;localhost&quot;,6379);</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;2.获取连接</span><br><span class="line">	        Jedis jedis &#x3D; jedisPool.getResource();</span><br><span class="line">	        &#x2F;&#x2F;3. 使用</span><br><span class="line">	        jedis.set(&quot;hehe&quot;,&quot;heihei&quot;);</span><br><span class="line">	        &#x2F;&#x2F;4. 关闭 归还到连接池中</span><br><span class="line">	        jedis.close();</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 连接池工具类</span><br><span class="line">	public class JedisPoolUtils &#123;</span><br><span class="line"></span><br><span class="line">	    private static JedisPool jedisPool;</span><br><span class="line">	</span><br><span class="line">	    static&#123;</span><br><span class="line">	        &#x2F;&#x2F;读取配置文件</span><br><span class="line">	        InputStream is &#x3D; JedisPoolUtils.class.getClassLoader().getResourceAsStream(&quot;jedis.properties&quot;);</span><br><span class="line">	        &#x2F;&#x2F;创建Properties对象</span><br><span class="line">	        Properties pro &#x3D; new Properties();</span><br><span class="line">	        &#x2F;&#x2F;关联文件</span><br><span class="line">	        try &#123;</span><br><span class="line">	            pro.load(is);</span><br><span class="line">	        &#125; catch (IOException e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125;</span><br><span class="line">	        &#x2F;&#x2F;获取数据，设置到JedisPoolConfig中</span><br><span class="line">	        JedisPoolConfig config &#x3D; new JedisPoolConfig();</span><br><span class="line">	        config.setMaxTotal(Integer.parseInt(pro.getProperty(&quot;maxTotal&quot;)));</span><br><span class="line">	        config.setMaxIdle(Integer.parseInt(pro.getProperty(&quot;maxIdle&quot;)));</span><br><span class="line">	</span><br><span class="line">	        &#x2F;&#x2F;初始化JedisPool</span><br><span class="line">	        jedisPool &#x3D; new JedisPool(config,pro.getProperty(&quot;host&quot;),Integer.parseInt(pro.getProperty(&quot;port&quot;)));</span><br><span class="line">	    &#125;</span><br><span class="line">	    &#x2F;**</span><br><span class="line">	     * 获取连接方法</span><br><span class="line">	     *&#x2F;</span><br><span class="line">	    public static Jedis getJedis()&#123;</span><br><span class="line">	        return jedisPool.getResource();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;			    </span><br></pre></td></tr></table></figure>



<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">案例需求：</span><br><span class="line">	1. 提供index.html页面，页面中有一个省份 下拉列表</span><br><span class="line">	2. 当 页面加载完成后 发送ajax请求，加载所有省份</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 注意：使用redis缓存一些不经常发生变化的数据。</span><br><span class="line">	* 数据库的数据一旦发生改变，则需要更新缓存。</span><br><span class="line">		* 数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入</span><br><span class="line">		* 在service对应的增删改方法中，将redis数据删除。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Maven基础</title>
    <url>/2019/10/07/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191007Maven%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Linux&amp;Nginx</title>
    <url>/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&amp;Nginx/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>linux 教程</p>
<p><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p>
<h2 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">•	能够说出Linux操作系统的优势及用途</span><br><span class="line">•	进行成功配置CentOS</span><br><span class="line">•	能够成功完成CentOS初始化配置</span><br><span class="line">•	记住使用cd命令</span><br><span class="line">•	熟练使用ls命令的使用</span><br><span class="line">•	能够使用linux进行目录操作</span><br><span class="line">•	能够独立完成文件压缩和解压缩操作</span><br><span class="line">•	能够独立完成文件的浏览</span><br><span class="line">•	熟练使用vi或者vim操作文件</span><br></pre></td></tr></table></figure>

<h2 id="1-2课程内容"><a href="#1-2课程内容" class="headerlink" title="1.2课程内容"></a>1.2课程内容</h2><h3 id="1-2-1-今日内容"><a href="#1-2-1-今日内容" class="headerlink" title="1.2.1 -今日内容"></a>1.2.1 -今日内容</h3><p><strong>小节内容</strong></p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/1.png"></p>
<h3 id="1-2-2-Linux概述"><a href="#1-2-2-Linux概述" class="headerlink" title="1.2.2 -Linux概述"></a>1.2.2 -Linux概述</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) Unix 是贝尔实验室开发的,收费 macOS</span><br><span class="line">2) Linux 是仿照unix 开发的但是没有抄袭unix的源代码,而是借鉴了他的方式</span><br><span class="line">3) windows 也是仿照unix 的思维开发的 收费</span><br><span class="line">4) 苹果的操作系统OS 也是基于unix 开发的</span><br></pre></td></tr></table></figure>

<p>我们为啥要放弃windows</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) windows 收费</span><br><span class="line">2) windows 不稳定</span><br><span class="line">3) windows 浪费系统资源</span><br><span class="line">4) windows 用的人多,系统漏洞被发现的多,病毒多,不安全</span><br></pre></td></tr></table></figure>

<p> <a href="https://www.cnblogs.com/wxxjianchi/p/9424854.html">linux 内核版本和发行版本区别</a></p>
<p>内核: 是系统的心脏，是linux中最基层的代码</p>
<p>发行版本：在内核的基础上，开发不同应用程序，组成的一个完整的操作系统。</p>
<p><strong>Linux系统的应用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">服务器系统Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等； </span><br><span class="line">嵌入式系统路由器、防火墙、手机、PDA、IP 分享器、交换器、家电用品的微电脑控制器等等，</span><br><span class="line">高性能运算、计算密集型应用Linux有强大的运算能力。</span><br><span class="line">桌面应用系统</span><br><span class="line">移动手持系统</span><br></pre></td></tr></table></figure>

<h3 id="1-2-3-虚拟机软件-VMware"><a href="#1-2-3-虚拟机软件-VMware" class="headerlink" title="1.2.3 -虚拟机软件-VMware"></a>1.2.3 -虚拟机软件-VMware</h3><p><strong>小节内容</strong></p>
<p>虚拟化技术：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在计算机中，虚拟化（英语：Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。这些资源的新虚拟部份是不受现有资源的架设方式，地域或物理组态所限制。一般所指的虚拟化资源包括计算能力和资料存储。</span><br><span class="line"></span><br><span class="line"> 在实际的生产环境中，虚拟化技术主要用来解决高性能的物理硬件产能过剩和老的旧的硬件产能过低的重组重用，透明化底层物理硬件，从而最大化的利用物理硬件对资源充分利用</span><br><span class="line"></span><br><span class="line"> 虚拟化技术种类很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化(vip)、桌面虚拟化、服务虚拟化、虚拟机等等。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个错误</p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/2.png"></p>
<p>之前装过没卸载干净。在C盘的驱动文件夹也就是“C:\Windows\System32\drivers”下 把hcmon.sys驱动文件删除，随后重启了一下电脑，就行了</p>
<h3 id="1-2-4-Linux安装"><a href="#1-2-4-Linux安装" class="headerlink" title="1.2.4 -Linux安装"></a>1.2.4 -Linux安装</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)参考文档即可安装即可</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/3.png" alt="1556979289806"></p>
<p>nat  能出去,别人进不来</p>
<p>仅主机模式  (单机模式 不能上网</p>
<p>桥接模式: 能访问外网, 外边也能进来</p>
<h3 id="1-2-5-CRT使用"><a href="#1-2-5-CRT使用" class="headerlink" title="1.2.5 -CRT使用"></a>1.2.5 -CRT使用</h3><p><strong>小节内容</strong></p>
<p>查看ip 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>修改字体大小</p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/4.png" alt="1563955250035"></p>
<h3 id="1-2-6-Linux目录结构"><a href="#1-2-6-Linux目录结构" class="headerlink" title="1.2.6 -Linux目录结构"></a>1.2.6 -Linux目录结构</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux每个用户都有一个自己专属的目录：</span><br><span class="line">root:系统管理员，系统根目录下有一个root目录，此目录只能root访问</span><br><span class="line">home&#x2F;用户:普通用户在home目录下都有一个自己专属的目录</span><br><span class="line">usr:主要用于安装应用软件</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/191010Linux&Nginx%5C5.png" alt="1556980503410"></p>
<h3 id="1-2-7-Linux命令-文件列表"><a href="#1-2-7-Linux命令-文件列表" class="headerlink" title="1.2.7 -Linux命令-文件列表"></a>1.2.7 -Linux命令-文件列表</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls  列出当前文件夹下文件名称</span><br><span class="line">ls -l  列出当前文件夹下文件名称和详细信息</span><br><span class="line">ll     列出当前文件夹下文件名称和详细信息( ls -l 的简写) 注意此命令属于扩展命令, 有些linux版本不支持</span><br></pre></td></tr></table></figure>

<h3 id="1-2-8-Linux命令-目录切换"><a href="#1-2-8-Linux命令-目录切换" class="headerlink" title="1.2.8 -Linux命令-目录切换"></a>1.2.8 -Linux命令-目录切换</h3><p><strong>小节内容</strong></p>
<p> cd:   change directory</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~  : 切换至当前用户的跟目录</span><br><span class="line">cd &#x2F;  : 切换至跟目录</span><br><span class="line">cd ..  : 切换至上一级 (注意空格)</span><br><span class="line">cd app	切换到app</span><br></pre></td></tr></table></figure>

<p>pwd</p>
<p><code>    pwd</code>是<code>Print Working Directory</code>的缩写</p>
<p>显示当前工作目录</p>
<h3 id="1-2-9-Linux命令-目录创建和删除"><a href="#1-2-9-Linux命令-目录创建和删除" class="headerlink" title="1.2.9 -Linux命令-目录创建和删除"></a>1.2.9 -Linux命令-目录创建和删除</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建mkdir(make directory)命令可用来创建子目录。</span><br><span class="line">	mkdir app  当前目录下创建 app 目录</span><br><span class="line">	mkdir -p a&#x2F;b&#x2F;c 级联创建目录</span><br><span class="line">rmdir(remove directory)命令可用来删除“空”的子目录：</span><br><span class="line">	rmdir app   删除app目录</span><br></pre></td></tr></table></figure>

<h3 id="1-2-10-Linux命令-文件查看"><a href="#1-2-10-Linux命令-文件查看" class="headerlink" title="1.2.10 -Linux命令-文件查看"></a>1.2.10 -Linux命令-文件查看</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat :  查看文件，会将文件内容在屏幕上全部罗列</span><br><span class="line">cat -n a.txt    会将文件内容在屏幕上全部罗列(显示行号)</span><br><span class="line">more: 查看文件   分页查看，只能向下翻，不能向上翻</span><br><span class="line">more +100 a.txt 从a.txt 的第100行开始查看</span><br><span class="line">less: 查看文件  分页查看，能向上也能向下 (上下箭头翻看)</span><br><span class="line">tail -10 &#x2F;etc&#x2F;passwd  :  查看后10行数据</span><br><span class="line">tail -f catalina.log  :  动态实时监控日志()   ctrl+c 结束查看</span><br></pre></td></tr></table></figure>

<h3 id="1-2-11-Linux命令-文件删除、拷贝"><a href="#1-2-11-Linux命令-文件删除、拷贝" class="headerlink" title="1.2.11 -Linux命令-文件删除、拷贝"></a>1.2.11 -Linux命令-文件删除、拷贝</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp(copy)命令可以将文件从一处复制到另一处。一般在使用cp命令时将一个文件复制成另一个文件或复制到某目录时，需要指定源文件名与目标文件名或目录。</span><br><span class="line">    cp a.txt b.txt    将a.txt复制为b.txt文件</span><br><span class="line">    cp a.txt ..&#x2F;    将a.txt文件复制到上一层目录中</span><br><span class="line"></span><br><span class="line">mv 移动或者重命名</span><br><span class="line">    mv a.txt ..&#x2F;    将a.txt文件移动到上一层目录中</span><br><span class="line">    mv a.txt b.txt    将a.txt文件重命名为b.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm a.txt    删除a.txt文件  (需要确认,输入yes 或y)</span><br><span class="line">	rm -f a.txt    不询问，直接删除 a.txt</span><br><span class="line">	rm -r app    删除app目录(需要确认,输入yes 或y,递归)</span><br><span class="line">	rmdir app 删除app目录(必须为空否则无法删除)</span><br><span class="line">	rm -rf  a    不询问递归删除a 及其子目录下的东西</span><br><span class="line">	rm -rf  *     删除当前文件夹及其自目录</span><br><span class="line">	rm -rf  &#x2F;       格式化磁盘 (一些大型的公司为了避免程序员错误输入该命令,回将该命令重新,放置错误删除)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-12-Linux命令-压缩、解压缩"><a href="#1-2-12-Linux命令-压缩、解压缩" class="headerlink" title="1.2.12 -Linux命令-压缩、解压缩"></a>1.2.12 -Linux命令-压缩、解压缩</h3><p><strong>小节内容</strong></p>
<p>tar</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar命令位于&#x2F;bin目录下，它能够将用户所指定的文件或目录打包成一个文件，但不做压缩。一般Linux上常用的压缩方式是选用tar将许多文件打包成一个文件，再以gzip压缩命令压缩成xxx.tar.gz(或称为xxx.tgz)的文件。常用参数：</span><br><span class="line">-c：创建一个新tar文件</span><br><span class="line">-v：显示运行过程的信息</span><br><span class="line">-f：指定文件名</span><br><span class="line">-z：调用gzip压缩命令进行压缩&#x2F;解压缩</span><br><span class="line">-t：查看压缩文件的内容</span><br><span class="line">-x：解开tar文件</span><br><span class="line">打包：</span><br><span class="line">	tar –cvf xxx.tar .&#x2F;*</span><br><span class="line">打包并且压缩：</span><br><span class="line">	tar –zcvf xxx.tar.gz .&#x2F;* </span><br><span class="line"></span><br><span class="line">解压 </span><br><span class="line">     tar –xvf xxx.tar</span><br><span class="line">	tar -zxvf xxx.tar.gz -C &#x2F;usr&#x2F;aaa</span><br></pre></td></tr></table></figure>

<h3 id="1-2-13-Linux命令-查找文件、内容"><a href="#1-2-13-Linux命令-查找文件、内容" class="headerlink" title="1.2.13 -Linux命令-查找文件、内容"></a>1.2.13 -Linux命令-查找文件、内容</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find &#x2F; -name &quot;ins*&quot; 从根目录查找文件名称是以ins开头的文件</span><br><span class="line">find &#x2F;root -name &quot;ins*&quot; 从&#x2F;root 目录查找文件名称是以ins开头的文件</span><br><span class="line">find &#x2F; -name “ins*” –ls </span><br><span class="line">find &#x2F; –user itcast –ls 查找用户itcast的文件</span><br><span class="line">find &#x2F; –user itcast –type d –ls 查找用户itcast的目录</span><br><span class="line">find &#x2F;-perm -777 –type d-ls 查找权限是777的文件</span><br></pre></td></tr></table></figure>

<p>find详解</p>
<p><a href="https://www.cnblogs.com/bbox/p/9655776.html">https://www.cnblogs.com/bbox/p/9655776.html</a></p>
<p>grep </p>
<p>​    grep [选项]… PATTERN  [FILE]…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep lang anaconda-ks.cfg  在文件中查找lang</span><br><span class="line">grep lang anaconda-ks.cfg –color 高亮显示</span><br><span class="line">grep lang anaconda-ks.cfg –color -A1 -B1 高亮显示 ,并向前一行和向后一行</span><br><span class="line">grep -rn  lang anaconda-ks.cfg  在文件中查找lang 并显示行号</span><br></pre></td></tr></table></figure>

<h3 id="1-2-14-Linux命令-其他常见命令"><a href="#1-2-14-Linux命令-其他常见命令" class="headerlink" title="1.2.14 -Linux命令-其他常见命令"></a>1.2.14 -Linux命令-其他常见命令</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【pwd】</span><br><span class="line">	显示当前所在目录</span><br><span class="line">【touch】</span><br><span class="line">    创建一个空文件</span><br><span class="line">    * touch a.txt</span><br><span class="line">【clear&#x2F; crtl + L】</span><br><span class="line">	清屏</span><br></pre></td></tr></table></figure>

<h3 id="1-2-15-Linux命令-VIM编辑器"><a href="#1-2-15-Linux命令-VIM编辑器" class="headerlink" title="1.2.15 -Linux命令-VIM编辑器"></a>1.2.15 -Linux命令-VIM编辑器</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> vi.vim:</span><br><span class="line">       vi  文件名</span><br><span class="line">      进入后默认是命令行模式，</span><br><span class="line">      按I,a可以进入可编辑模式，按esc转换为命令行模式。</span><br><span class="line">     切换到底行模式：按 :（冒号）进行底行模式，可以输入wq保存并退出，q 退出  q!表示强制退出.</span><br><span class="line"></span><br><span class="line">打开文件：vim file</span><br><span class="line">退出：esc  :q</span><br><span class="line">修改文件：输入i进入插入模式</span><br><span class="line">保存并退出：esc:wq</span><br><span class="line"></span><br><span class="line">不保存退出：esc:q!</span><br><span class="line"></span><br><span class="line">三种进入插入模式：</span><br><span class="line">i:在当前的光标所在处插入</span><br><span class="line">o:在当前光标所在的行的下一行插入</span><br><span class="line">a:在光标所在的下一个字符插入</span><br><span class="line"></span><br><span class="line">快捷键：</span><br><span class="line">dd – 快速删除一行</span><br><span class="line">yy - 复制当前行</span><br><span class="line">nyy - 从当前行向后复制几行</span><br><span class="line">p - 粘贴</span><br><span class="line">R – 替换</span><br><span class="line"></span><br><span class="line">:&#x2F;8080   底行模式下搜索</span><br></pre></td></tr></table></figure>

<h3 id="1-2-16-Linux命令-重定向输出-amp-系统命令"><a href="#1-2-16-Linux命令-重定向输出-amp-系统命令" class="headerlink" title="1.2.16 -Linux命令-重定向输出&amp;系统命令"></a>1.2.16 -Linux命令-重定向输出&amp;系统命令</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;passwd &gt; a.txt  将输出定向到a.txt中</span><br><span class="line">cat &#x2F;etc&#x2F;passwd &gt;&gt; a.txt  输出并且追加</span><br><span class="line">-----------------------------------</span><br><span class="line">ps –ef  查看所有进程</span><br><span class="line">ps –ef | grep ssh 查找某一进程</span><br><span class="line">kill 2868  杀掉2868编号的进程</span><br><span class="line">kill -9 2868  强制杀死进程</span><br></pre></td></tr></table></figure>

<h3 id="1-2-17-Linux命令-管道"><a href="#1-2-17-Linux命令-管道" class="headerlink" title="1.2.17 -Linux命令-管道"></a>1.2.17 -Linux命令-管道</h3><p><strong>小节内容</strong>[ | ]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">管道是Linux命令中重要的一个概念，其作用是将一个命令的输出用作另一个命令的输入。示例</span><br><span class="line">ls --help | more  分页查询帮助信息</span><br><span class="line">ps –ef | grep java  查询名称中包含java的进程</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-2-18-Linux权限"><a href="#1-2-18-Linux权限" class="headerlink" title="1.2.18 -Linux权限"></a>1.2.18 -Linux权限</h3><p><strong>小节内容</strong></p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/6.png" alt="1556983960716"></p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/7.png" alt="1556984099328"></p>
<p>r:对文件是指可读取内容 对目录是可以ls   </p>
<p>w:对文件是指可修改文件内容，对目录 是指可以在其中创建或删除子节点(目录或文件) </p>
<p>x:对文件是指是否可以运行这个文件，对目录是指是否可以cd进入这个目录 </p>
<p> u: user表示当前用户对此文件（文件夹）的操作权限</p>
<p>  g:  group 指的当前用户所在的组的权限</p>
<p>o: other 其它组的用户所拥有的权限</p>
<p>权限的表示：</p>
<p>​     A，字母表示权限：   r ;read  表示有查看文件的权限   w:write 表示有对文件进行修秘诀的权限   x; execute 表示有对此文件执行的权限 </p>
<p>​     B,数字表示方式：  4  表示的是读的权限（r）  2  表示的是写的权限(w)  1表示执行的权限（x）</p>
<p>chmod权限 文件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 755 a.txt </span><br><span class="line">chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;rx a.txt</span><br></pre></td></tr></table></figure>

<h3 id="1-2-19-Linux修改ip"><a href="#1-2-19-Linux修改ip" class="headerlink" title="1.2.19 -Linux修改ip"></a>1.2.19 -Linux修改ip</h3><p><strong>小节内容</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">1)</span> <span class="string">进入目录/etc/udev/rules.d/ 修改文件70-persitent-net.rules:</span></span><br><span class="line"><span class="meta">将eth0</span> <span class="string">和mac 地址绑定</span></span><br><span class="line"></span><br><span class="line"><span class="meta">2)</span> <span class="string">修改 /etc/sysconfig/network-scripts/ifcfg-eth0文件</span></span><br><span class="line"><span class="attr">DEVICE</span>=<span class="string">eth0 #网卡名称 </span></span><br><span class="line"><span class="attr">BOOTPROTO</span>=<span class="string">static #获取ip的方式(static/dhcp/bootp/none)</span></span><br><span class="line"><span class="attr">HWADDR</span>=<span class="string">00:0C:29:B5:B2:69 #MAC地址</span></span><br><span class="line"><span class="attr">IPADDR</span>=<span class="string">192.168.25.129 #IP地址</span></span><br><span class="line"><span class="attr">NETMASK</span>=<span class="string">255.255.255.0 #子网掩码</span></span><br><span class="line"><span class="attr">NETWORK</span>=<span class="string">192.168.177.0 #网络地址</span></span><br><span class="line"><span class="attr">BROADCAST</span>=<span class="string">192.168.0.255 #广播地址</span></span><br><span class="line"><span class="attr">NBOOT</span>=<span class="string">yes #  系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/8.png" alt="1563952314902"></p>
<h3 id="1-2-20-Linux域名映射"><a href="#1-2-20-Linux域名映射" class="headerlink" title="1.2.20 -Linux域名映射"></a>1.2.20 -Linux域名映射</h3><p><strong>小节内容</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;hosts   注意不是host</span><br></pre></td></tr></table></figure>

<h1 id="2-命令"><a href="#2-命令" class="headerlink" title="2.命令"></a>2.命令</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 查看操作系统版本</span><br><span class="line">	getconf LONG_BIT </span><br><span class="line">2) alt +P 进入 sftp 窗口可以 上传文件</span><br></pre></td></tr></table></figure>

<h1 id="jdk"><a href="#jdk" class="headerlink" title="jdk"></a>jdk</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 查看java 版本</span><br><span class="line">	java -version</span><br><span class="line">2) 查看已安装jdk 版本</span><br><span class="line">	rpm -qa | grep java</span><br><span class="line">3) 删除opendjdk </span><br><span class="line">	rpm -e --nodeps java-1.6.0-openjdk-1.6.0.35-1.13.7.1.el6_6.i686</span><br><span class="line">	rpm -e --nodeps java-1.7.0-openjdk-1.7.0.79-2.5.5.4.el6.i686</span><br><span class="line">4) 解压 jdk (将jdk压缩包 上传至 &#x2F;usr&#x2F;local&#x2F;jdk)</span><br><span class="line">	tar -zxvf  jdk-7u71-linux-i586.tar.gz</span><br><span class="line">5) 修改配置文件</span><br><span class="line">  	vim &#x2F;etc&#x2F;profile</span><br><span class="line">  	在末尾行添加</span><br><span class="line">	#set java environment</span><br><span class="line">	JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk&#x2F;jdk1.7.0_71</span><br><span class="line">	CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib.tools.jar</span><br><span class="line">	PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">	export JAVA_HOME CLASSPATH PATH</span><br><span class="line">6) source &#x2F;etc&#x2F;profile  使更改的配置立即生效</span><br></pre></td></tr></table></figure>

<p>openjdk和oraclejdk有什么区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.授权协议的不同：OpenJDK采用GPL V2协议放出，而SUN JDK则采用JRL放出。两者协议虽然都是开放源代码的，但是在使用上的不同在于GPL V2允许在商业上使用，而JRL只允许个人研究使用。</span><br><span class="line"></span><br><span class="line">2.OpenJDK不包含Deployment（部署）功能：部署的功能包括：Browser Plugin、Java Web Start、以及Java控制面板，这些功能在OpenJDK中是找不到的。</span><br><span class="line"></span><br><span class="line">3.OpenJDK源代码不完整：这个很容易想到，在采用GPL协议的OpenJDK中，SUN JDK的一部分源代码因为产权的问题无法开放给OpenJDK使用，其中最主要的部份就是JMX中的可选元件SNMP部份的代码。</span><br><span class="line"></span><br><span class="line">4.部分源代码用开源代码替换：由于产权的问题，很多产权不是SUN的源代码被替换成一些功能相同的开源代码，比如说字体栅格化引擎，使用Free Type代替.</span><br></pre></td></tr></table></figure>

<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 新建文件夹 mysql</span><br><span class="line">   cd &#x2F;usr&#x2F;local</span><br><span class="line">   mkdir mysql</span><br><span class="line">2) 上传mysql 安装包至 新建文件夹</span><br><span class="line">3) 解压 (注意: 这里的包没有压缩 所以无需-z 参数)</span><br><span class="line">	tar -xvf MySQL-5.6.22-1.el6.i686.rpm-bundle.tar</span><br><span class="line">4) 将系统自带的mysql卸载</span><br><span class="line">    rpm -qa | grep mysql</span><br><span class="line">    rpm -e --nodeps mysql-libs-5.1.73-5.el6_6.i686</span><br><span class="line">5) 安装mysql 服务器端</span><br><span class="line">	rpm -ivh MySQL-server-5.6.22-1.el6.i686.rpm</span><br><span class="line">6) 	安装MYSQL客户端</span><br><span class="line">     rpm -ivh MySQL-client-5.6.22-1.el6.i686.rpm </span><br><span class="line">7) 显示随机密码</span><br><span class="line">	more &#x2F;root&#x2F;.mysql_secret</span><br><span class="line">8) 启动服务</span><br><span class="line"> service mysql start</span><br><span class="line">9) 连接</span><br><span class="line">	mysql -uroot -pxxxxx</span><br><span class="line">10) 修改密码</span><br><span class="line">	set password &#x3D;password(&#39;root&#39;);</span><br><span class="line">11) 开启允许远程登陆</span><br><span class="line">   grant all privileges on *.* to &#39;root&#39; @&#39;%&#39; identified by &#39;root&#39;;</span><br><span class="line">   flush privileges;</span><br><span class="line">12) 关闭防火墙(先退出MySQL 登陆 exit )</span><br><span class="line">	service iptables stop</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef |grep mysql</span><br><span class="line">kill -9  xxxx</span><br></pre></td></tr></table></figure>



<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/9.png" alt="1567392191969"></p>
<h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建文件夹 &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class="line">1.Tomcat上传到linux上</span><br><span class="line">2.将上传的tomcat解压</span><br><span class="line">	tar -zxvf apache-tomcat-7.0.57.tar.gz </span><br><span class="line">3.在tomcat&#x2F;bin目录下执行 startup.sh（注意防火墙）</span><br><span class="line">  </span><br><span class="line">4.查看目标 tomcat&#x2F;logs&#x2F;catalina.out</span><br><span class="line"></span><br><span class="line">查看进程</span><br><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure>

<h1 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将项目打包成war 上传即可,不多提及</span><br><span class="line">1) mysql 配置中文乱码</span><br><span class="line">2) 绝对路径</span><br></pre></td></tr></table></figure>

<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 安装 c 语言编译环境</span><br><span class="line">	yum install gcc-c++</span><br><span class="line">2) 下载redis</span><br><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.0.4.tar.gz</span><br><span class="line"></span><br><span class="line">3) 解压</span><br><span class="line">tar -xzvf redis-3.0.4.tar.gz</span><br><span class="line">4) 编译安装、</span><br><span class="line">	切换至程序目录，并执行make命令编译：</span><br><span class="line">	cd redis-3.0.4</span><br><span class="line">	make</span><br><span class="line">5) 执行安装命令</span><br><span class="line">	make PREFIX&#x3D;&#x2F;usr&#x2F;local&#x2F;redis install </span><br><span class="line">6) 配置redis</span><br><span class="line">   1.	复制配置文件到&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin目录</span><br><span class="line">	cd redis-3.0.4  </span><br><span class="line">	cp redis.conf &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line">7) 启动redis</span><br><span class="line"> cd &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin</span><br><span class="line">	7.1)启动redis服务端</span><br><span class="line">	.&#x2F;redis-server redis.conf</span><br><span class="line">	7.2)复制窗口 启动客户端</span><br><span class="line">	.&#x2F;redis-cli</span><br></pre></td></tr></table></figure>

<p>后台运行 redis.conf</p>
<p><img src="/2019/10/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191010Linux&Nginx/10.png" alt="1564298238345"></p>
<h1 id="3-nginx"><a href="#3-nginx" class="headerlink" title="3.nginx"></a>3.nginx</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 安装gcc (略)</span><br><span class="line">	yum install gcc-c++</span><br><span class="line">2) 安装第三方开发包</span><br><span class="line">	yum install -y pcre pcre-devel</span><br><span class="line">	yum install -y zlib zlib-devel</span><br><span class="line">	yum install -y openssl openssl-devel</span><br><span class="line">3) 上传压缩包</span><br><span class="line">4) 解压</span><br><span class="line">	tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">5) 进入nginx-1.8.0目录   使用 configure 命令创建一 makeFile 文件</span><br><span class="line">.&#x2F;configure \</span><br><span class="line">--prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx \</span><br><span class="line">--pid-path&#x3D;&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid \</span><br><span class="line">--lock-path&#x3D;&#x2F;var&#x2F;lock&#x2F;nginx.lock \</span><br><span class="line">--error-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log \</span><br><span class="line">--http-log-path&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client \</span><br><span class="line">--http-proxy-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;proxy \</span><br><span class="line">--http-fastcgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;fastcgi \</span><br><span class="line">--http-uwsgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;uwsgi \</span><br><span class="line">--http-scgi-temp-path&#x3D;&#x2F;var&#x2F;temp&#x2F;nginx&#x2F;scgi</span><br><span class="line">6) 编译</span><br><span class="line">make</span><br><span class="line">7) 安装</span><br><span class="line">make install</span><br><span class="line">8) 创建目录</span><br><span class="line">	mkdir &#x2F;var&#x2F;temp&#x2F;nginx&#x2F;client -p</span><br><span class="line">9) 启动</span><br><span class="line">  cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</span><br><span class="line">  .&#x2F;nginx</span><br><span class="line">-----</span><br><span class="line">1)启动后查看进程</span><br><span class="line">ps aux|grep nginx</span><br><span class="line">2)关闭 nginx：</span><br><span class="line">.&#x2F;nginx -s stop</span><br><span class="line">	或者</span><br><span class="line">.&#x2F;nginx -s quit</span><br><span class="line">3) 重启 nginx：</span><br><span class="line">&#x2F;nginx -s reload</span><br></pre></td></tr></table></figure>

<p>– 需要关闭防火墙,否则无法访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)linux 可以安装开发相关软件</span><br><span class="line">	怎么安装?</span><br><span class="line">2) nginx 是什么? 是一个服务器</span><br><span class="line">    能干什么? </span><br><span class="line">		1) 部署静态资源</span><br><span class="line">		2) 虚拟主机(了解)</span><br><span class="line">		3) 反向代理&#x2F;负载均衡</span><br><span class="line">3) 什么是反向代理?</span><br><span class="line">	什么是负载均衡?</span><br><span class="line">	什么是集群?</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat</title>
    <url>/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191017Web_tomcat/</url>
    <content><![CDATA[<h3 id="Tomcat：Web服务器软件"><a href="#Tomcat：Web服务器软件" class="headerlink" title="Tomcat：Web服务器软件"></a>Tomcat：Web服务器软件</h3><h4 id="1-下载-http-tomcat-apache-org"><a href="#1-下载-http-tomcat-apache-org" class="headerlink" title="1.下载:http://tomcat.apache.org/"></a>1.下载:<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></h4>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191028Spring/</url>
    <content><![CDATA[<h2 id="1-spring概述"><a href="#1-spring概述" class="headerlink" title="1. spring概述"></a>1. spring概述</h2><h3 id="1-1-Spring是什么（理解）"><a href="#1-1-Spring是什么（理解）" class="headerlink" title="1.1 Spring是什么（理解）"></a>1.1 Spring是什么（理解）</h3><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。</p>
<p>提供了展现层 SpringMVC和持久层 Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p>
<a id="more"></a>

<h3 id="1-2-Spring发展历程-（了解）"><a href="#1-2-Spring发展历程-（了解）" class="headerlink" title="1.2 Spring发展历程 （了解）"></a>1.2 Spring发展历程 （了解）</h3><p>Rod Johnson （ Spring 之父）</p>
<p>2017  年<br>9 月份发布了 Spring 的最新版本 Spring5.0<br>通用版（GA）</p>
<h3 id="1-3-Spring的优势（理解）"><a href="#1-3-Spring的优势（理解）" class="headerlink" title="1.3 Spring的优势（理解）"></a>1.3 Spring的优势（理解）</h3><p>方便解耦，简化开发</p>
<p>AOP 编程的支持</p>
<p>声明式事务的支持</p>
<p>方便程序的测试</p>
<h3 id="1-4-Spring的体系结构（了解）"><a href="#1-4-Spring的体系结构（了解）" class="headerlink" title="1.4 Spring的体系结构（了解）"></a>1.4 Spring的体系结构（了解）</h3><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191028Spring/1.Spring.png"></p>
<h2 id="2-spring快速入门"><a href="#2-spring快速入门" class="headerlink" title="2. spring快速入门"></a>2. spring快速入门</h2><h3 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h3><p>①导入 Spring 开发的基本包坐标</p>
<p>②编写 Dao 接口和实现类</p>
<p>③创建 Spring 核心配置文件</p>
<p>④在 Spring 配置文件中配置 UserDaoImpl</p>
<p>⑤使用 Spring 的 API 获得 Bean 实例</p>
<h3 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h3><p>在类路径下（resources）创建applicationContext.xml配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext applicationContext = <span class="keyword">new</span>  </span><br><span class="line">             ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">             UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);   				 userDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3. Spring配置文件"></a>3. Spring配置文件</h2><h3 id="3-1-Bean标签基本配置"><a href="#3-1-Bean标签基本配置" class="headerlink" title="3.1 Bean标签基本配置"></a>3.1 Bean标签基本配置</h3><p>用于配置对象交由Spring 来创建。</p>
<p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。</p>
<p>基本属性：</p>
<p>id：Bean实例在Spring容器中的唯一标识</p>
<p>class：Bean的全限定名称</p>
<h3 id="3-2-Bean标签范围配置"><a href="#3-2-Bean标签范围配置" class="headerlink" title="3.2 Bean标签范围配置"></a>3.2 Bean标签范围配置</h3><p>scope:指对象的作用范围，取值如下： </p>
<table>
<thead>
<tr>
<th>取值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>默认值，单例的</td>
</tr>
<tr>
<td>prototype</td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td>
</tr>
<tr>
<td>session</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td>
</tr>
<tr>
<td>global   session</td>
<td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td>
</tr>
</tbody></table>
<p>1）当scope的取值为singleton时</p>
<p>​      Bean的实例化个数：1个</p>
<p>​      Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p>
<p>​      Bean的生命周期：</p>
<p>对象创建：当应用加载，创建容器时，对象就被创建了</p>
<p>对象运行：只要容器在，对象一直活着</p>
<p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p>
<p>2）当scope的取值为prototype时</p>
<p>​      Bean的实例化个数：多个</p>
<p>​      Bean的实例化时机：当调用getBean()方法时实例化Bean</p>
<p>对象创建：当使用对象时，创建新的对象实例</p>
<p>对象运行：只要对象在使用中，就一直活着</p>
<p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p>
<h3 id="3-3-Bean生命周期配置"><a href="#3-3-Bean生命周期配置" class="headerlink" title="3.3 Bean生命周期配置"></a>3.3 Bean生命周期配置</h3><p>init-method：指定类中的初始化方法名称</p>
<p>destroy-method：指定类中销毁方法名称</p>
<h3 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h3><p>1） 使用无参构造方法实例化</p>
<p>​      它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2） 工厂静态方法实例化</p>
<p>​      工厂的静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactoryBean&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>3） 工厂实例方法实例化</p>
<p>​      工厂的非静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactoryBean</span> </span>&#123;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;        </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactoryBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-5-Bean的依赖注入入门"><a href="#3-5-Bean的依赖注入入门" class="headerlink" title="3.5 Bean的依赖注入入门"></a>3.5 Bean的依赖注入入门</h3><p>①创建 UserService，UserService 内部在调用 UserDao的save() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       	           UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);	</span><br><span class="line">          userDao.save();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>②将 UserServiceImpl 的创建权交给 Spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>③从 Spring 容器中获得 UserService 进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.save();</span><br></pre></td></tr></table></figure>

<h3 id="3-6-Bean的依赖注入概念"><a href="#3-6-Bean的依赖注入概念" class="headerlink" title="3.6 Bean的依赖注入概念"></a>3.6 Bean的依赖注入概念</h3><p>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。</p>
<p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p>
<p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p>
<p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p>
<p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</p>
<h3 id="3-7-Bean的依赖注入方式"><a href="#3-7-Bean的依赖注入方式" class="headerlink" title="3.7 Bean的依赖注入方式"></a>3.7 Bean的依赖注入方式</h3><p>①构造方法</p>
<p>​      创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);    </span><br><span class="line">          userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用有参构造时进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span>      		   	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②set方法</p>
<p>​      在UserServiceImpl中添加setUserDao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;  </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">   		 userDao.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用set方法进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>set方法:P命名空间注入</p>
<p>​      P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p>
<p>​      首先，需要引入P命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其次，需要修改注入方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-</span></span></span><br><span class="line"><span class="tag"> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-8-Bean的依赖注入的数据类型"><a href="#3-8-Bean的依赖注入的数据类型" class="headerlink" title="3.8 Bean的依赖注入的数据类型"></a>3.8 Bean的依赖注入的数据类型</h3><p>上面的操作，都是注入的引用Bean，处了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p>
<p>注入数据的三种数据类型 </p>
<p>普通数据类型</p>
<p>引用数据类型</p>
<p>集合数据类型</p>
<p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p>
<p><strong>Bean的依赖注入的数据类型</strong></p>
<p>（1）普通数据类型的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company+<span class="string">&quot;===&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">value</span>=<span class="string">&quot;传智播客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）集合数据类型（List<String>）的注入</String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strList = strList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）集合数据类型（List<User>）的注入</User></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.userList = userList;  </span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(userList);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（4）集合数据类型（ Map&lt;String,User&gt; ）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">	System.out.println(userMap);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（5）集合数据类型（Properties）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(properties);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-9-引入其他配置文件（分模块开发）"><a href="#3-9-引入其他配置文件（分模块开发）" class="headerlink" title="3.9 引入其他配置文件（分模块开发）"></a>3.9 引入其他配置文件（分模块开发）</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-spring相关API"><a href="#4-spring相关API" class="headerlink" title="4. spring相关API"></a>4. spring相关API</h2><h3 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h3><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p>
<h3 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h3><p>1）ClassPathXmlApplicationContext </p>
<p>​      它是从类的根路径下加载配置文件 推荐使用这种</p>
<p>2）FileSystemXmlApplicationContext </p>
<p>​      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<p>3）AnnotationConfigApplicationContext</p>
<p>​      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p>
<h3 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;  </span><br><span class="line">	assertBeanFactoryActive();   </span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;   			    	assertBeanFactoryActive();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p>
<p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错</p>
<p><strong>getBean()方法使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">            ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">  UserService userService1 = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">  UserService userService2 = applicationContext.getBean(UserService.class);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringIoC&amp;DI</title>
    <url>/2019/10/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191015SpringIoC&amp;DI/</url>
    <content><![CDATA[<h2 id="1-spring概述"><a href="#1-spring概述" class="headerlink" title="1. spring概述"></a>1. spring概述</h2><h3 id="1-1-Spring是什么（理解）"><a href="#1-1-Spring是什么（理解）" class="headerlink" title="1.1 Spring是什么（理解）"></a>1.1 Spring是什么（理解）</h3><p>Spring是分层的 Java SE/EE应用 full-stack 轻量级开源框架，以 IoC（Inverse Of Control：反转控制）和 AOP（Aspect Oriented Programming：面向切面编程）为内核。</p>
<p>提供了展现层 SpringMVC和持久层 Spring JDBCTemplate以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的Java EE 企业应用开源框架</p>
<h3 id="1-2-Spring发展历程-（了解）"><a href="#1-2-Spring发展历程-（了解）" class="headerlink" title="1.2 Spring发展历程 （了解）"></a>1.2 Spring发展历程 （了解）</h3><p>Rod Johnson （ Spring 之父）</p>
<p>2017  年<br>9 月份发布了 Spring 的最新版本 Spring5.0<br>通用版（GA）</p>
<a id="more"></a>

<h3 id="1-3-Spring的优势（理解）"><a href="#1-3-Spring的优势（理解）" class="headerlink" title="1.3 Spring的优势（理解）"></a>1.3 Spring的优势（理解）</h3><p>方便解耦，简化开发</p>
<p>AOP 编程的支持</p>
<p>声明式事务的支持</p>
<p>方便程序的测试</p>
<h3 id="1-4-Spring的体系结构（了解）"><a href="#1-4-Spring的体系结构（了解）" class="headerlink" title="1.4 Spring的体系结构（了解）"></a>1.4 Spring的体系结构（了解）</h3><p><img src="/2019/10/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191015SpringIoC&DI/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/01spring01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8729.png"></p>
<h2 id="2-spring快速入门"><a href="#2-spring快速入门" class="headerlink" title="2. spring快速入门"></a>2. spring快速入门</h2><h3 id="2-1-Spring程序开发步骤"><a href="#2-1-Spring程序开发步骤" class="headerlink" title="2.1 Spring程序开发步骤"></a>2.1 Spring程序开发步骤</h3><p>①导入 Spring 开发的基本包坐标</p>
<p>②编写 Dao 接口和实现类</p>
<p>③创建 Spring 核心配置文件</p>
<p>④在 Spring 配置文件中配置 UserDaoImpl</p>
<p>⑤使用 Spring 的 API 获得 Bean 实例</p>
<h3 id="2-2-导入Spring开发的基本包坐标"><a href="#2-2-导入Spring开发的基本包坐标" class="headerlink" title="2.2 导入Spring开发的基本包坐标"></a>2.2 导入Spring开发的基本包坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖core、beans、expression--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-编写Dao接口和实现类"><a href="#2-3-编写Dao接口和实现类" class="headerlink" title="2.3 编写Dao接口和实现类"></a>2.3 编写Dao接口和实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4-创建Spring核心配置文件"><a href="#2-4-创建Spring核心配置文件" class="headerlink" title="2.4 创建Spring核心配置文件"></a>2.4 创建Spring核心配置文件</h3><p>在类路径下（resources）创建applicationContext.xml配置文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">xsi:schemaLocation=<span class="string">&quot;</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-5-在Spring配置文件中配置UserDaoImpl"><a href="#2-5-在Spring配置文件中配置UserDaoImpl" class="headerlink" title="2.5 在Spring配置文件中配置UserDaoImpl"></a>2.5 在Spring配置文件中配置UserDaoImpl</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>             		   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans      	             http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6-使用Spring的API获得Bean实例"><a href="#2-6-使用Spring的API获得Bean实例" class="headerlink" title="2.6 使用Spring的API获得Bean实例"></a>2.6 使用Spring的API获得Bean实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">		ApplicationContext applicationContext = <span class="keyword">new</span>  </span><br><span class="line">             ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">             UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);   				 userDao.save();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-Spring配置文件"><a href="#3-Spring配置文件" class="headerlink" title="3. Spring配置文件"></a>3. Spring配置文件</h2><h3 id="3-1-Bean标签基本配置"><a href="#3-1-Bean标签基本配置" class="headerlink" title="3.1 Bean标签基本配置"></a>3.1 Bean标签基本配置</h3><p>用于配置对象交由Spring 来创建。</p>
<p>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。</p>
<p>基本属性：</p>
<p>id：Bean实例在Spring容器中的唯一标识</p>
<p>class：Bean的全限定名称</p>
<h3 id="3-2-Bean标签范围配置"><a href="#3-2-Bean标签范围配置" class="headerlink" title="3.2 Bean标签范围配置"></a>3.2 Bean标签范围配置</h3><p>scope:指对象的作用范围，取值如下： </p>
<table>
<thead>
<tr>
<th>取值范围</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>默认值，单例的</td>
</tr>
<tr>
<td>prototype</td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   request   域中</td>
</tr>
<tr>
<td>session</td>
<td>WEB   项目中，Spring   创建一个   Bean   的对象，将对象存入到   session   域中</td>
</tr>
<tr>
<td>global   session</td>
<td>WEB   项目中，应用在   Portlet   环境，如果没有   Portlet   环境那么globalSession   相当于   session</td>
</tr>
</tbody></table>
<p>1）当scope的取值为singleton时</p>
<p>​      Bean的实例化个数：1个</p>
<p>​      Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例</p>
<p>​      Bean的生命周期：</p>
<p>对象创建：当应用加载，创建容器时，对象就被创建了</p>
<p>对象运行：只要容器在，对象一直活着</p>
<p>对象销毁：当应用卸载，销毁容器时，对象就被销毁了</p>
<p>2）当scope的取值为prototype时</p>
<p>​      Bean的实例化个数：多个</p>
<p>​      Bean的实例化时机：当调用getBean()方法时实例化Bean</p>
<p>对象创建：当使用对象时，创建新的对象实例</p>
<p>对象运行：只要对象在使用中，就一直活着</p>
<p>对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p>
<h3 id="3-3-Bean生命周期配置"><a href="#3-3-Bean生命周期配置" class="headerlink" title="3.3 Bean生命周期配置"></a>3.3 Bean生命周期配置</h3><p>init-method：指定类中的初始化方法名称</p>
<p>destroy-method：指定类中销毁方法名称</p>
<h3 id="3-4-Bean实例化三种方式"><a href="#3-4-Bean实例化三种方式" class="headerlink" title="3.4 Bean实例化三种方式"></a>3.4 Bean实例化三种方式</h3><p>1） 使用无参构造方法实例化</p>
<p>​      它会根据默认无参构造方法来创建类对象，如果bean中没有默认无参构造函数，将会创建失败</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2） 工厂静态方法实例化</p>
<p>​      工厂的静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactoryBean&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>3） 工厂实例方法实例化</p>
<p>​      工厂的非静态方法返回Bean实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactoryBean</span> </span>&#123;  </span><br><span class="line">	<span class="function"><span class="keyword">public</span> UserDao <span class="title">createUserDao</span><span class="params">()</span></span>&#123;        </span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl(); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactoryBean&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryBean&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createUserDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-5-Bean的依赖注入入门"><a href="#3-5-Bean的依赖注入入门" class="headerlink" title="3.5 Bean的依赖注入入门"></a>3.5 Bean的依赖注入入门</h3><p>①创建 UserService，UserService 内部在调用 UserDao的save() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       	           UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);	</span><br><span class="line">          userDao.save();</span><br><span class="line"> 	&#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②将 UserServiceImpl 的创建权交给 Spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③从 Spring 容器中获得 UserService 进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">UserService userService = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">userService.save();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-6-Bean的依赖注入概念"><a href="#3-6-Bean的依赖注入概念" class="headerlink" title="3.6 Bean的依赖注入概念"></a>3.6 Bean的依赖注入概念</h3><p>依赖注入（Dependency Injection）：它是 Spring 框架核心 IOC 的具体实现。</p>
<p>在编写程序时，通过控制反转，把对象的创建交给了 Spring，但是代码中不可能出现没有依赖的情况。</p>
<p>IOC 解耦只是降低他们的依赖关系，但不会消除。例如：业务层仍会调用持久层的方法。</p>
<p>那这种业务层和持久层的依赖关系，在使用 Spring 之后，就让 Spring 来维护了。</p>
<p>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取</p>
<h3 id="3-7-Bean的依赖注入方式"><a href="#3-7-Bean的依赖注入方式" class="headerlink" title="3.7 Bean的依赖注入方式"></a>3.7 Bean的依赖注入方式</h3><p>①构造方法</p>
<p>​      创建有参构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">                 ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);       UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">&quot;userDao&quot;</span>);    </span><br><span class="line">          userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用有参构造时进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span>      		   	<span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②set方法</p>
<p>​      在UserServiceImpl中添加setUserDao方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;  </span><br><span class="line">        &#125; </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">   		 userDao.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​      配置Spring容器调用set方法进行注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>set方法:P命名空间注入</p>
<p>​      P命名空间注入本质也是set方法注入，但比起上述的set方法注入更加方便，主要体现在配置文件中，如下：</p>
<p>​      首先，需要引入P命名空间：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其次，需要修改注入方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-</span></span></span><br><span class="line"><span class="tag"> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-8-Bean的依赖注入的数据类型"><a href="#3-8-Bean的依赖注入的数据类型" class="headerlink" title="3.8 Bean的依赖注入的数据类型"></a>3.8 Bean的依赖注入的数据类型</h3><p>上面的操作，都是注入的引用Bean，处了对象的引用可以注入，普通数据类型，集合等都可以在容器中进行注入。</p>
<p>注入数据的三种数据类型 </p>
<p>普通数据类型</p>
<p>引用数据类型</p>
<p>集合数据类型</p>
<p>其中引用数据类型，此处就不再赘述了，之前的操作都是对UserDao对象的引用进行注入的，下面将以set方法注入为例，演示普通数据类型和集合数据类型的注入。</p>
<p><strong>Bean的依赖注入的数据类型</strong></p>
<p>（1）普通数据类型的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompany</span><span class="params">(String company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(company+<span class="string">&quot;===&quot;</span>+age);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">value</span>=<span class="string">&quot;传智播客&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）集合数据类型（List<String>）的注入</String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.strList = strList;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）集合数据类型（List<User>）的注入</User></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.userList = userList;  </span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	System.out.println(userList);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userList&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span>       </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（4）集合数据类型（ Map&lt;String,User&gt; ）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">	System.out.println(userMap);</span><br><span class="line">	System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;u2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（5）集合数据类型（Properties）的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(properties);</span><br><span class="line">		System.out.println(<span class="string">&quot;UserDao save method running....&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-9-引入其他配置文件（分模块开发）"><a href="#3-9-引入其他配置文件（分模块开发）" class="headerlink" title="3.9 引入其他配置文件（分模块开发）"></a>3.9 引入其他配置文件（分模块开发）</h3><p>实际开发中，Spring的配置内容非常多，这就导致Spring配置很繁杂且体积很大，所以，可以将部分配置拆解到其他配置文件中，而在Spring主配置文件通过import标签进行加载</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-spring相关API"><a href="#4-spring相关API" class="headerlink" title="4. spring相关API"></a>4. spring相关API</h2><h3 id="4-1-ApplicationContext的继承体系"><a href="#4-1-ApplicationContext的继承体系" class="headerlink" title="4.1 ApplicationContext的继承体系"></a>4.1 ApplicationContext的继承体系</h3><p>applicationContext：接口类型，代表应用上下文，可以通过其实例获得 Spring 容器中的 Bean 对象</p>
<h3 id="4-2-ApplicationContext的实现类"><a href="#4-2-ApplicationContext的实现类" class="headerlink" title="4.2 ApplicationContext的实现类"></a>4.2 ApplicationContext的实现类</h3><p>1）ClassPathXmlApplicationContext </p>
<p>​      它是从类的根路径下加载配置文件 推荐使用这种</p>
<p>2）FileSystemXmlApplicationContext </p>
<p>​      它是从磁盘路径上加载配置文件，配置文件可以在磁盘的任意位置。</p>
<p>3）AnnotationConfigApplicationContext</p>
<p>​      当使用注解配置容器对象时，需要使用此类来创建 spring 容器。它用来读取注解。</p>
<h3 id="4-3-getBean-方法使用"><a href="#4-3-getBean-方法使用" class="headerlink" title="4.3 getBean()方法使用"></a>4.3 getBean()方法使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;  </span><br><span class="line">	assertBeanFactoryActive();   </span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;   			    	assertBeanFactoryActive();</span><br><span class="line">	<span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，当参数的数据类型是字符串时，表示根据Bean的id从容器中获得Bean实例，返回是Object，需要强转。</p>
<p>当参数的数据类型是Class类型时，表示根据类型从容器中匹配Bean实例，当容器中相同类型的Bean有多个时，则此方法会报错</p>
<p><strong>getBean()方法使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">            ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">  UserService userService1 = (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">  UserService userService2 = applicationContext.getBean(UserService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringIoC和DI注解开发</title>
    <url>/2019/10/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191016SpringIoC%E5%92%8CDI%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="1-Spring配置数据源"><a href="#1-Spring配置数据源" class="headerlink" title="1.Spring配置数据源"></a>1.Spring配置数据源</h2><h3 id="1-1-数据源（连接池）的作用"><a href="#1-1-数据源（连接池）的作用" class="headerlink" title="1.1 数据源（连接池）的作用"></a>1.1 数据源（连接池）的作用</h3><p>数据源(连接池)是提高程序性能如出现的</p>
<p>事先实例化数据源，初始化部分连接资源</p>
<p>使用连接资源时从数据源中获取</p>
<p>使用完毕后将连接资源归还给数据源</p>
<p>常见的数据源(连接池)：DBCP、C3P0、BoneCP、Druid等</p>
<p><strong>开发步骤</strong></p>
<p>①导入数据源的坐标和数据库驱动坐标</p>
<p>②创建数据源对象</p>
<p>③设置数据源的基本连接数据</p>
<p>④使用数据源获取连接资源和归还连接资源</p>
<a id="more"></a>

<h3 id="1-2-数据源的手动创建"><a href="#1-2-数据源的手动创建" class="headerlink" title="1.2 数据源的手动创建"></a>1.2 数据源的手动创建</h3><p>①导入c3p0和druid的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- C3P0连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Druid连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>①导入mysql数据库驱动坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②创建C3P0连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3P0</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="comment">//创建数据源</span></span><br><span class="line">	ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">	<span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);    	               	               dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">    dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">	<span class="comment">//获得连接对象</span></span><br><span class="line">	Connection connection = dataSource.getConnection();</span><br><span class="line">	System.out.println(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②创建Druid连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDruid</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建数据源</span></span><br><span class="line">    DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    <span class="comment">//设置数据库连接参数</span></span><br><span class="line">    dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); </span><br><span class="line">    dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);   </span><br><span class="line">    dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//获得连接对象</span></span><br><span class="line">    Connection connection = dataSource.getConnection();    </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③提取jdbc.properties配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>④读取jdbc.properties配置文件创建连接池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testC3P0ByProperties</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//加载类路径下的jdbc.properties</span></span><br><span class="line">    ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(); </span><br><span class="line">    dataSource.setDriverClass(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));   </span><br><span class="line">    dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>)); </span><br><span class="line">    dataSource.setUser(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>)); </span><br><span class="line">    dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line">    Connection connection = dataSource.getConnection();   </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Spring配置数据源"><a href="#1-3-Spring配置数据源" class="headerlink" title="1.3 Spring配置数据源"></a>1.3 Spring配置数据源</h3><p>可以将DataSource的创建权交由Spring容器去完成</p>
<p>DataSource有无参构造方法，而Spring默认就是通过无参构造方法实例化对象的</p>
<p>DataSource要想使用需要通过set方法设置数据库连接信息，而Spring可以通过set方法进行字符串注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试从容器当中获取数据源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">           ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">               DataSource dataSource = (DataSource) </span><br><span class="line">applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">System.out.println(connection);</span><br></pre></td></tr></table></figure>

<h3 id="1-4-抽取jdbc配置文件"><a href="#1-4-抽取jdbc配置文件" class="headerlink" title="1.4 抽取jdbc配置文件"></a>1.4 抽取jdbc配置文件</h3><p>applicationContext.xml加载jdbc.properties配置文件获得连接信息。</p>
<p>首先，需要引入context命名空间和约束路径：</p>
<p>命名空间：xmlns:context=”<a href="http://www.springframework.org/schema/context&quot;">http://www.springframework.org/schema/context&quot;</a></p>
<p>约束路径：<a href="http://www.springframework.org/schema/context">http://www.springframework.org/schema/context</a><br>​                       </p>
<p>​                   <a href="http://www.springframework.org/schema/context/spring-context.xsd">http://www.springframework.org/schema/context/spring-context.xsd</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-5-知识要点"><a href="#1-5-知识要点" class="headerlink" title="1.5 知识要点"></a>1.5 知识要点</h3><p>Spring容器加载properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;xx.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;key&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2-Spring注解开发"><a href="#2-Spring注解开发" class="headerlink" title="2. Spring注解开发"></a>2. Spring注解开发</h2><h3 id="2-1-Spring原始注解"><a href="#2-1-Spring原始注解" class="headerlink" title="2.1 Spring原始注解"></a>2.1 Spring原始注解</h3><p>Spring是轻代码而重配置的框架，配置比较繁重，影响开发效率，所以注解开发是一种趋势，注解代替xml配置文件可以简化配置，提高开发效率。 </p>
<p>Spring原始注解主要是替代<Bean>的配置</Bean></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>使用在类上用于实例化Bean</td>
</tr>
<tr>
<td>@Controller</td>
<td>使用在web层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Service</td>
<td>使用在service层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Repository</td>
<td>使用在dao层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Autowired</td>
<td>使用在字段上用于根据类型依赖注入</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>结合@Autowired一起使用用于根据名称进行依赖注入</td>
</tr>
<tr>
<td>@Resource</td>
<td>相当于@Autowired+@Qualifier，按照名称进行注入</td>
</tr>
<tr>
<td>@Value</td>
<td>注入普通属性</td>
</tr>
<tr>
<td>@Scope</td>
<td>标注Bean的作用范围</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td>使用在方法上标注该方法是Bean的初始化方法</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>使用在方法上标注该方法是Bean的销毁方法</td>
</tr>
</tbody></table>
<p>注意：</p>
<p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--注解的组件扫描--&gt;</span><br><span class="line">&lt;context:component-scan base-package=&quot;com.itheima&quot;&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用@Compont或@Repository标识UserDaoImpl需要Spring进行实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用@Compont或@Service标识UserServiceImpl需要Spring进行实例化</p>
<p>使用@Autowired或者@Autowired+@Qulifier或者@Resource进行userDao的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*@Autowired</span></span><br><span class="line"><span class="comment">    @Qualifier(&quot;userDao&quot;)*/</span></span><br><span class="line">    <span class="meta">@Resource(name=&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">   	  userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用@Value进行字符串的注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;注入普通数据&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        System.out.println(driver);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running... ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用@Scope标注Bean的范围</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="comment">//此处省略代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用@PostConstruct标注初始化方法，使用@PreDestroy标注销毁方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;初始化方法....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">&quot;销毁方法.....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-Spring新注解"><a href="#2-2-Spring新注解" class="headerlink" title="2.2 Spring新注解"></a>2.2 Spring新注解</h3><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下：</p>
<p>非自定义的Bean的配置：<bean></bean></p>
<p>加载properties文件的配置：<a href="context:property-placeholder">context:property-placeholder</a></p>
<p>组件扫描的配置：<a href="context:component-scan">context:component-scan</a></p>
<p>引入其他文件：<import></import></p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Configuration</td>
<td>用于指定当前类是一个 Spring   配置类，当创建容器时会从该类上加载注解</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>用于指定 Spring   在初始化容器时要扫描的包。   作用和在 Spring   的 xml 配置文件中的   &lt;context:component-scan   base-package=”com.itheima”/&gt;一样</td>
</tr>
<tr>
<td>@Bean</td>
<td>使用在方法上，标注将该方法的返回值存储到   Spring   容器中</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>用于加载.properties   文件中的配置</td>
</tr>
<tr>
<td>@Import</td>
<td>用于导入其他配置类</td>
</tr>
</tbody></table>
<p>@Configuration</p>
<p>@ComponentScan</p>
<p>@Import</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@PropertySource</p>
<p>@value</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean(name=&quot;dataSource&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123; </span><br><span class="line">    ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource(); </span><br><span class="line">    dataSource.setDriverClass(driver);</span><br><span class="line">    dataSource.setJdbcUrl(url);</span><br><span class="line">    dataSource.setUser(username);</span><br><span class="line">    dataSource.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试加载核心配置类创建Spring容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAnnoConfiguration</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> </span><br><span class="line">          AnnotationConfigApplicationContext(SpringConfiguration.class);    UserService userService = (UserService)    </span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.save();</span><br><span class="line">    DataSource dataSource = (DataSource) </span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">    Connection connection = dataSource.getConnection(); </span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-Spring整合Junit"><a href="#3-Spring整合Junit" class="headerlink" title="3. Spring整合Junit"></a>3. Spring整合Junit</h2><h3 id="3-1-原始Junit测试Spring的问题"><a href="#3-1-原始Junit测试Spring的问题" class="headerlink" title="3.1 原始Junit测试Spring的问题"></a>3.1 原始Junit测试Spring的问题</h3><p>在测试类中，每个测试方法都有以下两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">IAccountService as = ac.getBean(<span class="string">&quot;accountService&quot;</span>,IAccountService.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这两行代码的作用是获取容器，如果不写的话，直接会提示空指针异常。所以又不能轻易删掉。</p>
<h3 id="3-2-上述问题解决思路"><a href="#3-2-上述问题解决思路" class="headerlink" title="3.2 上述问题解决思路"></a>3.2 上述问题解决思路</h3><p>让SpringJunit负责创建Spring容器，但是需要将配置文件的名称告诉它</p>
<p>将需要进行测试Bean直接在测试类中进行注入</p>
<h3 id="3-3-Spring集成Junit步骤"><a href="#3-3-Spring集成Junit步骤" class="headerlink" title="3.3 Spring集成Junit步骤"></a>3.3 Spring集成Junit步骤</h3><p>①导入spring集成Junit的坐标</p>
<p>②使用@Runwith注解替换原来的运行期</p>
<p>③使用@ContextConfiguration指定配置文件或配置类</p>
<p>④使用@Autowired注入需要测试的对象</p>
<p>⑤创建测试方法进行测试</p>
<h3 id="3-4-Spring集成Junit代码实现"><a href="#3-4-Spring集成Junit代码实现" class="headerlink" title="3.4 Spring集成Junit代码实现"></a>3.4 Spring集成Junit代码实现</h3><p>①导入spring集成Junit的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--此处需要注意的是，spring5 及以上版本要求 junit 的版本必须是 4.12 及以上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②使用@Runwith注解替换原来的运行期</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③使用@ContextConfiguration指定配置文件或配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//加载spring核心配置文件</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(value = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="comment">//加载spring核心配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>④使用@Autowired注入需要测试的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑤创建测试方法进行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJunitTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">   	 userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring集成Junit步骤</p>
<p>①导入spring集成Junit的坐标</p>
<p>②使用@Runwith注解替换原来的运行期</p>
<p>③使用@ContextConfiguration指定配置文件或配置类</p>
<p>④使用@Autowired注入需要测试的对象</p>
<p>⑤创建测试方法进行测试</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Spring总结</title>
    <url>/2019/10/19/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191019Spring%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Spring-知识总结"><a href="#Spring-知识总结" class="headerlink" title="Spring 知识总结"></a>Spring 知识总结</h1><h2 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1) 耦合,解耦(降低依赖)</span><br><span class="line">2) 工厂模式,解耦</span><br><span class="line">3) IOC (把创建对象的权力交给了beanFactory 或者框架)   [重点,重点,重点]</span><br><span class="line">4) Spring 项目搭建的过程 (掌握)</span><br><span class="line">	1)  导入jar</span><br><span class="line">	2)  配置(掌握)</span><br><span class="line">		1) 传统方式 </span><br><span class="line">	 <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.AccountServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">		2) 普通工厂模式</span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instanceFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.InstanceFactory&quot;</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService1&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;instanceFactory&quot;</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span></span><br><span class="line">		3) 静态工厂模式</span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getAccountService&quot;</span>&gt;</span></span><br><span class="line">		scope</span><br><span class="line">		单利:</span><br><span class="line">			生命周期:</span><br><span class="line">				随着容器的创建而创建,随着容器的销毁而消亡</span><br><span class="line">		多例:</span><br><span class="line">			使用的时候创建,JVM 垃圾回收机制负责销毁对象</span><br><span class="line">5) DI (依赖注入) [重点,重点,重点]</span><br><span class="line">	1)构造函数</span><br><span class="line">	2)set方法</span><br><span class="line">    3)注解注入</span><br><span class="line">                </span><br><span class="line">	4)复杂类型的注入</span><br><span class="line">		list,set(去重),array</span><br><span class="line">		map,prop</span><br><span class="line">3) ApplicationContext </span><br><span class="line">		1) ClasspathXmlApplicationContext</span><br><span class="line">		2) FilesystemXmlApplicationContext</span><br><span class="line">		3) AnnotationConfigApplicationContext</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 把我们的对象交给IOC容器管理的注解</span><br><span class="line">	@Component</span><br><span class="line">		@Service</span><br><span class="line">		@Controller</span><br><span class="line">		@Repository</span><br><span class="line">	@Bean(name )</span><br><span class="line">2) 用于注入数据的</span><br><span class="line">	@Autowired</span><br><span class="line">    @Qualifier(小工)</span><br><span class="line">	@Resource(name &#x3D;&quot;&quot;) JDK </span><br><span class="line">	@Value SpEL</span><br><span class="line">3)用于改变作用范围的</span><br><span class="line">	Scope</span><br><span class="line">4) 用于改变声明周期的</span><br><span class="line">	@PostConstruct</span><br><span class="line">	@PreDestroy</span><br><span class="line">6) 声明配置文件的</span><br><span class="line">	@Configuration</span><br><span class="line">	6.1) ComponentScan 包注解扫描</span><br><span class="line">	6.2) Import</span><br><span class="line">	6.3)PropertySource</span><br><span class="line">7)Spring-junit 整合--------------------------------</span><br><span class="line">	@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">	@ContextConfiguration(classes &#x3D; SpringConfiguration.class)</span><br></pre></td></tr></table></figure>

<h2 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h2><h3 id="1-动态代理"><a href="#1-动态代理" class="headerlink" title="1) 动态代理"></a>1) 动态代理</h3><p>​    1)基于接口的</p>
<p>​    2)基于第三方类库的</p>
<p>​    3)使用动态代理解决自定义事务控制中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Target target = <span class="keyword">new</span> Target(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(target.getClass()</span><br><span class="line">.getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;前置增强代码...&quot;</span>);</span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;后置增强代码...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="2-AOP"><a href="#2-AOP" class="headerlink" title="2) AOP"></a>2) AOP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AOP：全称是Aspect Oriented Programming即：面向切面编程。</span><br><span class="line">	在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</span><br></pre></td></tr></table></figure>

<h3 id="3-AOP相关术语"><a href="#3-AOP相关术语" class="headerlink" title="3)AOP相关术语"></a>3)AOP相关术语</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3.1)Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。(例如: 业务层中的方法都是连接点)</span><br><span class="line">3.2)Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。</span><br><span class="line">			例如: 被增强的方式 是切入点,如果一个方法没有被增强则不是切入点</span><br><span class="line">3.3) Advice(通知&#x2F;增强): 所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。 通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</span><br><span class="line">			(例如: 我们事务控制中,我们增加的代码都可以叫做通知)</span><br><span class="line">3.4) Target(目标对象): 代理的目标对象。 </span><br><span class="line">3.5) Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。 spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。 </span><br><span class="line">3.6) Proxy（代理）: 一个类被AOP织入增强后，就产生一个结果代理类。</span><br><span class="line">3.7) Aspect(切面): 是切入点和通知（引介）的结合。</span><br></pre></td></tr></table></figure>

<h3 id="4-xml-形式的配置"><a href="#4-xml-形式的配置" class="headerlink" title="4)xml 形式的配置"></a>4)xml 形式的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1) 需要导入aspectj相关jar 包</span><br><span class="line">2)<span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!--配置切面 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">				<span class="comment">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联--&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLog&quot;</span> </span></span><br><span class="line"><span class="tag">                            <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		</span><br></pre></td></tr></table></figure>

<p>环绕通知的配置(需要手动编写代码)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">3) 环绕通知,需要手动编写代码</span><br><span class="line">			<span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;logAdvice&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;logger&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;aroundPringLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pt1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">aroundPringLog</span><span class="params">(ProceedingJoinPoint pjp)</span></span>&#123;</span><br><span class="line">        Object rtValue = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Object[] args = pjp.getArgs();<span class="comment">//得到方法执行所需的参数</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。前置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            rtValue = pjp.proceed(args);<span class="comment">//明确调用业务层方法（切入点方法）</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。后置&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rtValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Throwable t)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。异常&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(t);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Logger类中的aroundPringLog方法开始记录日志了。。。最终&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-注解形式的配置"><a href="#5-注解形式的配置" class="headerlink" title="5)注解形式的配置"></a>5)注解形式的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="comment">&lt;!-- 配置spring创建容器时要扫描的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置spring开启注解AOP的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">	1) @Aspect//表示当前类是一个切面类</span><br><span class="line">	2) @Before(&quot;pt1()&quot;)  前置通知</span><br><span class="line">	3) @AfterReturning(&quot;pt1()&quot;) 后置通知 </span><br><span class="line">	4) @AfterThrowing(&quot;pt1()&quot;) 异常通知</span><br><span class="line">	5) @After(&quot;pt1()&quot;) 最终通知</span><br><span class="line">	6) @Around(&quot;pt1()&quot;)</span><br><span class="line">注意:</span><br><span class="line">	除Around 以外 ,After 和 AfterReturning,有调用顺序问题,我们使用是要注意</span><br></pre></td></tr></table></figure>

<h2 id="day04"><a href="#day04" class="headerlink" title="day04"></a>day04</h2><ol>
<li>用前一天AOP 知识 配置事务(编程式事务)</li>
</ol>
<p>​    1.1) 基于xml 形式的</p>
<p>​    1.2)基于注解形式的</p>
<ol start="2">
<li>声明式事务xml 形式的配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1、配置事务管理器</span><br><span class="line">2、配置事务的通知</span><br><span class="line">                此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的</span><br><span class="line">                使用tx:advice标签配置事务通知</span><br><span class="line">                    属性：</span><br><span class="line">                        id：给事务通知起一个唯一标识</span><br><span class="line">                        transaction-manager：给事务通知提供一个事务管理器引用</span><br><span class="line">3、配置AOP中的通用切入点表达式</span><br><span class="line">4、建立事务通知和切入点表达式的对应关系</span><br><span class="line">5、配置事务的属性</span><br><span class="line">               是在事务的通知tx:advice标签的内部</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务的属性</span></span><br><span class="line"><span class="comment">                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。</span></span><br><span class="line"><span class="comment">                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</span></span><br><span class="line"><span class="comment">                read-only：用于指定事务是否只读。只有查询方法才能设置为true。默认值是false，表示读写。</span></span><br><span class="line"><span class="comment">                timeout：用于指定事务的超时时间，默认值是-1，表示永不超时。如果指定了数值，以秒为单位。</span></span><br><span class="line"><span class="comment">                rollback-for：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">                no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;SUPPORTS&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:method</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>基于注解形式的配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1)注解配置声明式事务</span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">2)开启注解扫描</span><br><span class="line">		 <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">3) 开始事务的类上或方法上增加事务的支持即可</span><br><span class="line">@Transactional</span><br></pre></td></tr></table></figure>

<h2 id="那些东西应该配置在spring-的配置文件中"><a href="#那些东西应该配置在spring-的配置文件中" class="headerlink" title="那些东西应该配置在spring 的配置文件中"></a>那些东西应该配置在spring 的配置文件中</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">跟web 无关的东旭都配置在spring.xml  中 如下:</span><br><span class="line">    1) &lt;bean &gt;</span><br><span class="line">    2) service,dao 层包扫描</span><br><span class="line">    3) servcei,dao 层的日志处理</span><br><span class="line">    4) 事务</span><br><span class="line">    5)数据库连接</span><br><span class="line">    6) redis (未来会用到) 等</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC_文件上传</title>
    <url>/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h1 id="SpringMVC的文件上传"><a href="#SpringMVC的文件上传" class="headerlink" title="SpringMVC的文件上传"></a>SpringMVC的文件上传</h1><h3 id="1-SpringMVC的请求-文件上传-客户端表单实现-应用"><a href="#1-SpringMVC的请求-文件上传-客户端表单实现-应用" class="headerlink" title="1-SpringMVC的请求-文件上传-客户端表单实现(应用)"></a>1-SpringMVC的请求-文件上传-客户端表单实现(应用)</h3><p>文件上传客户端表单需要满足：</p>
<p>1)表单项type=“file”</p>
<p>2)表单的提交方式是post</p>
<p>3)表单的enctype属性是多部分表单形式，及enctype=“multipart/form-data”</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick22&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-SpringMVC的请求-文件上传-文件上传的原理-理解"><a href="#2-SpringMVC的请求-文件上传-文件上传的原理-理解" class="headerlink" title="2-SpringMVC的请求-文件上传-文件上传的原理(理解)"></a>2-SpringMVC的请求-文件上传-文件上传的原理(理解)</h3><p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/07springmvc03/%E7%AC%94%E8%AE%B0/img/5.jpg"></p>
<h3 id="3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用"><a href="#3-SpringMVC的请求-文件上传-单文件上传的代码实现1-应用" class="headerlink" title="3-SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)"></a>3-SpringMVC的请求-文件上传-单文件上传的代码实现1(应用)</h3><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置多媒体解析器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件上传解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UYF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>后台程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">       	System.out.println(uploadFile);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用"><a href="#4-SpringMVC的请求-文件上传-单文件上传的代码实现2-应用" class="headerlink" title="4-SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)"></a>4-SpringMVC的请求-文件上传-单文件上传的代码实现2(应用)</h3><p>完成文件上传</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick22&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save22</span><span class="params">(String username, MultipartFile uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//获得上传文件的名称</span></span><br><span class="line">        String originalFilename = uploadFile.getOriginalFilename();</span><br><span class="line">        uploadFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用"><a href="#5-SpringMVC的请求-文件上传-多文件上传的代码实现-应用" class="headerlink" title="5-SpringMVC的请求-文件上传-多文件上传的代码实现(应用)"></a>5-SpringMVC的请求-文件上传-多文件上传的代码实现(应用)</h3><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick23&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        名称&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">1</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        文件<span class="number">2</span>&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;uploadFile&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick23&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save23</span><span class="params">(String username, MultipartFile[] uploadFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile multipartFile : uploadFile) &#123;</span><br><span class="line">            String originalFilename = multipartFile.getOriginalFilename();</span><br><span class="line">            multipartFile.transferTo(<span class="keyword">new</span> File(<span class="string">&quot;C:\\upload\\&quot;</span>+originalFilename));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-SpringMVC的请求-知识要点-理解，记忆"><a href="#6-SpringMVC的请求-知识要点-理解，记忆" class="headerlink" title="6-SpringMVC的请求-知识要点(理解，记忆)"></a>6-SpringMVC的请求-知识要点(理解，记忆)</h3><p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/07springmvc03/%E7%AC%94%E8%AE%B0/img/6.jpg"></p>
<h1 id="SpringMVC的拦截器"><a href="#SpringMVC的拦截器" class="headerlink" title="SpringMVC的拦截器"></a>SpringMVC的拦截器</h1><h3 id="01-SpringMVC拦截器-拦截器的作用-理解"><a href="#01-SpringMVC拦截器-拦截器的作用-理解" class="headerlink" title="01-SpringMVC拦截器-拦截器的作用(理解)"></a>01-SpringMVC拦截器-拦截器的作用(理解)</h3><p>Spring MVC 的拦截器类似于 Servlet  开发中的过滤器 Filter，用于对处理器进行预处理和后处理。</p>
<p>将拦截器按一定的顺序联结成一条链，这条链称为拦截器链（InterceptorChain）。在访问被拦截的方法或字段时，拦截器链中的拦截器就会按其之前定义的顺序被调用。拦截器也是AOP思想的具体实现。</p>
<h3 id="02-SpringMVC拦截器-interceptor和filter区别-理解，记忆"><a href="#02-SpringMVC拦截器-interceptor和filter区别-理解，记忆" class="headerlink" title="02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)"></a>02-SpringMVC拦截器-interceptor和filter区别(理解，记忆)</h3><p>关于interceptor和filter的区别，如图所示：</p>
<p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/07springmvc03/%E7%AC%94%E8%AE%B0/assets/1566653218986.png" alt="1566653218986"></p>
<h3 id="03-SpringMVC拦截器-快速入门-应用"><a href="#03-SpringMVC拦截器-快速入门-应用" class="headerlink" title="03-SpringMVC拦截器-快速入门(应用)"></a>03-SpringMVC拦截器-快速入门(应用)</h3><p>自定义拦截器很简单，只有如下三步：</p>
<p>①创建拦截器类实现HandlerInterceptor接口</p>
<p>②配置拦截器</p>
<p>③测试拦截器的拦截效果</p>
<p>编写拦截器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle.....&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置：在SpringMVC的配置文件中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编写测试程序测试：</p>
<p>编写Controller,发请求到controller,跳转页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/target&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;目标资源执行......&quot;</span>);</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>页面</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World! $&#123;name&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preHandle22222.....</span><br><span class="line">目标资源执行......</span><br><span class="line">postHandle2222...</span><br><span class="line">indexJPS 执行了....</span><br><span class="line">afterCompletion2222....</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="04-SpringMVC拦截器-快速入门详解-应用"><a href="#04-SpringMVC拦截器-快速入门详解-应用" class="headerlink" title="04-SpringMVC拦截器-快速入门详解(应用)"></a>04-SpringMVC拦截器-快速入门详解(应用)</h3><p>拦截器在预处理后什么情况下会执行目标资源，什么情况下不执行目标资源，以及在有多个拦截器的情况下拦截器的执行顺序是什么?</p>
<p>再编写一个拦截器2，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在目标方法执行之前 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle22222.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在目标方法执行之后 视图对象返回之前执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle2222...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在流程都执行完毕后 执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion2222....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置拦截器2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.MyInterceptor1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MyFilter前置.............</span><br><span class="line">    preHandle22222.....</span><br><span class="line">    preHandle.....</span><br><span class="line">    	目标资源执行......</span><br><span class="line">    postHandle...</span><br><span class="line">    postHandle2222...</span><br><span class="line">    	indexJPS 执行了....</span><br><span class="line">    afterCompletion....</span><br><span class="line">    afterCompletion2222....</span><br><span class="line">MyFilter后置.............</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>结论：</p>
<p>当拦截器的preHandle方法返回true则会执行目标资源，如果返回false则不执行目标资源</p>
<p>多个拦截器情况下，配置在前的先执行，配置在后的后执行</p>
<p>拦截器中的方法执行顺序是：preHandler——-目标资源—-postHandle—- afterCompletion</p>
<h3 id="05-SpringMVC拦截器-知识小结-记忆"><a href="#05-SpringMVC拦截器-知识小结-记忆" class="headerlink" title="05-SpringMVC拦截器-知识小结(记忆)"></a>05-SpringMVC拦截器-知识小结(记忆)</h3><p>拦截器中的方法说明如下</p>
<p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/07springmvc03/%E7%AC%94%E8%AE%B0/img/2.png"></p>
<h3 id="06-SpringMVC拦截器-用户登录权限控制分析-理解"><a href="#06-SpringMVC拦截器-用户登录权限控制分析-理解" class="headerlink" title="06-SpringMVC拦截器-用户登录权限控制分析(理解)"></a>06-SpringMVC拦截器-用户登录权限控制分析(理解)</h3><p>在day06-Spring练习案例的基础之上：用户没有登录的情况下，不能对后台菜单进行访问操作，点击菜单跳转到登录页面，只有用户登录成功后才能进行后台功能的操作</p>
<p>需求图：</p>
<p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/07springmvc03/%E7%AC%94%E8%AE%B0/img/3.jpg"></p>
<h3 id="07-SpringMVC拦截器-用户登录权限控制代码实现1-应用"><a href="#07-SpringMVC拦截器-用户登录权限控制代码实现1-应用" class="headerlink" title="07-SpringMVC拦截器-用户登录权限控制代码实现1(应用)"></a>07-SpringMVC拦截器-用户登录权限控制代码实现1(应用)</h3><p>判断用户是否登录  本质：判断session中有没有user，如果没有登陆则先去登陆，如果已经登陆则直接放行访问目标资源</p>
<p>先编写拦截器如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivilegeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//逻辑：判断用户是否登录  本质：判断session中有没有user</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//没有登录</span></span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;/login.jsp&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//放行  访问目标资源</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后配置该拦截器：找到项目案例的spring-mvc.xml，添加如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置权限拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.PrivilegeInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="08-SpringMVC拦截器-用户登录权限控制代码实现2-应用"><a href="#08-SpringMVC拦截器-用户登录权限控制代码实现2-应用" class="headerlink" title="08-SpringMVC拦截器-用户登录权限控制代码实现2(应用)"></a>08-SpringMVC拦截器-用户登录权限控制代码实现2(应用)</h3><p>在登陆页面输入用户名密码，点击登陆，通过用户名密码进行查询，如果登陆成功，则将用户信息实体存入session，然后跳转到首页，如果登陆失败则继续回到登陆页面</p>
<p>在UserController中编写登陆逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username,String password,HttpSession session)</span></span>&#123;</span><br><span class="line">        User user = userService.login(username,password);</span><br><span class="line">        <span class="keyword">if</span>(user!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//登录成功  将user存储到session</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service层代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">            User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao层代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao层</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> EmptyResultDataAccessException</span>&#123;</span><br><span class="line">        User user = jdbcTemplate.queryForObject(<span class="string">&quot;select * from sys_user where username=? and password=?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class), username, password);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时仍然登陆不上，因为我们需要将登陆请求url让拦截器放行,添加资源排除的配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置权限拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置对哪些资源执行拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置哪些资源排除拦截操作--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/login&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.interceptor.PrivilegeInterceptor&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="09-SpringMVC拦截器-用户登录权限控制代码实现3-应用"><a href="#09-SpringMVC拦截器-用户登录权限控制代码实现3-应用" class="headerlink" title="09-SpringMVC拦截器-用户登录权限控制代码实现3(应用)"></a>09-SpringMVC拦截器-用户登录权限控制代码实现3(应用)</h3><p>JdbcTemplate.queryForObject对象如果查询不到数据会抛异常，导致程序无法达到预期效果，如何来解决该问题？</p>
<p>在业务层处理来自dao层的异常，如果出现异常service层返回null,而不是将异常抛给controller</p>
<p>因此改造登陆的业务层代码,添加异常的控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            User user = userDao.findByUsernameAndPassword(username,password);</span><br><span class="line">            <span class="keyword">return</span> user;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (EmptyResultDataAccessException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="1-SpringMVC异常处理机制"><a href="#1-SpringMVC异常处理机制" class="headerlink" title="1. SpringMVC异常处理机制"></a>1. SpringMVC异常处理机制</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">web.xml </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/errorPage.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="1-1-异常处理的思路"><a href="#1-1-异常处理的思路" class="headerlink" title="1.1 异常处理的思路"></a>1.1 异常处理的思路</h3><p>系统中异常包括两类：预期异常和运行时异常RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试等手段减少运行时异常的发生。</p>
<p>系统的Dao、Service、Controller出现都通过throws Exception向上抛出，最后由SpringMVC前端控制器交由异常处理器进行异常处理，如下图：</p>
<p><img src="/2019/10/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191022SpringMVC_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/Java资料/4.框架/01.JavaSSM/07springmvc03/笔记/img/%E5%9B%BE%E7%89%871.jpg" alt="1551078013501"></p>
<h3 id="1-2-异常处理两种方式"><a href="#1-2-异常处理两种方式" class="headerlink" title="1.2 异常处理两种方式"></a>1.2 异常处理两种方式</h3><p>① 使用Spring MVC提供的简单异常处理器SimpleMappingExceptionResolver</p>
<p>② 实现Spring的异常处理接口HandlerExceptionResolver 自定义自己的异常处理器</p>
<h3 id="1-3-简单异常处理器SimpleMappingExceptionResolver"><a href="#1-3-简单异常处理器SimpleMappingExceptionResolver" class="headerlink" title="1.3 简单异常处理器SimpleMappingExceptionResolver"></a>1.3 简单异常处理器SimpleMappingExceptionResolver</h3><p>SpringMVC已经定义好了该异常处理器，在使用时可以根据项目情况进行相应异常与视图的映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置简单映射异常处理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“defaultErrorView”</span> <span class="attr">value</span>=<span class="string">“error”/</span>&gt;</span>   默认错误视图</span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">“exceptionMappings”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span>		异常类型		                             错误视图</span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;com.itheima.exception.MyException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.lang.ClassCastException&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-4-自定义异常处理步骤"><a href="#1-4-自定义异常处理步骤" class="headerlink" title="1.4 自定义异常处理步骤"></a>1.4 自定义异常处理步骤</h3><p>①创建异常处理器类实现HandlerExceptionResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, </span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//处理异常的代码实现</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(); </span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;exceptionPage&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②配置异常处理器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exceptionResolver&quot;</span>        </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.itheima.exception.MyExceptionResolver&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③编写异常页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	这是一个最终异常的显示页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>④测试异常跳转</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/quick22&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickMethod22</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParseException </span>&#123;</span><br><span class="line">    SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class="line">    simpleDateFormat.parse(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-5-知识要点"><a href="#1-5-知识要点" class="headerlink" title="1.5 知识要点"></a>1.5 知识要点</h3><p>异常处理方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置简单异常处理器SimpleMappingExceptionResolver</span><br><span class="line">自定义异常处理器</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义异常处理步骤</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①创建异常处理器类实现HandlerExceptionResolver</span><br><span class="line">②配置异常处理器</span><br><span class="line">③编写异常页面</span><br><span class="line">④测试异常跳转</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC总结</title>
    <url>/2019/10/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191023SpringMVC%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="SpringMVC-总结"><a href="#SpringMVC-总结" class="headerlink" title="SpringMVC 总结"></a>SpringMVC 总结</h1><h2 id="项目搭建步骤"><a href="#项目搭建步骤" class="headerlink" title="项目搭建步骤"></a>项目搭建步骤</h2><h3 id="1-导入jar-包"><a href="#1-导入jar-包" class="headerlink" title="1) 导入jar 包"></a>1) 导入jar 包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分类</span><br><span class="line">	1) spring-mvc (web.Spring-core)</span><br><span class="line">	2) jackson</span><br><span class="line">	3) 上传相关的</span><br><span class="line">	4) 日志,测试</span><br></pre></td></tr></table></figure>

<h3 id="2-web-xml-配置"><a href="#2-web-xml-配置" class="headerlink" title="2)  web.xml 配置"></a>2)  web.xml 配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">编码过滤器,</span><br><span class="line">核心控制器(并配置加载springmvc.xml文件)</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置解决中文乱码的过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-springmvc-xml"><a href="#3-springmvc-xml" class="headerlink" title="3 springmvc.xml"></a>3 springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 1开启注解扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.itcast&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 视图解析器对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--3 前端控制器，哪些静态资源不拦截--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/css/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/css/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/images/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/images/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/**&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--4,配置文件解析器对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--5,配置拦截器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置第二个拦截器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">            &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--6,配置自定义类型转换器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.utils.StringToDateConverter&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--7, 开启SpringMVC框架注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--8, 异常处理器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sysExceptionResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.exception.SysExceptionResolver&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-编写Controller"><a href="#4-编写Controller" class="headerlink" title="4) 编写Controller"></a>4) 编写Controller</h3><p>常用注解</p>
<ol>
<li><p>RequestMapping</p>
</li>
<li><p>RequestBody (不适用于post 请求)</p>
</li>
</ol>
<p>3)@RequestParam</p>
<h4 id="请求参数封装"><a href="#请求参数封装" class="headerlink" title="请求参数封装"></a>请求参数封装</h4><ol>
<li><p>基本类型 和前端表单字段名称对应</p>
</li>
<li><p>封装类型 : 属性名称和 表单字段名称对应</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.uname&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">用户年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user.age&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>集合:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户姓名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;list[0].uname&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line">用户年龄：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;list[0].age&quot; &#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  private List&lt;User&gt; user;</span><br><span class="line">注意:</span><br><span class="line">	数组形式的注意角标的使用</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h4 id="响应"><a href="#响应" class="headerlink" title="响应:"></a>响应:</h4><h5 id="请求json-格式数据"><a href="#请求json-格式数据" class="headerlink" title="请求json 格式数据"></a>请求json 格式数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收及响应json </span></span><br><span class="line"><span class="number">1</span>)ResponseBody 响应json</span><br><span class="line"><span class="number">2</span>) <span class="meta">@RequestBody</span> 接受接送数据</span><br><span class="line">    要求<span class="number">1</span>) 请求数据不能为<span class="keyword">null</span> 或者<span class="string">&quot;&quot;</span></span><br><span class="line">    要求<span class="number">2</span>) 请求方式必须为post </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/testAjax&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="meta">@ResponseBody</span>  <span class="function">User <span class="title">testAjax</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;testAjax方法执行了...&quot;</span>);</span><br><span class="line">        <span class="comment">// 客户端发送ajax的请求，传的是json字符串，后端把json字符串封装到user对象中</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 做响应，模拟查询数据库</span></span><br><span class="line">        user.setUsername(<span class="string">&quot;haha&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">40</span>);</span><br><span class="line">        <span class="comment">// 做响应</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/testModelAndView&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       System.out.println(<span class="string">&quot;testModelAndView方法执行了...&quot;</span>);</span><br><span class="line">       <span class="comment">// 模拟从数据库中查询出User对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User();</span><br><span class="line">       user.setUsername(<span class="string">&quot;小凤&quot;</span>);</span><br><span class="line">       user.setPassword(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">       user.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 把user对象存储到mv对象中，也会把user对象存入到request对象</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 跳转到哪个页面</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="请求重定向及转发"><a href="#请求重定向及转发" class="headerlink" title="请求重定向及转发"></a>请求重定向及转发</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">请求转发</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/WEB-INF/pages/success.jsp&quot;</span>;</span><br><span class="line">请求重定向</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件上传的三个必要前提</span><br><span class="line">    A form表单的enctype取值必须是：multipart&#x2F;form-data </span><br><span class="line">        (默认值是:application&#x2F;x-www-form-urlencoded) enctype:是表单请求正文的类型 </span><br><span class="line">    B method属性取值必须是Post </span><br><span class="line">    C 提供一个文件选择域&lt;input type&#x3D;”file” &#x2F;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">普通模式</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;/user/fileupload1&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        选择文件：&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span> /&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileuoload1</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">        <span class="comment">// 上传的位置</span></span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="comment">// 创建该文件夹</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析request对象，获取上传文件项</span></span><br><span class="line">        DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload upload = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line">        <span class="comment">// 解析request</span></span><br><span class="line">        List&lt;FileItem&gt; items = upload.parseRequest(request);</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span>(FileItem item:items)&#123;</span><br><span class="line">            <span class="comment">// 进行判断，当前item对象是否是上传文件项</span></span><br><span class="line">            <span class="keyword">if</span>(item.isFormField())&#123;</span><br><span class="line">                <span class="comment">// 说明普通表单向</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 说明上传文件项</span></span><br><span class="line">                <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">                String filename = item.getName();</span><br><span class="line">                <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">                String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">                <span class="comment">// 完成文件上传</span></span><br><span class="line">                item.write(<span class="keyword">new</span> File(path,filename));</span><br><span class="line">                <span class="comment">// 删除临时文件</span></span><br><span class="line">                item.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">springmvc 文件上传</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileupload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileuoload2</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springmvc文件上传...&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用fileupload组件完成文件上传</span></span><br><span class="line">        <span class="comment">// 上传的位置</span></span><br><span class="line">        String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads/&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断，该路径是否存在</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="comment">// 创建该文件夹</span></span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 说明上传文件项</span></span><br><span class="line">        <span class="comment">// 获取上传文件的名称</span></span><br><span class="line">        String filename = upload.getOriginalFilename();</span><br><span class="line">        <span class="comment">// 把文件的名称设置唯一值，uuid</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">        <span class="comment">// 完成文件上传</span></span><br><span class="line">        upload.transferTo(<span class="keyword">new</span> File(path,filename));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>) 自定义异常</span><br><span class="line"><span class="number">2</span>) 自定义异常处理器</span><br><span class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 获取到异常对象</span></span><br><span class="line">            SysException e = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(ex <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">                e = (SysException)ex;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                e = <span class="keyword">new</span> SysException(<span class="string">&quot;系统正在维护....&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 创建ModelAndView对象</span></span><br><span class="line">            ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">            mv.addObject(<span class="string">&quot;errorMsg&quot;</span>,e.getMessage());</span><br><span class="line">            mv.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;&#125;</span><br><span class="line">   <span class="number">3</span>) 配置异常处理器</span><br><span class="line">   &lt;bean id=<span class="string">&quot;sysExceptionResolver&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;cn.itcast.exception.SysExceptionResolver&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="日期类型转换器"><a href="#日期类型转换器" class="headerlink" title="日期类型转换器"></a>日期类型转换器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringToDateConverter implements Converter&lt;String,Date&gt;&#123;</span><br><span class="line">    public Date convert(String source) &#123;</span><br><span class="line">        if(source &#x3D;&#x3D; null)&#123;throw new RuntimeException(&quot;请您传入数据&quot;);&#125;</span><br><span class="line">        DateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        try &#123;&#x2F;&#x2F; 把字符串转换日期</span><br><span class="line">            return df.parse(source);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            throw new RuntimeException(&quot;数据类型转换出现错误&quot;);</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拦截器的概念:</span><br><span class="line">	Spring MVC 的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理。</span><br><span class="line">拦截器和过滤器的区别	</span><br><span class="line">	过滤器是servlet规范中的一部分，任何java web工程都可以使用。 </span><br><span class="line">		拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能用。 </span><br><span class="line">	过滤器在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源拦截。 </span><br><span class="line">		拦截器它是只会拦截访问的控制器方法，如果访问的是jsp，html,css,image或者js是不会进行拦截的。</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">我们要想自定义拦截器， 要求必须实现：HandlerInterceptor接口。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预处理，controller方法执行前</span></span><br><span class="line"><span class="comment">     * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line"><span class="comment">     * return false不放行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor1执行了...前1111&quot;</span>);</span><br><span class="line">        <span class="comment">// request.getRequestDispatcher(&quot;/WEB-INF/pages/error.jsp&quot;).forward(request,response);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--要拦截的具体的方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/user/*&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--不要拦截的方法</span></span><br><span class="line"><span class="comment">       &lt;mvc:exclude-mapping path=&quot;&quot;/&gt;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置拦截器对象--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.itcast.controller.cn.itcast.interceptor.MyInterceptor1&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">多个拦截器方法间执行的顺序</span><br><span class="line">MyFilter前置.............</span><br><span class="line">    preHandle22222.....</span><br><span class="line">    preHandle.....</span><br><span class="line">    	目标资源执行......</span><br><span class="line">    postHandle...</span><br><span class="line">    postHandle2222...</span><br><span class="line">    	indexJPS 执行了....</span><br><span class="line">    afterCompletion....</span><br><span class="line">    afterCompletion2222....</span><br><span class="line">MyFilter后置.............</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="那些配置-需要配置在web-xml-中"><a href="#那些配置-需要配置在web-xml-中" class="headerlink" title="那些配置 需要配置在web.xml  中"></a>那些配置 需要配置在web.xml  中</h2><p>&lt;servlet&gt;</p>
<p>&lt;filter&gt;</p>
<p>&lt;listener&gt;</p>
<h2 id="那些配置配置在springmvc-xml-中"><a href="#那些配置配置在springmvc-xml-中" class="headerlink" title="那些配置配置在springmvc.xml 中"></a>那些配置配置在springmvc.xml 中</h2><p>​    和web 相关的配置共8个</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis总结</title>
    <url>/2019/10/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191029Mybatis%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="mybatis-总结"><a href="#mybatis-总结" class="headerlink" title="mybatis  总结"></a>mybatis  总结</h1><h2 id="环境搭建步骤-xml-方式"><a href="#环境搭建步骤-xml-方式" class="headerlink" title="环境搭建步骤 (xml 方式)"></a>环境搭建步骤 (xml 方式)</h2><h3 id="1-1-导入jar"><a href="#1-1-导入jar" class="headerlink" title="1.1)导入jar"></a>1.1)导入jar</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-编写核心配置文件"><a href="#1-2-编写核心配置文件" class="headerlink" title="1.2 编写核心配置文件"></a>1.2 编写核心配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select,</span><br><span class="line">udpate</span><br><span class="line">delete</span><br><span class="line">insert,selectKey</span><br><span class="line">resultmap</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">        <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">                <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">                <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbcConfig.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--配置别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置环境--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定带有注解的dao接口所在位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定配置文件所在的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-创建dao-接口-domain-类"><a href="#1-3-创建dao-接口-domain-类" class="headerlink" title="1.3 创建dao 接口,domain 类"></a>1.3 创建dao 接口,domain 类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure>

<h3 id="1-4-编写-dao-xml-文件"><a href="#1-4-编写-dao-xml-文件" class="headerlink" title="1.4 编写 dao.xml 文件"></a>1.4 编写 dao.xml 文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">IRoleDao.xml (多对多为例)</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.dao.IRoleDao&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   1) Mapper.xml文件中的namespace与mapper接口的全限定名相同</span><br><span class="line">	2) Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</span><br><span class="line">	3) Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</span><br><span class="line">	4) Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</span><br><span class="line">	5) 方法不能重载</span><br><span class="line">	6) 特殊配置</span><br><span class="line">				如果用package 标签加载配置 要求配置文件的&quot;目录&quot;必须和接口一致</span><br><span class="line">										   要求配置文件的&quot;名称&quot;必须和接口名称一致</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="sql-常用的标签"><a href="#sql-常用的标签" class="headerlink" title="sql  常用的标签"></a>sql  常用的标签</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select,</span><br><span class="line">udpate</span><br><span class="line">delete</span><br><span class="line">insert,selectKey</span><br><span class="line">resultmap()</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;INT&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;uid &gt;0&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">collection</span>=<span class="string">&quot;user.vo&quot;</span> </span></span><br><span class="line"><span class="tag">                         <span class="attr">open</span>=<span class="string">&quot;and id in(&quot;</span> </span></span><br><span class="line"><span class="tag">                         <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> </span></span><br><span class="line"><span class="tag">                         <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> </span></span><br><span class="line"><span class="tag">                         <span class="attr">item</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    #&#123;item&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;saveUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置插入操作后，获取插入数据的id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            select last_insert_id();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username,address,sex,birthday)values(#&#123;userName&#125;,#&#123;userAddress&#125;,#&#123;userSex&#125;,#&#123;userBirthday&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="一对一01"><a href="#一对一01" class="headerlink" title="一对一01"></a>一对一01</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">注意</span><br><span class="line">	1) sql 返回字段名称尽量不要重复</span><br><span class="line">	2) sql 字段和java 实体类映射关系</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--手动指定字段与实体属性的映射关系</span></span><br><span class="line"><span class="comment">            column: 数据表的字段名称</span></span><br><span class="line"><span class="comment">            property：实体的属性名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">        select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一对一02</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            property: 当前实体(order)中的属性名称(private User user)</span></span><br><span class="line"><span class="comment">            javaType: 当前实体(order)中的属性的类型(User)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span>  <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191029Mybatis%E6%80%BB%E7%BB%93/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/ssm%E6%80%BB%E7%BB%93/assets/1565279820520.png" alt="1565279820520"></p>
<p><img src="/2019/10/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191029Mybatis%E6%80%BB%E7%BB%93/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/ssm%E6%80%BB%E7%BB%93/assets/1565280213101.png" alt="1565280213101"></p>
<h4 id="一对多01"><a href="#一对多01" class="headerlink" title="一对多01"></a>一对多01</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span> <span class="attr">javatype</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191029Mybatis%E6%80%BB%E7%BB%93/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/ssm%E6%80%BB%E7%BB%93/assets/1565280868113.png" alt="1565280868113"></p>
<h4 id="多对多01"><a href="#多对多01" class="headerlink" title="多对多01"></a>多对多01</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rolename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;rolename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUserAndRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMap&quot;</span>&gt;</span></span><br><span class="line">    select u.*,r.*,r.id rid from user u left join user_role ur on u.id=ur.user_id</span><br><span class="line">    inner join role r on ur.role_id=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="注解方式配置"><a href="#注解方式配置" class="headerlink" title="注解方式配置"></a>注解方式配置</h4><p>一对一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">   <span class="meta">@Results(id=&quot;accountMap&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">     	@Result(id=true,column = &quot;id&quot;,property = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">     	@Result(column = &quot;uid&quot;,property = &quot;uid&quot;),</span></span><br><span class="line"><span class="meta">     	@Result(column = &quot;money&quot;,property = &quot;money&quot;),</span></span><br><span class="line"><span class="meta">     	@Result(property = &quot;user&quot;,column = &quot;uid&quot;,</span></span><br><span class="line"><span class="meta">               one=@One(select=&quot;com.itheima.dao.IUserDao.findById&quot;,</span></span><br><span class="line"><span class="meta">                		fetchType= FetchType.EAGER)</span></span><br><span class="line"><span class="meta">       		)</span></span><br><span class="line"><span class="meta">   &#125;)</span></span><br><span class="line">   <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>一对多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(id=&quot;userMap&quot;,value=&#123;</span></span><br><span class="line"><span class="meta">          @Result(id=true,column = &quot;id&quot;,property = &quot;userId&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;username&quot;,property = &quot;userName&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;address&quot;,property = &quot;userAddress&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;sex&quot;,property = &quot;userSex&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;birthday&quot;,property = &quot;userBirthday&quot;),</span></span><br><span class="line"><span class="meta">          @Result(property = &quot;accounts&quot;,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                 many = @Many(select = &quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;</span></span><br><span class="line"><span class="meta">                            ))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">一对多查询accounts</span><br><span class="line"><span class="meta">@Select(&quot;select * from account where uid = #&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAccountByUid</span><span class="params">(Integer userId)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">多对多和上述一对多配置一样,只是下述查询不一样</span><br><span class="line">多对多查询roles</span><br><span class="line"><span class="meta">@Select(&quot;SELECT * FROM role WHERE id IN (SELECT rid FROM user_role WHERE uid=#&#123;uid&#125;)&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findRolesByUid</span><span class="params">(Integer uid)</span></span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2019/11/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191117SpringBoot/</url>
    <content><![CDATA[<h2 id="1-Spring-Boot概述"><a href="#1-Spring-Boot概述" class="headerlink" title="1. Spring Boot概述"></a>1. Spring Boot概述</h2><p><strong>目标</strong>：了解Spring Boot是什么，有什么作用</p>
<p><strong>小结</strong>：</p>
<p>Spring Boot是一个便捷搭建 基于spring工程的脚手架；作用是帮助开发人员快速搭建大型的spring 项目。简化工程的配置，依赖管理；实现开发人员把时间都集中在业务开发上。</p>
<a id="more"></a>

<h2 id="2-Spring-Boot入门"><a href="#2-Spring-Boot入门" class="headerlink" title="2. Spring Boot入门"></a>2. Spring Boot入门</h2><p><strong>目标</strong>：能够使用Spring Boot搭建项目</p>
<p><strong>分析</strong>：</p>
<p>需求：可以在浏览器中访问<a href="http://localhost:8080/hello%E8%BE%93%E5%87%BA%E4%B8%80%E4%B8%B2%E5%AD%97%E7%AC%A6">http://localhost:8080/hello输出一串字符</a></p>
<p>实现步骤：</p>
<ol>
<li>创建工程；</li>
<li>添加依赖（启动器依赖，spring-boot-starter-web）；</li>
<li>创建启动类；</li>
<li>创建处理器Controller；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>Spring Boot工程可以通过添加启动器依赖和创建启动引导类实现快速创建web工程。</p>
<blockquote>
<p>spring-boot-starter-web默认的应用服务器端口是8080</p>
</blockquote>
<h2 id="3-Java代码方式配置"><a href="#3-Java代码方式配置" class="headerlink" title="3. Java代码方式配置"></a>3. Java代码方式配置</h2><p><strong>目标</strong>：可以使用@Value获取配置文件配置项并结合@Bean注册组件到Spring</p>
<p><strong>分析</strong>：</p>
<p>需求：使用Java代码配置数据库连接池，并可以在处理器中注入并使用</p>
<p>步骤：</p>
<ol>
<li>添加依赖；</li>
<li>创建数据库；</li>
<li>创建数据库连接参数的配置文件jdbc.properties；</li>
<li>创建配置类；</li>
<li>改造处理器类注入数据源并使用</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span></span><br><span class="line">    String driverClassName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="4-Spring-Boot属性注入方式"><a href="#4-Spring-Boot属性注入方式" class="headerlink" title="4. Spring Boot属性注入方式"></a>4. Spring Boot属性注入方式</h2><p><strong>目标</strong>：能够使用@ConfigurationProperties实现Spring Boot配置文件配置项读取和应用</p>
<p><strong>分析</strong>：</p>
<p>需求：将配置文件中的配置项读取到一个对象中；</p>
<p>实现：可以使用Spring Boot提供的注解@ConfigurationProperties，该注解可以将Spring Boot的配置文件（默认必须为application.properties或application.yml）中的配置项读取到一个对象中。</p>
<p>实现步骤：</p>
<ol>
<li>创建配置项类JdbcProperties类，在该类名上面添加@ConfigurationProperties；</li>
<li>将jdbc.properties修改名称为application.properties；</li>
<li>将JdbcProperties对象注入到JdbcConfig；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>使用@ConfigurationProperties编写配置项类将配置文件中的配置项设置到对象中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverClassName</span><span class="params">(String driverClassName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>使用@ConfigurationProperties在方法上面使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;jdbc&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-多个yml文件配置"><a href="#5-多个yml文件配置" class="headerlink" title="5. 多个yml文件配置"></a>5. 多个yml文件配置</h2><p><strong>目标</strong>：可以将多个yml文件在application.yml文件中配置激活</p>
<p><strong>分析</strong>：</p>
<p>yaml与properties配置文件除了展示形式不相同以外，其它功能和作用都是一样的；在项目中原路的读取方式不需要改变。</p>
<p>1）yml配置文件的特征：</p>
<ol>
<li>树状层级结构展示配置项；</li>
<li>配置项之间如果有关系的话需要分行空两格；</li>
<li>配置项如果有值的话，那么需要在 <code>:</code>之后空一格再写配置项值；</li>
</ol>
<p>将application.properties配置文件修改为application.yml的话：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/heima</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">key:</span></span><br><span class="line">  <span class="attr">abc:</span> <span class="string">cba</span></span><br><span class="line">  <span class="attr">def:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">g</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">h</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">j</span></span><br></pre></td></tr></table></figure>



<p>2）多个yml配置文件；在spring boot中是被允许的。这些配置文件的名称必须为application-***.yml，并且这些配置文件必须要在application.yml配置文件中激活之后才可以使用。</p>
<p>3）如果properties和yml配置文件同时存在在spring boot项目中；那么这两类配置文件都有效。在两个配置文件中如果存在同名的配置项的话会以properties文件的为主。</p>
<p><strong>小结</strong>：</p>
<p>在多个配置文件时，需要将这些文件在application.yml文件中进行激活：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#激活配置文件;需要指定其它的配置文件名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">abc,def</span></span><br></pre></td></tr></table></figure>



<h2 id="6-自动配置原理"><a href="#6-自动配置原理" class="headerlink" title="6. 自动配置原理"></a>6. 自动配置原理</h2><p><strong>目标</strong>：了解Spring Boot项目的配置加载流程</p>
<p><strong>小结</strong>：</p>
<ul>
<li>在 <code>META-INF\spring.fatories</code>文件中定义了很多自动配置类；可以根据在pom.xml文件中添加的 启动器依赖自动配置组件</li>
<li>通过如下流程可以去修改application配置文件，改变自动配置的组件默认参数</li>
</ul>
<p><img src="/2019/11/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191117SpringBoot/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/07.springboot/%E7%AC%94%E8%AE%B0/assets/1560091228494.png" alt="1560091228494"></p>
<h2 id="7-lombok应用"><a href="#7-lombok应用" class="headerlink" title="7. lombok应用"></a>7. lombok应用</h2><p><strong>目标</strong>：使用lombok的注解实现pojo类的简化</p>
<p><strong>分析</strong>：</p>
<p>使用Spring Boot整合SSM工程；需要使用到数据库数据。</p>
<ul>
<li><p>将数据库表数据导入到数据库中（springboot_test）；</p>
</li>
<li><p>编写数据库表对应的实体类；一般情况下需要编写get/set/toString等这些方法会耗时并且会让实体类看起来比较臃肿。可以使用lombok插件对实体类进行简化。</p>
<p>lombok是一个插件工具类包；提供了一些注解@Data、@Getter等这些注解去简化实体类中的构造方法、get/set等方法的编写。</p>
<ol>
<li>在IDEA中安装lombok插件；</li>
<li>添加lombok对应的依赖到项目pom.xml文件；</li>
<li>改造实体类使用lombok注解</li>
</ol>
</li>
</ul>
<p><strong>小结</strong>：</p>
<p>在Bean上使用：<br>@Data ：自动提供getter和setter、hashCode、equals、toString等方法<br>@Getter：自动提供getter方法<br>@Setter：自动提供setter方法<br>@Slf4j：自动在bean中提供log变量，其实用的是slf4j的日志功能。</p>
<h2 id="8-Spring-Boot整合-SpringMVC端口和静态资源"><a href="#8-Spring-Boot整合-SpringMVC端口和静态资源" class="headerlink" title="8. Spring Boot整合-SpringMVC端口和静态资源"></a>8. Spring Boot整合-SpringMVC端口和静态资源</h2><p><strong>目标</strong>：可以修改tomcat的端口和访问项目中的静态资源</p>
<p><strong>分析</strong>：</p>
<ul>
<li><p>修改tomcat端口</p>
<p>查询**Properties，设置配置项（前缀+类变量名）到application配置文件中</p>
</li>
<li><p>访问项目中的静态资源</p>
<p>静态资源放置的位置；放置静态资源并访问这些资源</p>
</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>修改项目tomcat端口：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#tomcat端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在spring boot项目中静态资源可以放置在如下目录：</p>
<p><img src="/2019/11/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191117SpringBoot/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/07.springboot/%E7%AC%94%E8%AE%B0/assets/1560096384799.png" alt="1560096384799"> </p>
</li>
</ul>
<h2 id="9-Spring-Boot整合-SpringMVC拦截器"><a href="#9-Spring-Boot整合-SpringMVC拦截器" class="headerlink" title="9.Spring Boot整合-SpringMVC拦截器"></a>9.Spring Boot整合-SpringMVC拦截器</h2><p><strong>目标</strong>：可以在Spring Boot项目中配置自定义SpringMVC拦截器</p>
<p><strong>分析</strong>：</p>
<ol>
<li>编写拦截器（实现HandlerInterceptor）；</li>
<li>编写配置类实现 WebMvcConfigurer，在该类中添加各种组件；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>可以在spring boot项目中通过配置类添加各种组件；如果要添加拦截器的话：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.interceptor.MyInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册拦截器</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyInterceptor <span class="title">myInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器到spring mvc拦截器链</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor()).addPathPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="10-Spring-Boot整合-事务和连接池"><a href="#10-Spring-Boot整合-事务和连接池" class="headerlink" title="10. Spring Boot整合-事务和连接池"></a>10. Spring Boot整合-事务和连接池</h2><p><strong>目标</strong>：配置Spring Boot自带默认的hikari数据库连接池和使用@Transactional注解进行事务配置</p>
<p><strong>分析</strong>：</p>
<ul>
<li><p>事务配置</p>
<ol>
<li>添加事务相关的启动器依赖，mysql相关依赖；</li>
<li>编写业务类UserService使用事务注解@Transactional</li>
</ol>
</li>
<li><p>数据库连接池hikari配置</p>
<p>只需要在application配置文件中指定数据库相关参数</p>
</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>事务配置；只需要添加jdbc启动器依赖</li>
<li>数据库连接池使用默认的hikari，在配置文件中配置如下：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/springboot_test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="11-Spring-Boot整合-Mybatis"><a href="#11-Spring-Boot整合-Mybatis" class="headerlink" title="11. Spring Boot整合-Mybatis"></a>11. Spring Boot整合-Mybatis</h2><p><strong>目标</strong>：配置Mybatis在Spring Boot工程中的整合包，设置mybatis的实体类别名，输出执行sql语句配置项</p>
<p><strong>分析</strong>：</p>
<ol>
<li>添加启动器依赖；</li>
<li>配置Mybatis：实体类别名包，日志，映射文件等；</li>
<li>配置MapperScan</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li><p>添加mybatis官方对于spring boot的一个启动器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>配置mybatis</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># 实体类别名包路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.pojo</span></span><br><span class="line">  <span class="comment"># 映射文件路径</span></span><br><span class="line">  <span class="comment"># mapper-locations: classpath:mappers/*.xml</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>设置启动器类中的mapper扫描</p>
<p><img src="/2019/11/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191117SpringBoot/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/07.springboot/%E7%AC%94%E8%AE%B0/assets/1560178298122.png" alt="1560178298122"> </p>
</li>
</ul>
<h2 id="12-Spring-Boot整合-通用Mapper"><a href="#12-Spring-Boot整合-通用Mapper" class="headerlink" title="12. Spring Boot整合-通用Mapper"></a>12. Spring Boot整合-通用Mapper</h2><p><strong>目标</strong>：配置通用Mapper组件到Spring Boot项目中并使用Mapper<T>接口</T></p>
<p><strong>分析</strong>：</p>
<p>通用Mapper：可以实现自动拼接sql语句；所有的mapper都不需要编写任何方法也就是不用编写sql语句。可以提高开发效率。</p>
<ol>
<li>添加启动器依赖；</li>
<li>改造UserMapper继承Mapper<User>；</User></li>
<li>修改启动引导类Application中的Mapper扫描注解；</li>
<li>修改User实体类添加jpa注解；</li>
<li>改造UserService实现业务功能；</li>
</ol>
<p><strong>小结</strong>：</p>
<blockquote>
<p>在启动引导类上面的mapper扫描注解 一定要修改为 通用mapper的扫描注解</p>
</blockquote>
<h2 id="13-Spring-Boot整合测试"><a href="#13-Spring-Boot整合测试" class="headerlink" title="13. Spring Boot整合测试"></a>13. Spring Boot整合测试</h2><p><strong>目标</strong>：可以访问处理器对应路径将数据库中的数据根据id查询</p>
<p><strong>分析</strong>：</p>
<ol>
<li>改造HelloController，注入UserService利用其方法实现查询；</li>
<li>启动项目进行测试 <a href="http://localhost/user/%E7%94%A8%E6%88%B7id">http://localhost/user/用户id</a> –&gt; <a href="http://localhost/user/8">http://localhost/user/8</a></li>
</ol>
<p><strong>小结</strong>：</p>
<p>修改了HelloController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户id查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.queryById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="14-Spring-Boot整合-Junit"><a href="#14-Spring-Boot整合-Junit" class="headerlink" title="14. Spring Boot整合-Junit"></a>14. Spring Boot整合-Junit</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit进行单元测试UserService的方法</p>
<p><strong>分析</strong>：</p>
<ol>
<li>添加启动器依赖spring-boot-starter-test；</li>
<li>编写测试类</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userService.queryById(<span class="number">8L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">13</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        user.setSex(<span class="number">1</span>);</span><br><span class="line">        user.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在Spring Boot项目中如果编写测试类则必须要在类上面添加@SpringBootTest</p>
</blockquote>
<h2 id="15-Spring-Boot整合-redis"><a href="#15-Spring-Boot整合-redis" class="headerlink" title="15. Spring Boot整合-redis"></a>15. Spring Boot整合-redis</h2><p><strong>目标</strong>：在Spring Boot项目中使用Junit测试RedisTemplate的使用</p>
<p><strong>分析</strong>：</p>
<ol>
<li>添加启动器依赖；spring-boot-starter-data-redis</li>
<li>配置application.yml中修改redis的连接参数；（redis需要启动）</li>
<li>编写测试类应用RedisTemplate操作redis中的5种数据类型（string/hash/list/set/sorted set）</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//string 字符串</span></span><br><span class="line">        <span class="comment">//redisTemplate.opsForValue().set(&quot;str&quot;, &quot;heima&quot;);</span></span><br><span class="line">        redisTemplate.boundValueOps(<span class="string">&quot;str&quot;</span>).set(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;str = &quot;</span> + redisTemplate.opsForValue().get(<span class="string">&quot;str&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hash 散列</span></span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">&quot;h_key&quot;</span>).put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        redisTemplate.boundHashOps(<span class="string">&quot;h_key&quot;</span>).put(<span class="string">&quot;age&quot;</span>, <span class="number">13</span>);</span><br><span class="line">        <span class="comment">//获取所有域</span></span><br><span class="line">        Set set = redisTemplate.boundHashOps(<span class="string">&quot;h_key&quot;</span>).keys();</span><br><span class="line">        System.out.println(<span class="string">&quot; hash散列的所有域：&quot;</span> + set);</span><br><span class="line">        <span class="comment">//获取所有值</span></span><br><span class="line">        List list = redisTemplate.boundHashOps(<span class="string">&quot;h_key&quot;</span>).values();</span><br><span class="line">        System.out.println(<span class="string">&quot; hash散列的所有域的值：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list 列表</span></span><br><span class="line">        redisTemplate.boundListOps(<span class="string">&quot;l_key&quot;</span>).leftPush(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">&quot;l_key&quot;</span>).leftPush(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        redisTemplate.boundListOps(<span class="string">&quot;l_key&quot;</span>).leftPush(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//获取全部元素</span></span><br><span class="line">        list = redisTemplate.boundListOps(<span class="string">&quot;l_key&quot;</span>).range(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; list列表中的所有元素：&quot;</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set 集合</span></span><br><span class="line">        redisTemplate.boundSetOps(<span class="string">&quot;s_key&quot;</span>).add(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        set = redisTemplate.boundSetOps(<span class="string">&quot;s_key&quot;</span>).members();</span><br><span class="line">        System.out.println(<span class="string">&quot; set集合中的所有元素：&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sorted set 有序集合</span></span><br><span class="line">        redisTemplate.boundZSetOps(<span class="string">&quot;z_key&quot;</span>).add(<span class="string">&quot;a&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        redisTemplate.boundZSetOps(<span class="string">&quot;z_key&quot;</span>).add(<span class="string">&quot;b&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        redisTemplate.boundZSetOps(<span class="string">&quot;z_key&quot;</span>).add(<span class="string">&quot;c&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        set = redisTemplate.boundZSetOps(<span class="string">&quot;z_key&quot;</span>).range(<span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot; zset有序集合中的所有元素：&quot;</span> + set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="16-Spring-Boot项目部署"><a href="#16-Spring-Boot项目部署" class="headerlink" title="16. Spring Boot项目部署"></a>16. Spring Boot项目部署</h2><p><strong>目标</strong>：将Spring Boot项目使用maven指令打成jar包并运行测试</p>
<p><strong>分析</strong>：</p>
<ol>
<li>需要添加打包组件将项目中的资源、配置、依赖包打到一个jar包中；可以使用maven的<code>package</code>；</li>
<li>部署：java -jar 包名</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li><p>添加打包组件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>部署运行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -jar 包名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2019/12/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191203Docker/</url>
    <content><![CDATA[<h2 id="1-Docker概述"><a href="#1-Docker概述" class="headerlink" title="1. Docker概述"></a>1. Docker概述</h2><p><strong>目标</strong>：了解Docker是什么、应用场景及其组成部分</p>
<p><strong>小结</strong>：</p>
<ul>
<li><p>Docker是一个应用容器引起；</p>
</li>
<li><p>应用场景：web的自动化打包发布，自动化测试、可持续集成，安装各种组件；</p>
</li>
<li><p>与传统虚拟机比较：docker启动速度比较快，占用体积较小；</p>
</li>
<li><p>组成：docker守护进程，仓库，镜像，容器，docker客户端</p>
<a id="more"></a>

</li>
</ul>
<h2 id="2-Docker安装与启动"><a href="#2-Docker安装与启动" class="headerlink" title="2. Docker安装与启动"></a>2. Docker安装与启动</h2><p><strong>目标</strong>：在线安装docker并使用命令启动、停止docker</p>
<p><strong>分析</strong>：</p>
<ol>
<li>更新yum源为ustc；</li>
<li>安装docker;</li>
<li>更新docker的镜像源为ustc；</li>
<li>使用docker命令操作docker</li>
</ol>
<p><strong>小结</strong>：</p>
<p>需求更新yum源和镜像源安装docker；安装之后可以使用 <code>docker -v</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker启动状态</span></span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>



<h2 id="3-镜像相关命令"><a href="#3-镜像相关命令" class="headerlink" title="3. 镜像相关命令"></a>3. 镜像相关命令</h2><p><strong>目标</strong>：能够使用镜像的查看、搜索、拉取、删除命令</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">拉取：docker pull 镜像名称:版本号（若不指定则会拉取最新的版本）</span><br><span class="line"></span><br><span class="line">删除全部镜像：docker rmi &#96;docker images -q&#96; （慎用）</span><br></pre></td></tr></table></figure>



<h2 id="4-查看-amp-创建并启动交互式容器"><a href="#4-查看-amp-创建并启动交互式容器" class="headerlink" title="4. 查看&amp;创建并启动交互式容器"></a>4. 查看&amp;创建并启动交互式容器</h2><p><strong>目标</strong>：使用查看容器命令；拉取centos:7的镜像之后结合容器启动命令和选项 -it 启动交互式容器</p>
<p><strong>分析</strong>：</p>
<ol>
<li>拉取镜像（容器是基于镜像运行）；</li>
<li>创建并启动交互式容器，docker交互式容器（启动容器之后会直接进入容器的命令行终端，如果退出则容器停止运行）</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并启动交互式容器</span></span><br><span class="line">docker run -it --name=mycentos7 centos:7 /bin/bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动交互式容器之后是直接进入容器终端；可以查看容器的文件结构；使用exit命令则会退出终端并且停止容器。</p>
</blockquote>
<h2 id="5-创建并启动守护式容器"><a href="#5-创建并启动守护式容器" class="headerlink" title="5. 创建并启动守护式容器"></a>5. 创建并启动守护式容器</h2><p><strong>目标</strong>：结合容器启动命令和选项 -di 启动守护式容器</p>
<p><strong>分析</strong>：</p>
<p>创建并启动docker容器，可以在后台运行；</p>
<p>在创建交互式容器之后如果退出的话，容器处于停止状态，可以使用命令再次启动容器，使用命令进入容器并操作。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建并启动守护式容器</span></span><br><span class="line">docker run -di --name=mycentos2 centos:7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器后再进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos2 /bin/bash</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<blockquote>
<p>守护式容器在启动之后会一直在后台运行，即使进入容器之后执行exit命令也不会停止容器；</p>
<p>适用于需要长期运行容器的情况</p>
</blockquote>
<h2 id="6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器"><a href="#6-停止-amp-拷贝-amp-挂载-amp-查看ip-amp-删除容器" class="headerlink" title="6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器"></a>6. 停止&amp;拷贝&amp;挂载&amp;查看ip&amp;删除容器</h2><p><strong>目标</strong>：能够使用容器的停止、拷贝文件、目录挂载、查看IP、删除命令</p>
<p><strong>小结</strong>：</p>
<ul>
<li><p>容器停止、启动</p>
</li>
<li><p>拷贝文件：容器与宿主机之间的文件互拷</p>
</li>
<li><p>目录挂载：将宿主机的目录映射到容器对于目录</p>
</li>
<li><p>查看容器IP</p>
<p><img src="/2019/12/03/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191203Docker/1.png"></p>
</li>
<li><p>容器删除：只能删除停止状态的容器；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm &#96;docker ps -a -q&#96;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="7-MySQL容器部署"><a href="#7-MySQL容器部署" class="headerlink" title="7. MySQL容器部署"></a>7. MySQL容器部署</h2><p><strong>目标</strong>：拉取mysql镜像，启动容器，操作容器中的mysql</p>
<p><strong>分析</strong>：</p>
<ol>
<li><p>拉取mysql镜像；</p>
</li>
<li><p>创建并启动守护式容器；</p>
</li>
<li><p>在容器中操作mysql；</p>
</li>
<li><p>使用图形界面工具（windows）操作在docker中安装的mysql；在创建mysql容器的时候使用-p指定端口映射实现连接</p>
<p>在创建容器的时候mysql的root用户可以指定远程访问的密码。</p>
</li>
</ol>
<p><strong>小结</strong>：</p>
<blockquote>
<p>在创建容器的时候指定环境变量MYSQL_ROOT_PASSWORD表示使用root进行远程连接时候的密码。如果需要进行远程连接的话可以使用-p进行端口映射。</p>
</blockquote>
<h2 id="8-Tomcat容器部署"><a href="#8-Tomcat容器部署" class="headerlink" title="8. Tomcat容器部署"></a>8. Tomcat容器部署</h2><p><strong>目标</strong>：拉取tomcat镜像，启动容器，操作容器中的tomcat</p>
<p><strong>分析</strong>：</p>
<ul>
<li><p>将项目文件上传到容器中的tomcat目录（webapps）</p>
<p>创建容器的时候可以指定-v进行目录挂载，tomcat在容器中的目录（/usr/local/tomcat/webapps）</p>
</li>
<li><p>可以通过外部浏览器访问容器中的项目</p>
<p>创建容器的时候可以指定-p进行端口映射</p>
</li>
</ul>
<ol>
<li>拉取tomcat镜像；<code>docker pull tomcat</code></li>
<li>创建并启动tomcat容器；</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -di --name=mytomcat -p 9000:8080 -v /usr/<span class="built_in">local</span>/tomcat/webapps:/usr/<span class="built_in">local</span>/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><p>访问容器中tomcat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;192.168.76.128:9000</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p><strong>小结</strong>：</p>
<blockquote>
<p>上传项目文件可以使用容器的目录挂载功能，外部访问可以使用端口映射</p>
</blockquote>
<h2 id="9-Nginx容器部署"><a href="#9-Nginx容器部署" class="headerlink" title="9. Nginx容器部署"></a>9. Nginx容器部署</h2><p><strong>目标</strong>：拉取nginx镜像，启动容器，访问nginx</p>
<p><strong>分析</strong>：</p>
<p>nginx的默认访问端口是：80</p>
<p>在创建容器的时候需要进行端口映射，指定-p，映射的端口80</p>
<ol>
<li>拉取nginx镜像；</li>
<li>创建并启动nginx容器；</li>
<li>在浏览器上访问容器中nginx，<a href="http://192.168.76.128/">http://192.168.76.128</a></li>
</ol>
<p><strong>小结</strong>：</p>
<blockquote>
<p>如果被占用了80端口，那么在指定映射的时候可以改变宿主机的端口映射，在访问时也需要带上端口号。</p>
</blockquote>
<h2 id="10-Redis容器部署"><a href="#10-Redis容器部署" class="headerlink" title="10. Redis容器部署"></a>10. Redis容器部署</h2><p><strong>目标</strong>：拉取redis镜像，启动容器，操作容器中的redis</p>
<p><strong>分析</strong>：</p>
<ol>
<li>拉取redis镜像；</li>
<li>创建并启动redis容器；默认端口是6379，如果需要外部访问则可以使用端口映射；</li>
<li>连接redis: ①使用命令行客户端 ②使用图形界面工具</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建容器</span></span><br><span class="line">docker run -di --name=myredis -p 6379:6379 redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it myredis /bin/bash</span><br></pre></td></tr></table></figure>

<h2 id="11-docker-compose简介-amp-安装"><a href="#11-docker-compose简介-amp-安装" class="headerlink" title="11. docker-compose简介&amp;安装"></a>11. docker-compose简介&amp;安装</h2><p><strong>目标</strong>：docker-compose的作用；能够安装docker-compose</p>
<p><strong>小结</strong>：</p>
<p>docker-compose是一个应用工具；可以通过配置docker-compose.yml文件同时启动多个容器。</p>
<blockquote>
<p>部署项目时可以编写一个docker-compose.yml文件作为启动项目单位，同时启动项目相关的那些容器。</p>
</blockquote>
<h2 id="12-docker-compose应用"><a href="#12-docker-compose应用" class="headerlink" title="12. docker-compose应用"></a>12. docker-compose应用</h2><p><strong>目标</strong>：编写模版文件同时启动docker容器</p>
<p><strong>分析</strong>：</p>
<p>docker-compose可以实现一次启动多个容器；通过配置docker-compose模板文件（docker-compose.yml）,在这个配置文件中去配置各个容器及其相关的依赖。</p>
<ol>
<li>编写模板文件；</li>
<li>创建并启动docker-compose项目（模板文件所在的目录，docker-compose.yml）</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>docker-compose可以配置一个模板文件实现一次可以启动多个容器，运行时候可以执行一个up则会创建并启动模板文件中的各个服务。</p>
<blockquote>
<p>模板文件是yml格式的；编写的时候需要注意其格式。</p>
</blockquote>
<h2 id="13-迁移与备份"><a href="#13-迁移与备份" class="headerlink" title="13. 迁移与备份"></a>13. 迁移与备份</h2><p><strong>目标</strong>：能够将容器保存为镜像，备份，恢复镜像再启动以恢复的镜像作为基础的容器</p>
<p><strong>分析</strong>：</p>
<p>在当前的容器中安装了各种组件；期望在其他服务器上也能快速拥有该容器的一切环境；可以将当前的容器制作为一个镜像，再将该奖项复制到其他服务器，其他服务器再基于镜像运行容器。</p>
<ol>
<li>将容器保存为一个镜像；</li>
<li>备份镜像；</li>
<li>恢复镜像；</li>
<li>基于镜像运行容器</li>
</ol>
<p><strong>小结</strong>：</p>
<p>docker容器可以保存为一个镜像；备份为一个镜像包（*.tar）可以复制迁移到其他服务器，再恢复该tar包中的镜像，基于镜像运行容器实现环境的一致。</p>
<h2 id="14-使用Dockerfile创建镜像"><a href="#14-使用Dockerfile创建镜像" class="headerlink" title="14. 使用Dockerfile创建镜像"></a>14. 使用Dockerfile创建镜像</h2><p><strong>目标</strong>：使用Dockerfile创建一个自定义jdk1.8的镜像</p>
<p><strong>分析</strong>：</p>
<p>假设在centos7作为基础镜像上；添加jdk1.8并构建一个包含jdk1.8的centos7新镜像。</p>
<p>– Dockerfile可以实现；Dockerfile是由一系列命令和参数构成的文本文件，在文件中可以指定各个组件资源和运行命令等。</p>
<p>实现步骤：</p>
<ol>
<li>拉取centos7镜像；</li>
<li>上传jdk1.8；</li>
<li>编写Dockerfile文件；</li>
<li>构建镜像；</li>
<li>测试（基于新镜像创建并运行容器，运行java -version）</li>
</ol>
<p><strong>小结</strong>：</p>
<p>Dockerfile可以基于镜像制作镜像；<code>docker build -t=&#39;jdk1.8&#39; . </code></p>
<h2 id="15-私有仓库搭建与配置"><a href="#15-私有仓库搭建与配置" class="headerlink" title="15. 私有仓库搭建与配置"></a>15. 私有仓库搭建与配置</h2><p><strong>目标</strong>：拉取、启动私有仓库镜像并可以访问私有仓库</p>
<p><strong>小结</strong>：</p>
<p>拉取registry镜像；基于镜像创建私有仓库容器；需要去修改docker的一个配置文件指定私有仓库地址；再访问私有仓库：<a href="http://ip:5000/v2/_catalog">http://ip:5000/v2/_catalog</a></p>
<h2 id="16-将镜像上传至私有仓库"><a href="#16-将镜像上传至私有仓库" class="headerlink" title="16. 将镜像上传至私有仓库"></a>16. 将镜像上传至私有仓库</h2><p><strong>目标</strong>：将制作的jdk1.8的镜像上传到私有仓库</p>
<p><strong>小结</strong>：</p>
<p>将本地镜像打标签（标记本地镜像为一个私有仓库中的镜像）；将打了标签的镜像推送到私有仓库。</p>
<h2 id="17-从私有仓库拉取镜像"><a href="#17-从私有仓库拉取镜像" class="headerlink" title="17. 从私有仓库拉取镜像"></a>17. 从私有仓库拉取镜像</h2><p><strong>目标</strong>：将私有仓库中的jdk1.8镜像拉取到本地</p>
<p><strong>小结</strong>：</p>
<ul>
<li>私有仓库与拉取镜像的服务器是在同一台机器上：直接拉取镜像； <code>docker pull 私有仓库地址/镜像名称</code></li>
<li>私有仓库与拉取镜像的服务器是不在同一台机器上：需要去修改docker的配置文件，指定私有仓库地址；再执行拉取镜像的命令。</li>
</ul>
<blockquote>
<p>如果本地存在同名的镜像需要先删除镜像后拉取</p>
</blockquote>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>黑阀使用方法</title>
    <url>/2019/10/23/Server/Android/191023%E9%BB%91%E9%98%80%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>&emsp;&emsp;手机安装“黑阀”APP，电脑下载并解压ADB工具。<br>ADB下载地址:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developer.android.google.cn&#x2F;studio&#x2F;releases&#x2F;platform-tools#downloads</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;手机点击向导,在“使用”项目卡中点击“进入黑域”按钮,“开发者选项”打开手机的“USB调试”，手机会弹出一个小窗口点击“允许”按钮即可。</p>
<a id="more"></a>

<h3 id="2-查看命令"><a href="#2-查看命令" class="headerlink" title="2.查看命令"></a>2.查看命令</h3><p>&emsp;&emsp;打开电脑中ADB文件目录（进入platform-tools），在空白处按着键盘上的“shift键”然后点击鼠标的右键,点击“在此处打开命令窗口”项目,在弹出的命令窗口中输入下边命令，查看我们已经连接到电脑的手机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“.\adb devices”</span><br></pre></td></tr></table></figure>

<h3 id="3-授权命令"><a href="#3-授权命令" class="headerlink" title="3.授权命令"></a>3.授权命令</h3><p>&emsp;&emsp;待我们的设备列举出来后，输入下边命令,从而完成我们对黑域手机端的授权。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“.\adb -d shell sh &#x2F;data&#x2F;data&#x2F;me.piebridge.brevent&#x2F;brevent.sh”</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Server</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>黑阀</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建个人VPN</title>
    <url>/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/</url>
    <content><![CDATA[<p>如何搭建属于自己的SS服务</p>
<h3 id="1-准备"><a href="#1-准备" class="headerlink" title="1.准备:"></a>1.准备:</h3><p>&emsp;&emsp;首先要有自己的服务器(国外的),谷歌有免费使用一年活动,不限时间</p>
<a id="more"></a>

<h3 id="2-搭建"><a href="#2-搭建" class="headerlink" title="2.搭建"></a>2.搭建</h3><p>&emsp;&emsp;在VM实例页面，找到创建好的实例，点击后面的SSH，远程连接到该VPS服务器上。可以理解为在公司远程控制家里的电脑，只不过这里控制的是你的VPS服务器。</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/1.SSH%E8%BF%9E%E6%8E%A5.png" alt="SSH连接"></p>
<p>&emsp;&emsp;SSH连接成功后，依次输入下面命令：</p>
<h5 id="1-获取管理员权限"><a href="#1-获取管理员权限" class="headerlink" title="1.获取管理员权限"></a>1.获取管理员权限</h5><p><code>sudo -i</code>  </p>
<h5 id="2-安装SS服务"><a href="#2-安装SS服务" class="headerlink" title="2.安装SS服务"></a>2.安装SS服务</h5><p><code>wget --no-check-certificatehttps://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh </code>  </p>
<h5 id="3-对SS进行配置"><a href="#3-对SS进行配置" class="headerlink" title="3.对SS进行配置"></a>3.对SS进行配置</h5><p><code>./shadowsocksR.sh</code>　</p>
<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><p>&emsp;&emsp;执行完步骤2中命令后，会进入下面的配置界面,提示的是设置SS密码，输入后回车；(输入密码的时候不显示,不是没输进去,只是不显示,默认密码为teddysun.com)</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/2.%E8%AE%BE%E7%BD%AE%E5%AF%86%E7%A0%81.png" alt="设置密码"></p>
<p>&emsp;&emsp;然后是设置SS端口，输入一个1-65536之间的数字后回车，我这里输入8080；(默认为9895)</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/3.%E7%AB%AF%E5%8F%A3.png" alt="端口"></p>
<p>&emsp;&emsp;加密方式选择aes-256-cfb,输入方式前的序号即可</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/4.%E9%80%89%E6%8B%A9%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F.png" alt="选择加密方式"></p>
<p>&emsp;&emsp;剩下的其他配置一直按回车(选择默认方式)就行，直到出现下图所示账号信息就安装成功了,这个过程大概需要2分钟。</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/5.%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F.png" alt="搭建成功"></p>
<p>账号信息中需要用到的有:</p>
<p>IP</p>
<p>Port(端口)</p>
<p>Password(密码)</p>
<p>Encryption Method(加密方式)</p>
<h3 id="4-防火墙设置"><a href="#4-防火墙设置" class="headerlink" title="4.防火墙设置"></a>4.防火墙设置</h3><p>　　由于防火墙的原因，现在你肯定还是连接不上去的，这里就需要设置防火墙。Debian 9的默认防火墙是允许所有端口访问的，但是它上面还有一层谷歌云的防火墙(阿里云管这个叫安全组),所以我们需要设置谷歌云的防火墙。在左侧菜单依次点击“VPC网络–防火墙规则”。</p>
<p>&emsp;&emsp;进到防火墙规则页面，点击“创建防火墙规则”。设置防火墙规则时，有几个地方需要注意，目标修改为“网络中所有实例”，来源IP地址范围填写“0.0.0.0/0”，协议和端口勾选“指定的协议和端口”。勾选tcp,填入自己在第3步中设置的端口号,我设置的是8080,填入之后点击”创建”,防火墙设置就完成了。</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/6.%E9%98%B2%E7%81%AB%E5%A2%99%E8%A7%84%E5%88%99.png" alt="防火墙规则"></p>
<h3 id="5-配置Shadowsocks"><a href="#5-配置Shadowsocks" class="headerlink" title="5.配置Shadowsocks"></a>5.配置Shadowsocks</h3><p>&emsp;&emsp;最后在Shadowsocks客户端中配置自己的信息就可以开心的玩耍了</p>
<p><img src="/2019/11/10/Server/VPS/191110%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAVPN/7.SS.png" alt="SS"></p>
]]></content>
      <categories>
        <category>Server</category>
        <category>VPS</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS7设置防火墙</title>
    <url>/2019/10/26/Server/Linux/191026CentOS7%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    <content><![CDATA[<h4 id="1-查看防火墙的状态的命令为："><a href="#1-查看防火墙的状态的命令为：" class="headerlink" title="1.查看防火墙的状态的命令为："></a>1.查看防火墙的状态的命令为：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl status firewalld</span><br></pre></td></tr></table></figure>

<h4 id="2-打开防火墙的方式有两种"><a href="#2-打开防火墙的方式有两种" class="headerlink" title="2.打开防火墙的方式有两种:"></a>2.打开防火墙的方式有两种:</h4><h6 id="一种是打开后重启会恢复回原来的状态，命令为："><a href="#一种是打开后重启会恢复回原来的状态，命令为：" class="headerlink" title="一种是打开后重启会恢复回原来的状态，命令为："></a>一种是打开后重启会恢复回原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl start firewalld；</span><br></pre></td></tr></table></figure>

<h6 id="另一种是打开后重启不会恢复到原来的状态，命令为："><a href="#另一种是打开后重启不会恢复到原来的状态，命令为：" class="headerlink" title="另一种是打开后重启不会恢复到原来的状态，命令为："></a>另一种是打开后重启不会恢复到原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable firewalld;</span><br></pre></td></tr></table></figure>

<p>这种方式输入命令后要重启系统才会生效。</p>
<a id="more"></a>

<h4 id="3-关闭防火墙的方式也有两种"><a href="#3-关闭防火墙的方式也有两种" class="headerlink" title="3.关闭防火墙的方式也有两种:"></a>3.关闭防火墙的方式也有两种:</h4><h6 id="一种是打开后重启会恢复回原来的状态，命令为：-1"><a href="#一种是打开后重启会恢复回原来的状态，命令为：-1" class="headerlink" title="一种是打开后重启会恢复回原来的状态，命令为："></a>一种是打开后重启会恢复回原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl stop firewalld;</span><br></pre></td></tr></table></figure>

<h6 id="另一种是打开后重启不会恢复到原来的状态，命令为：-1"><a href="#另一种是打开后重启不会恢复到原来的状态，命令为：-1" class="headerlink" title="另一种是打开后重启不会恢复到原来的状态，命令为："></a>另一种是打开后重启不会恢复到原来的状态，命令为：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo systemctl disable firewalld;</span><br></pre></td></tr></table></figure>

<p>这种方式输入命令后要重启系统才会生效。</p>
<h4 id="4-开启某个特定的端口"><a href="#4-开启某个特定的端口" class="headerlink" title="4.开启某个特定的端口:"></a>4.开启某个特定的端口:</h4><p>例如下边代码是开放80端口:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
        <category>CentOS7</category>
      </categories>
      <tags>
        <tag>Linux Firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian允许root用户登录</title>
    <url>/2019/11/11/Server/Linux/191111Debian%E5%85%81%E8%AE%B8root%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
        <category>Debian9</category>
      </categories>
  </entry>
  <entry>
    <title>Linux添加root权限</title>
    <url>/2019/11/16/Server/Linux/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h3 id="1-添加用户"><a href="#1-添加用户" class="headerlink" title="1.添加用户"></a>1.添加用户</h3><ul>
<li><p>使用adduser或者useradd添加一个名为ying的用户: <code>adduser ying</code></p>
</li>
<li><p>修改密码:输入 <code>passwd ying</code></p>
</li>
<li><p>会看到以下提示,按提示输入两次密码:</p>
<p>Changing password for user ying.<br>New UNIX password:     //在这里输入新密码<br>Retype new UNIX password:  //再次输入新密码</p>
<p>看到下边这行提示就说明添加成功了:</p>
<p>passwd: all authentication tokens updated successfully.</p>
<a id="more"></a>

</li>
</ul>
<h3 id="2-删除用户"><a href="#2-删除用户" class="headerlink" title="2.删除用户"></a>2.删除用户</h3><p><code>userdel -r ying</code></p>
<h3 id="3-给-ying赋予root权限"><a href="#3-给-ying赋予root权限" class="headerlink" title="3.给 ying赋予root权限"></a>3.给 ying赋予root权限</h3><h5 id="1-修改-etc-sudoers-文件，找到"><a href="#1-修改-etc-sudoers-文件，找到" class="headerlink" title="1.修改 /etc/sudoers 文件，找到:"></a>1.修改 /etc/sudoers 文件，找到:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Allow root to run any commands anywhere</span><br><span class="line"></span><br><span class="line">root    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure>

<h5 id="2-在下边添加"><a href="#2-在下边添加" class="headerlink" title="2.在下边添加:"></a>2.在下边添加:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ying    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/16/Server/Linux/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/root%E6%9D%83%E9%99%90.png"></p>
<h5 id="3-添加完之后按ESC-输入以下命令强制保存并退出"><a href="#3-添加完之后按ESC-输入以下命令强制保存并退出" class="headerlink" title="3.添加完之后按ESC,输入以下命令强制保存并退出"></a>3.添加完之后按ESC,输入以下命令<strong>强制保存</strong>并退出</h5><p><code>:wq!</code></p>
<p>必须<strong>强制</strong>保存退出,否则会报以下错误:</p>
<p><img src="/2019/11/16/Server/Linux/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/%E4%BF%9D%E5%AD%98%E9%80%80%E5%87%BA%E6%8A%A5%E9%94%99.png"></p>
<h5 id="4-输入sudo-i就可以切换到root角色"><a href="#4-输入sudo-i就可以切换到root角色" class="headerlink" title="4.输入sudo -i就可以切换到root角色"></a>4.输入<code>sudo -i</code>就可以切换到root角色</h5><p>查看自己所在组用以下命令: <code>id</code></p>
<p><img src="/2019/11/16/Server/Linux/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/id.png"></p>
<p>查看自己是否是管理员:whoami</p>
<p><img src="/2019/11/16/Server/Linux/191116Linux%E6%B7%BB%E5%8A%A0root%E6%9D%83%E9%99%90/whoami.png"></p>
]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu设置root用户登录</title>
    <url>/2019/12/02/Server/Linux/191202Ubuntu%E8%AE%BE%E7%BD%AEroot%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Server</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>方法</title>
    <url>/2019/08/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190805%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-方法概述"><a href="#1-方法概述" class="headerlink" title="1. 方法概述"></a>1. 方法概述</h2><p>​    方法（method）是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集</p>
<ul>
<li><p>注意：</p>
<ul>
<li>方法必须先创建才可以使用，该过程成为方法定义</li>
<li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li>
</ul>
<a id="more"></a>

</li>
</ul>
<h2 id="2-方法的定义和调用"><a href="#2-方法的定义和调用" class="headerlink" title="2. 方法的定义和调用"></a>2. 方法的定义和调用</h2><h3 id="2-1-无参数方法定义和调用"><a href="#2-1-无参数方法定义和调用" class="headerlink" title="2.1 无参数方法定义和调用"></a>2.1 无参数方法定义和调用</h3><ul>
<li><p>定义格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (   ) &#123;</span><br><span class="line">	<span class="comment">// 方法体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span> <span class="params">(    )</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 方法体;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名();</span><br></pre></td></tr></table></figure>
</li>
<li><p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">method();</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意：</p>
<p>​    方法必须先定义，后调用，否则程序将报错</p>
</li>
</ul>
<h3 id="2-2-方法调用过程图解"><a href="#2-2-方法调用过程图解" class="headerlink" title="2.2 方法调用过程图解"></a>2.2 方法调用过程图解</h3><p><img src="/2019/08/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190805%E6%96%B9%E6%B3%95/Java%E8%B5%84%E6%96%99/1.JavaSE/day05(%E6%96%B9%E6%B3%95)/%E7%AC%94%E8%AE%B0/img/%E6%97%A0%E5%8F%82%E6%95%B0%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E5%9B%BE%E8%A7%A3.png" alt="无参数方法调用图解"></p>
<ul>
<li>总结：每个方法在被调用执行的时候，都会进入栈内存，并且拥有自己独立的内存空间，方法内部代码调用完毕之后，会从栈内存中弹栈消失。</li>
</ul>
<h3 id="2-3-无参数方法的练习"><a href="#2-3-无参数方法的练习" class="headerlink" title="2.3 无参数方法的练习"></a>2.3 无参数方法的练习</h3><ul>
<li>需求：设计一个方法用于打印两个数中的较大数 </li>
<li>思路：<ul>
<li>①定义一个方法，用于打印两个数字中的较大数，例如getMax() </li>
<li>②方法中定义两个变量，用于保存两个数字 </li>
<li>③使用分支语句分两种情况对两个数字的大小关系进行处理 </li>
<li>④在main()方法中调用定义好的方法 </li>
</ul>
</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法</span></span><br><span class="line">        getMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于打印两个数字中的较大数，例如getMax()</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法中定义两个变量，用于保存两个数字</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-带参数方法定义和调用"><a href="#3-带参数方法定义和调用" class="headerlink" title="3. 带参数方法定义和调用"></a>3. 带参数方法定义和调用</h2><h3 id="3-1-带参数方法定义和调用"><a href="#3-1-带参数方法定义和调用" class="headerlink" title="3.1 带参数方法定义和调用"></a>3.1 带参数方法定义和调用</h3><ul>
<li><p>定义格式：</p>
<p>参数：由数据类型和变量名组成 -  数据类型 变量名</p>
<p>参数范例：int a</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>) &#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名 (参数<span class="number">1</span>, 参数<span class="number">2</span>, 参数<span class="number">3.</span>..) &#123;</span><br><span class="line">	方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<p>方法定义时，参数中的数据类型与变量名都不能缺少，缺少任意一个程序将报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法定义时，多个参数之间使用逗号( ，)分隔</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>调用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名(参数)；</span><br><span class="line"></span><br><span class="line">方法名(参数<span class="number">1</span>,参数<span class="number">2</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isEvenNumber(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">getMax(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序将报错 </li>
</ul>
</li>
</ul>
<h3 id="3-2-形参和实参"><a href="#3-2-形参和实参" class="headerlink" title="3.2 形参和实参"></a>3.2 形参和实参</h3><ol>
<li>形参：方法定义中的参数</li>
</ol>
<p>​          等同于变量定义格式，例如：int number</p>
<ol start="2">
<li>实参：方法调用中的参数</li>
</ol>
<p>​          等同于使用变量或常量，例如： 10  number</p>
<h3 id="3-3-带参数方法练习"><a href="#3-3-带参数方法练习" class="headerlink" title="3.3 带参数方法练习"></a>3.3 带参数方法练习</h3><ul>
<li>需求：设计一个方法用于打印两个数中的较大数，数据来自于方法参数 }</li>
<li>思路：<ul>
<li>①定义一个方法，用于打印两个数字中的较大数，例如getMax() </li>
<li>②为方法定义两个参数，用于接收两个数字 </li>
<li>③使用分支语句分两种情况对两个数字的大小关系进行处理 </li>
<li>④在main()方法中调用定义好的方法（使用常量）</li>
<li>⑤在main()方法中调用定义好的方法（使用变量） </li>
</ul>
</li>
<li>代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法（使用常量）</span></span><br><span class="line">        getMax(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//调用方法的时候，人家要几个，你就给几个，人家要什么类型的，你就给什么类型的</span></span><br><span class="line">        <span class="comment">//getMax(30);</span></span><br><span class="line">        <span class="comment">//getMax(10.0,20.0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法（使用变量）</span></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">        getMax(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于打印两个数字中的较大数，例如getMax()</span></span><br><span class="line">    <span class="comment">//为方法定义两个参数，用于接收两个数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-带返回值方法的定义和调用"><a href="#4-带返回值方法的定义和调用" class="headerlink" title="4. 带返回值方法的定义和调用"></a>4. 带返回值方法的定义和调用</h2><h3 id="4-1-带返回值方法定义和调用"><a href="#4-1-带返回值方法定义和调用" class="headerlink" title="4.1 带返回值方法定义和调用"></a>4.1 带返回值方法定义和调用</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名 ( 参数 ) &#123; </span><br><span class="line">	<span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEvenNumber</span><span class="params">( <span class="keyword">int</span> number )</span> </span>&#123;           </span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">( <span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>  <span class="number">100</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li>
</ul>
</li>
</ul>
</li>
<li><p>调用格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">方法名 ( 参数 ) ;</span><br><span class="line">数据类型 变量名 = 方法名 ( 参数 ) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isEvenNumber ( <span class="number">5</span> ) ;</span><br><span class="line"><span class="keyword">boolean</span>  flag =  isEvenNumber ( <span class="number">5</span> ); </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意：<ul>
<li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-带返回值方法练习"><a href="#4-2-带返回值方法练习" class="headerlink" title="4.2 带返回值方法练习"></a>4.2 带返回值方法练习</h3><ul>
<li><p>需求：设计一个方法可以获取两个数的较大值，数据来自于参数</p>
</li>
<li><p>思路：</p>
<ul>
<li>①定义一个方法，用于获取两个数字中的较大数 </li>
<li>②使用分支语句分两种情况对两个数字的大小关系进行处理 </li>
<li>③根据题设分别设置两种情况下对应的返回结果 </li>
<li>④在main()方法中调用定义好的方法并使用变量保存 </li>
<li>⑤在main()方法中调用定义好的方法并直接打印结果 </li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法并使用变量保存</span></span><br><span class="line">        <span class="keyword">int</span> result = getMax(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在main()方法中调用定义好的方法并直接打印结果</span></span><br><span class="line">        System.out.println(getMax(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于获取两个数字中的较大数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用分支语句分两种情况对两个数字的大小关系进行处理</span></span><br><span class="line">        <span class="comment">//根据题设分别设置两种情况下对应的返回结果</span></span><br><span class="line">        <span class="keyword">if</span>(a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5-方法的注意事项"><a href="#5-方法的注意事项" class="headerlink" title="5. 方法的注意事项"></a>5. 方法的注意事项</h2><h3 id="5-1-方法的注意事项"><a href="#5-1-方法的注意事项" class="headerlink" title="5.1 方法的注意事项"></a>5.1 方法的注意事项</h3><ul>
<li><p>方法不能嵌套定义</p>
<ul>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       		<span class="comment">// 这里会引发编译错误!!!</span></span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</p>
<ul>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return 100; 编译错误，因为没有具体返回值类型</span></span><br><span class="line">        <span class="keyword">return</span>;	</span><br><span class="line">        <span class="comment">//System.out.println(100); return语句后面不能跟数据或代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="5-2-方法的通用格式"><a href="#5-2-方法的通用格式" class="headerlink" title="5.2 方法的通用格式"></a>5.2 方法的通用格式</h3><ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数) &#123;</span><br><span class="line">   方法体; </span><br><span class="line">   <span class="keyword">return</span> 数据 ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>解释：</p>
<ul>
<li><p>public static     修饰符，目前先记住这个格式</p>
<p>返回值类型    方法操作完毕之后返回的数据的数据类型</p>
<p>​            如果方法操作完毕，没有数据返回，这里写void，而且方法体中一般不写return</p>
<p> 方法名        调用方法时候使用的标识</p>
<p> 参数        由数据类型和变量名组成，多个参数之间用逗号隔开</p>
<p> 方法体        完成功能的代码块</p>
<p> return        如果方法操作完毕，有数据返回，用于把数据返回给调用者</p>
</li>
</ul>
</li>
<li><p>定义方法时，要做到两个明确</p>
<ul>
<li>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有，写void；如果有，写对应的数据类型</li>
<li>明确参数：主要是明确参数的类型和数量</li>
</ul>
</li>
<li><p>调用方法时的注意：</p>
<ul>
<li>void类型的方法，直接调用即可</li>
<li>非void类型的方法，推荐用变量接收调用</li>
</ul>
</li>
</ul>
<h2 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6. 方法重载"></a>6. 方法重载</h2><h3 id="6-1-方法重载"><a href="#6-1-方法重载" class="headerlink" title="6.1 方法重载"></a>6.1 方法重载</h3><ul>
<li><p>方法重载概念</p>
<p>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</p>
<ul>
<li>多个方法在同一个类中</li>
<li>多个方法具有相同的方法名</li>
<li>多个方法的参数不相同，类型不同或者数量不同</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li>
<li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li>
</ul>
</li>
<li><p>正确范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>错误范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; 	<span class="comment">/*错误原因：重载与返回值无关*/</span></span><br><span class="line">    	<span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fn</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fn</span><span class="params">(<span class="keyword">double</span> a)</span> </span>&#123; <span class="comment">/*错误原因：这是两个类的两个fn方法*/</span></span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-2-方法重载练习"><a href="#6-2-方法重载练习" class="headerlink" title="6.2 方法重载练习"></a>6.2 方法重载练习</h3><ul>
<li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p>
</li>
<li><p>思路：</p>
<ul>
<li>①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</li>
<li>②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</li>
<li>③定义所有的重载方法，两个byte类型与两个short类型参数 </li>
<li>④完成方法的调用，测试运行结果 </li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        System.out.println(compare(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare((<span class="keyword">byte</span>) <span class="number">10</span>, (<span class="keyword">byte</span>) <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare((<span class="keyword">short</span>) <span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">20</span>));</span><br><span class="line">        System.out.println(compare(<span class="number">10L</span>, <span class="number">20L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//int</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byte</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">byte</span> a, <span class="keyword">byte</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;byte&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//short</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">short</span> a, <span class="keyword">short</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;short&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//long</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;long&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a == b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="7-方法的参数传递"><a href="#7-方法的参数传递" class="headerlink" title="7. 方法的参数传递"></a>7. 方法的参数传递</h2><h3 id="7-1-方法参数传递基本类型"><a href="#7-1-方法参数传递基本类型" class="headerlink" title="7.1 方法参数传递基本类型"></a>7.1 方法参数传递基本类型</h3><ul>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + number);</span><br><span class="line">        change(number);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        number = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>结论：</p>
<ul>
<li>基本数据类型的参数，形式参数的改变，不影响实际参数 </li>
</ul>
</li>
<li><p>结论依据：</p>
<ul>
<li><p>每个方法在栈内存中，都会有独立的栈空间，方法运行结束后就会弹栈消失</p>
<p><img src="/2019/08/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190805%E6%96%B9%E6%B3%95/Java%E8%B5%84%E6%96%99/1.JavaSE/day05(%E6%96%B9%E6%B3%95)/%E7%AC%94%E8%AE%B0/img/%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="方法传参-基本数据类型"></p>
</li>
</ul>
</li>
</ul>
<h3 id="7-2-方法参数传递引用类型"><a href="#7-2-方法参数传递引用类型" class="headerlink" title="7.2 方法参数传递引用类型"></a>7.2 方法参数传递引用类型</h3><ul>
<li><p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + arr[<span class="number">1</span>]);</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>结论：</p>
<ul>
<li>对于引用类型的参数，形式参数的改变，影响实际参数的值 </li>
</ul>
</li>
<li><p>结论依据：</p>
<ul>
<li><p>引用数据类型的传参，传入的是地址值，内存中会造成两个引用指向同一个内存的效果，所以即使方法弹栈，堆内存中的数据也已经是改变后的结果 </p>
<p><img src="/2019/08/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190805%E6%96%B9%E6%B3%95/Java%E8%B5%84%E6%96%99/1.JavaSE/day05(%E6%96%B9%E6%B3%95)/%E7%AC%94%E8%AE%B0/img/%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82-%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="方法传参-引用数据类型"></p>
</li>
</ul>
</li>
</ul>
<h3 id="7-3-数组遍历"><a href="#7-3-数组遍历" class="headerlink" title="7.3 数组遍历"></a>7.3 数组遍历</h3><ul>
<li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p>
</li>
<li><p>思路：</p>
<ul>
<li><p>①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p>
<p>System.out.println(“内容”); 输出内容并换行</p>
<p>System.out.print(“内容”); 输出内容不换行</p>
<p>System.out.println(); 起到换行的作用</p>
</li>
<li><p>②定义一个数组，用静态初始化完成数组元素初始化</p>
</li>
<li><p>③定义一个方法，用数组遍历通用格式对数组进行遍历</p>
</li>
<li><p>④用新的输出语句修改遍历操作</p>
</li>
<li><p>⑤调用遍历方法</p>
</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用数组遍历通用格式对数组进行遍历</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：void</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x == arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x]+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-4-数组最大值"><a href="#7-4-数组最大值" class="headerlink" title="7.4 数组最大值"></a>7.4 数组最大值</h3><ul>
<li><p>需求：设计一个方法用于获取数组中元素的最大值 </p>
</li>
<li><p>思路：</p>
<ul>
<li>①定义一个数组，用静态初始化完成数组元素初始化</li>
<li>②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了</li>
<li>③调用获取最大值方法，用变量接收返回结果</li>
<li>④把结果输出在控制台</li>
</ul>
</li>
<li><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">73</span>, <span class="number">60</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用获取最大值方法，用变量接收返回结果</span></span><br><span class="line">        <span class="keyword">int</span> number = getMax(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把结果输出在控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用来获取数组中的最大值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：int</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; max) &#123;</span><br><span class="line">                max = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Debug</title>
    <url>/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/</url>
    <content><![CDATA[<h2 id="1-Debug模式"><a href="#1-Debug模式" class="headerlink" title="1.Debug模式"></a>1.Debug模式</h2><h3 id="1-1什么是Debug模式【理解】"><a href="#1-1什么是Debug模式【理解】" class="headerlink" title="1.1什么是Debug模式【理解】"></a>1.1什么是Debug模式【理解】</h3><p>是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序。</p>
<a id="more"></a>

<h3 id="1-2Debug模式操作流程【应用】"><a href="#1-2Debug模式操作流程【应用】" class="headerlink" title="1.2Debug模式操作流程【应用】"></a>1.2Debug模式操作流程【应用】</h3><ul>
<li><p>如何加断点</p>
<ul>
<li>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/01.png" alt="01"></p>
</li>
<li><p>如何运行加了断点的程序</p>
<ul>
<li>在代码区域右键Debug执行</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/02.png" alt="02"></p>
</li>
<li><p>看哪里</p>
<ul>
<li>看Debugger窗口</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/03.png" alt="03"></p>
<ul>
<li>看Console窗口</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/04.png" alt="04"></p>
</li>
<li><p>点哪里</p>
<ul>
<li>点Step Into (F7)这个箭头，也可以直接按F7</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/05.png" alt="05"></p>
</li>
<li><p>如何删除断点</p>
<ul>
<li>选择要删除的断点，单击鼠标左键即可</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/06.png" alt="06"></p>
<ul>
<li>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除</li>
</ul>
<p><img src="/2019/08/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190806Debug/Java%E8%B5%84%E6%96%99/1.JavaSE/day06(Java%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0)/%E7%AC%94%E8%AE%B0/img/07.png" alt="07"></p>
</li>
</ul>
<h2 id="2-基础练习"><a href="#2-基础练习" class="headerlink" title="2.基础练习"></a>2.基础练习</h2><h3 id="2-1减肥计划if版本【应用】"><a href="#2-1减肥计划if版本【应用】" class="headerlink" title="2.1减肥计划if版本【应用】"></a>2.1减肥计划if版本【应用】</h3><h4 id="2-1-1案例需求"><a href="#2-1-1案例需求" class="headerlink" title="2.1.1案例需求"></a>2.1.1案例需求</h4><p>​    输入星期数，显示今天的减肥活动<br>​          周一：跑步<br>​          周二：游泳<br>​          周三：慢走<br>​          周四：动感单车<br>​          周五：拳击<br>​          周六：爬山<br>​          周日：好好吃一顿</p>
<h4 id="2-1-2代码实现"><a href="#2-1-2代码实现" class="headerlink" title="2.1.2代码实现"></a>2.1.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个星期数，用一个变量接收</span></span><br><span class="line"><span class="comment">        2:对星期数进行判断，这里用 if 语句实现</span></span><br><span class="line"><span class="comment">        3:在对应的语句控制中输出对应的减肥活动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个星期数，用一个变量接收</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个星期数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对星期数进行判断，这里用 if 语句实现</span></span><br><span class="line">        <span class="keyword">if</span> (week &lt; <span class="number">1</span> || week &gt; <span class="number">7</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的星期数有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">4</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">6</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2减肥计划switch版本【应用】"><a href="#2-2减肥计划switch版本【应用】" class="headerlink" title="2.2减肥计划switch版本【应用】"></a>2.2减肥计划switch版本【应用】</h3><h4 id="2-2-1案例需求"><a href="#2-2-1案例需求" class="headerlink" title="2.2.1案例需求"></a>2.2.1案例需求</h4><p>​    输入星期数，显示今天的减肥活动<br>​          周一：跑步<br>​          周二：游泳<br>​          周三：慢走<br>​          周四：动感单车<br>​          周五：拳击<br>​          周六：爬山<br>​          周日：好好吃一顿</p>
<h4 id="2-2-2代码实现"><a href="#2-2-2代码实现" class="headerlink" title="2.2.2代码实现"></a>2.2.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个星期数，用一个变量接收</span></span><br><span class="line"><span class="comment">        2:对星期数进行判断，这里用 switch 语句实现</span></span><br><span class="line"><span class="comment">        3:在对应的语句控制中输出对应的减肥活动</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    导包：</span></span><br><span class="line"><span class="comment">        1:手动导包  import java.util.Scanner;</span></span><br><span class="line"><span class="comment">        2:快捷键导包 Alt+Enter</span></span><br><span class="line"><span class="comment">        3:自动导包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个星期数，用一个变量接收</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个星期数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> week = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对星期数进行判断，这里用 switch 语句实现</span></span><br><span class="line">        <span class="keyword">switch</span> (week) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的星期数有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3逢七跳过【应用】"><a href="#2-3逢七跳过【应用】" class="headerlink" title="2.3逢七跳过【应用】"></a>2.3逢七跳过【应用】</h3><h4 id="2-3-1案例需求"><a href="#2-3-1案例需求" class="headerlink" title="2.3.1案例需求"></a>2.3.1案例需求</h4><p>​    朋友聚会的时候可能会玩一个游戏：逢七过。<br>​        规则是：从任意一个数字开始报数，当你要报的数字包含7或者是7的倍数时都要说：过。<br>​        为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印出1-100之间的满足逢七必过规则的数据。<br>​        这样，大家将来在玩游戏的时候，就知道哪些数据要说：过。    </p>
<h4 id="2-3-2代码实现"><a href="#2-3-2代码实现" class="headerlink" title="2.3.2代码实现"></a>2.3.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:数据在1-100之间，用for循环实现数据的获取</span></span><br><span class="line"><span class="comment">        2:根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除</span></span><br><span class="line"><span class="comment">        3:在控制台输出满足规则的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//数据在1-100之间，用for循环实现数据的获取</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;=<span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="comment">//根据规则，用if语句实现数据的判断：要么个位是7，要么十位是7，要么能够被7整除</span></span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">7</span> || x/<span class="number">10</span>%<span class="number">10</span>==<span class="number">7</span> || x%<span class="number">7</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//在控制台输出满足规则的数据</span></span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-4不死神兔【应用】"><a href="#2-4不死神兔【应用】" class="headerlink" title="2.4不死神兔【应用】"></a>2.4不死神兔【应用】</h3><h4 id="2-4-1案例需求"><a href="#2-4-1案例需求" class="headerlink" title="2.4.1案例需求"></a>2.4.1案例需求</h4><p>​    有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，<br>​        假如兔子都不死，问第二十个月的兔子对数为多少？    </p>
<h4 id="2-4-2代码实现"><a href="#2-4-2代码实现" class="headerlink" title="2.4.2代码实现"></a>2.4.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   思路：</span></span><br><span class="line"><span class="comment">        1:为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20</span></span><br><span class="line"><span class="comment">        2:因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1</span></span><br><span class="line"><span class="comment">        3:用循环实现计算每个月的兔子对数</span></span><br><span class="line"><span class="comment">        4:输出数组中最后一个元素的值，就是第20个月的兔子对数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//为了存储多个月的兔子对数，定义一个数组，用动态初始化完成数组元素的初始化，长度为20</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为第1个月，第2个月兔子的对数是已知的，都是1，所以数组的第1个元素，第2个元素值也都是1</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环实现计算每个月的兔子对数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">2</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            arr[x] = arr[x-<span class="number">2</span>] + arr[x-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出数组中最后一个元素的值，就是第20个月的兔子对数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二十个月兔子的对数是：&quot;</span> + arr[<span class="number">19</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-5百钱白鸡【应用】"><a href="#2-5百钱白鸡【应用】" class="headerlink" title="2.5百钱白鸡【应用】"></a>2.5百钱白鸡【应用】</h3><h4 id="2-5-1案例需求"><a href="#2-5-1案例需求" class="headerlink" title="2.5.1案例需求"></a>2.5.1案例需求</h4><p>​    我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。<br>​        百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</p>
<h4 id="2-5-2代码实现"><a href="#2-5-2代码实现" class="headerlink" title="2.5.2代码实现"></a>2.5.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20</span></span><br><span class="line"><span class="comment">        2:第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33</span></span><br><span class="line"><span class="comment">        3:这个时候，用于表示鸡雏的变量 z = 100 – x – y</span></span><br><span class="line"><span class="comment">        4:判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立，如果成立，输出对应的 x，y，z 的值，就是对应的鸡翁，鸡母，鸡雏的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第1层循环，用于表示鸡翁的范围，初始化表达式的变量定义为 x=0，判断条件是x&lt;=20</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;=<span class="number">20</span>; x++) &#123;</span><br><span class="line">            <span class="comment">//第2层循环，用于表示鸡母的范围，初始化表达式的变量定义为 y=0，判断条件是y&lt;=33</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">0</span>; y&lt;=<span class="number">33</span>; y++) &#123;</span><br><span class="line">                <span class="comment">//这个时候，用于表示鸡雏的变量 z = 100 – x – y</span></span><br><span class="line">                <span class="keyword">int</span> z = <span class="number">100</span> - x - y;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断表达式 z%3==0 和表达式 5*x + 3*y + z/3 = 100 是否同时成立</span></span><br><span class="line">                <span class="keyword">if</span>(z%<span class="number">3</span>==<span class="number">0</span> &amp;&amp; <span class="number">5</span>*x+<span class="number">3</span>*y+z/<span class="number">3</span>==<span class="number">100</span>) &#123;</span><br><span class="line">                    System.out.println(x+<span class="string">&quot;,&quot;</span>+y+<span class="string">&quot;,&quot;</span>+z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-6数组元素求和【应用】"><a href="#2-6数组元素求和【应用】" class="headerlink" title="2.6数组元素求和【应用】"></a>2.6数组元素求和【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>​    有这样的一个数组，元素是{68,27,95,88,171,996,51,210}。求出该数组中满足要求的元素和，<br>​        要求是：求和的元素个位和十位都不能是7，并且只能是偶数</p>
<h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   思路：</span></span><br><span class="line"><span class="comment">        1:定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:定义一个求和变量，初始值是0</span></span><br><span class="line"><span class="comment">        3:遍历数组，获取到数组中的每一个元素</span></span><br><span class="line"><span class="comment">        4:判断该元素是否满足条件，如果满足条件就累加</span></span><br><span class="line"><span class="comment">        5:输出求和变量的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">68</span>, <span class="number">27</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">171</span>, <span class="number">996</span>, <span class="number">51</span>, <span class="number">210</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个求和变量，初始值是0</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，获取到数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="comment">//判断该元素是否满足条件，如果满足条件就累加</span></span><br><span class="line">            <span class="keyword">if</span>(arr[x]%<span class="number">10</span>!=<span class="number">7</span> &amp;&amp; arr[x]/<span class="number">10</span>%<span class="number">10</span>!=<span class="number">7</span> &amp;&amp; arr[x]%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                sum += arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出求和变量的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sum:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7判断两个数组是否相同【应用】"><a href="#2-7判断两个数组是否相同【应用】" class="headerlink" title="2.7判断两个数组是否相同【应用】"></a>2.7判断两个数组是否相同【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>​    定义一个方法，用于比较两个数组的内容是否相同</p>
<h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义两个数组，分别使用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:定义一个方法，用于比较两个数组的内容是否相同</span></span><br><span class="line"><span class="comment">        3:比较两个数组的内容是否相同，按照下面的步骤实现就可以了</span></span><br><span class="line"><span class="comment">            首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false</span></span><br><span class="line"><span class="comment">            其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false</span></span><br><span class="line"><span class="comment">            最后循环遍历结束后，返回true</span></span><br><span class="line"><span class="comment">        4:调用方法，用变量接收</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义两个数组，分别使用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">        <span class="comment">//int[] arr2 = &#123;11, 22, 33, 44, 55&#125;;</span></span><br><span class="line">        <span class="keyword">int</span>[] arr2 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用变量接收</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = compare(arr,arr2);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于比较两个数组的内容是否相同</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：boolean</span></span><br><span class="line"><span class="comment">            参数：int[] arr, int[] arr2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//首先比较数组长度，如果长度不相同，数组内容肯定不相同，返回false</span></span><br><span class="line">        <span class="keyword">if</span>(arr.length != arr2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//其次遍历，比较两个数组中的每一个元素，只要有元素不相同，返回false</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] != arr2[x]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后循环遍历结束后，返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-8查找元素在数组中出现的索引位置【应用】"><a href="#2-8查找元素在数组中出现的索引位置【应用】" class="headerlink" title="2.8查找元素在数组中出现的索引位置【应用】"></a>2.8查找元素在数组中出现的索引位置【应用】</h3><h4 id="2-8-1案例需求"><a href="#2-8-1案例需求" class="headerlink" title="2.8.1案例需求"></a>2.8.1案例需求</h4><p>​    已知一个数组 arr = {19, 28, 37, 46, 50}; 键盘录入一个数据，查找该数据在数组中的索引。</p>
<p>​    并在控制台输出找到的索引值。如果没有查找到，则输出-1</p>
<h4 id="2-8-2代码实现"><a href="#2-8-2代码实现" class="headerlink" title="2.8.2代码实现"></a>2.8.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:键盘录入要查找的数据，用一个变量接收</span></span><br><span class="line"><span class="comment">        3:定义一个索引变量，初始值为-1</span></span><br><span class="line"><span class="comment">        4:遍历数组，获取到数组中的每一个元素</span></span><br><span class="line"><span class="comment">        5:拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环</span></span><br><span class="line"><span class="comment">        6:输出索引变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要查找的数据，用一个变量接收</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要查找的数据：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> index = getIndex(arr, number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出索引变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;index: &quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找指定的数据在数组中的索引</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：int</span></span><br><span class="line"><span class="comment">            参数：int[] arr, int number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndex</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个索引变量，初始值为-1</span></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组，获取到数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="comment">//拿键盘录入的数据和数组中的每一个元素进行比较，如果值相同，就把该值对应的索引赋值给索引变量,并结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(arr[x] == number) &#123;</span><br><span class="line">                index = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回索引</span></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-9数组元素反转【应用】"><a href="#2-9数组元素反转【应用】" class="headerlink" title="2.9数组元素反转【应用】"></a>2.9数组元素反转【应用】</h3><h4 id="2-9-1案例需求"><a href="#2-9-1案例需求" class="headerlink" title="2.9.1案例需求"></a>2.9.1案例需求</h4><p>​    已知一个数组 arr = {19, 28, 37, 46, 50}; 用程序实现把数组中的元素值交换，<br>​        交换后的数组 arr = {50, 46, 37, 28, 19}; 并在控制台输出交换后的数组元素。</p>
<h4 id="2-9-2代码实现"><a href="#2-9-2代码实现" class="headerlink" title="2.9.2代码实现"></a>2.9.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引</span></span><br><span class="line"><span class="comment">        3:变量交换</span></span><br><span class="line"><span class="comment">        4:遍历数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用反转的方法</span></span><br><span class="line">        reverse(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：void</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//循环遍历数组，这一次初始化语句定义两个索引变量，判断条件是开始索引小于等于结束索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>, end = arr.length - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">            <span class="comment">//变量交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：void</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-10评委打分【应用】"><a href="#2-10评委打分【应用】" class="headerlink" title="2.10评委打分【应用】"></a>2.10评委打分【应用】</h3><h4 id="2-10-1案例需求"><a href="#2-10-1案例需求" class="headerlink" title="2.10.1案例需求"></a>2.10.1案例需求</h4><p>​    在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。<br>​        选手的最后得分为：去掉一个最高分和一个最低分后 的4个评委平均值 (不考虑小数部分)。</p>
<h4 id="2-10-2代码实现"><a href="#2-10-2代码实现" class="headerlink" title="2.10.2代码实现"></a>2.10.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span></span><br><span class="line"><span class="comment">        2:键盘录入评委分数</span></span><br><span class="line"><span class="comment">        3:由于是6个评委打分，所以，接收评委分数的操作，用循环改进</span></span><br><span class="line"><span class="comment">        4:定义方法实现获取数组中的最高分(数组最大值)，调用方法</span></span><br><span class="line"><span class="comment">        5:定义方法实现获取数组中的最低分(数组最小值) ，调用方法</span></span><br><span class="line"><span class="comment">        6:定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法</span></span><br><span class="line"><span class="comment">        7:按照计算规则进行计算得到平均分</span></span><br><span class="line"><span class="comment">        8:输出平均分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组，用动态初始化完成数组元素的初始化，长度为6</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入评委分数</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于是6个评委打分，所以，接收评委分数的操作，用循环改进</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span> + (x + <span class="number">1</span>) + <span class="string">&quot;个评委的打分：&quot;</span>);</span><br><span class="line">            arr[x] = sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//printArray(arr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义方法实现获取数组中的最高分(数组最大值)，调用方法</span></span><br><span class="line">        <span class="keyword">int</span> max = getMax(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义方法实现获取数组中的最低分(数组最小值) ，调用方法</span></span><br><span class="line">        <span class="keyword">int</span> min = getMin(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义方法实现获取数组中的所有元素的和(数组元素求和) ，调用方法</span></span><br><span class="line">        <span class="keyword">int</span> sum = getSum(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照计算规则进行计算得到平均分</span></span><br><span class="line">        <span class="keyword">int</span> avg = (sum - max - min) / (arr.length - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出平均分</span></span><br><span class="line">        System.out.println(<span class="string">&quot;选手的最终得分是：&quot;</span> + avg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：int</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            sum += arr[x];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：int</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] &lt; min) &#123;</span><br><span class="line">                min = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：int</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x] &gt; max) &#123;</span><br><span class="line">                max = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2019/08/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190812%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="1-String类"><a href="#1-String类" class="headerlink" title="1.String类"></a>1.String类</h2><h3 id="1-1String类概述"><a href="#1-1String类概述" class="headerlink" title="1.1String类概述"></a>1.1String类概述</h3><p>​    String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p>
<h3 id="1-2String类的特点"><a href="#1-2String类的特点" class="headerlink" title="1.2String类的特点"></a>1.2String类的特点</h3><ul>
<li>字符串不可变，它们的值在创建后不能被更改</li>
<li>虽然 String 的值是不可变的，但是它们可以被共享</li>
<li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li>
</ul>
<a id="more"></a>

<h3 id="1-3String类的构造方法"><a href="#1-3String类的构造方法" class="headerlink" title="1.3String类的构造方法"></a>1.3String类的构造方法</h3><ul>
<li><p>常用的构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   String()</td>
<td>创建一个空白字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public   String(char[] chs)</td>
<td>根据字符数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>public   String(byte[] bys)</td>
<td>根据字节数组的内容，来创建字符串对象</td>
</tr>
<tr>
<td>String s =   “abc”;</td>
<td>直接赋值的方式创建字符串对象，内容就是abc</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public String()：创建一个空白字符串对象，不含有任何内容</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String();</span><br><span class="line">        System.out.println(<span class="string">&quot;s1:&quot;</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2:&quot;</span> + s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        String s3 = <span class="keyword">new</span> String(bys);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3:&quot;</span> + s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = “abc”;	直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line">        String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;s4:&quot;</span> + s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4创建字符串对象两种方式的区别"><a href="#1-4创建字符串对象两种方式的区别" class="headerlink" title="1.4创建字符串对象两种方式的区别"></a>1.4创建字符串对象两种方式的区别</h3><ul>
<li><p>通过构造方法创建</p>
<p>​    通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p>
</li>
<li><p>直接赋值方式创建</p>
<p>​    以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p>
</li>
</ul>
<h3 id="1-5字符串的比较"><a href="#1-5字符串的比较" class="headerlink" title="1.5字符串的比较"></a>1.5字符串的比较</h3><h4 id="1-5-1-号的作用"><a href="#1-5-1-号的作用" class="headerlink" title="1.5.1==号的作用"></a>1.5.1==号的作用</h4><ul>
<li>比较基本数据类型：比较的是具体的值</li>
<li>比较引用数据类型：比较的是对象地址值</li>
</ul>
<h4 id="1-5-2equals方法的作用"><a href="#1-5-2equals方法的作用" class="headerlink" title="1.5.2equals方法的作用"></a>1.5.2equals方法的作用</h4><ul>
<li><p>方法介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(String s)</span>     比较两个字符串内容是否相同、区分大小写</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equals(s3));</span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6用户登录案例"><a href="#1-6用户登录案例" class="headerlink" title="1.6用户登录案例"></a>1.6用户登录案例</h3><h4 id="1-6-1案例需求"><a href="#1-6-1案例需求" class="headerlink" title="1.6.1案例需求"></a>1.6.1案例需求</h4><p>​    已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p>
<h4 id="1-6-2代码实现"><a href="#1-6-2代码实现" class="headerlink" title="1.6.2代码实现"></a>1.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line"><span class="comment">        2:键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        3:拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现</span></span><br><span class="line"><span class="comment">        4:用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//已知用户名和密码，定义两个字符串表示即可</span></span><br><span class="line">        String username = <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;czbk&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环实现多次机会，这里的次数明确，采用for循环实现，并在登录成功的时候，使用break结束循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//键盘录入要登录的用户名和密码，用 Scanner 实现</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">            String pwd = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用equals() 方法实现</span></span><br><span class="line">            <span class="keyword">if</span> (name.equals(username) &amp;&amp; pwd.equals(password)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">2</span>-i == <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;你的账户被锁定，请与管理员联系&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//2,1,0</span></span><br><span class="line">                    <span class="comment">//i,0,1,2</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;登录失败，你还有&quot;</span> + (<span class="number">2</span> - i) + <span class="string">&quot;次机会&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-7遍历字符串案例"><a href="#1-7遍历字符串案例" class="headerlink" title="1.7遍历字符串案例"></a>1.7遍历字符串案例</h3><h4 id="1-7-1案例需求"><a href="#1-7-1案例需求" class="headerlink" title="1.7.1案例需求"></a>1.7.1案例需求</h4><p>​    键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p>
<h4 id="1-7-2代码实现"><a href="#1-7-2代码实现" class="headerlink" title="1.7.2代码实现"></a>1.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        2:遍历字符串，首先要能够获取到字符串中的每一个字符</span></span><br><span class="line"><span class="comment">            public char charAt(int index)：返回指定索引处的char值，字符串的索引也是从0开始的</span></span><br><span class="line"><span class="comment">        3:遍历字符串，其次要能够获取到字符串的长度</span></span><br><span class="line"><span class="comment">            public int length()：返回此字符串的长度</span></span><br><span class="line"><span class="comment">            数组的长度：数组名.length</span></span><br><span class="line"><span class="comment">            字符串的长度：字符串对象.length()</span></span><br><span class="line"><span class="comment">        4:遍历字符串的通用格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">            System.out.println(line.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-8统计字符次数案例"><a href="#1-8统计字符次数案例" class="headerlink" title="1.8统计字符次数案例"></a>1.8统计字符次数案例</h3><h4 id="1-8-1案例需求"><a href="#1-8-1案例需求" class="headerlink" title="1.8.1案例需求"></a>1.8.1案例需求</h4><p>​    键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p>
<h4 id="1-8-2代码实现"><a href="#1-8-2代码实现" class="headerlink" title="1.8.2代码实现"></a>1.8.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        2:要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</span></span><br><span class="line"><span class="comment">        3:遍历字符串，得到每一个字符</span></span><br><span class="line"><span class="comment">        4:判断该字符属于哪种类型，然后对应类型的统计变量+1</span></span><br><span class="line"><span class="comment">            假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接判断该字符是否在对应的范围即可</span></span><br><span class="line"><span class="comment">            大写字母：ch&gt;=&#x27;A&#x27; &amp;&amp; ch&lt;=&#x27;Z&#x27;</span></span><br><span class="line"><span class="comment">            小写字母： ch&gt;=&#x27;a&#x27; &amp;&amp; ch&lt;=&#x27;z&#x27;</span></span><br><span class="line"><span class="comment">            数字： ch&gt;=&#x27;0&#x27; &amp;&amp; ch&lt;=&#x27;9&#x27;</span></span><br><span class="line"><span class="comment">        5:输出三种类型的字符个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</span></span><br><span class="line">        <span class="keyword">int</span> bigCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> smallCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> numberCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch = line.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断该字符属于哪种类型，然后对应类型的统计变量+1</span></span><br><span class="line">            <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;A&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                bigCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;a&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                smallCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; ch&lt;=<span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出三种类型的字符个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母：&quot;</span> + bigCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母：&quot;</span> + smallCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字：&quot;</span> + numberCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-9字符串拼接案例"><a href="#1-9字符串拼接案例" class="headerlink" title="1.9字符串拼接案例"></a>1.9字符串拼接案例</h3><h4 id="1-9-1案例需求"><a href="#1-9-1案例需求" class="headerlink" title="1.9.1案例需求"></a>1.9.1案例需求</h4><p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p>
<p>​    并在控制台输出结果。例如，数组为 int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p>
<h4 id="1-9-2代码实现"><a href="#1-9-2代码实现" class="headerlink" title="1.9.2代码实现"></a>1.9.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。</span></span><br><span class="line"><span class="comment">          返回值类型 String，参数列表 int[] arr</span></span><br><span class="line"><span class="comment">        3:在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line"><span class="comment">        4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：String</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法中遍历数组，按照要求进行拼接</span></span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        s += <span class="string">&quot;[&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">                s += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s += <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-10字符串反转案例"><a href="#1-10字符串反转案例" class="headerlink" title="1.10字符串反转案例"></a>1.10字符串反转案例</h3><h4 id="1-10-1案例需求"><a href="#1-10-1案例需求" class="headerlink" title="1.10.1案例需求"></a>1.10.1案例需求</h4><p>​    定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p>
<p>​    例如，键盘录入 abc，输出结果 cba</p>
<h4 id="1-10-2代码实现"><a href="#1-10-2代码实现" class="headerlink" title="1.10.2代码实现"></a>1.10.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span></span><br><span class="line"><span class="comment">        3:在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</span></span><br><span class="line"><span class="comment">        4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = reverse(line);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，实现字符串反转</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：String</span></span><br><span class="line"><span class="comment">            参数：String s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</span></span><br><span class="line">        String ss = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">            ss += s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ss;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-11帮助文档查看String常用方法"><a href="#1-11帮助文档查看String常用方法" class="headerlink" title="1.11帮助文档查看String常用方法"></a>1.11帮助文档查看String常用方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean   equals(Object anObject)</td>
<td>比较字符串的内容，严格区分大小写(用户名和密码)</td>
</tr>
<tr>
<td>public char charAt(int   index)</td>
<td>返回指定索引处的 char 值</td>
</tr>
<tr>
<td>public int   length()</td>
<td>返回此字符串的长度</td>
</tr>
</tbody></table>
<h2 id="2-StringBuilder类"><a href="#2-StringBuilder类" class="headerlink" title="2.StringBuilder类"></a>2.StringBuilder类</h2><h3 id="2-1StringBuilder类概述【理解】"><a href="#2-1StringBuilder类概述【理解】" class="headerlink" title="2.1StringBuilder类概述【理解】"></a>2.1StringBuilder类概述【理解】</h3><p>​    StringBuilder 是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是 StringBuilder 对象中的内容是可变的</p>
<h3 id="2-2StringBuilder类和String类的区别【理解】"><a href="#2-2StringBuilder类和String类的区别【理解】" class="headerlink" title="2.2StringBuilder类和String类的区别【理解】"></a>2.2StringBuilder类和String类的区别【理解】</h3><ul>
<li>String类：内容是不可变的</li>
<li>StringBuilder类：内容是可变的</li>
</ul>
<h3 id="2-3StringBuilder类的构造方法【记忆】"><a href="#2-3StringBuilder类的构造方法【记忆】" class="headerlink" title="2.3StringBuilder类的构造方法【记忆】"></a>2.3StringBuilder类的构造方法【记忆】</h3><ul>
<li><p>常用的构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder()</td>
<td>创建一个空白可变字符串对象，不含有任何内容</td>
</tr>
<tr>
<td>public StringBuilder(String   str)</td>
<td>根据字符串的内容，来创建可变字符串对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public StringBuilder()：创建一个空白可变字符串对象，不含有任何内容</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">&quot;sb:&quot;</span> + sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;sb.length():&quot;</span> + sb.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder(String str)：根据字符串的内容，来创建可变字符串对象</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sb2:&quot;</span> + sb2);</span><br><span class="line">        System.out.println(<span class="string">&quot;sb2.length():&quot;</span> + sb2.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4StringBuilder类添加和反转方法【记忆】"><a href="#2-4StringBuilder类添加和反转方法【记忆】" class="headerlink" title="2.4StringBuilder类添加和反转方法【记忆】"></a>2.4StringBuilder类添加和反转方法【记忆】</h3><ul>
<li><p>添加和反转方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public StringBuilder   append(任意类型)</td>
<td>添加数据，并返回对象本身</td>
</tr>
<tr>
<td>public StringBuilder   reverse()</td>
<td>返回相反的字符序列</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder append(任意类型)：添加数据，并返回对象本身</span></span><br><span class="line"><span class="comment">//        StringBuilder sb2 = sb.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;sb:&quot; + sb);</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;sb2:&quot; + sb2);</span></span><br><span class="line"><span class="comment">//        System.out.println(sb == sb2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        sb.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        sb.append(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        sb.append(&quot;java&quot;);</span></span><br><span class="line"><span class="comment">//        sb.append(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//链式编程</span></span><br><span class="line">        sb.append(<span class="string">&quot;hello&quot;</span>).append(<span class="string">&quot;world&quot;</span>).append(<span class="string">&quot;java&quot;</span>).append(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;sb:&quot;</span> + sb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder reverse()：返回相反的字符序列</span></span><br><span class="line">        sb.reverse();</span><br><span class="line">        System.out.println(<span class="string">&quot;sb:&quot;</span> + sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-5StringBuilder和String相互转换【应用】"><a href="#2-5StringBuilder和String相互转换【应用】" class="headerlink" title="2.5StringBuilder和String相互转换【应用】"></a>2.5StringBuilder和String相互转换【应用】</h3><ul>
<li><p>StringBuilder转换为String</p>
<p>​        public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String</p>
</li>
<li><p>String转换为StringBuilder</p>
<p>​        public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</p>
</li>
<li><p>示例代码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //StringBuilder 转换为 String</span></span><br><span class="line"><span class="comment">        StringBuilder sb = new StringBuilder();</span></span><br><span class="line"><span class="comment">        sb.append(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //String s = sb; //这个是错误的做法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //public String toString()：通过 toString() 就可以实现把 StringBuilder 转换为 String</span></span><br><span class="line"><span class="comment">        String s = sb.toString();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String 转换为 StringBuilder</span></span><br><span class="line">        String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StringBuilder sb = s; //这个是错误的做法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public StringBuilder(String s)：通过构造方法就可以实现把 String 转换为 StringBuilder</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-6字符串拼接升级版案例【应用】"><a href="#2-6字符串拼接升级版案例【应用】" class="headerlink" title="2.6字符串拼接升级版案例【应用】"></a>2.6字符串拼接升级版案例【应用】</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>​    定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p>
<p>​    并在控制台输出结果。例如，数组为int[] arr = {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p>
<h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line"><span class="comment">        2:定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回。</span></span><br><span class="line"><span class="comment">          返回值类型 String，参数列表 int[] arr</span></span><br><span class="line"><span class="comment">        3:在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span></span><br><span class="line"><span class="comment">        4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个 int 类型的数组，用静态初始化完成数组元素的初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于把 int 数组中的数据按照指定格式拼接成一个字符串返回</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：String</span></span><br><span class="line"><span class="comment">            参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法中用 StringBuilder 按照要求进行拼接，并把结果转成 String 返回</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String s = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-7字符串反转升级版案例【应用】"><a href="#2-7字符串反转升级版案例【应用】" class="headerlink" title="2.7字符串反转升级版案例【应用】"></a>2.7字符串反转升级版案例【应用】</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>​    定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p>
<p>​    例如，键盘录入abc，输出结果 cba</p>
<h4 id="2-7-2代码实现"><a href="#2-7-2代码实现" class="headerlink" title="2.7.2代码实现"></a>2.7.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line"><span class="comment">        2:定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span></span><br><span class="line"><span class="comment">        3:在方法中用StringBuilder实现字符串的反转，并把结果转成String返回</span></span><br><span class="line"><span class="comment">        4:调用方法，用一个变量接收结果</span></span><br><span class="line"><span class="comment">        5:输出结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，用 Scanner 实现</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，用一个变量接收结果</span></span><br><span class="line">        String s = myReverse(line);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，实现字符串反转。返回值类型 String，参数 String s</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：String</span></span><br><span class="line"><span class="comment">            参数：String s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">myReverse</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法中用StringBuilder实现字符串的反转，并把结果转成String返回</span></span><br><span class="line">        <span class="comment">//String --- StringBuilder --- reverse() --- String</span></span><br><span class="line"><span class="comment">//        StringBuilder sb = new StringBuilder(s);</span></span><br><span class="line"><span class="comment">//        sb.reverse();</span></span><br><span class="line"><span class="comment">//        String ss = sb.toString();</span></span><br><span class="line"><span class="comment">//        return ss;</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-8帮助文档查看StringBuilder常用方法【记忆】"><a href="#2-8帮助文档查看StringBuilder常用方法【记忆】" class="headerlink" title="2.8帮助文档查看StringBuilder常用方法【记忆】"></a>2.8帮助文档查看StringBuilder常用方法【记忆】</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   StringBuilder append (任意类型)</td>
<td>添加数据，并返回对象本身</td>
</tr>
<tr>
<td>public   StringBuilder reverse()</td>
<td>返回相反的字符序列</td>
</tr>
<tr>
<td>public   int   length()</td>
<td>返回长度，实际存储值</td>
</tr>
<tr>
<td>public   String toString()</td>
<td>通过toString()就可以实现把StringBuilder转换为String</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>集合基础</title>
    <url>/2019/08/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190815%E9%9B%86%E5%90%88%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-ArrayList"><a href="#1-ArrayList" class="headerlink" title="1.ArrayList"></a>1.ArrayList</h2><h3 id="1-1ArrayList类概述【理解】"><a href="#1-1ArrayList类概述【理解】" class="headerlink" title="1.1ArrayList类概述【理解】"></a>1.1ArrayList类概述【理解】</h3><ul>
<li><p>什么是集合</p>
<p>​    提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p>
</li>
<li><p>ArrayList集合的特点</p>
<p>​    底层是数组实现的，长度可以变化</p>
</li>
<li><p>泛型的使用</p>
<p>​    用于约束集合中存储元素的数据类型</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-2ArrayList类常用方法【应用】"><a href="#1-2ArrayList类常用方法【应用】" class="headerlink" title="1.2ArrayList类常用方法【应用】"></a>1.2ArrayList类常用方法【应用】</h3><h4 id="1-2-1构造方法"><a href="#1-2-1构造方法" class="headerlink" title="1.2.1构造方法"></a>1.2.1构造方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public ArrayList()</td>
<td>创建一个空的集合对象</td>
</tr>
</tbody></table>
<h4 id="1-2-2成员方法"><a href="#1-2-2成员方法" class="headerlink" title="1.2.2成员方法"></a>1.2.2成员方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean   remove(Object o)</td>
<td>删除指定的元素，返回删除是否成功</td>
</tr>
<tr>
<td>public E   remove(int   index)</td>
<td>删除指定索引处的元素，返回被删除的元素</td>
</tr>
<tr>
<td>public E   set(int index,E   element)</td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
<tr>
<td>public E   get(int   index)</td>
<td>返回指定索引处的元素</td>
</tr>
<tr>
<td>public int   size()</td>
<td>返回集合中的元素的个数</td>
</tr>
<tr>
<td>public boolean   add(E e)</td>
<td>将指定的元素追加到此集合的末尾</td>
</tr>
<tr>
<td>public void   add(int index,E   element)</td>
<td>在此集合中的指定位置插入指定的元素</td>
</tr>
</tbody></table>
<h4 id="1-2-3示例代码"><a href="#1-2-3示例代码" class="headerlink" title="1.2.3示例代码"></a>1.2.3示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean remove(Object o)：删除指定的元素，返回删除是否成功</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(&quot;world&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index)：删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        System.out.println(array.remove(3));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index,E element)：修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.set(1,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//IndexOutOfBoundsException</span></span><br><span class="line"><span class="comment">//        System.out.println(array.set(3,&quot;javaee&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E get(int index)：返回指定索引处的元素</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(0));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(1));</span></span><br><span class="line"><span class="comment">//        System.out.println(array.get(2));</span></span><br><span class="line">        <span class="comment">//System.out.println(array.get(3)); //？？？？？？ 自己测试</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size()：返回集合中的元素的个数</span></span><br><span class="line">        System.out.println(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        System.out.println(<span class="string">&quot;array:&quot;</span> + array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3ArrayList存储字符串并遍历【应用】"><a href="#1-3ArrayList存储字符串并遍历【应用】" class="headerlink" title="1.3ArrayList存储字符串并遍历【应用】"></a>1.3ArrayList存储字符串并遍历【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><p>​    创建一个存储字符串的集合，存储3个字符串元素，使用程序实现在控制台遍历该集合</p>
<h4 id="1-3-2代码实现"><a href="#1-3-2代码实现" class="headerlink" title="1.3.2代码实现"></a>1.3.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:创建集合对象</span></span><br><span class="line"><span class="comment">        2:往集合中添加字符串对象</span></span><br><span class="line"><span class="comment">        3:遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现</span></span><br><span class="line"><span class="comment">        4:遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span></span><br><span class="line"><span class="comment">        5:遍历集合的通用格式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加字符串对象</span></span><br><span class="line">        array.add(<span class="string">&quot;刘正风&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;左冷禅&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</span></span><br><span class="line"><span class="comment">//        System.out.println(array.size());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合的通用格式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            String s = array.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4ArrayList存储学生对象并遍历【应用】"><a href="#1-4ArrayList存储学生对象并遍历【应用】" class="headerlink" title="1.4ArrayList存储学生对象并遍历【应用】"></a>1.4ArrayList存储学生对象并遍历【应用】</h3><h4 id="1-4-1案例需求"><a href="#1-4-1案例需求" class="headerlink" title="1.4.1案例需求"></a>1.4.1案例需求</h4><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
<h4 id="1-4-2代码实现"><a href="#1-4-2代码实现" class="headerlink" title="1.4.2代码实现"></a>1.4.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类</span></span><br><span class="line"><span class="comment">        2:创建集合对象</span></span><br><span class="line"><span class="comment">        3:创建学生对象</span></span><br><span class="line"><span class="comment">        4:添加学生对象到集合中</span></span><br><span class="line"><span class="comment">        5:遍历集合，采用通用遍历格式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;风清扬&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加学生对象到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5ArrayList存储学生对象并遍历升级版【应用】"><a href="#1-5ArrayList存储学生对象并遍历升级版【应用】" class="headerlink" title="1.5ArrayList存储学生对象并遍历升级版【应用】"></a>1.5ArrayList存储学生对象并遍历升级版【应用】</h3><h4 id="1-5-1案例需求"><a href="#1-5-1案例需求" class="headerlink" title="1.5.1案例需求"></a>1.5.1案例需求</h4><p>​    创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p>
<p>​        学生的姓名和年龄来自于键盘录入</p>
<h4 id="1-5-2代码实现"><a href="#1-5-2代码实现" class="headerlink" title="1.5.2代码实现"></a>1.5.2代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型</span></span><br><span class="line"><span class="comment">        2:创建集合对象</span></span><br><span class="line"><span class="comment">        3:键盘录入学生对象所需要的数据</span></span><br><span class="line"><span class="comment">        4:创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line"><span class="comment">        5:往集合中添加学生对象</span></span><br><span class="line"><span class="comment">        6:遍历集合，采用通用遍历格式实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了提高代码的复用性，我们用方法来改进程序</span></span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，采用通用遍历格式实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        两个明确：</span></span><br><span class="line"><span class="comment">            返回值类型：void</span></span><br><span class="line"><span class="comment">            参数：ArrayList&lt;Student&gt; array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入学生对象所需要的数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名:&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄:&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加学生对象</span></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-学生管理系统"><a href="#2-学生管理系统" class="headerlink" title="2.学生管理系统"></a>2.学生管理系统</h2><h3 id="2-1学生管理系统实现步骤【理解】"><a href="#2-1学生管理系统实现步骤【理解】" class="headerlink" title="2.1学生管理系统实现步骤【理解】"></a>2.1学生管理系统实现步骤【理解】</h3><ul>
<li><p>案例需求</p>
<p>​    针对目前我们的所学内容，完成一个综合案例：学生管理系统！该系统主要功能如下：</p>
<p>​    添加学生：通过键盘录入学生信息，添加到集合中</p>
<p>​    删除学生：通过键盘录入要删除学生的学号，将该学生对象从集合中删除</p>
<p>​    修改学生：通过键盘录入要修改学生的学号，将该学生对象其他信息进行修改</p>
<p>​    查看学生：将集合中的学生对象信息进行展示</p>
<p>​    退出系统：结束程序</p>
</li>
<li><p>实现步骤</p>
<ol>
<li><p>定义学生类，包含以下成员变量</p>
<p>​       private String sid            // 学生id</p>
<p>​       private String name       // 学生姓名</p>
<p>​       private String age          // 学生年龄</p>
<p>​       private String address   // 学生所在地</p>
</li>
<li><p>学生管理系统主界面的搭建步骤</p>
<p>2.1 用输出语句完成主界面的编写<br>2.2 用Scanner实现键盘输入<br>2.3 用switch语句完成选择的功能<br>2.4 用循环完成功能结束后再次回到主界面</p>
</li>
<li><p>学生管理系统的添加学生功能实现步骤</p>
<p>3.1 定义一个方法，接收ArrayList<Student>集合<br>3.2 方法内完成添加学生的功能<br>​         ①键盘录入学生信息<br>​         ②根据录入的信息创建学生对象<br>​         ③将学生对象添加到集合中<br>​         ④提示添加成功信息<br>3.3 在添加学生的选项里调用添加学生的方法</Student></p>
</li>
<li><p>学生管理系统的查看学生功能实现步骤</p>
<p>4.1 定义一个方法，接收ArrayList<Student>集合<br>4.2 方法内遍历集合，将学生信息进行输出<br>4.3 在查看所有学生选项里调用查看学生方法</Student></p>
</li>
<li><p>学生管理系统的删除学生功能实现步骤</p>
<p>5.1 定义一个方法，接收ArrayList<Student>集合<br>5.2 方法中接收要删除学生的学号<br>5.3 遍历集合，获取每个学生对象<br>5.4 使用学生对象的学号和录入的要删除的学号进行比较,如果相同，则将当前学生对象从集合中删除<br>5.5 在删除学生选项里调用删除学生的方法</Student></p>
</li>
<li><p>学生管理系统的修改学生功能实现步骤</p>
<p>6.1 定义一个方法，接收ArrayList<Student>集合<br>6.2 方法中接收要修改学生的学号<br>6.3 通过键盘录入学生对象所需的信息，并创建对象<br>6.4 遍历集合，获取每一个学生对象。并和录入的修改学生学号进行比较.如果相同，则使用新学生对象替换当前学生对象<br>6.5 在修改学生选项里调用修改学生的方法</Student></p>
</li>
<li><p>退出系统</p>
<p>使用System.exit(0);退出JVM</p>
</li>
</ol>
</li>
</ul>
<h3 id="2-2学生类的定义【应用】"><a href="#2-2学生类的定义【应用】" class="headerlink" title="2.2学生类的定义【应用】"></a>2.2学生类的定义【应用】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="comment">//居住地</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, String age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3测试类的定义【应用】"><a href="#2-3测试类的定义【应用】" class="headerlink" title="2.3测试类的定义【应用】"></a>2.3测试类的定义【应用】</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1:用输出语句完成主界面的编写</span></span><br><span class="line"><span class="comment">        2:用Scanner实现键盘录入数据</span></span><br><span class="line"><span class="comment">        3:用switch语句完成操作的选择</span></span><br><span class="line"><span class="comment">        4:用循环完成再次回到主界面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象，用于保存学生数据信息</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用循环完成再次回到主界面</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//用输出语句完成主界面的编写</span></span><br><span class="line">            System.out.println(<span class="string">&quot;--------欢迎来到学生管理系统--------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1 添加学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2 删除学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3 修改学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4 查看所有学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5 退出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择：&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用Scanner实现键盘录入数据</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用switch语句完成操作的选择</span></span><br><span class="line">            <span class="keyword">switch</span> (line) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    addStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    deleteStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;3&quot;</span>:</span><br><span class="line">                    updateStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;4&quot;</span>:</span><br><span class="line">                    findAllStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;5&quot;</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>); <span class="comment">//JVM退出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于添加学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入学生对象所需要的数据,显示提示信息，提示要输入何种信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        String sid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生学号：&quot;</span>);</span><br><span class="line">            sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> flag = isUsed(array, sid);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的学号已经被占用，请重新输入&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名：&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄：&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生居住地：&quot;</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setSid(sid);</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        s.setAddress(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学生对象添加到集合中</span></span><br><span class="line">        array.add(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出添加成功提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;添加学生成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，判断学号是否被使用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUsed</span><span class="params">(ArrayList&lt;Student&gt; array, String sid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果与集合中的某一个学生学号相同，返回true;如果都不相同，返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.getSid().equals(sid)) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于查看学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findAllStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断集合中是否有数据，如果没有显示提示信息</span></span><br><span class="line">        <span class="keyword">if</span> (array.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无信息，请先添加信息再查询&quot;</span>);</span><br><span class="line">            <span class="comment">//为了让程序不再往下执行，我们在这里写上return;</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示表头信息</span></span><br><span class="line">        <span class="comment">//\t其实是一个tab键的位置</span></span><br><span class="line">        System.out.println(<span class="string">&quot;学号\t\t\t姓名\t\t年龄\t\t居住地&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将集合中数据取出按照对应格式显示学生信息，年龄显示补充“岁”</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(s.getSid() + <span class="string">&quot;\t&quot;</span> + s.getName() + <span class="string">&quot;\t&quot;</span> + s.getAge() + <span class="string">&quot;岁\t\t&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于删除学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入要删除的学生学号,显示提示信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要删除的学生的学号：&quot;</span>);</span><br><span class="line">        String sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在删除/修改学生操作前，对学号是否存在进行判断</span></span><br><span class="line">        <span class="comment">//如果不存在，显示提示信息</span></span><br><span class="line">        <span class="comment">//如果存在，执行删除/修改操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getSid().equals(sid)) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;该信息不存在，请重新输入&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            array.remove(index);</span><br><span class="line">            <span class="comment">//给出删除成功提示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除学生成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于修改学生信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入要修改的学生学号，显示提示信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你要修改的学生的学号：&quot;</span>);</span><br><span class="line">        String sid = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要修改的学生信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生新姓名：&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生新年龄：&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生新居住地：&quot;</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setSid(sid);</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        s.setAddress(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合修改对应的学生信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student student = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (student.getSid().equals(sid)) &#123;</span><br><span class="line">                array.set(i, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出修改成功提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>API</title>
    <url>/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/</url>
    <content><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1API概述"><a href="#1-1API概述" class="headerlink" title="1.1API概述"></a>1.1API概述</h3><ul>
<li><p>什么是API</p>
<p>​    API (Application Programming Interface) ：应用程序编程接口</p>
</li>
<li><p>java中的API</p>
<p>​    指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>
</li>
</ul>
<a id="more"></a>

<h3 id="1-2如何使用API帮助文档"><a href="#1-2如何使用API帮助文档" class="headerlink" title="1.2如何使用API帮助文档"></a>1.2如何使用API帮助文档</h3><ul>
<li>打开帮助文档</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/01.png" alt="01"></p>
<ul>
<li>找到索引选项卡中的输入框</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/02.png" alt="02"></p>
<ul>
<li>在输入框中输入Random</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/03.png" alt="03"></p>
<ul>
<li>看类在哪个包下</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/04.png" alt="04"></p>
<ul>
<li>看类的描述</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/05.png" alt="05"></p>
<ul>
<li>看构造方法</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/06.png" alt="06"></p>
<ul>
<li>看成员方法</li>
</ul>
<p><img src="/2019/08/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190822.2API/Java%E8%B5%84%E6%96%99/1.JavaSE/day08(%E5%AD%97%E7%AC%A6%E4%B8%B2)/%E7%AC%94%E8%AE%B0/img/07.png" alt="07"></p>
<h3 id="2-1-Math"><a href="#2-1-Math" class="headerlink" title="2.1 Math"></a>2.1 Math</h3><ul>
<li><p>1、Math类概述</p>
<ul>
<li>Math 包含执行基本数字运算的方法</li>
</ul>
</li>
<li><p>2、Math中方法的调用方式</p>
<ul>
<li><p>Math类中无构造方法，但内部的方法都是静态的，则可以通过   <strong>类名.进行调用</strong></p>
<!-- more -->
</li>
</ul>
</li>
<li><p>3、Math类的常用方法</p>
<table>
<thead>
<tr>
<th>方法名    方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static int   abs(int a)</td>
<td>返回参数的绝对值</td>
</tr>
<tr>
<td>public static double ceil(double a)</td>
<td>返回大于或等于参数的最小double值，等于一个整数</td>
</tr>
<tr>
<td>public static double floor(double a)</td>
<td>返回小于或等于参数的最大double值，等于一个整数</td>
</tr>
<tr>
<td>public   static int round(float a)</td>
<td>按照四舍五入返回最接近参数的int</td>
</tr>
<tr>
<td>public static int   max(int a,int b)</td>
<td>返回两个int值中的较大值</td>
</tr>
<tr>
<td>public   static int min(int a,int b)</td>
<td>返回两个int值中的较小值</td>
</tr>
<tr>
<td>public   static double pow (double a,double b)</td>
<td>返回a的b次幂的值</td>
</tr>
<tr>
<td>public   static double random()</td>
<td>返回值为double的正值，[0.0,1.0)</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="2-2-System"><a href="#2-2-System" class="headerlink" title="2.2 System"></a>2.2 System</h3><ul>
<li>System类的常用方法 </li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   static void exit(int status)</td>
<td>终止当前运行的   Java   虚拟机，非零表示异常终止</td>
</tr>
<tr>
<td>public   static long currentTimeMillis()</td>
<td>返回当前时间(以毫秒为单位)</td>
</tr>
</tbody></table>
<ul>
<li><p>示例代码</p>
<ul>
<li>需求：在控制台输出1-10000，计算这段代码执行了多少毫秒 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取开始的时间节点</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取代码运行结束后的时间节点</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span> + (end - start) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-Object类的toString方法"><a href="#2-3-Object类的toString方法" class="headerlink" title="2.3 Object类的toString方法"></a>2.3 Object类的toString方法</h3><ul>
<li><p>Object类概述</p>
<ul>
<li>Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类，换句话说，该类所具备的方法，所有类都会有一份</li>
</ul>
</li>
<li><p>查看方法源码的方式</p>
<ul>
<li>选中方法，按下Ctrl + B</li>
</ul>
</li>
<li><p>重写toString方法的方式</p>
<ul>
<li><ol>
<li>Alt + Insert 选择toString</li>
</ol>
</li>
<li><ol start="2">
<li>在类的空白区域，右键 -&gt; Generate -&gt; 选择toString</li>
</ol>
</li>
</ul>
</li>
<li><p>toString方法的作用：</p>
<ul>
<li>以良好的格式，更方便的展示对象中的属性值</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        System.out.println(s); </span><br><span class="line">        System.out.println(s.toString()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student&#123;name=<span class="string">&#x27;林青霞&#x27;</span>, age=<span class="number">30</span>&#125;</span><br><span class="line">Student&#123;name=<span class="string">&#x27;林青霞&#x27;</span>, age=<span class="number">30</span>&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-Object类的equals方法"><a href="#2-4-Object类的equals方法" class="headerlink" title="2.4 Object类的equals方法"></a>2.4 Object类的equals方法</h3><ul>
<li><p>equals方法的作用</p>
<ul>
<li>用于对象之间的比较，返回true和false的结果</li>
<li>举例：s1.equals(s2);    s1和s2是两个对象</li>
</ul>
</li>
<li><p>重写equals方法的场景</p>
<ul>
<li>不希望比较对象的地址值，想要结合对象属性进行比较的时候。</li>
</ul>
</li>
<li><p>重写equals方法的方式</p>
<ul>
<li><ol>
<li>alt + insert  选择equals() and hashCode()，IntelliJ Default，一路next，finish即可</li>
</ol>
</li>
<li><ol start="2">
<li>在类的空白区域，右键 -&gt; Generate -&gt; 选择equals() and hashCode()，后面的同上。</li>
</ol>
</li>
</ul>
</li>
<li><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//this -- s1</span></span><br><span class="line">        <span class="comment">//o -- s2</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o; <span class="comment">//student -- s2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：比较两个对象的内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5-冒泡排序原理"><a href="#2-5-冒泡排序原理" class="headerlink" title="2.5 冒泡排序原理"></a>2.5 冒泡排序原理</h3><ul>
<li>冒泡排序概述<ul>
<li>一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序</li>
</ul>
</li>
<li>如果有n个数据进行排序，总共需要比较n-1次</li>
<li>每一次比较完毕，下一次的比较就会少一个数据参与</li>
</ul>
<h3 id="2-6-冒泡排序代码实现"><a href="#2-6-冒泡排序代码实现" class="headerlink" title="2.6 冒泡排序代码实现"></a>2.6 冒泡排序代码实现</h3><ul>
<li>代码实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    冒泡排序：</span></span><br><span class="line"><span class="comment">        一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，</span></span><br><span class="line"><span class="comment">        依次对所有的数据进行操作，直至所有数据按要求完成排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span> + arrayToString(arr));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里减1，是控制每轮比较的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length - <span class="number">1</span>; x++) &#123;</span><br><span class="line">            <span class="comment">// -1是为了避免索引越界，-x是为了调高比较效率</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - x; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span> + arrayToString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数组中的元素按照指定的规则组成一个字符串：[元素1, 元素2, ...]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-Arrays"><a href="#2-7-Arrays" class="headerlink" title="2.7 Arrays"></a>2.7 Arrays</h3><ul>
<li><p>Arrays的常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static String toString(int[] a)</td>
<td>返回指定数组的内容的字符串表示形式</td>
</tr>
<tr>
<td>public static void sort(int[] a)</td>
<td>按照数字顺序排列指定的数组</td>
</tr>
</tbody></table>
</li>
<li><p>工具类设计思想</p>
<p>1、构造方法用 private 修饰</p>
<p>2、成员用 public static 修饰</p>
</li>
</ul>
<h1 id="3-常用API"><a href="#3-常用API" class="headerlink" title="3.常用API"></a>3.常用API</h1><h2 id="3-1-包装类"><a href="#3-1-包装类" class="headerlink" title="3.1.包装类"></a>3.1.包装类</h2><h3 id="3-1-1基本类型包装类"><a href="#3-1-1基本类型包装类" class="headerlink" title="3.1.1基本类型包装类"></a>3.1.1基本类型包装类</h3><ul>
<li><p>基本类型包装类的作用</p>
<p>​    将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p>
<p>​    常用的操作之一：用于基本数据类型与字符串之间的转换</p>
</li>
<li><p>基本类型对应的包装类</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-1-2Integer类"><a href="#3-1-2Integer类" class="headerlink" title="3.1.2Integer类"></a>3.1.2Integer类</h3><ul>
<li><p>Integer类概述</p>
<p>​    包装一个对象中的原始类型 int 的值</p>
</li>
<li><p>Integer类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Integer(int   value)</td>
<td>根据 int 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public Integer(String s)</td>
<td>根据 String 值创建 Integer 对象(过时)</td>
</tr>
<tr>
<td>public static Integer valueOf(int i)</td>
<td>返回表示指定的 int 值的 Integer   实例</td>
</tr>
<tr>
<td>public static Integer valueOf(String s)</td>
<td>返回一个保存指定值的 Integer 对象 String</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Integer(int value)：根据 int 值创建 Integer 对象(过时)</span></span><br><span class="line">        Integer i1 = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Integer(String s)：根据 String 值创建 Integer 对象(过时)</span></span><br><span class="line">        Integer i2 = <span class="keyword">new</span> Integer(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="comment">//        Integer i2 = new Integer(&quot;abc&quot;); //NumberFormatException</span></span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(int i)：返回表示指定的 int 值的 Integer 实例</span></span><br><span class="line">        Integer i3 = Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static Integer valueOf(String s)：返回一个保存指定值的Integer对象 String</span></span><br><span class="line">        Integer i4 = Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(i4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-1-3int和String类型的相互转换"><a href="#3-1-3int和String类型的相互转换" class="headerlink" title="3.1.3int和String类型的相互转换"></a>3.1.3int和String类型的相互转换</h3><ul>
<li><p>int转换为String</p>
<ul>
<li><p>转换方式</p>
<ul>
<li>方式一：直接在数字后加一个空字符串</li>
<li>方式二：通过String类静态方法valueOf()</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int --- String</span></span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        String s1 = number + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static String valueOf(int i)</span></span><br><span class="line">        String s2 = String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>String转换为int</p>
<ul>
<li><p>转换方式</p>
<ul>
<li>方式一：先将字符串数字转成Integer，再调用valueOf()方法</li>
<li>方式二：通过Integer静态方法parseInt()进行转换</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String --- int</span></span><br><span class="line">        String s = <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1：String --- Integer --- int</span></span><br><span class="line">        Integer i = Integer.valueOf(s);</span><br><span class="line">        <span class="comment">//public int intValue()</span></span><br><span class="line">        <span class="keyword">int</span> x = i.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static int parseInt(String s)</span></span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(s);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-1-4字符串数据排序案例"><a href="#3-1-4字符串数据排序案例" class="headerlink" title="3.1.4字符串数据排序案例"></a>3.1.4字符串数据排序案例</h3><ul>
<li><p>案例需求</p>
<p>​    有一个字符串：“91 27 46 38 50”，请写程序实现最终输出结果是：“27 38 46 50 91”</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;91 27 46 38 50&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把字符串中的数字数据存储到一个int类型的数组中</span></span><br><span class="line">        String[] strArray = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//        for(int i=0; i&lt;strArray.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(strArray[i]);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个int数组，把 String[] 数组中的每一个元素存储到 int 数组中</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[strArray.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(strArray[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对 int 数组进行排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把排序后的int数组中的元素进行拼接得到一个字符串，这里拼接采用StringBuilder来实现</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String result = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-1-5自动拆箱和自动装箱"><a href="#3-1-5自动拆箱和自动装箱" class="headerlink" title="3.1.5自动拆箱和自动装箱"></a>3.1.5自动拆箱和自动装箱</h3><ul>
<li><p>自动装箱</p>
<p>​    把基本数据类型转换为对应的包装类类型</p>
</li>
<li><p>自动拆箱</p>
<p>​    把包装类类型转换为对应的基本数据类型</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="number">100</span>;  <span class="comment">// 自动装箱</span></span><br><span class="line">i += <span class="number">200</span>;         <span class="comment">// i = i + 200;  i + 200 自动拆箱；i = i + 200; 是自动装箱</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-2-时间日期类"><a href="#3-2-时间日期类" class="headerlink" title="3.2.时间日期类"></a>3.2.时间日期类</h2><h3 id="3-2-1Date类"><a href="#3-2-1Date类" class="headerlink" title="3.2.1Date类"></a>3.2.1Date类</h3><ul>
<li><p>Date类概述</p>
<p>​    Date 代表了一个特定的时间，精确到毫秒</p>
</li>
<li><p>Date类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public Date()</td>
<td>分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td>
</tr>
<tr>
<td>public Date(long date)</td>
<td>分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public Date()：分配一个 Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</span></span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(d1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Date(long date)：分配一个 Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</span></span><br><span class="line">        <span class="keyword">long</span> date = <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(date);</span><br><span class="line">        System.out.println(d2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-2Date类常用方法"><a href="#3-2-2Date类常用方法" class="headerlink" title="3.2.2Date类常用方法"></a>3.2.2Date类常用方法</h3><ul>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public long getTime()</td>
<td>获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</td>
</tr>
<tr>
<td>public void setTime(long time)</td>
<td>设置时间，给的是毫秒值</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public long getTime():获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</span></span><br><span class="line"><span class="comment">//        System.out.println(d.getTime());</span></span><br><span class="line"><span class="comment">//        System.out.println(d.getTime() * 1.0 / 1000 / 60 / 60 / 24 / 365 + &quot;年&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void setTime(long time):设置时间，给的是毫秒值</span></span><br><span class="line"><span class="comment">//        long time = 1000*60*60;</span></span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        d.setTime(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-3SimpleDateFormat类"><a href="#3-2-3SimpleDateFormat类" class="headerlink" title="3.2.3SimpleDateFormat类"></a>3.2.3SimpleDateFormat类</h3><ul>
<li><p>SimpleDateFormat类概述</p>
<p>​    SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期。</p>
<p>​    我们重点学习日期格式化和解析</p>
</li>
<li><p>SimpleDateFormat类构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   SimpleDateFormat()</td>
<td>构造一个SimpleDateFormat，使用默认模式和日期格式</td>
</tr>
<tr>
<td>public SimpleDateFormat(String pattern)</td>
<td>构造一个SimpleDateFormat使用给定的模式和默认的日期格式</td>
</tr>
</tbody></table>
</li>
<li><p>SimpleDateFormat类的常用方法</p>
<ul>
<li>格式化(从Date到String)<ul>
<li>public final String format(Date date)：将日期格式化成日期/时间字符串</li>
</ul>
</li>
<li>解析(从String到Date)<ul>
<li>public Date parse(String source)：从给定字符串的开始解析文本以生成日期</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//格式化：从 Date 到 String</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf = new SimpleDateFormat();</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        String s = sdf.format(d);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 String 到 Date</span></span><br><span class="line">        String ss = <span class="string">&quot;2048-08-09 11:11:11&quot;</span>;</span><br><span class="line">        <span class="comment">//ParseException</span></span><br><span class="line">        SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date dd = sdf2.parse(ss);</span><br><span class="line">        System.out.println(dd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-4日期工具类案例"><a href="#3-2-4日期工具类案例" class="headerlink" title="3.2.4日期工具类案例"></a>3.2.4日期工具类案例</h3><ul>
<li><p>案例需求</p>
<p>​    定义一个日期工具类(DateUtils)，包含两个方法：把日期转换为指定格式的字符串；把字符串解析为指定格式的日期，然后定义一个测试类(DateDemo)，测试日期工具类的方法</p>
</li>
<li><p>代码实现</p>
<ul>
<li>工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DateUtils</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把日期转为指定格式的字符串</span></span><br><span class="line"><span class="comment">        返回值类型：String</span></span><br><span class="line"><span class="comment">        参数：Date date, String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date date, String format)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        String s = sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把字符串解析为指定格式的日期</span></span><br><span class="line"><span class="comment">        返回值类型：Date</span></span><br><span class="line"><span class="comment">        参数：String s, String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String s, String format)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        Date d = sdf.parse(s);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        String s1 = DateUtils.dateToString(d, <span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        String s2 = DateUtils.dateToString(d, <span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line"></span><br><span class="line">        String s3 = DateUtils.dateToString(d, <span class="string">&quot;HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(s3);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String s = <span class="string">&quot;2048-08-09 12:12:12&quot;</span>;</span><br><span class="line">        Date dd = DateUtils.stringToDate(s, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(dd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-5Calendar类"><a href="#3-2-5Calendar类" class="headerlink" title="3.2.5Calendar类"></a>3.2.5Calendar类</h3><ul>
<li><p>Calendar类概述</p>
<p>​    Calendar 为特定瞬间与一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法</p>
<p>​    Calendar 提供了一个类方法 getInstance 用于获取这种类型的一般有用的对象。</p>
<p>​    该方法返回一个Calendar 对象。</p>
<p>​    其日历字段已使用当前日期和时间初始化：Calendar rightNow = Calendar.getInstance();</p>
</li>
<li><p>Calendar类常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public int   get(int field)</td>
<td>返回给定日历字段的值</td>
</tr>
<tr>
<td>public abstract void add(int   field, int amount)</td>
<td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td>
</tr>
<tr>
<td>public final void set(int year,int month,int date)</td>
<td>设置当前日历的年月日</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取日历类对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int get(int field):返回给定日历字段的值</span></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public abstract void add(int field, int amount):根据日历的规则，将指定的时间量添加或减去给定的日历字段</span></span><br><span class="line">        <span class="comment">//需求1:3年前的今天</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.YEAR,-3);</span></span><br><span class="line"><span class="comment">//        year = c.get(Calendar.YEAR);</span></span><br><span class="line"><span class="comment">//        month = c.get(Calendar.MONTH) + 1;</span></span><br><span class="line"><span class="comment">//        date = c.get(Calendar.DATE);</span></span><br><span class="line"><span class="comment">//        System.out.println(year + &quot;年&quot; + month + &quot;月&quot; + date + &quot;日&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2:10年后的10天前</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.YEAR,10);</span></span><br><span class="line"><span class="comment">//        c.add(Calendar.DATE,-10);</span></span><br><span class="line"><span class="comment">//        year = c.get(Calendar.YEAR);</span></span><br><span class="line"><span class="comment">//        month = c.get(Calendar.MONTH) + 1;</span></span><br><span class="line"><span class="comment">//        date = c.get(Calendar.DATE);</span></span><br><span class="line"><span class="comment">//        System.out.println(year + &quot;年&quot; + month + &quot;月&quot; + date + &quot;日&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public final void set(int year,int month,int date):设置当前日历的年月日</span></span><br><span class="line">        c.set(<span class="number">2050</span>,<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        year = c.get(Calendar.YEAR);</span><br><span class="line">        month = c.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">        date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-6二月天案例"><a href="#3-2-6二月天案例" class="headerlink" title="3.2.6二月天案例"></a>3.2.6二月天案例</h3><ul>
<li><p>案例需求</p>
<p>​    获取任意一年的二月有多少天</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入任意的年份</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入年：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> year = sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置日历对象的年、月、日</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        c.set(year, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3月1日往前推一天，就是2月的最后一天</span></span><br><span class="line">        c.add(Calendar.DATE, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取这一天输出即可</span></span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年的2月份有&quot;</span> + date + <span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Set集合</title>
    <url>/2019/08/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190826Set%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Set集合"><a href="#1-Set集合" class="headerlink" title="1.Set集合"></a>1.Set集合</h2><h3 id="1-1Set集合概述和特点【应用】"><a href="#1-1Set集合概述和特点【应用】" class="headerlink" title="1.1Set集合概述和特点【应用】"></a>1.1Set集合概述和特点【应用】</h3><ul>
<li><p>Set集合的特点</p>
<ul>
<li><p>元素存取无序</p>
</li>
<li><p>没有索引、只能通过迭代器或增强for循环遍历</p>
</li>
<li><p>不能存储重复元素</p>
<a id="more"></a></li>
</ul>
</li>
<li><p>Set集合的基本使用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//不包含重复元素的集合</span></span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2哈希值【理解】"><a href="#1-2哈希值【理解】" class="headerlink" title="1.2哈希值【理解】"></a>1.2哈希值【理解】</h3><ul>
<li><p>哈希值简介</p>
<p>​    是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</p>
</li>
<li><p>如何获取哈希值</p>
<p>​    Object类中的public int hashCode()：返回对象的哈希码值</p>
</li>
<li><p>哈希值的特点</p>
<ul>
<li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li>
<li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li>
</ul>
</li>
<li><p>获取哈希值的代码</p>
<ul>
<li>学生类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//同一个对象多次调用hashCode()方法返回的哈希值是相同的</span></span><br><span class="line">        System.out.println(s1.hashCode()); <span class="comment">//1060830840</span></span><br><span class="line">        System.out.println(s1.hashCode()); <span class="comment">//1060830840</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//默认情况下，不同对象的哈希值是不相同的</span></span><br><span class="line">        <span class="comment">//通过方法重写，可以实现不同对象的哈希值是相同的</span></span><br><span class="line">        System.out.println(s2.hashCode()); <span class="comment">//2137211482</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>.hashCode()); <span class="comment">//99162322</span></span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>.hashCode()); <span class="comment">//113318802</span></span><br><span class="line">        System.out.println(<span class="string">&quot;java&quot;</span>.hashCode()); <span class="comment">//3254818</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>.hashCode()); <span class="comment">//113318802</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;重地&quot;</span>.hashCode()); <span class="comment">//1179395</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通话&quot;</span>.hashCode()); <span class="comment">//1179395</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3HashSet集合概述和特点【应用】"><a href="#1-3HashSet集合概述和特点【应用】" class="headerlink" title="1.3HashSet集合概述和特点【应用】"></a>1.3HashSet集合概述和特点【应用】</h3><ul>
<li><p>HashSet集合的特点</p>
<ul>
<li>底层数据结构是哈希表</li>
<li>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li>
<li>没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>由于是Set集合，所以是不包含重复元素的集合</li>
</ul>
</li>
<li><p>HashSet集合的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; hs = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        hs.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        hs.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        hs.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        hs.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">        <span class="keyword">for</span>(String s : hs) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4HashSet集合保证元素唯一性源码分析【理解】"><a href="#1-4HashSet集合保证元素唯一性源码分析【理解】" class="headerlink" title="1.4HashSet集合保证元素唯一性源码分析【理解】"></a>1.4HashSet集合保证元素唯一性源码分析【理解】</h3><ul>
<li><p>HashSet集合保证元素唯一性的原理</p>
<p>​    1.根据对象的哈希值计算存储位置</p>
<p>​            如果当前位置没有元素则直接存入</p>
<p>​            如果当前位置有元素存在，则进入第二步</p>
<p>​     2.当前元素的元素和已经存在的元素比较哈希值</p>
<p>​            如果哈希值不同，则将当前元素进行存储</p>
<p>​            如果哈希值相同，则进入第三步</p>
<p>​     3.通过equals()方法比较两个元素的内容</p>
<p>​            如果内容不相同，则将当前元素进行存储</p>
<p>​            如果内容相同，则不存储当前元素</p>
</li>
<li><p>HashSet集合保证元素唯一性的图解</p>
<p><img src="/2019/08/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190826Set%E9%9B%86%E5%90%88/1HashSet%E9%9B%86%E5%90%88%E4%BF%9D%E8%AF%81%E5%85%83%E7%B4%A0%E5%94%AF%E4%B8%80%E6%80%A7.png" alt="01"></p>
</li>
</ul>
<h3 id="1-5常见数据结构之哈希表【理解】"><a href="#1-5常见数据结构之哈希表【理解】" class="headerlink" title="1.5常见数据结构之哈希表【理解】"></a>1.5常见数据结构之哈希表【理解】</h3><p><img src="/2019/08/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190826Set%E9%9B%86%E5%90%88/2.png" alt="02"></p>
<h3 id="1-6HashSet集合存储学生对象并遍历【应用】"><a href="#1-6HashSet集合存储学生对象并遍历【应用】" class="headerlink" title="1.6HashSet集合存储学生对象并遍历【应用】"></a>1.6HashSet集合存储学生对象并遍历【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合</li>
<li>要求：学生对象的成员变量值相同，我们就认为是同一个对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;Student&gt; hs = <span class="keyword">new</span> HashSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hs.add(s1);</span><br><span class="line">        hs.add(s2);</span><br><span class="line">        hs.add(s3);</span><br><span class="line">        hs.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合(增强for)</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : hs) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-7LinkedHashSet集合概述和特点【应用】"><a href="#1-7LinkedHashSet集合概述和特点【应用】" class="headerlink" title="1.7LinkedHashSet集合概述和特点【应用】"></a>1.7LinkedHashSet集合概述和特点【应用】</h3><ul>
<li><p>LinkedHashSet集合特点</p>
<ul>
<li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li>
<li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li>
<li>由哈希表保证元素唯一，也就是说没有重复的元素</li>
</ul>
</li>
<li><p>LinkedHashSet集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        LinkedHashSet&lt;String&gt; linkedHashSet = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        linkedHashSet.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : linkedHashSet) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-Set集合排序"><a href="#2-Set集合排序" class="headerlink" title="2.Set集合排序"></a>2.Set集合排序</h2><h3 id="2-1TreeSet集合概述和特点【应用】"><a href="#2-1TreeSet集合概述和特点【应用】" class="headerlink" title="2.1TreeSet集合概述和特点【应用】"></a>2.1TreeSet集合概述和特点【应用】</h3><ul>
<li><p>TreeSet集合概述</p>
<ul>
<li>元素有序，可以按照一定的规则进行排序，具体排序方式取决于构造方法<ul>
<li>TreeSet()：根据其元素的自然排序进行排序</li>
<li>TreeSet(Comparator comparator) ：根据指定的比较器进行排序</li>
</ul>
</li>
<li>没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>由于是Set集合，所以不包含重复元素的集合</li>
</ul>
</li>
<li><p>TreeSet集合基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Integer&gt; ts = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        ts.add(<span class="number">10</span>);</span><br><span class="line">        ts.add(<span class="number">40</span>);</span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line">        ts.add(<span class="number">50</span>);</span><br><span class="line">        ts.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        ts.add(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : ts) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2自然排序Comparable的使用【应用】"><a href="#2-2自然排序Comparable的使用【应用】" class="headerlink" title="2.2自然排序Comparable的使用【应用】"></a>2.2自然排序Comparable的使用【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>存储学生对象并遍历，创建TreeSet集合使用无参构造方法</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>实现步骤</p>
<ul>
<li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li>
<li>自然排序，就是让元素所属的类实现Comparable接口，重写compareTo(T o)方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//        return 1;</span></span><br><span class="line"><span class="comment">//        return -1;</span></span><br><span class="line">        <span class="comment">//按照年龄从小到大排序</span></span><br><span class="line">       <span class="keyword">int</span> num = <span class="keyword">this</span>.age - s.age;</span><br><span class="line"><span class="comment">//        int num = s.age - this.age;</span></span><br><span class="line">        <span class="comment">//年龄相同时，按照姓名的字母顺序排序</span></span><br><span class="line">       <span class="keyword">int</span> num2 = num==<span class="number">0</span>?<span class="keyword">this</span>.name.compareTo(s.name):num;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;xishi&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzhaojun&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;diaochan&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;yangyuhuan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-3比较器排序Comparator的使用【应用】"><a href="#2-3比较器排序Comparator的使用【应用】" class="headerlink" title="2.3比较器排序Comparator的使用【应用】"></a>2.3比较器排序Comparator的使用【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>存储学生对象并遍历，创建TreeSet集合使用带参构造方法</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>实现步骤</p>
<ul>
<li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较器排序对元素进行排序的</li>
<li>比较器排序，就是让集合构造方法接收Comparator的实现类对象，重写compare(T o1,T o2)方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//this.age - s.age</span></span><br><span class="line">                <span class="comment">//s1,s2</span></span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge() - s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">                <span class="keyword">return</span> num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;xishi&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzhaojun&quot;</span>, <span class="number">28</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;diaochan&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;yangyuhuan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>,<span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-4成绩排序案例【应用】"><a href="#2-4成绩排序案例【应用】" class="headerlink" title="2.4成绩排序案例【应用】"></a>2.4成绩排序案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>用TreeSet集合存储多个学生信息(姓名，语文成绩，数学成绩)，并遍历该集合</li>
<li>要求：按照总分从高到低出现</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> math;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> chinese, <span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChinese</span><span class="params">(<span class="keyword">int</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese + <span class="keyword">this</span>.math;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合对象，通过比较器排序进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                int num = (s2.getChinese()+s2.getMath())-(s1.getChinese()+s1.getMath());</span></span><br><span class="line">                <span class="comment">//主要条件</span></span><br><span class="line">                <span class="keyword">int</span> num = s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getChinese() - s2.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num2;</span><br><span class="line">                <span class="keyword">return</span> num3;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">98</span>, <span class="number">100</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">95</span>, <span class="number">95</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">100</span>, <span class="number">93</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;柳岩&quot;</span>, <span class="number">100</span>, <span class="number">97</span>);</span><br><span class="line">        Student s5 = <span class="keyword">new</span> Student(<span class="string">&quot;风清扬&quot;</span>, <span class="number">98</span>, <span class="number">98</span>);</span><br><span class="line"></span><br><span class="line">        Student s6 = <span class="keyword">new</span> Student(<span class="string">&quot;左冷禅&quot;</span>, <span class="number">97</span>, <span class="number">99</span>);</span><br><span class="line"><span class="comment">//        Student s7 = new Student(&quot;左冷禅&quot;, 97, 99);</span></span><br><span class="line">        Student s7 = <span class="keyword">new</span> Student(<span class="string">&quot;赵云&quot;</span>, <span class="number">97</span>, <span class="number">99</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生对象添加到集合</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line">        ts.add(s5);</span><br><span class="line">        ts.add(s6);</span><br><span class="line">        ts.add(s7);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getChinese() + <span class="string">&quot;,&quot;</span> + s.getMath() + <span class="string">&quot;,&quot;</span> + s.getSum());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-5不重复的随机数案例【应用】"><a href="#2-5不重复的随机数案例【应用】" class="headerlink" title="2.5不重复的随机数案例【应用】"></a>2.5不重复的随机数案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>编写一个程序，获取10个1-20之间的随机数，要求随机数不能重复，并在控制台输出</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Set集合对象</span></span><br><span class="line"><span class="comment">//        Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建随机数对象</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断集合的长度是不是小于10</span></span><br><span class="line">        <span class="keyword">while</span> (set.size()&lt;<span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//产生一个随机数，添加到集合</span></span><br><span class="line">            <span class="keyword">int</span> number = r.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">            set.add(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : set) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3.泛型"></a>3.泛型</h2><h3 id="3-1泛型概述和好处【理解】"><a href="#3-1泛型概述和好处【理解】" class="headerlink" title="3.1泛型概述和好处【理解】"></a>3.1泛型概述和好处【理解】</h3><ul>
<li><p>泛型概述</p>
<p>​    是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型</p>
<p>它的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？顾名思义，就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口</p>
</li>
<li><p>泛型定义格式</p>
<ul>
<li>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参</li>
<li>&lt;类型1,类型2…&gt;：指定多种类型的格式，多种类型之间用逗号隔开。这里的类型可以看成是形参</li>
<li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li>
</ul>
</li>
<li><p>泛型的好处</p>
<ul>
<li>把运行时期的问题提前到了编译期间</li>
<li>避免了强制类型转换</li>
</ul>
</li>
</ul>
<h3 id="3-2泛型类【应用】"><a href="#3-2泛型类【应用】" class="headerlink" title="3.2泛型类【应用】"></a>3.2泛型类【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;类型&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> Generic&lt;String&gt;();</span><br><span class="line">        g1.setT(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(g1.getT());</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> Generic&lt;Integer&gt;();</span><br><span class="line">        g2.setT(<span class="number">30</span>);</span><br><span class="line">        System.out.println(g2.getT());</span><br><span class="line"></span><br><span class="line">        Generic&lt;Boolean&gt; g3 = <span class="keyword">new</span> Generic&lt;Boolean&gt;();</span><br><span class="line">        g3.setT(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(g3.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-3泛型方法【应用】"><a href="#3-3泛型方法【应用】" class="headerlink" title="3.3泛型方法【应用】"></a>3.3泛型方法【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>带有泛型方法的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Generic g = <span class="keyword">new</span> Generic();</span><br><span class="line">        g.show(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        g.show(<span class="number">30</span>);</span><br><span class="line">        g.show(<span class="keyword">true</span>);</span><br><span class="line">        g.show(<span class="number">12.34</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-4泛型接口【应用】"><a href="#3-4泛型接口【应用】" class="headerlink" title="3.4泛型接口【应用】"></a>3.4泛型接口【应用】</h3><ul>
<li><p>定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;类型&gt; </span>&#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>示例代码</p>
<ul>
<li><p>泛型接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>泛型接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> GenericImpl&lt;String&gt;();</span><br><span class="line">        g1.show(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> GenericImpl&lt;Integer&gt;();</span><br><span class="line">        g2.show(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5类型通配符【应用】"><a href="#3-5类型通配符【应用】" class="headerlink" title="3.5类型通配符【应用】"></a>3.5类型通配符【应用】</h3><ul>
<li><p>类型通配符的作用</p>
<p>​    为了表示各种泛型List的父类，可以使用类型通配符    </p>
</li>
<li><p>类型通配符的分类</p>
<ul>
<li>类型通配符：&lt;?&gt;<ul>
<li>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何的类型</li>
<li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li>
</ul>
</li>
<li>类型通配符上限：&lt;? extends 类型&gt;<ul>
<li>List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</li>
</ul>
</li>
<li>类型通配符下限：&lt;? super 类型&gt;<ul>
<li>List&lt;? super Number&gt;：它表示的类型是Number或者其父类型</li>
</ul>
</li>
</ul>
</li>
<li><p>类型通配符的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型通配符：&lt;?&gt;</span></span><br><span class="line">        List&lt;?&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        List&lt;?&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型通配符上限：&lt;? extends 类型&gt;</span></span><br><span class="line"><span class="comment">//        List&lt;? extends Number&gt; list4 = new ArrayList&lt;Object&gt;();</span></span><br><span class="line">        List&lt;? extends Number&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        List&lt;? extends Number&gt; list6 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类型通配符下限：&lt;? super 类型&gt;</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list7 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;? <span class="keyword">super</span> Number&gt; list8 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line"><span class="comment">//        List&lt;? super Number&gt; list9 = new ArrayList&lt;Integer&gt;();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-可变参数"><a href="#4-可变参数" class="headerlink" title="4.可变参数"></a>4.可变参数</h2><h3 id="4-1可变参数【应用】"><a href="#4-1可变参数【应用】" class="headerlink" title="4.1可变参数【应用】"></a>4.1可变参数【应用】</h3><ul>
<li><p>可变参数介绍</p>
<p>​    可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p>
</li>
<li><p>可变参数定义格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型… 变量名) &#123;  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>可变参数的注意事项</p>
<ul>
<li>这里的变量其实是一个数组</li>
<li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后</li>
</ul>
</li>
<li><p>可变参数的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>));</span><br><span class="line">        System.out.println(sum(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>,<span class="number">90</span>,<span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public static int sum(int b,int... a) &#123;</span></span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span>... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-2可变参数的使用【应用】"><a href="#4-2可变参数的使用【应用】" class="headerlink" title="4.2可变参数的使用【应用】"></a>4.2可变参数的使用【应用】</h3><ul>
<li><p>Arrays工具类中有一个静态方法：</p>
<ul>
<li>public static <T> List<T> asList(T… a)：返回由指定数组支持的固定大小的列表</T></T></li>
<li>返回的集合不能做增删操作，可以做修改操作</li>
</ul>
</li>
<li><p>List接口中有一个静态方法：</p>
<ul>
<li>public static <E> List<E> of(E… elements)：返回包含任意数量元素的不可变列表</E></E></li>
<li>返回的集合不能做增删改操作</li>
</ul>
</li>
<li><p>Set接口中有一个静态方法：</p>
<ul>
<li>public static <E> Set<E> of(E… elements) ：返回一个包含任意数量元素的不可变集合</E></E></li>
<li>在给元素的时候，不能给重复的元素</li>
<li>返回的集合不能做增删操作，没有修改的方法</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public static &lt;T&gt; List&lt;T&gt; asList(T... a)：返回由指定数组支持的固定大小的列表</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        list.add(&quot;javaee&quot;); //UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.remove(&quot;world&quot;); //UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//        list.set(1,&quot;javaee&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; List&lt;E&gt; of(E... elements)：返回包含任意数量元素的不可变列表</span></span><br><span class="line"><span class="comment">//        List&lt;String&gt; list = List.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;, &quot;world&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////        list.add(&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.remove(&quot;java&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">////        list.set(1,&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;E&gt; Set&lt;E&gt; of(E... elements) ：返回一个包含任意数量元素的不可变集合</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; set = Set.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;,&quot;world&quot;); //IllegalArgumentException</span></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = Set.of(&quot;hello&quot;, &quot;world&quot;, &quot;java&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        set.add(&quot;javaee&quot;);//UnsupportedOperationException</span></span><br><span class="line"><span class="comment">//        set.remove(&quot;world&quot;);//UnsupportedOperationException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(set);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Map集合</title>
    <url>/2019/08/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190827Map%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-Map集合"><a href="#1-Map集合" class="headerlink" title="1.Map集合"></a>1.Map集合</h2><h3 id="1-1Map集合概述和特点【理解】"><a href="#1-1Map集合概述和特点【理解】" class="headerlink" title="1.1Map集合概述和特点【理解】"></a>1.1Map集合概述和特点【理解】</h3><ul>
<li><p>Map集合概述</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;  <span class="title">K</span>：键的类型；<span class="title">V</span>：值的类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Map集合的特点</p>
<ul>
<li><p>键值对映射关系</p>
</li>
<li><p>一个键对应一个值</p>
</li>
<li><p>键不能重复，值可以重复</p>
</li>
<li><p>元素存取无序</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>Map集合的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span></span><br><span class="line">        map.put(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2Map集合的基本功能【应用】"><a href="#1-2Map集合的基本功能【应用】" class="headerlink" title="1.2Map集合的基本功能【应用】"></a>1.2Map集合的基本功能【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>V   put(K key,V   value)</td>
<td>添加元素</td>
</tr>
<tr>
<td>V   remove(Object key)</td>
<td>根据键删除键值对元素</td>
</tr>
<tr>
<td>void   clear()</td>
<td>移除所有的键值对元素</td>
</tr>
<tr>
<td>boolean containsKey(Object key)</td>
<td>判断集合是否包含指定的键</td>
</tr>
<tr>
<td>boolean containsValue(Object value)</td>
<td>判断集合是否包含指定的值</td>
</tr>
<tr>
<td>boolean isEmpty()</td>
<td>判断集合是否为空</td>
</tr>
<tr>
<td>int size()</td>
<td>集合的长度，也就是集合中键值对的个数</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V put(K key,V value)：添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>,<span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>,<span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>,<span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V remove(Object key)：根据键删除键值对元素</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.remove(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void clear()：移除所有的键值对元素</span></span><br><span class="line"><span class="comment">//        map.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：判断集合是否包含指定的键</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭靖&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.containsKey(&quot;郭襄&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean isEmpty()：判断集合是否为空</span></span><br><span class="line"><span class="comment">//        System.out.println(map.isEmpty());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：集合的长度，也就是集合中键值对的个数</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3Map集合的获取功能【应用】"><a href="#1-3Map集合的获取功能【应用】" class="headerlink" title="1.3Map集合的获取功能【应用】"></a>1.3Map集合的获取功能【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>V   get(Object key)</td>
<td>根据键获取值</td>
</tr>
<tr>
<td>Set<K>   keySet()</K></td>
<td>获取所有键的集合</td>
</tr>
<tr>
<td>Collection<V>   values()</V></td>
<td>获取所有值的集合</td>
</tr>
<tr>
<td>Set&lt;Map.Entry&lt;K,V&gt;&gt;   entrySet()</td>
<td>获取所有键值对对象的集合</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//V get(Object key):根据键获取值</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张无忌&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(map.get(&quot;张三丰&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;K&gt; keySet():获取所有键的集合</span></span><br><span class="line"><span class="comment">//        Set&lt;String&gt; keySet = map.keySet();</span></span><br><span class="line"><span class="comment">//        for(String key : keySet) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collection&lt;V&gt; values():获取所有值的集合</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(String value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4Map集合的遍历-方式1-【应用】"><a href="#1-4Map集合的遍历-方式1-【应用】" class="headerlink" title="1.4Map集合的遍历(方式1)【应用】"></a>1.4Map集合的遍历(方式1)【应用】</h3><ul>
<li><p>遍历思路</p>
<ul>
<li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul>
<li>把所有的丈夫给集中起来</li>
<li>遍历丈夫的集合，获取到每一个丈夫</li>
<li>根据丈夫去找对应的妻子</li>
</ul>
</li>
</ul>
</li>
<li><p>步骤分析</p>
<ul>
<li>获取所有键的集合。用keySet()方法实现</li>
<li>遍历键的集合，获取到每一个键。用增强for实现  </li>
<li>根据键去找值。用get(Object key)方法实现</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键的集合。用keySet()方法实现</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="comment">//遍历键的集合，获取到每一个键。用增强for实现</span></span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//根据键去找值。用get(Object key)方法实现</span></span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5Map集合的遍历-方式2-【应用】"><a href="#1-5Map集合的遍历-方式2-【应用】" class="headerlink" title="1.5Map集合的遍历(方式2)【应用】"></a>1.5Map集合的遍历(方式2)【应用】</h3><ul>
<li><p>遍历思路</p>
<ul>
<li>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合<ul>
<li>获取所有结婚证的集合</li>
<li>遍历结婚证的集合，得到每一个结婚证</li>
<li>根据结婚证获取丈夫和妻子</li>
</ul>
</li>
</ul>
</li>
<li><p>步骤分析</p>
<ul>
<li>获取所有键值对对象的集合<ul>
<li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()：获取所有键值对对象的集合</li>
</ul>
</li>
<li>遍历键值对对象的集合，得到每一个键值对对象<ul>
<li>用增强for实现，得到每一个Map.Entry</li>
</ul>
</li>
<li>根据键值对对象获取键和值<ul>
<li>用getKey()得到键</li>
<li>用getValue()得到值</li>
</ul>
</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        map.put(<span class="string">&quot;张无忌&quot;</span>, <span class="string">&quot;赵敏&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有键值对对象的集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line">        <span class="comment">//遍历键值对对象的集合，得到每一个键值对对象</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; me : entrySet) &#123;</span><br><span class="line">            <span class="comment">//根据键值对对象获取键和值</span></span><br><span class="line">            String key = me.getKey();</span><br><span class="line">            String value = me.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6Map集合的案例【应用】"><a href="#1-6Map集合的案例【应用】" class="headerlink" title="1.6Map集合的案例【应用】"></a>1.6Map集合的案例【应用】</h3><h4 id="1-6-1HashMap集合练习之键是String值是Student"><a href="#1-6-1HashMap集合练习之键是String值是Student" class="headerlink" title="1.6.1HashMap集合练习之键是String值是Student"></a>1.6.1HashMap集合练习之键是String值是Student</h4><ul>
<li><p>案例需求</p>
<p>​    创建一个HashMap集合，键是学号(String)，值是学生对象(Student)。存储三个键值对元素，并遍历</p>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：</span></span><br><span class="line"><span class="comment">        创建一个HashMap集合，键是学号(String)，值是学生对象(Student)。存储三个键值对元素，并遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1:定义学生类</span></span><br><span class="line"><span class="comment">        2:创建HashMap集合对象</span></span><br><span class="line"><span class="comment">        3:创建学生对象</span></span><br><span class="line"><span class="comment">        4:把学生添加到集合</span></span><br><span class="line"><span class="comment">        5:遍历集合</span></span><br><span class="line"><span class="comment">            方式1：键找值</span></span><br><span class="line"><span class="comment">            方式2：键值对对象找键和值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        HashMap&lt;String, Student&gt; hm = <span class="keyword">new</span> HashMap&lt;String, Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;itheima001&quot;</span>, s1);</span><br><span class="line">        hm.put(<span class="string">&quot;itheima002&quot;</span>, s2);</span><br><span class="line">        hm.put(<span class="string">&quot;itheima003&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式1：键找值</span></span><br><span class="line">        Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            Student value = hm.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value.getName() + <span class="string">&quot;,&quot;</span> + value.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2：键值对对象找键和值</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Student&gt;&gt; entrySet = hm.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Student&gt; me : entrySet) &#123;</span><br><span class="line">            String key = me.getKey();</span><br><span class="line">            Student value = me.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value.getName() + <span class="string">&quot;,&quot;</span> + value.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-6-2HashMap集合练习之键是Student值是String"><a href="#1-6-2HashMap集合练习之键是Student值是String" class="headerlink" title="1.6.2HashMap集合练习之键是Student值是String"></a>1.6.2HashMap集合练习之键是Student值是String</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个HashMap集合，键是学生对象(Student)，值是居住地 (String)。存储多个元素，并遍历。</li>
<li>要求保证键的唯一性：如果学生对象的成员变量值相同，我们就认为是同一个对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Student student = (Student) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != student.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(student.name) : student.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        HashMap&lt;Student, String&gt; hm = <span class="keyword">new</span> HashMap&lt;Student, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        hm.put(s1, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        hm.put(s2, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        hm.put(s3, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line">        hm.put(s4, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Student&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Student key : keySet) &#123;</span><br><span class="line">            String value = hm.get(key);</span><br><span class="line">            System.out.println(key.getName() + <span class="string">&quot;,&quot;</span> + key.getAge() + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-6-3集合嵌套之ArrayList嵌套HashMap"><a href="#1-6-3集合嵌套之ArrayList嵌套HashMap" class="headerlink" title="1.6.3集合嵌套之ArrayList嵌套HashMap"></a>1.6.3集合嵌套之ArrayList嵌套HashMap</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个ArrayList集合，存储三个元素，每一个元素都是HashMap</li>
<li>每一个HashMap的键和值都是String，并遍历。</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListIncludeHashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;HashMap&lt;String, String&gt;&gt; array = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashMap集合，并添加键值对元素</span></span><br><span class="line">        HashMap&lt;String, String&gt; hm1 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm1.put(<span class="string">&quot;孙策&quot;</span>, <span class="string">&quot;大乔&quot;</span>);</span><br><span class="line">        hm1.put(<span class="string">&quot;周瑜&quot;</span>, <span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm1);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; hm2 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm2.put(<span class="string">&quot;郭靖&quot;</span>, <span class="string">&quot;黄蓉&quot;</span>);</span><br><span class="line">        hm2.put(<span class="string">&quot;杨过&quot;</span>, <span class="string">&quot;小龙女&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm2);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; hm3 = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hm3.put(<span class="string">&quot;令狐冲&quot;</span>, <span class="string">&quot;任盈盈&quot;</span>);</span><br><span class="line">        hm3.put(<span class="string">&quot;林平之&quot;</span>, <span class="string">&quot;岳灵珊&quot;</span>);</span><br><span class="line">        <span class="comment">//把HashMap作为元素添加到ArrayList集合</span></span><br><span class="line">        array.add(hm3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历ArrayList集合</span></span><br><span class="line">        <span class="keyword">for</span> (HashMap&lt;String, String&gt; hm : array) &#123;</span><br><span class="line">            Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">            <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">                String value = hm.get(key);</span><br><span class="line">                System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-4集合嵌套之HashMap嵌套ArrayList"><a href="#1-6-4集合嵌套之HashMap嵌套ArrayList" class="headerlink" title="1.6.4集合嵌套之HashMap嵌套ArrayList"></a>1.6.4集合嵌套之HashMap嵌套ArrayList</h4><ul>
<li><p>案例需求</p>
<ul>
<li>创建一个HashMap集合，存储三个键值对元素，每一个键值对元素的键是String，值是ArrayList</li>
<li>每一个ArrayList的元素是String，并遍历。</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapIncludeArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String, ArrayList&lt;String&gt;&gt; hm = <span class="keyword">new</span> HashMap&lt;String, ArrayList&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合，并添加元素</span></span><br><span class="line">        ArrayList&lt;String&gt; sgyy = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        sgyy.add(<span class="string">&quot;诸葛亮&quot;</span>);</span><br><span class="line">        sgyy.add(<span class="string">&quot;赵云&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;三国演义&quot;</span>,sgyy);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; xyj = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        xyj.add(<span class="string">&quot;唐僧&quot;</span>);</span><br><span class="line">        xyj.add(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;西游记&quot;</span>,xyj);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; shz = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        shz.add(<span class="string">&quot;武松&quot;</span>);</span><br><span class="line">        shz.add(<span class="string">&quot;鲁智深&quot;</span>);</span><br><span class="line">        <span class="comment">//把ArrayList作为元素添加到HashMap集合</span></span><br><span class="line">        hm.put(<span class="string">&quot;水浒传&quot;</span>,shz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历HashMap集合</span></span><br><span class="line">        Set&lt;String&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span>(String key : keySet) &#123;</span><br><span class="line">            System.out.println(key);</span><br><span class="line">            ArrayList&lt;String&gt; value = hm.get(key);</span><br><span class="line">            <span class="keyword">for</span>(String s : value) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t&quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-5统计字符串中每个字符出现的次数"><a href="#1-6-5统计字符串中每个字符出现的次数" class="headerlink" title="1.6.5统计字符串中每个字符出现的次数"></a>1.6.5统计字符串中每个字符出现的次数</h4><ul>
<li><p>案例需求</p>
<ul>
<li>键盘录入一个字符串，要求统计字符串中每个字符串出现的次数。</li>
<li>举例：键盘录入“aababcabcdabcde”  在控制台输出：“a(5)b(4)c(3)d(2)e(1)”</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建HashMap集合，键是Character，值是Integer</span></span><br><span class="line"><span class="comment">//        HashMap&lt;Character, Integer&gt; hm = new HashMap&lt;Character, Integer&gt;();</span></span><br><span class="line">        TreeMap&lt;Character, Integer&gt; hm = <span class="keyword">new</span> TreeMap&lt;Character, Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历字符串，得到每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> key = line.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿得到的每一个字符作为键到HashMap集合中去找对应的值，看其返回值</span></span><br><span class="line">            Integer value = hm.get(key);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果返回值是null：说明该字符在HashMap集合中不存在，就把该字符作为键，1作为值存储</span></span><br><span class="line">                hm.put(key,<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果返回值不是null：说明该字符在HashMap集合中存在，把该值加1，然后重新存储该字符和对应的值</span></span><br><span class="line">                value++;</span><br><span class="line">                hm.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历HashMap集合，得到键和值，按照要求进行拼接</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        Set&lt;Character&gt; keySet = hm.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Character key : keySet) &#123;</span><br><span class="line">            Integer value = hm.get(key);</span><br><span class="line">            sb.append(key).append(<span class="string">&quot;(&quot;</span>).append(value).append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String result = sb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-Collections集合工具类"><a href="#2-Collections集合工具类" class="headerlink" title="2.Collections集合工具类"></a>2.Collections集合工具类</h2><h3 id="2-1Collections概述和使用【应用】"><a href="#2-1Collections概述和使用【应用】" class="headerlink" title="2.1Collections概述和使用【应用】"></a>2.1Collections概述和使用【应用】</h3><ul>
<li><p>Collections类的作用</p>
<p>​    是针对集合操作的工具类</p>
</li>
<li><p>Collections类常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static void sort(List<T> list)</T></td>
<td>将指定的列表按升序排序</td>
</tr>
<tr>
<td>public static void reverse(List&lt;?&gt; list)</td>
<td>反转指定列表中元素的顺序</td>
</tr>
<tr>
<td>public static void shuffle(List&lt;?&gt; list)</td>
<td>使用默认的随机源随机排列指定的列表</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="number">30</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);</span><br><span class="line">        list.add(<span class="number">50</span>);</span><br><span class="line">        list.add(<span class="number">10</span>);</span><br><span class="line">        list.add(<span class="number">40</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list)：将指定的列表按升序排序</span></span><br><span class="line"><span class="comment">//        Collections.sort(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void reverse(List&lt;?&gt; list)：反转指定列表中元素的顺序</span></span><br><span class="line"><span class="comment">//        Collections.reverse(list);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void shuffle(List&lt;?&gt; list)：使用默认的随机源随机排列指定的列表</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2ArrayList集合存储学生并排序【应用】"><a href="#2-2ArrayList集合存储学生并排序【应用】" class="headerlink" title="2.2ArrayList集合存储学生并排序【应用】"></a>2.2ArrayList集合存储学生并排序【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>ArrayList存储学生对象，使用Collections对ArrayList进行排序</li>
<li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;linqingxia&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;zhangmanyu&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;wangzuxian&quot;</span>, <span class="number">33</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;liuyan&quot;</span>, <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line">        array.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Collections对ArrayList集合排序</span></span><br><span class="line">        <span class="comment">//sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</span></span><br><span class="line">        Collections.sort(array, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</span></span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge() - s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">                <span class="keyword">return</span> num2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-斗地主案例"><a href="#3-斗地主案例" class="headerlink" title="3.斗地主案例"></a>3.斗地主案例</h2><h3 id="3-1模拟斗地主案例-普通版本【应用】"><a href="#3-1模拟斗地主案例-普通版本【应用】" class="headerlink" title="3.1模拟斗地主案例-普通版本【应用】"></a>3.1模拟斗地主案例-普通版本【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    通过程序实现斗地主过程中的洗牌，发牌和看牌</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往牌盒里面装牌</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ♦2,♦3,♦4...♦K,♦A</span></span><br><span class="line"><span class="comment">            ♣2,...</span></span><br><span class="line"><span class="comment">            ♥2,...</span></span><br><span class="line"><span class="comment">            ♠2,...</span></span><br><span class="line"><span class="comment">            小王，大王</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义花色数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//定义点数数组</span></span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">                array.add(color + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        array.add(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;大王&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌，也就是把牌打撒，用Collections的shuffle()方法实现</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(array);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌，也就是遍历集合，给三个玩家发牌</span></span><br><span class="line">        ArrayList&lt;String&gt; lqxArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; lyArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; fqyArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; dpArray = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            String poker = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= array.size() - <span class="number">3</span>) &#123;</span><br><span class="line">                dpArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                lqxArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                lyArray.add(poker);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                fqyArray.add(poker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看牌，也就是三个玩家分别遍历自己的牌</span></span><br><span class="line">        lookPoker(<span class="string">&quot;林青霞&quot;</span>, lqxArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;柳岩&quot;</span>, lyArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;风清扬&quot;</span>, fqyArray);</span><br><span class="line">        lookPoker(<span class="string">&quot;底牌&quot;</span>, dpArray);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看牌的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name, ArrayList&lt;String&gt; array)</span> </span>&#123;</span><br><span class="line">        System.out.print(name + <span class="string">&quot;的牌是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String poker : array) &#123;</span><br><span class="line">            System.out.print(poker + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2模拟斗地主案例-升级版本【应用】"><a href="#3-2模拟斗地主案例-升级版本【应用】" class="headerlink" title="3.2模拟斗地主案例-升级版本【应用】"></a>3.2模拟斗地主案例-升级版本【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    通过程序实现斗地主过程中的洗牌，发牌和看牌。要求：对牌进行排序</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PokerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap，键是编号，值是牌</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; hm = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList，存储编号</span></span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建花色数组和点数数组</span></span><br><span class="line">        String[] colors = &#123;<span class="string">&quot;♦&quot;</span>, <span class="string">&quot;♣&quot;</span>, <span class="string">&quot;♥&quot;</span>, <span class="string">&quot;♠&quot;</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;10&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0开始往HashMap里面存储编号，并存储对应的牌。同时往ArrayList里面存储编号</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                hm.put(index, color + number);</span><br><span class="line">                array.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hm.put(index, <span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        hm.put(index, <span class="string">&quot;大王&quot;</span>);</span><br><span class="line">        array.add(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//洗牌(洗的是编号)，用Collections的shuffle()方法实现</span></span><br><span class="line">        Collections.shuffle(array);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发牌(发的也是编号，为了保证编号是排序的，创建TreeSet集合接收)</span></span><br><span class="line">        TreeSet&lt;Integer&gt; lqxSet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; lySet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; fqySet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line">        TreeSet&lt;Integer&gt; dpSet = <span class="keyword">new</span> TreeSet&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= array.size() - <span class="number">3</span>) &#123;</span><br><span class="line">                dpSet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                lqxSet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                lySet.add(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">                fqySet.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用看牌方法</span></span><br><span class="line">        lookPoker(<span class="string">&quot;林青霞&quot;</span>, lqxSet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;柳岩&quot;</span>, lySet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;风清扬&quot;</span>, fqySet, hm);</span><br><span class="line">        lookPoker(<span class="string">&quot;底牌&quot;</span>, dpSet, hm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法看牌(遍历TreeSet集合，获取编号，到HashMap集合找对应的牌)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name, TreeSet&lt;Integer&gt; ts, HashMap&lt;Integer, String&gt; hm)</span> </span>&#123;</span><br><span class="line">        System.out.print(name + <span class="string">&quot;的牌是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer key : ts) &#123;</span><br><span class="line">            String poker = hm.get(key);</span><br><span class="line">            System.out.print(poker + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>File类&amp;递归&amp;字节流</title>
    <url>/2019/08/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190829File%E7%B1%BB&amp;%E9%80%92%E5%BD%92&amp;%E5%AD%97%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h2 id="1-File类"><a href="#1-File类" class="headerlink" title="1.File类"></a>1.File类</h2><h3 id="1-1File类概述和构造方法【应用】"><a href="#1-1File类概述和构造方法【应用】" class="headerlink" title="1.1File类概述和构造方法【应用】"></a>1.1File类概述和构造方法【应用】</h3><ul>
<li><p>File类介绍</p>
<ul>
<li><p>它是文件和目录路径名的抽象表示</p>
</li>
<li><p>文件和目录是可以通过File封装成对象的</p>
</li>
<li><p>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。将来是要通过具体的操作把这个路径的内容转换为具体存在的</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>File类的构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>File(String   pathname)</td>
<td>通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例</td>
</tr>
<tr>
<td>File(String   parent, String child)</td>
<td>从父路径名字符串和子路径名字符串创建新的   File实例</td>
</tr>
<tr>
<td>File(File   parent, String child)</td>
<td>从父抽象路径名和子路径名字符串创建新的   File实例</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//File(String pathname)：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(String parent, String child)：从父路径名字符串和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//File(File parent, String child)：从父抽象路径名和子路径名字符串创建新的 File实例。</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        File f4 = <span class="keyword">new</span> File(f3,<span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2File类创建功能【应用】"><a href="#1-2File类创建功能【应用】" class="headerlink" title="1.2File类创建功能【应用】"></a>1.2File类创建功能【应用】</h3><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean createNewFile()</td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td>
</tr>
<tr>
<td>public boolean mkdir()</td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td>public boolean mkdirs()</td>
<td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//需求1：我要在E:\\itcast目录下创建一个文件java.txt</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line">        System.out.println(f1.createNewFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：我要在E:\\itcast目录下创建一个目录JavaSE</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaSE&quot;</span>);</span><br><span class="line">        System.out.println(f2.mkdir());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：我要在E:\\itcast目录下创建一个多级目录JavaWEB\\HTML</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\JavaWEB\\HTML&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        System.out.println(f3.mkdirs());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：我要在E:\\itcast目录下创建一个文件javase.txt</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\javase.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.mkdir());</span></span><br><span class="line">        System.out.println(f4.createNewFile());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3File类判断和获取功能【应用】"><a href="#1-3File类判断和获取功能【应用】" class="headerlink" title="1.3File类判断和获取功能【应用】"></a>1.3File类判断和获取功能【应用】</h3><ul>
<li><p>判断功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   boolean isDirectory()</td>
<td>测试此抽象路径名表示的File是否为目录</td>
</tr>
<tr>
<td>public   boolean isFile()</td>
<td>测试此抽象路径名表示的File是否为文件</td>
</tr>
<tr>
<td>public   boolean   exists()</td>
<td>测试此抽象路径名表示的File是否存在</td>
</tr>
</tbody></table>
</li>
<li><p>获取功能</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public   String getAbsolutePath()</td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td>public   String getPath()</td>
<td>将此抽象路径名转换为路径名字符串</td>
</tr>
<tr>
<td>public   String getName()</td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td>public   String[] list()</td>
<td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td>
</tr>
<tr>
<td>public   File[] listFiles()</td>
<td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个File对象</span></span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public boolean isDirectory()：测试此抽象路径名表示的File是否为目录</span></span><br><span class="line"><span class="comment">//        public boolean isFile()：测试此抽象路径名表示的File是否为文件</span></span><br><span class="line"><span class="comment">//        public boolean exists()：测试此抽象路径名表示的File是否存在</span></span><br><span class="line">        System.out.println(f.isDirectory());</span><br><span class="line">        System.out.println(f.isFile());</span><br><span class="line">        System.out.println(f.exists());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String getAbsolutePath()：返回此抽象路径名的绝对路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getPath()：将此抽象路径名转换为路径名字符串</span></span><br><span class="line"><span class="comment">//        public String getName()：返回由此抽象路径名表示的文件或目录的名称</span></span><br><span class="line">        System.out.println(f.getAbsolutePath());</span><br><span class="line">        System.out.println(f.getPath());</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        public String[] list()：返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</span></span><br><span class="line"><span class="comment">//        public File[] listFiles()：返回此抽象路径名表示的目录中的文件和目录的File对象数组</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] strArray = f2.list();</span><br><span class="line">        <span class="keyword">for</span>(String str : strArray) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        File[] fileArray = f2.listFiles();</span><br><span class="line">        <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(file);</span></span><br><span class="line"><span class="comment">//            System.out.println(file.getName());</span></span><br><span class="line">            <span class="keyword">if</span>(file.isFile()) &#123;</span><br><span class="line">                System.out.println(file.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4File类删除功能【应用】"><a href="#1-4File类删除功能【应用】" class="headerlink" title="1.4File类删除功能【应用】"></a>1.4File类删除功能【应用】</h3><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public boolean   delete()</td>
<td>删除由此抽象路径名表示的文件或目录</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        File f1 = new File(&quot;E:\\itcast\\java.txt&quot;);</span></span><br><span class="line">        <span class="comment">//需求1：在当前模块目录下创建java.txt文件</span></span><br><span class="line">        File f1 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f1.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：删除当前模块目录下的java.txt文件</span></span><br><span class="line">        System.out.println(f1.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：在当前模块目录下创建itcast目录</span></span><br><span class="line">        File f2 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f2.mkdir());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：删除当前模块目录下的itcast目录</span></span><br><span class="line">        System.out.println(f2.delete());</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：在当前模块下创建一个目录itcast,然后在该目录下创建一个文件java.txt</span></span><br><span class="line">        File f3 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f3.mkdir());</span></span><br><span class="line">        File f4 = <span class="keyword">new</span> File(<span class="string">&quot;myFile\\itcast\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(f4.createNewFile());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：删除当前模块下的目录itcast</span></span><br><span class="line">        System.out.println(f4.delete());</span><br><span class="line">        System.out.println(f3.delete());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绝对路径和相对路径的区别</p>
<ul>
<li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件。例如：E:\itcast\java.txt</li>
<li>相对路径：必须使用取自其他路径名的信息进行解释。例如：myFile\java.txt</li>
</ul>
</li>
</ul>
<h2 id="2-递归"><a href="#2-递归" class="headerlink" title="2.递归"></a>2.递归</h2><h3 id="2-1递归【应用】"><a href="#2-1递归【应用】" class="headerlink" title="2.1递归【应用】"></a>2.1递归【应用】</h3><ul>
<li><p>递归的介绍</p>
<ul>
<li>以编程的角度来看，递归指的是方法定义中调用方法本身的现象</li>
<li>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解</li>
<li>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</li>
</ul>
</li>
<li><p>递归的基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//回顾不死神兔问题，求第20个月兔子的对数</span></span><br><span class="line">        <span class="comment">//每个月的兔子对数：1,1,2,3,5,8，...</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr[<span class="number">19</span>]);</span><br><span class="line">        System.out.println(f(<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        递归解决问题，首先就是要定义一个方法：</span></span><br><span class="line"><span class="comment">            定义一个方法f(n)：表示第n个月的兔子对数</span></span><br><span class="line"><span class="comment">            那么，第n-1个月的兔子对数该如何表示呢？f(n-1)</span></span><br><span class="line"><span class="comment">            同理，第n-2个月的兔子对数该如何表示呢？f(n-2)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        StackOverflowError:当堆栈溢出发生时抛出一个应用程序递归太深</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span> || n==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>递归的注意事项</p>
<ul>
<li>递归一定要有出口。否则内存溢出</li>
<li>递归虽然有出口，但是递归的次数也不宜过多。否则内存溢出</li>
</ul>
</li>
</ul>
<h3 id="2-2递归求阶乘【应用】"><a href="#2-2递归求阶乘【应用】" class="headerlink" title="2.2递归求阶乘【应用】"></a>2.2递归求阶乘【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    用递归求5的阶乘，并把结果在控制台输出</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        <span class="keyword">int</span> result = jc(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;5的阶乘是：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于递归求阶乘，参数为一个int类型的变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jc</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在方法内部判断该变量的值是否是1</span></span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//是：返回1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不是：返回n*(n-1)!</span></span><br><span class="line">            <span class="keyword">return</span> n*jc(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3递归遍历目录【应用】"><a href="#2-3递归遍历目录【应用】" class="headerlink" title="2.3递归遍历目录【应用】"></a>2.3递归遍历目录【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    给定一个路径(E:\itcast)，通过递归完成遍历该目录下所有内容，并把所有文件的绝对路径输出在控制台</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiGuiDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根据给定的路径创建一个File对象</span></span><br><span class="line"><span class="comment">//        File srcFile = new File(&quot;E:\\itcast&quot;);</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itheima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        getAllFilePath(srcFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用于获取给定目录下的所有内容，参数为第1步创建的File对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFilePath</span><span class="params">(File srcFile)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取给定的File目录下所有的文件或者目录的File数组</span></span><br><span class="line">        File[] fileArray = srcFile.listFiles();</span><br><span class="line">        <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">        <span class="keyword">if</span>(fileArray != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//判断该File对象是否是目录</span></span><br><span class="line">                <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">                    <span class="comment">//是：递归调用</span></span><br><span class="line">                    getAllFilePath(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//不是：获取绝对路径输出在控制台</span></span><br><span class="line">                    System.out.println(file.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-IO流"><a href="#3-IO流" class="headerlink" title="3.IO流"></a>3.IO流</h2><h3 id="3-1IO流概述和分类【理解】"><a href="#3-1IO流概述和分类【理解】" class="headerlink" title="3.1IO流概述和分类【理解】"></a>3.1IO流概述和分类【理解】</h3><ul>
<li>IO流介绍<ul>
<li>IO：输入/输出(Input/Output)</li>
<li>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</li>
<li>IO流就是用来处理设备间数据传输问题的。常见的应用：文件复制；文件上传；文件下载</li>
</ul>
</li>
<li>IO流的分类<ul>
<li>按照数据的流向<ul>
<li>输入流：读数据</li>
<li>输出流：写数据</li>
</ul>
</li>
<li>按照数据类型来分<ul>
<li>字节流<ul>
<li>字节输入流</li>
<li>字节输出流</li>
</ul>
</li>
<li>字符流<ul>
<li>字符输入流</li>
<li>字符输出流</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>IO流的使用场景<ul>
<li>如果操作的是纯文本文件，优先使用字符流</li>
<li>如果操作的是图片、视频、音频等二进制文件。优先使用字节流</li>
<li>如果不确定文件类型，优先使用字节流。字节流是万能的流</li>
</ul>
</li>
</ul>
<h3 id="3-2字节流写数据【应用】"><a href="#3-2字节流写数据【应用】" class="headerlink" title="3.2字节流写数据【应用】"></a>3.2字节流写数据【应用】</h3><ul>
<li><p>字节流抽象基类</p>
<ul>
<li>InputStream：这个抽象类是表示字节输入流的所有类的超类</li>
<li>OutputStream：这个抽象类是表示字节输出流的所有类的超类</li>
<li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li>
</ul>
</li>
<li><p>字节输出流</p>
<ul>
<li>FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</li>
</ul>
</li>
<li><p>使用字节输出流写数据的步骤</p>
<ul>
<li>创建字节输出流对象(调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件)</li>
<li>调用字节输出流对象的写数据方法</li>
<li>释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            做了三件事情：</span></span><br><span class="line"><span class="comment">                A:调用系统功能创建了文件</span></span><br><span class="line"><span class="comment">                B:创建了字节输出流对象</span></span><br><span class="line"><span class="comment">                C:让字节输出流对象指向创建好的文件</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line"><span class="comment">//        fos.write(57);</span></span><br><span class="line"><span class="comment">//        fos.write(55);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最后都要释放资源</span></span><br><span class="line">        <span class="comment">//void close()：关闭此文件输出流并释放与此流相关联的任何系统资源。</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3字节流写数据的三种方式【应用】"><a href="#3-3字节流写数据的三种方式【应用】" class="headerlink" title="3.3字节流写数据的三种方式【应用】"></a>3.3字节流写数据的三种方式【应用】</h3><ul>
<li><p>写数据的方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   write(int b)</td>
<td>将指定的字节写入此文件输出流   一次写一个字节数据</td>
</tr>
<tr>
<td>void   write(byte[] b)</td>
<td>将 b.length字节从指定的字节数组写入此文件输出流   一次写一个字节数组数据</td>
</tr>
<tr>
<td>void   write(byte[] b, int off, int len)</td>
<td>将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流   一次写一个字节数组的部分数据</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//new File(name)</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//FileOutputStream(File file)：创建文件输出流以写入由指定的 File对象表示的文件</span></span><br><span class="line"><span class="comment">//        File file = new File(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos2 = new FileOutputStream(new File(&quot;myByteStream\\fos.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int b)：将指定的字节写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(97);</span></span><br><span class="line"><span class="comment">//        fos.write(98);</span></span><br><span class="line"><span class="comment">//        fos.write(99);</span></span><br><span class="line"><span class="comment">//        fos.write(100);</span></span><br><span class="line"><span class="comment">//        fos.write(101);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        void write(byte[] b)：将 b.length字节从指定的字节数组写入此文件输出流</span></span><br><span class="line"><span class="comment">//        byte[] bys = &#123;97, 98, 99, 100, 101&#125;;</span></span><br><span class="line">        <span class="comment">//byte[] getBytes()：返回字符串对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">&quot;abcde&quot;</span>.getBytes();</span><br><span class="line"><span class="comment">//        fos.write(bys);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(byte[] b, int off, int len)：将 len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流</span></span><br><span class="line"><span class="comment">//        fos.write(bys,0,bys.length);</span></span><br><span class="line">        fos.write(bys,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4字节流写数据的两个小问题【应用】"><a href="#3-4字节流写数据的两个小问题【应用】" class="headerlink" title="3.4字节流写数据的两个小问题【应用】"></a>3.4字节流写数据的两个小问题【应用】</h3><ul>
<li><p>字节流写数据如何实现换行</p>
<ul>
<li>windows:\r\n</li>
<li>linux:\n</li>
<li>mac:\r</li>
</ul>
</li>
<li><p>字节流写数据如何实现追加写入</p>
<ul>
<li>public FileOutputStream(String name,boolean append)</li>
<li>创建文件输出流以指定的名称写入文件。如果第二个参数为true ，则字节将写入文件的末尾而不是开头</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输出流对象</span></span><br><span class="line"><span class="comment">//        FileOutputStream fos = new FileOutputStream(&quot;myByteStream\\fos.txt&quot;);</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5字节流写数据加异常处理【应用】"><a href="#3-5字节流写数据加异常处理【应用】" class="headerlink" title="3.5字节流写数据加异常处理【应用】"></a>3.5字节流写数据加异常处理【应用】</h3><ul>
<li><p>异常处理格式</p>
<ul>
<li><p>try-catch-finally</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)&#123;</span><br><span class="line">	异常的处理代码;</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">	执行所有清除操作;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>finally特点</p>
<ul>
<li>被finally控制的语句一定会执行，除非JVM退出</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileOutputStreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加入finally来实现释放资源</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line">            fos.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6字节流读数据-一次读一个字节数据-【应用】"><a href="#3-6字节流读数据-一次读一个字节数据-【应用】" class="headerlink" title="3.6字节流读数据(一次读一个字节数据)【应用】"></a>3.6字节流读数据(一次读一个字节数据)【应用】</h3><ul>
<li><p>字节输入流</p>
<ul>
<li>FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream ，该文件由文件系统中的路径名name命名</li>
</ul>
</li>
<li><p>字节输入流读取数据的步骤</p>
<ul>
<li>创建字节输入流对象</li>
<li>调用字节输入流对象的读数据方法</li>
<li>释放资源</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        <span class="comment">//FileInputStream(String name)</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            fis.read()：读数据</span></span><br><span class="line"><span class="comment">            by=fis.read()：把读取到的数据赋值给by</span></span><br><span class="line"><span class="comment">            by != -1：判断读取到的数据是否是-1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-7字节流复制文本文件【应用】"><a href="#3-7字节流复制文本文件【应用】" class="headerlink" title="3.7字节流复制文本文件【应用】"></a>3.7字节流复制文本文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    把“E:\itcast\窗里窗外.txt”复制到模块目录下的“窗里窗外.txt”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li><p>复制文本文件，其实就把文本文件的内容从一个文件中读取出来(数据源)，然后写入到另一个文件中(目的地)</p>
</li>
<li><p>数据源：</p>
<p>​    E:\itcast\窗里窗外.txt — 读数据 — InputStream — FileInputStream </p>
</li>
<li><p>目的地：</p>
<p>​    myByteStream\窗里窗外.txt — 写数据 — OutputStream — FileOutputStream</p>
</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\窗里窗外.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\窗里窗外.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文本文件(一次读取一个字节，一次写入一个字节)</span></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-8字节流读数据-一次读一个字节数组数据-【应用】"><a href="#3-8字节流读数据-一次读一个字节数组数据-【应用】" class="headerlink" title="3.8字节流读数据(一次读一个字节数组数据)【应用】"></a>3.8字节流读数据(一次读一个字节数组数据)【应用】</h3><ul>
<li><p>一次读一个字节数组的方法</p>
<ul>
<li>public int read(byte[] b)：从输入流读取最多b.length个字节的数据</li>
<li>返回的是读入缓冲区的总字节数,也就是实际的读取字节个数</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileInputStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;myByteStream\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            hello\r\n</span></span><br><span class="line"><span class="comment">            world\r\n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            第一次：hello</span></span><br><span class="line"><span class="comment">            第二次：\r\nwor</span></span><br><span class="line"><span class="comment">            第三次：ld\r\nr</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">//1024及其整数倍</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-9字节流复制图片【应用】"><a href="#3-9字节流复制图片【应用】" class="headerlink" title="3.9字节流复制图片【应用】"></a>3.9字节流复制图片【应用】</h3><ul>
<li><p>案例需求</p>
<p>​    把“E:\itcast\mn.jpg”复制到模块目录下的“mn.jpg”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字节输入流对象</li>
<li>根据目的地创建字节输出流对象</li>
<li>读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJpgDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字节输入流对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\mn.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字节输出流对象</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\mn.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>字节缓冲流&amp;字符流</title>
    <url>/2019/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81&amp;%E5%AD%97%E7%AC%A6%E6%B5%81/</url>
    <content><![CDATA[<h2 id="1-字节缓冲流"><a href="#1-字节缓冲流" class="headerlink" title="1.字节缓冲流"></a>1.字节缓冲流</h2><h3 id="1-1字节缓冲流构造方法【应用】"><a href="#1-1字节缓冲流构造方法【应用】" class="headerlink" title="1.1字节缓冲流构造方法【应用】"></a>1.1字节缓冲流构造方法【应用】</h3><ul>
<li><p>字节缓冲流介绍</p>
<ul>
<li><p>lBufferOutputStream：该类实现缓冲输出流。 通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</p>
</li>
<li><p>lBufferedInputStream：创建BufferedInputStream将创建一个内部缓冲区数组。 当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</p>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>构造方法：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedOutputStream(OutputStream out)</td>
<td>创建字节缓冲输出流对象</td>
</tr>
<tr>
<td>BufferedInputStream(InputStream in)</td>
<td>创建字节缓冲输入流对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//字节缓冲输出流：BufferedOutputStream(OutputStream out)</span></span><br><span class="line"> </span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> 				                                       FileOutputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        bos.write(<span class="string">&quot;hello\r\n&quot;</span>.getBytes());</span><br><span class="line">        bos.write(<span class="string">&quot;world\r\n&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bos.close();</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节缓冲输入流：BufferedInputStream(InputStream in)</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span>                                                          FileInputStream(<span class="string">&quot;myByteStream\\bos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数据</span></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=bis.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字节数组数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(bys,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2字节流复制视频【应用】"><a href="#1-2字节流复制视频【应用】" class="headerlink" title="1.2字节流复制视频【应用】"></a>1.2字节流复制视频【应用】</h3><ul>
<li><p>案例需求</p>
<p>把“E:\itcast\字节流复制图片.avi”复制到模块目录下的“字节流复制图片.avi”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字节输入流对象</li>
<li>根据目的地创建字节输出流对象</li>
<li>读写数据，复制视频</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyAviDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制视频</span></span><br><span class="line"><span class="comment">//        method1();</span></span><br><span class="line"><span class="comment">//        method2();</span></span><br><span class="line"><span class="comment">//        method3();</span></span><br><span class="line">        method4();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;共耗时：&quot;</span> + (endTime - startTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=bis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基本字节流一次读写一个字节</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//E:\\itcast\\字节流复制图片.avi</span></span><br><span class="line">        <span class="comment">//模块目录下的 字节流复制图片.avi</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\itcast\\字节流复制图片.avi&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myByteStream\\字节流复制图片.avi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> by;</span><br><span class="line">        <span class="keyword">while</span> ((by=fis.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(by);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-字符流"><a href="#2-字符流" class="headerlink" title="2.字符流"></a>2.字符流</h2><h3 id="2-1为什么会出现字符流【理解】"><a href="#2-1为什么会出现字符流【理解】" class="headerlink" title="2.1为什么会出现字符流【理解】"></a>2.1为什么会出现字符流【理解】</h3><ul>
<li><p>字符流的介绍</p>
<p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p>
<p>字符流 = 字节流 + 编码表</p>
</li>
<li><p>中文的字节存储方式</p>
<p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p>
<p>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</p>
</li>
</ul>
<h3 id="2-2编码表【理解】"><a href="#2-2编码表【理解】" class="headerlink" title="2.2编码表【理解】"></a>2.2编码表【理解】</h3><ul>
<li><p>什么是字符集</p>
<p>是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p>
<p>l计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。常见字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p>
</li>
<li><p>常见的字符集</p>
<ul>
<li><p>ASCII字符集：</p>
<p>lASCII：是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等)和可显示字符(英文大小写字符、阿拉伯数字和西文符号) </p>
<p>基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</p>
</li>
<li><p>GBXXX字符集：</p>
<p>GBK：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</p>
</li>
<li><p>Unicode字符集：</p>
<p>UTF-8编码：可以用来表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用 中，优先采用的编码。互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p>
<p>编码规则： </p>
<p>  128个US-ASCII字符，只需一个字节编码</p>
<p>  拉丁文等字符，需要二个字节编码</p>
<p>  大部分常用字（含中文），使用三个字节编码</p>
<p>  其他极少使用的Unicode辅助字符，使用四字节编码</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-3字符串中的编码解码问题【应用】"><a href="#2-3字符串中的编码解码问题【应用】" class="headerlink" title="2.3字符串中的编码解码问题【应用】"></a>2.3字符串中的编码解码问题【应用】</h3><ul>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>byte[] getBytes()</td>
<td>使用平台的默认字符集将该 String编码为一系列字节</td>
</tr>
<tr>
<td>byte[] getBytes(String charsetName)</td>
<td>使用指定的字符集将该 String编码为一系列字节</td>
</tr>
<tr>
<td>String(byte[] bytes)</td>
<td>使用平台的默认字符集解码指定的字节数组来创建字符串</td>
</tr>
<tr>
<td>String(byte[] bytes, String charsetName)</td>
<td>通过指定的字符集解码指定的字节数组来创建字符串</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个字符串</span></span><br><span class="line">        String s = <span class="string">&quot;中国&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="comment">//byte[] bys = s.getBytes(&quot;UTF-8&quot;); //[-28, -72, -83, -27, -101, -67]</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = s.getBytes(<span class="string">&quot;GBK&quot;</span>); <span class="comment">//[-42, -48, -71, -6]</span></span><br><span class="line">        System.out.println(Arrays.toString(bys));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String ss = new String(bys);</span></span><br><span class="line">        <span class="comment">//String ss = new String(bys,&quot;UTF-8&quot;);</span></span><br><span class="line">        String ss = <span class="keyword">new</span> String(bys,<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4字符流中的编码解码问题【应用】"><a href="#2-4字符流中的编码解码问题【应用】" class="headerlink" title="2.4字符流中的编码解码问题【应用】"></a>2.4字符流中的编码解码问题【应用】</h3><ul>
<li><p>字符流中和编码解码问题相关的两个类</p>
<ul>
<li><p>InputStreamReader：是从字节流到字符流的桥梁</p>
<p>​    它读取字节，并使用指定的编码将其解码为字符</p>
<p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p>
</li>
<li><p>OutputStreamWriter：是从字符流到字节流的桥梁</p>
<p>​    是从字符流到字节流的桥梁，使用指定的编码将写入的字符编码为字节</p>
<p>​    它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</p>
</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>InputStreamReader(InputStream in)</td>
<td>使用默认字符编码创建InputStreamReader对象</td>
</tr>
<tr>
<td>InputStreamReader(InputStream in,String chatset)</td>
<td>使用指定的字符编码创建InputStreamReader对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out)</td>
<td>使用默认字符编码创建OutputStreamWriter对象</td>
</tr>
<tr>
<td>OutputStreamWriter(OutputStream out,String charset)</td>
<td>使用指定的字符编码创建OutputStreamWriter对象</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConversionStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//OutputStreamWriter osw = new OutputStreamWriter(new                                             FileOutputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span>                                              FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        osw.write(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        osw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//InputStreamReader isr = new InputStreamReader(new 	                                         FileInputStream(&quot;myCharStream\\osw.txt&quot;));</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span>                                                 FileInputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>),<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch=isr.read())!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5字符流写数据的5种方式【应用】"><a href="#2-5字符流写数据的5种方式【应用】" class="headerlink" title="2.5字符流写数据的5种方式【应用】"></a>2.5字符流写数据的5种方式【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   write(int c)</td>
<td>写一个字符</td>
</tr>
<tr>
<td>void   write(char[] cbuf)</td>
<td>写入一个字符数组</td>
</tr>
<tr>
<td>void write(char[] cbuf, int off, int len)</td>
<td>写入字符数组的一部分</td>
</tr>
<tr>
<td>void write(String str)</td>
<td>写一个字符串</td>
</tr>
<tr>
<td>void write(String str, int off, int len)</td>
<td>写一个字符串的一部分</td>
</tr>
</tbody></table>
</li>
<li><p>刷新和关闭的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>flush()</td>
<td>刷新流，之后还可以继续写数据</td>
</tr>
<tr>
<td>close()</td>
<td>关闭流，释放资源，但是在关闭之前会先刷新流。一旦关闭，就不能再写数据</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputStreamWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\osw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int c)：写一个字符</span></span><br><span class="line"><span class="comment">//        osw.write(97);</span></span><br><span class="line"><span class="comment">//        osw.write(98);</span></span><br><span class="line"><span class="comment">//        osw.write(99);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writ(char[] cbuf)：写入一个字符数组</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//        osw.write(chs);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(char[] cbuf, int off, int len)：写入字符数组的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 0, chs.length);</span></span><br><span class="line"><span class="comment">//        osw.write(chs, 1, 3);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str)：写一个字符串</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str, int off, int len)：写一个字符串的一部分</span></span><br><span class="line"><span class="comment">//        osw.write(&quot;abcde&quot;, 0, &quot;abcde&quot;.length());</span></span><br><span class="line">        osw.write(<span class="string">&quot;abcde&quot;</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6字符流读数据的2种方式【应用】"><a href="#2-6字符流读数据的2种方式【应用】" class="headerlink" title="2.6字符流读数据的2种方式【应用】"></a>2.6字符流读数据的2种方式【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int read()</td>
<td>一次读一个字符数据</td>
</tr>
<tr>
<td>int read(char[] cbuf)</td>
<td>一次读一个字符数组数据</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   </span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read()：一次读一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read(char[] cbuf)：一次读一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7字符流复制Java文件【应用】"><a href="#2-7字符流复制Java文件【应用】" class="headerlink" title="2.7字符流复制Java文件【应用】"></a>2.7字符流复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=isr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            osw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=isr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            osw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osw.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8字符流复制Java文件改进版【应用】"><a href="#2-8字符流复制Java文件改进版【应用】" class="headerlink" title="2.8字符流复制Java文件改进版【应用】"></a>2.8字符流复制Java文件改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>使用便捷流对象，把模块目录下的“ConversionStreamDemo.java” 复制到模块目录下的“Copy.java”</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>);</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=fr.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            fw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=fr.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-9字符缓冲流【应用】"><a href="#2-9字符缓冲流【应用】" class="headerlink" title="2.9字符缓冲流【应用】"></a>2.9字符缓冲流【应用】</h3><ul>
<li><p>字符缓冲流介绍</p>
<ul>
<li>BufferedWriter：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小。默认值足够大，可用于大多数用途</li>
<li>BufferedReader：从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。 默认值足够大，可用于大多数用途</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BufferedWriter(Writer out)</td>
<td>创建字符缓冲输出流对象</td>
</tr>
<tr>
<td>BufferedReader(Reader in)</td>
<td>创建字符缓冲输入流对象</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//BufferedWriter(Writer out)</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                            FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line">        bw.write(<span class="string">&quot;hello\r\n&quot;</span>);</span><br><span class="line">        bw.write(<span class="string">&quot;world\r\n&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BufferedReader(Reader in)</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                           FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读取一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-10字符缓冲流复制Java文件【应用】"><a href="#2-10字符缓冲流复制Java文件【应用】" class="headerlink" title="2.10字符缓冲流复制Java文件【应用】"></a>2.10字符缓冲流复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符缓冲输入流对象</li>
<li>根据目的地创建字符缓冲输出流对象</li>
<li>读写数据，复制文件，使用字符缓冲流特有功能实现</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//一次读写一个字符数据</span></span><br><span class="line"><span class="comment">//        int ch;</span></span><br><span class="line"><span class="comment">//        while ((ch=br.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            bw.write(ch);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//一次读写一个字符数组数据</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=br.read(chs))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bw.write(chs,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-11字符缓冲流特有功能【应用】"><a href="#2-11字符缓冲流特有功能【应用】" class="headerlink" title="2.11字符缓冲流特有功能【应用】"></a>2.11字符缓冲流特有功能【应用】</h3><ul>
<li><p>方法介绍</p>
<p>BufferedWriter：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void newLine()</td>
<td>写一行行分隔符，行分隔符字符串由系统属性定义</td>
</tr>
</tbody></table>
<p>BufferedReader:</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>String readLine()</td>
<td>读一行文字。 结果包含行的内容的字符串，不包括任何行终止字符如果流的结尾已经到达，则为null</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedStreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span>                                                          FileWriter(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;hello&quot;</span> + i);</span><br><span class="line">            <span class="comment">//bw.write(&quot;\r\n&quot;);</span></span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span>                                                          FileReader(<span class="string">&quot;myCharStream\\bw.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-12字符缓冲流特有功能复制Java文件【应用】"><a href="#2-12字符缓冲流特有功能复制Java文件【应用】" class="headerlink" title="2.12字符缓冲流特有功能复制Java文件【应用】"></a>2.12字符缓冲流特有功能复制Java文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>使用特有功能把模块目录下的ConversionStreamDemo.java 复制到模块目录下的 Copy.java</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>根据数据源创建字符缓冲输入流对象</li>
<li>根据目的地创建字符缓冲输出流对象</li>
<li>读写数据，复制文件，使用字符缓冲流特有功能实现</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\ConversionStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="comment">//使用字符缓冲流特有功能实现</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-13IO流小结【理解】"><a href="#2-13IO流小结【理解】" class="headerlink" title="2.13IO流小结【理解】"></a>2.13IO流小结【理解】</h3><ul>
<li><p>字节流</p>
<p><img src="/2019/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81&%E5%AD%97%E7%AC%A6%E6%B5%81/1.png"></p>
</li>
<li><p>字符流</p>
<p><img src="/2019/08/30/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190830%E5%AD%97%E8%8A%82%E7%BC%93%E5%86%B2%E6%B5%81&%E5%AD%97%E7%AC%A6%E6%B5%81/2.png"></p>
</li>
</ul>
<h3 id="3练习案例"><a href="#3练习案例" class="headerlink" title="3练习案例"></a>3练习案例</h3><h3 id="3-1集合到文件【应用】"><a href="#3-1集合到文件【应用】" class="headerlink" title="3.1集合到文件【应用】"></a>3.1集合到文件【应用】</h3><ul>
<li><p>案例需求</p>
<p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个集合元素</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据存储到集合中</li>
<li>释放资源</li>
<li>遍历集合</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TxtToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2文件到集合【应用】"><a href="#3-2文件到集合【应用】" class="headerlink" title="3.2文件到集合【应用】"></a>3.2文件到集合【应用】</h3><ul>
<li><p>案例需求</p>
<p>把ArrayList集合中的字符串数据写入到文本文件。要求：每一个字符串元素作为文件中的一行数据</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建ArrayList集合</li>
<li>往集合中存储字符串元素</li>
<li>创建字符缓冲输出流对象</li>
<li>遍历集合，得到每一个字符串数据</li>
<li>调用字符缓冲输出流对象的方法写数据</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToTxtDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中存储字符串元素</span></span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\array.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个字符串数据</span></span><br><span class="line">        <span class="keyword">for</span>(String s : array) &#123;</span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(s);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3点名器【应用】"><a href="#3-3点名器【应用】" class="headerlink" title="3.3点名器【应用】"></a>3.3点名器【应用】</h3><ul>
<li><p>案例需求</p>
<p>我有一个文件里面存储了班级同学的姓名，每一个姓名占一行，要求通过程序实现随点名器</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据存储到集合中</li>
<li>释放资源</li>
<li>使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</li>
<li>把第6步产生的随机数作为索引到ArrayList集合中获取值</li>
<li>把第7步得到的数据输出在控制台</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallNameDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\names.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据存储到集合中</span></span><br><span class="line">            array.add(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Random产生一个随机数，随机数的范围在：[0,集合的长度)</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> index = r.nextInt(array.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第6步产生的随机数作为索引到ArrayList集合中获取值</span></span><br><span class="line">        String name = array.get(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把第7步得到的数据输出在控制台</span></span><br><span class="line">        System.out.println(<span class="string">&quot;幸运者是：&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4集合到文件改进版【应用】"><a href="#3-4集合到文件改进版【应用】" class="headerlink" title="3.4集合到文件改进版【应用】"></a>3.4集合到文件改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>把ArrayList集合中的学生数据写入到文本文件。要求：每一个学生对象的数据作为文件中的一行数据<br>​        格式：学号,姓名,年龄,居住地    举例：itheima001,林青霞,30,西安</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义学生类</li>
<li>创建ArrayList集合</li>
<li>创建学生对象</li>
<li>把学生对象添加到集合中</li>
<li>创建字符缓冲输出流对象</li>
<li>遍历集合，得到每一个学生对象</li>
<li>把学生对象的数据拼接成指定格式的字符串</li>
<li>调用字符缓冲输出流对象的方法写数据</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String sid, String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(String sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>, <span class="number">35</span>, <span class="string">&quot;武汉&quot;</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>, <span class="number">33</span>, <span class="string">&quot;郑州&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生对象添加到集合中</span></span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line">        array.add(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getSid()).append(<span class="string">&quot;,&quot;</span>).append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getAge()).append(<span class="string">&quot;,&quot;</span>).append(s.getAddress());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5文件到集合改进版【应用】"><a href="#3-5文件到集合改进版【应用】" class="headerlink" title="3.5文件到集合改进版【应用】"></a>3.5文件到集合改进版【应用】</h3><ul>
<li><p>案例需求</p>
<p>把文本文件中的数据读取到集合中，并遍历集合。要求：文件中每一行数据是一个学生对象的成员变量值<br> 举例：itheima001,林青霞,30,西安</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义学生类</li>
<li>创建字符缓冲输入流对象</li>
<li>创建ArrayList集合对象</li>
<li>调用字符缓冲输入流对象的方法读数据</li>
<li>把读取到的字符串数据用split()进行分割，得到一个字符串数组</li>
<li>创建学生对象</li>
<li>把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</li>
<li>把学生对象添加到集合</li>
<li>释放资源</li>
<li>遍历集合</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<p>​    同上</p>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileToArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myCharStream\\students.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字符缓冲输入流对象的方法读数据</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//把读取到的字符串数据用split()进行分割，得到一个字符串数组</span></span><br><span class="line">            String[] strArray = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            <span class="comment">//把字符串数组中的每一个元素取出来对应的赋值给学生对象的成员变量值</span></span><br><span class="line">            <span class="comment">//itheima001,林青霞,30,西安</span></span><br><span class="line">            s.setSid(strArray[<span class="number">0</span>]);</span><br><span class="line">            s.setName(strArray[<span class="number">1</span>]);</span><br><span class="line">            s.setAge(Integer.parseInt(strArray[<span class="number">2</span>]));</span><br><span class="line">            s.setAddress(strArray[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到集合</span></span><br><span class="line">            array.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : array) &#123;</span><br><span class="line">            System.out.println(s.getSid() + <span class="string">&quot;,&quot;</span> + s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge() + <span class="string">&quot;,&quot;</span> + s.getAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2019/09/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190904%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-实现多线程"><a href="#1-实现多线程" class="headerlink" title="1.实现多线程"></a>1.实现多线程</h2><h3 id="1-1进程和线程【理解】"><a href="#1-1进程和线程【理解】" class="headerlink" title="1.1进程和线程【理解】"></a>1.1进程和线程【理解】</h3><ul>
<li><p>进程：是正在运行的程序</p>
<p>​    是系统进行资源分配和调用的独立单位</p>
<p>​    每一个进程都有它自己的内存空间和系统资源</p>
</li>
<li><p>线程：是进程中的单个顺序控制流，是一条执行路径</p>
<p>​    单线程：一个进程如果只有一条执行路径，则称为单线程程序</p>
<p>​    多线程：一个进程如果有多条执行路径，则称为多线程程序</p>
</li>
</ul>
<a id="more"></a>

<h3 id="1-2实现多线程方式一：继承Thread类【应用】"><a href="#1-2实现多线程方式一：继承Thread类【应用】" class="headerlink" title="1.2实现多线程方式一：继承Thread类【应用】"></a>1.2实现多线程方式一：继承Thread类【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void run()</td>
<td>在线程开启后，此方法将被调用执行</td>
</tr>
<tr>
<td>void start()</td>
<td>使此线程开始执行，Java虚拟机会调用run方法()</td>
</tr>
</tbody></table>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义一个类MyThread继承Thread类</li>
<li>在MyThread类中重写run()方法</li>
<li>创建MyThread类的对象</li>
<li>启动线程</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread my1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread my2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        my1.run();</span></span><br><span class="line"><span class="comment">//        my2.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//void start() 导致此线程开始执行; Java虚拟机调用此线程的run方法</span></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>两个小问题</p>
<ul>
<li><p>为什么要重写run()方法？</p>
<p>因为run()是用来封装被线程执行的代码</p>
</li>
<li><p>run()方法和start()方法的区别？</p>
<p>run()：封装线程执行的代码，直接调用，相当于普通方法的调用</p>
<p>start()：启动线程；然后由JVM调用此线程的run()方法</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-3设置和获取线程名称【应用】"><a href="#1-3设置和获取线程名称【应用】" class="headerlink" title="1.3设置和获取线程名称【应用】"></a>1.3设置和获取线程名称【应用】</h3><ul>
<li><p>方法介绍</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void  setName(String name)</td>
<td>将此线程的名称更改为等于参数name</td>
</tr>
<tr>
<td>String  getName()</td>
<td>返回此线程的名称</td>
</tr>
<tr>
<td>Thread  currentThread()</td>
<td>返回对当前正在执行的线程对象的引用</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread my1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        MyThread my2 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void setName(String name)：将此线程的名称更改为等于参数 name</span></span><br><span class="line">        my1.setName(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        my2.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Thread(String name)</span></span><br><span class="line">        MyThread my1 = <span class="keyword">new</span> MyThread(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        MyThread my2 = <span class="keyword">new</span> MyThread(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        my1.start();</span><br><span class="line">        my2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//static Thread currentThread() 返回对当前正在执行的线程对象的引用</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4线程优先级【应用】"><a href="#1-4线程优先级【应用】" class="headerlink" title="1.4线程优先级【应用】"></a>1.4线程优先级【应用】</h3><ul>
<li><p>线程调度</p>
<ul>
<li><p>两种调度方式</p>
<ul>
<li>分时调度模型：所有线程轮流使用 CPU 的使用权，平均分配每个线程占用 CPU 的时间片</li>
<li>抢占式调度模型：优先让优先级高的线程使用 CPU，如果线程的优先级相同，那么会随机选择一个，优先级高的线程获取的 CPU 时间片相对多一些</li>
</ul>
</li>
<li><p>Java使用的是抢占式调度模型</p>
</li>
<li><p>随机性</p>
<p>假如计算机只有一个 CPU，那么 CPU 在某一个时刻只能执行一条指令，线程只有得到CPU时间片，也就是使用权，才可以执行指令。所以说多线程程序的执行是有随机性，因为谁抢到CPU的使用权是不一定的</p>
</li>
</ul>
</li>
<li><p>优先级相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>final int getPriority()</td>
<td>返回此线程的优先级</td>
</tr>
<tr>
<td>final void setPriority(int newPriority)</td>
<td>更改此线程的优先级                                                                                         线程默认优先级是5；线程优先级的范围是：1-10</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriorityDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPriority tp1 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">        ThreadPriority tp2 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line">        ThreadPriority tp3 = <span class="keyword">new</span> ThreadPriority();</span><br><span class="line"></span><br><span class="line">        tp1.setName(<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        tp2.setName(<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line">        tp3.setName(<span class="string">&quot;汽车&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public final int getPriority()：返回此线程的优先级</span></span><br><span class="line">        System.out.println(tp1.getPriority()); <span class="comment">//5</span></span><br><span class="line">        System.out.println(tp2.getPriority()); <span class="comment">//5</span></span><br><span class="line">        System.out.println(tp3.getPriority()); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public final void setPriority(int newPriority)：更改此线程的优先级</span></span><br><span class="line"><span class="comment">//        tp1.setPriority(10000); //IllegalArgumentException</span></span><br><span class="line">        System.out.println(Thread.MAX_PRIORITY); <span class="comment">//10</span></span><br><span class="line">        System.out.println(Thread.MIN_PRIORITY); <span class="comment">//1</span></span><br><span class="line">        System.out.println(Thread.NORM_PRIORITY); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置正确的优先级</span></span><br><span class="line">        tp1.setPriority(<span class="number">5</span>);</span><br><span class="line">        tp2.setPriority(<span class="number">10</span>);</span><br><span class="line">        tp3.setPriority(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        tp1.start();</span><br><span class="line">        tp2.start();</span><br><span class="line">        tp3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5线程控制【应用】"><a href="#1-5线程控制【应用】" class="headerlink" title="1.5线程控制【应用】"></a>1.5线程控制【应用】</h3><ul>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>static void sleep(long millis)</td>
<td>使当前正在执行的线程停留（暂停执行）指定的毫秒数</td>
</tr>
<tr>
<td>void join()</td>
<td>等待这个线程死亡</td>
</tr>
<tr>
<td>void setDaemon(boolean on)</td>
<td>将此线程标记为守护线程，当运行的线程都是守护线程时，Java虚拟机将退出</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sleep演示：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleep</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSleepDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadSleep ts1 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">        ThreadSleep ts2 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line">        ThreadSleep ts3 = <span class="keyword">new</span> ThreadSleep();</span><br><span class="line"></span><br><span class="line">        ts1.setName(<span class="string">&quot;曹操&quot;</span>);</span><br><span class="line">        ts2.setName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line">        ts3.setName(<span class="string">&quot;孙权&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ts1.start();</span><br><span class="line">        ts2.start();</span><br><span class="line">        ts3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Join演示：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoin</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadJoinDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadJoin tj1 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">        ThreadJoin tj2 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line">        ThreadJoin tj3 = <span class="keyword">new</span> ThreadJoin();</span><br><span class="line"></span><br><span class="line">        tj1.setName(<span class="string">&quot;康熙&quot;</span>);</span><br><span class="line">        tj2.setName(<span class="string">&quot;四阿哥&quot;</span>);</span><br><span class="line">        tj3.setName(<span class="string">&quot;八阿哥&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tj1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            tj1.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        tj2.start();</span><br><span class="line">        tj3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Daemon演示：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaemon</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;:&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaemonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDaemon td1 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line">        ThreadDaemon td2 = <span class="keyword">new</span> ThreadDaemon();</span><br><span class="line"></span><br><span class="line">        td1.setName(<span class="string">&quot;关羽&quot;</span>);</span><br><span class="line">        td2.setName(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置主线程为刘备</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">&quot;刘备&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置守护线程</span></span><br><span class="line">        td1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        td2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        td1.start();</span><br><span class="line">        td2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6线程的生命周期【理解】"><a href="#1-6线程的生命周期【理解】" class="headerlink" title="1.6线程的生命周期【理解】"></a>1.6线程的生命周期【理解】</h3><p>​    线程一共有五种状态，线程在各种状态之间转换。</p>
<p><img src="/2019/09/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190904%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E8%B5%84%E6%96%99/2.JavaEE/day11(%E5%A4%9A%E7%BA%BF%E7%A8%8B)/%E7%AC%94%E8%AE%B0/img/%E7%BA%BF%E7%A8%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg"></p>
<h3 id="1-7实现多线程方式二：实现Runnable接口【应用】"><a href="#1-7实现多线程方式二：实现Runnable接口【应用】" class="headerlink" title="1.7实现多线程方式二：实现Runnable接口【应用】"></a>1.7实现多线程方式二：实现Runnable接口【应用】</h3><ul>
<li><p>Thread构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Thread(Runnable target)</td>
<td>分配一个新的Thread对象</td>
</tr>
<tr>
<td>Thread(Runnable target, String name)</td>
<td>分配一个新的Thread对象</td>
</tr>
</tbody></table>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义一个类MyRunnable实现Runnable接口</li>
<li>在MyRunnable类中重写run()方法</li>
<li>创建MyRunnable类的对象</li>
<li>创建Thread类的对象，把MyRunnable对象作为构造方法的参数</li>
<li>启动线程</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建MyRunnable类的对象</span></span><br><span class="line">        MyRunnable my = <span class="keyword">new</span> MyRunnable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Thread类的对象，把MyRunnable对象作为构造方法的参数</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target)</span></span><br><span class="line"><span class="comment">//        Thread t1 = new Thread(my);</span></span><br><span class="line"><span class="comment">//        Thread t2 = new Thread(my);</span></span><br><span class="line">        <span class="comment">//Thread(Runnable target, String name)</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(my,<span class="string">&quot;高铁&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(my,<span class="string">&quot;飞机&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>多线程的实现方案有两种</p>
<ul>
<li>继承Thread类</li>
<li>实现Runnable接口</li>
</ul>
</li>
<li><p>相比继承Thread类，实现Runnable接口的好处</p>
<ul>
<li>避免了Java单继承的局限性</li>
<li>适合多个相同程序的代码去处理同一个资源的情况，把线程和程序的代码、数据有效分离，较好的体现了面向对象的设计思想</li>
</ul>
</li>
</ul>
<h2 id="2-线程同步"><a href="#2-线程同步" class="headerlink" title="2.线程同步"></a>2.线程同步</h2><h3 id="2-1卖票【应用】"><a href="#2-1卖票【应用】" class="headerlink" title="2.1卖票【应用】"></a>2.1卖票【应用】</h3><ul>
<li><p>案例需求</p>
<p>某电影院目前正在上映国产大片，共有100张票，而它有3个窗口卖票，请设计一个程序模拟该电影院卖票</p>
</li>
<li><p>实现步骤</p>
<ul>
<li>定义一个类SellTicket实现Runnable接口，里面定义一个成员变量：private int tickets = 100;</li>
<li>在SellTicket类中重写run()方法实现卖票，代码步骤如下</li>
<li>判断票数大于0，就卖票，并告知是哪个窗口卖的</li>
<li>卖了票之后，总票数要减1</li>
<li>票没有了，也可能有人来问，所以这里用死循环让卖票的动作一直执行</li>
<li>定义一个测试类SellTicketDemo，里面有main方法，代码步骤如下</li>
<li>创建SellTicket类的对象</li>
<li>创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</li>
<li>启动线程</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//在SellTicket类中重写run()方法实现卖票，代码步骤如下</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建SellTicket类的对象</span></span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个Thread类的对象，把SellTicket对象作为构造方法的参数，并给出对应的窗口名称</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(st,<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行结果</p>
<p><img src="/2019/09/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190904%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E8%B5%84%E6%96%99/2.JavaEE/day11(%E5%A4%9A%E7%BA%BF%E7%A8%8B)/%E7%AC%94%E8%AE%B0/img/%E5%8D%96%E7%A5%A81.jpg"></p>
</li>
</ul>
<h3 id="2-2卖票案例的问题【理解】"><a href="#2-2卖票案例的问题【理解】" class="headerlink" title="2.2卖票案例的问题【理解】"></a>2.2卖票案例的问题【理解】</h3><ul>
<li><p>卖票出现了问题</p>
<ul>
<li>相同的票出现了多次</li>
<li>出现了负数的票</li>
</ul>
</li>
<li><p>问题产生原因</p>
<p>线程执行的随机性导致的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//相同的票出现了多次</span></span><br><span class="line"><span class="comment">//        while (true) &#123;</span></span><br><span class="line"><span class="comment">//            //tickets = 100;</span></span><br><span class="line"><span class="comment">//            //t1,t2,t3</span></span><br><span class="line"><span class="comment">//            //假设t1线程抢到CPU的执行权</span></span><br><span class="line"><span class="comment">//            if (tickets &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//                //通过sleep()方法来模拟出票时间</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    Thread.sleep(100);</span></span><br><span class="line"><span class="comment">//                    //t1线程休息100毫秒</span></span><br><span class="line"><span class="comment">//                    //t2线程抢到了CPU的执行权，t2线程就开始执行，执行到这里的时候，t2线程休息100毫秒</span></span><br><span class="line"><span class="comment">//                    //t3线程抢到了CPU的执行权，t3线程就开始执行，执行到这里的时候，t3线程休息100毫秒</span></span><br><span class="line"><span class="comment">//                &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//                //假设线程按照顺序醒过来</span></span><br><span class="line"><span class="comment">//                //t1抢到CPU的执行权，在控制台输出：窗口1正在出售第100张票</span></span><br><span class="line"><span class="comment">//                System.out.println(Thread.currentThread().getName() + &quot;正在出售第&quot; + tickets + &quot;张票&quot;);</span></span><br><span class="line"><span class="comment">//                //t2抢到CPU的执行权，在控制台输出：窗口2正在出售第100张票</span></span><br><span class="line"><span class="comment">//                //t3抢到CPU的执行权，在控制台输出：窗口3正在出售第100张票</span></span><br><span class="line"><span class="comment">//                tickets--;</span></span><br><span class="line"><span class="comment">//                //如果这三个线程还是按照顺序来，这里就执行了3次--的操作，最终票就变成了97</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//出现了负数的票</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//tickets = 1;</span></span><br><span class="line">            <span class="comment">//t1,t2,t3</span></span><br><span class="line">            <span class="comment">//假设t1线程抢到CPU的执行权</span></span><br><span class="line">            <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//通过sleep()方法来模拟出票时间</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    <span class="comment">//t1线程休息100毫秒</span></span><br><span class="line">                    <span class="comment">//t2线程抢到了CPU的执行权，t2线程就开始执行，执行到这里的时候，t2线程休息100毫秒</span></span><br><span class="line">                    <span class="comment">//t3线程抢到了CPU的执行权，t3线程就开始执行，执行到这里的时候，t3线程休息100毫秒</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//假设线程按照顺序醒过来</span></span><br><span class="line">                <span class="comment">//t1抢到了CPU的执行权，在控制台输出：窗口1正在出售第1张票</span></span><br><span class="line">                <span class="comment">//假设t1继续拥有CPU的执行权，就会执行tickets--;操作，tickets = 0;</span></span><br><span class="line">                <span class="comment">//t2抢到了CPU的执行权，在控制台输出：窗口1正在出售第0张票</span></span><br><span class="line">                <span class="comment">//假设t2继续拥有CPU的执行权，就会执行tickets--;操作，tickets = -1;</span></span><br><span class="line">                <span class="comment">//t3抢到了CPU的执行权，在控制台输出：窗口3正在出售第-1张票</span></span><br><span class="line">                <span class="comment">//假设t2继续拥有CPU的执行权，就会执行tickets--;操作，tickets = -2;</span></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                tickets--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3同步代码块解决数据安全问题【应用】"><a href="#2-3同步代码块解决数据安全问题【应用】" class="headerlink" title="2.3同步代码块解决数据安全问题【应用】"></a>2.3同步代码块解决数据安全问题【应用】</h3><ul>
<li><p>安全问题出现的条件</p>
<ul>
<li>是多线程环境</li>
<li>有共享数据</li>
<li>有多条语句操作共享数据</li>
</ul>
</li>
<li><p>如何解决多线程安全问题呢?</p>
<ul>
<li>基本思想：让程序没有安全问题的环境</li>
</ul>
</li>
<li><p>怎么实现呢?</p>
<ul>
<li>把多条语句操作共享数据的代码给锁起来，让任意时刻只能有一个线程执行即可</li>
<li>Java提供了同步代码块的方式来解决</li>
</ul>
</li>
<li><p>同步代码块格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(任意对象) &#123; </span><br><span class="line">	多条语句操作共享数据的代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized(任意对象)：就相当于给代码加锁了，任意对象就可以看成是一把锁</p>
</li>
<li><p>同步的好处和弊端  </p>
<ul>
<li>好处：解决了多线程的数据安全问题</li>
<li>弊端：当线程很多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//tickets = 100;</span></span><br><span class="line">            <span class="comment">//t1,t2,t3</span></span><br><span class="line">            <span class="comment">//假设t1抢到了CPU的执行权</span></span><br><span class="line">            <span class="comment">//假设t2抢到了CPU的执行权</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                <span class="comment">//t1进来后，就会把这段代码给锁起来</span></span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                        <span class="comment">//t1休息100毫秒</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//窗口1正在出售第100张票</span></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--; <span class="comment">//tickets = 99;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//t1出来了，这段代码的锁就被释放了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4同步方法解决数据安全问题【应用】"><a href="#2-4同步方法解决数据安全问题【应用】" class="headerlink" title="2.4同步方法解决数据安全问题【应用】"></a>2.4同步方法解决数据安全问题【应用】</h3><ul>
<li><p>同步方法的格式</p>
<p>同步方法：就是把synchronized关键字加到方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">	方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步方法的锁对象是什么呢?</p>
<p>​    this</p>
</li>
<li><p>静态同步方法</p>
<p>同步静态方法：就是把synchronized关键字加到静态方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> <span class="keyword">synchronized</span> 返回值类型 方法名(方法参数) &#123; </span><br><span class="line">	方法体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步静态方法的锁对象是什么呢?</p>
<p>​    类名.class</p>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			sellTicket()；</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    同步方法</span></span><br><span class="line"><span class="comment">//    private synchronized void sellTicket() &#123;</span></span><br><span class="line"><span class="comment">//        if (tickets &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                Thread.sleep(100);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InterruptedException e) &#123;</span></span><br><span class="line"><span class="comment">//                e.printStackTrace();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println(Thread.currentThread().getName() + &quot;正在出售第&quot; + tickets + &quot;张票&quot;);</span></span><br><span class="line"><span class="comment">//            tickets--;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//  静态同步方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">sellTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">            tickets--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5线程安全的类【理解】"><a href="#2-5线程安全的类【理解】" class="headerlink" title="2.5线程安全的类【理解】"></a>2.5线程安全的类【理解】</h3><ul>
<li>StringBuffer<ul>
<li>线程安全，可变的字符序列</li>
<li>从版本JDK 5开始，被StringBuilder 替代。 通常应该使用StringBuilder类，因为它支持所有相同的操作，但它更快，因为它不执行同步</li>
</ul>
</li>
<li>Vector<ul>
<li>从Java 2平台v1.2开始，该类改进了List接口，使其成为Java Collections Framework的成员。 与新的集合实现不同， Vector被同步。 如果不需要线程安全的实现，建议使用ArrayList代替Vector</li>
</ul>
</li>
<li>Hashtable<ul>
<li>该类实现了一个哈希表，它将键映射到值。 任何非null对象都可以用作键或者值</li>
<li>从Java 2平台v1.2开始，该类进行了改进，实现了Map接口，使其成为Java Collections Framework的成员。 与新的集合实现不同， Hashtable被同步。 如果不需要线程安全的实现，建议使用HashMap代替Hashtable</li>
</ul>
</li>
</ul>
<h3 id="2-6Lock锁【应用】"><a href="#2-6Lock锁【应用】" class="headerlink" title="2.6Lock锁【应用】"></a>2.6Lock锁【应用】</h3><p>虽然我们可以理解同步代码块和同步方法的锁对象问题，但是我们并没有直接看到在哪里加上了锁，在哪里释放了锁，为了更清晰的表达如何加锁和释放锁，JDK5以后提供了一个新的锁对象Lock</p>
<p>Lock是接口不能直接实例化，这里采用它的实现类ReentrantLock来实例化</p>
<ul>
<li><p>ReentrantLock构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ReentrantLock()</td>
<td>创建一个ReentrantLock的实例</td>
</tr>
</tbody></table>
</li>
<li><p>加锁解锁方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void lock()</td>
<td>获得锁</td>
</tr>
<tr>
<td>void unlock()</td>
<td>释放锁</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tickets = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span> (tickets &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在出售第&quot;</span> + tickets + <span class="string">&quot;张票&quot;</span>);</span><br><span class="line">                    tickets--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicketDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SellTicket st = <span class="keyword">new</span> SellTicket();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(st, <span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-生产者消费者"><a href="#3-生产者消费者" class="headerlink" title="3.生产者消费者"></a>3.生产者消费者</h2><h3 id="3-1生产者和消费者模式概述【应用】"><a href="#3-1生产者和消费者模式概述【应用】" class="headerlink" title="3.1生产者和消费者模式概述【应用】"></a>3.1生产者和消费者模式概述【应用】</h3><ul>
<li><p>概述</p>
<p>生产者消费者模式是一个十分经典的多线程协作的模式，弄懂生产者消费者问题能够让我们对多线程编程的理解更加深刻。</p>
<p>所谓生产者消费者问题，实际上主要是包含了两类线程：</p>
<p>​    一类是生产者线程用于生产数据</p>
<p>​    一类是消费者线程用于消费数据</p>
<p>为了解耦生产者和消费者的关系，通常会采用共享的数据区域，就像是一个仓库</p>
<p>生产者生产数据之后直接放置在共享数据区中，并不需要关心消费者的行为</p>
<p>消费者只需要从共享数据区中去获取数据，并不需要关心生产者的行为</p>
<p><img src="/2019/09/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190904%E5%A4%9A%E7%BA%BF%E7%A8%8B/Java%E8%B5%84%E6%96%99/2.JavaEE/day11(%E5%A4%9A%E7%BA%BF%E7%A8%8B)/%E7%AC%94%E8%AE%B0/img/%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9.jpg"></p>
</li>
<li><p>Object类的等待和唤醒方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void wait()</td>
<td>导致当前线程等待，直到另一个线程调用该对象的 notify()方法或 notifyAll()方法</td>
</tr>
<tr>
<td>void notify()</td>
<td>唤醒正在等待对象监视器的单个线程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>唤醒正在等待对象监视器的所有线程</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="3-2生产者和消费者案例【应用】"><a href="#3-2生产者和消费者案例【应用】" class="headerlink" title="3.2生产者和消费者案例【应用】"></a>3.2生产者和消费者案例【应用】</h3><ul>
<li><p>案例需求</p>
<p>生产者消费者案例中包含的类：</p>
<p>奶箱类(Box)：定义一个成员变量，表示第x瓶奶，提供存储牛奶和获取牛奶的操作</p>
<p>生产者类(Producer)：实现Runnable接口，重写run()方法，调用存储牛奶的操作</p>
<p>消费者类(Customer)：实现Runnable接口，重写run()方法，调用获取牛奶的操作</p>
<p>测试类(BoxDemo)：里面有main方法，main方法中的代码步骤如下</p>
<p>①创建奶箱对象，这是共享数据区域</p>
<p>②创建消费者创建生产者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作</p>
<p>③对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作</p>
<p>④创建2个线程对象，分别把生产者对象和消费者对象作为构造方法参数传递</p>
<p>⑤启动线程</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个成员变量，表示第x瓶奶</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> milk;</span><br><span class="line">    <span class="comment">//定义一个成员变量，表示奶箱的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> state = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供存储牛奶和获取牛奶的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> milk)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果有牛奶，等待消费</span></span><br><span class="line">        <span class="keyword">if</span>(state) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有牛奶，就生产牛奶</span></span><br><span class="line">        <span class="keyword">this</span>.milk = milk;</span><br><span class="line">        System.out.println(<span class="string">&quot;送奶工将第&quot;</span> + <span class="keyword">this</span>.milk + <span class="string">&quot;瓶奶放入奶箱&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生产完毕之后，修改奶箱状态</span></span><br><span class="line">        state = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//唤醒其他等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没有牛奶，等待生产</span></span><br><span class="line">        <span class="keyword">if</span>(!state) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果有牛奶，就消费牛奶</span></span><br><span class="line">        System.out.println(<span class="string">&quot;用户拿到第&quot;</span> + <span class="keyword">this</span>.milk + <span class="string">&quot;瓶奶&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//消费完毕之后，修改奶箱状态</span></span><br><span class="line">        state = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//唤醒其他等待的线程</span></span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">30</span>; i++) &#123;</span><br><span class="line">            b.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Box b;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Box b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            b.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoxDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建奶箱对象，这是共享数据区域</span></span><br><span class="line">        Box b = <span class="keyword">new</span> Box();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建生产者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用存储牛奶的操作</span></span><br><span class="line">        Producer p = <span class="keyword">new</span> Producer(b);</span><br><span class="line">        <span class="comment">//创建消费者对象，把奶箱对象作为构造方法参数传递，因为在这个类中要调用获取牛奶的操作</span></span><br><span class="line">        Customer c = <span class="keyword">new</span> Customer(b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建2个线程对象，分别把生产者对象和消费者对象作为构造方法参数传递</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(p);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2019/09/05/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190905%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="1-网络编程入门"><a href="#1-网络编程入门" class="headerlink" title="1.网络编程入门"></a>1.网络编程入门</h2><h3 id="1-1-网络编程概述【理解】"><a href="#1-1-网络编程概述【理解】" class="headerlink" title="1.1 网络编程概述【理解】"></a>1.1 网络编程概述【理解】</h3><ul>
<li><p>计算机网络</p>
<p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p>
</li>
<li><p>网络编程</p>
<p>在网络通信协议下，实现网络互连的不同计算机上运行的程序间可以进行数据交换</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-2-网络编程三要素【理解】"><a href="#1-2-网络编程三要素【理解】" class="headerlink" title="1.2 网络编程三要素【理解】"></a>1.2 网络编程三要素【理解】</h3><ul>
<li><p>IP地址</p>
<p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p>
</li>
<li><p>端口</p>
<p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p>
</li>
<li><p>协议</p>
<p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p>
</li>
</ul>
<h3 id="1-3-IP地址【理解】"><a href="#1-3-IP地址【理解】" class="headerlink" title="1.3 IP地址【理解】"></a>1.3 IP地址【理解】</h3><p>IP地址：是网络中设备的唯一标识</p>
<ul>
<li>IP地址分为两大类<ul>
<li>IPv4：是给每个连接在网络上的主机分配一个32bit地址。按照TCP/IP规定，IP地址用二进制来表示，每个IP地址长32bit，也就是4个字节。例如一个采用二进制形式的IP地址是“11000000 10101000 00000001 01000010”，这么长的地址，处理起来也太费劲了。为了方便使用，IP地址经常被写成十进制的形式，中间使用符号“.”分隔不同的字节。于是，上面的IP地址可以表示为“192.168.1.66”。IP地址的这种表示法叫做“点分十进制表示法”，这显然比1和0容易记忆得多</li>
<li>IPv6：由于互联网的蓬勃发展，IP地址的需求量愈来愈大，但是网络地址资源有限，使得IP的分配越发紧张。为了扩大地址空间，通过IPv6重新定义地址空间，采用128位地址长度，每16个字节一组，分成8组十六进制数，这样就解决了网络地址资源数量不够的问题</li>
</ul>
</li>
<li>DOS常用命令：<ul>
<li>ipconfig：查看本机IP地址</li>
<li>ping IP地址：检查网络是否连通</li>
</ul>
</li>
<li>特殊IP地址：<ul>
<li>127.0.0.1：是回送地址，可以代表本机地址，一般用来测试使用</li>
</ul>
</li>
</ul>
<h3 id="1-4InetAddress【应用】"><a href="#1-4InetAddress【应用】" class="headerlink" title="1.4InetAddress【应用】"></a>1.4InetAddress【应用】</h3><p>InetAddress：此类表示Internet协议（IP）地址</p>
<ul>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>static InetAddress getByName(String host)</td>
<td>确定主机名称的IP地址。主机名称可以是机器名称，也可以是IP地址</td>
</tr>
<tr>
<td>String getHostName()</td>
<td>获取此IP地址的主机名</td>
</tr>
<tr>
<td>String getHostAddress()</td>
<td>返回文本显示中的IP地址字符串</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">		<span class="comment">//InetAddress address = InetAddress.getByName(&quot;itheima&quot;);</span></span><br><span class="line">        InetAddress address = InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String getHostName()：获取此IP地址的主机名</span></span><br><span class="line">        String name = address.getHostName();</span><br><span class="line">        <span class="comment">//public String getHostAddress()：返回文本显示中的IP地址字符串</span></span><br><span class="line">        String ip = address.getHostAddress();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主机名：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;IP地址：&quot;</span> + ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5端口和协议【理解】"><a href="#1-5端口和协议【理解】" class="headerlink" title="1.5端口和协议【理解】"></a>1.5端口和协议【理解】</h3><ul>
<li><p>端口</p>
<ul>
<li>设备上应用程序的唯一标识</li>
</ul>
</li>
<li><p>端口号</p>
<ul>
<li>用两个字节表示的整数，它的取值范围是0<del>65535。其中，0</del>1023之间的端口号用于一些知名的网络服务和应用，普通的应用程序需要使用1024以上的端口号。如果端口号被另外一个服务或应用所占用，会导致当前程序启动失败</li>
</ul>
</li>
<li><p>协议</p>
<ul>
<li>计算机网络中，连接和通信的规则被称为网络通信协议</li>
</ul>
</li>
<li><p>UDP协议</p>
<ul>
<li>用户数据报协议(User Datagram Protocol)</li>
<li>UDP是无连接通信协议，即在数据传输时，数据的发送端和接收端不建立逻辑连接。简单来说，当一台计算机向另外一台计算机发送数据时，发送端不会确认接收端是否存在，就会发出数据，同样接收端在收到数据时，也不会向发送端反馈是否收到数据。</li>
<li>由于使用UDP协议消耗资源小，通信效率高，所以通常都会用于音频、视频和普通数据的传输</li>
<li>例如视频会议通常采用UDP协议，因为这种情况即使偶尔丢失一两个数据包，也不会对接收结果产生太大影响。但是在使用UDP协议传送数据时，由于UDP的面向无连接性，不能保证数据的完整性，因此在传输重要数据时不建议使用UDP协议</li>
</ul>
</li>
<li><p>TCP协议</p>
<ul>
<li><p>传输控制协议 (Transmission Control Protocol)</p>
</li>
<li><p>TCP协议是面向连接的通信协议，即传输数据之前，在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输。在TCP连接中必须要明确客户端与服务器端，由客户端向服务端发出连接请求，每次连接的创建都需要经过“三次握手”</p>
</li>
<li><p>三次握手：TCP协议中，在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠</p>
<p>第一次握手，客户端向服务器端发出连接请求，等待服务器确认</p>
<p>第二次握手，服务器端向客户端回送一个响应，通知客户端收到了连接请求</p>
<p>第三次握手，客户端再次向服务器端发送确认信息，确认连接</p>
</li>
<li><p>完成三次握手，连接建立后，客户端和服务器就可以开始进行数据传输了。由于这种面向连接的特性，TCP协议可以保证传输数据的安全，所以应用十分广泛。例如上传文件、下载文件、浏览网页等</p>
</li>
</ul>
</li>
</ul>
<h2 id="2-UDP通信程序"><a href="#2-UDP通信程序" class="headerlink" title="2.UDP通信程序"></a>2.UDP通信程序</h2><h3 id="2-1-UDP发送数据【应用】"><a href="#2-1-UDP发送数据【应用】" class="headerlink" title="2.1 UDP发送数据【应用】"></a>2.1 UDP发送数据【应用】</h3><ul>
<li><p>Java中的UDP通信</p>
<ul>
<li>UDP协议是一种不可靠的网络协议，它在通信的两端各建立一个Socket对象，但是这两个Socket只是发送，接收数据的对象，因此对于基于UDP协议的通信双方而言，没有所谓的客户端和服务器的概念</li>
<li>Java提供了DatagramSocket类作为基于UDP协议的Socket</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramSocket()</td>
<td>创建数据报套接字并将其绑定到本机地址上的任何可用端口</td>
</tr>
<tr>
<td>DatagramPacket(byte[] buf,int len,InetAddress add,int port)</td>
<td>创建数据包,发送长度为len的数据包到指定主机的指定端口</td>
</tr>
</tbody></table>
</li>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void send(DatagramPacket p)</td>
<td>发送数据报包</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭数据报套接字</td>
</tr>
<tr>
<td>void receive(DatagramPacket p)</td>
<td>从此套接字接受数据报包</td>
</tr>
</tbody></table>
</li>
<li><p>发送数据的步骤</p>
<ul>
<li>创建发送端的Socket对象(DatagramSocket)</li>
<li>创建数据，并把数据打包</li>
<li>调用DatagramSocket对象的方法发送数据</li>
<li>关闭发送端</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        <span class="comment">// DatagramSocket() 构造数据报套接字并将其绑定到本地主机上的任何可用端口</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">        <span class="comment">//DatagramPacket(byte[] buf, int length, InetAddress address, int port)</span></span><br><span class="line">        <span class="comment">//构造一个数据包，发送长度为 length的数据包到指定主机上的指定端口号。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="string">&quot;hello,udp,我来了&quot;</span>.getBytes();</span><br><span class="line"></span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys,bys.length,InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>),<span class="number">10086</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">        <span class="comment">//void send(DatagramPacket p) 从此套接字发送数据报包</span></span><br><span class="line">        ds.send(dp);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        <span class="comment">//void close() 关闭此数据报套接字</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2UDP接收数据【应用】"><a href="#2-2UDP接收数据【应用】" class="headerlink" title="2.2UDP接收数据【应用】"></a>2.2UDP接收数据【应用】</h3><ul>
<li><p>接收数据的步骤</p>
<ul>
<li>创建接收端的Socket对象(DatagramSocket)</li>
<li>创建一个数据包，用于接收数据</li>
<li>调用DatagramSocket对象的方法接收数据</li>
<li>解析数据包，并把数据在控制台显示</li>
<li>关闭接收端</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>DatagramPacket(byte[] buf, int len)</td>
<td>创建一个DatagramPacket用于接收长度为len的数据包</td>
</tr>
</tbody></table>
</li>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>byte[]  getData()</td>
<td>返回数据缓冲区</td>
</tr>
<tr>
<td>int  getLength()</td>
<td>返回要发送的数据的长度或接收的数据的长度</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>,                                             dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3UDP通信程序练习【应用】"><a href="#2-3UDP通信程序练习【应用】" class="headerlink" title="2.3UDP通信程序练习【应用】"></a>2.3UDP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>UDP发送数据：数据来自于键盘录入，直到输入的数据是886，发送数据结束</p>
<p>UDP接收数据：因为接收端不知道发送端什么时候停止发送，故采用死循环接收</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP发送数据：</span></span><br><span class="line"><span class="comment">        数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建发送端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//自己封装键盘录入数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//输入的数据是886，发送数据结束</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;886&quot;</span>.equals(line)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//创建数据，并把数据打包</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = line.getBytes();</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length, InetAddress.getByName(<span class="string">&quot;192.168.1.66&quot;</span>), <span class="number">12345</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法发送数据</span></span><br><span class="line">            ds.send(dp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭发送端</span></span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    UDP接收数据：</span></span><br><span class="line"><span class="comment">        因为接收端不知道发送端什么时候停止发送，故采用死循环接收</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建接收端的Socket对象(DatagramSocket)</span></span><br><span class="line">        DatagramSocket ds = <span class="keyword">new</span> DatagramSocket(<span class="number">12345</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//创建一个数据包，用于接收数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bys, bys.length);</span><br><span class="line">            <span class="comment">//调用DatagramSocket对象的方法接收数据</span></span><br><span class="line">            ds.receive(dp);</span><br><span class="line">            <span class="comment">//解析数据包，并把数据在控制台显示</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据是：&quot;</span> + <span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭接收端</span></span><br><span class="line"><span class="comment">//        ds.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="3-TCP通信程序"><a href="#3-TCP通信程序" class="headerlink" title="3.TCP通信程序"></a>3.TCP通信程序</h2><h3 id="3-1TCP发送数据【应用】"><a href="#3-1TCP发送数据【应用】" class="headerlink" title="3.1TCP发送数据【应用】"></a>3.1TCP发送数据【应用】</h3><ul>
<li><p>Java中的TCP通信</p>
<ul>
<li>Java对基于TCP协议的的网络提供了良好的封装，使用Socket对象来代表两端的通信端口，并通过Socket产生IO流来进行网络通信。</li>
<li>Java为客户端提供了Socket类，为服务器端提供了ServerSocket类</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Socket(InetAddress address,int port)</td>
<td>创建流套接字并将其连接到指定IP指定端口号</td>
</tr>
<tr>
<td>Socket(String host, int port)</td>
<td>创建流套接字并将其连接到指定主机上的指定端口号</td>
</tr>
</tbody></table>
</li>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>InputStream  getInputStream()</td>
<td>返回此套接字的输入流</td>
</tr>
<tr>
<td>OutputStream getOutputStream()</td>
<td>返回此套接字的输出流</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端的Socket对象(Socket)</span></span><br><span class="line">        <span class="comment">//Socket(String host, int port) 创建流套接字并将其连接到指定主机上的指定端口号</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输出流，写数据</span></span><br><span class="line">        <span class="comment">//OutputStream getOutputStream() 返回此套接字的输出流</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello,tcp,我来了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2TCP接收数据【应用】"><a href="#3-2TCP接收数据【应用】" class="headerlink" title="3.2TCP接收数据【应用】"></a>3.2TCP接收数据【应用】</h3><ul>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ServletSocket(int port)</td>
<td>创建绑定到指定端口的服务器套接字</td>
</tr>
</tbody></table>
</li>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Socket accept()</td>
<td>监听要连接到此的套接字并接受它</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器端的Socket对象(ServerSocket)</span></span><br><span class="line">        <span class="comment">//ServerSocket(int port) 创建绑定到指定端口的服务器套接字</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Socket accept() 侦听要连接到此套接字并接受它</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流，读数据，并把数据显示在控制台</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys,<span class="number">0</span>,len);</span><br><span class="line">        System.out.println(<span class="string">&quot;数据是：&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3TCP通信程序练习【应用】"><a href="#3-3TCP通信程序练习【应用】" class="headerlink" title="3.3TCP通信程序练习【应用】"></a>3.3TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：发送数据，接受服务器反馈</p>
<p>服务器：收到消息后给出反馈</p>
</li>
<li><p>案例分析</p>
<ul>
<li>客户端创建对象，使用输出流输出数据</li>
<li>服务端创建对象，使用输入流接受数据</li>
<li>服务端使用输出流给出反馈数据</li>
<li>客户端使用输入流接受反馈数据</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器端的Socket对象(ServerSocket)</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听客户端连接，返回一个Socket对象</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流，读数据，并把数据显示在控制台</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器：&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出反馈</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;数据已经收到&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line"><span class="comment">//        s.close();</span></span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端的Socket对象(Socket)</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输出流，写数据</span></span><br><span class="line">        OutputStream os = s.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;hello,tcp,我来了&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收服务器反馈</span></span><br><span class="line">        InputStream is = s.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = is.read(bys);</span><br><span class="line">        String data = <span class="keyword">new</span> String(bys, <span class="number">0</span>, len);</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端：&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line"><span class="comment">//        is.close();</span></span><br><span class="line"><span class="comment">//        os.close();</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4TCP通信程序练习【应用】"><a href="#3-4TCP通信程序练习【应用】" class="headerlink" title="3.4TCP通信程序练习【应用】"></a>3.4TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：数据来自于键盘录入, 直到输入的数据是886，发送数据结束</p>
<p>服务端：接收到数据在控制台输出</p>
</li>
<li><p>案例分析</p>
<ul>
<li>客户端创建对象，使用键盘录入循环接受数据，接受一行发送一行，直到键盘录入886为止</li>
<li>服务端创建对象，使用输入流按行循环接受数据，直到接受到null为止</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取输出流对象</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听客户端的连接，返回一个对应的Socket对象</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5TCP通信程序练习【应用】"><a href="#3-5TCP通信程序练习【应用】" class="headerlink" title="3.5TCP通信程序练习【应用】"></a>3.5TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：数据来自于键盘录入，直到输入的数据是886,发送数据结束</p>
<p>服务端：接受到的数据写入文本文件中</p>
</li>
<li><p>案例分析</p>
<ul>
<li>客户端创建对象，使用键盘录入循环接受数据，接受一行发送一行，直到键盘录入886为止</li>
<li>服务端创建对象，创建输出流对象指向文件，每接受一行数据后使用输出流输出到文件中，直到接受到null为止</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//数据来自于键盘录入，直到输入的数据是886，发送数据结束</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="comment">//封装输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;886&quot;</span>.equals(line)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line">        <span class="comment">//监听客户端连接，返回一个对应的Socket对象</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//把数据写入文本文件</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\s.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6TCP通信程序练习【应用】"><a href="#3-6TCP通信程序练习【应用】" class="headerlink" title="3.6TCP通信程序练习【应用】"></a>3.6TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：数据来自于文本文件</p>
<p>服务器：接收到的数据写入文本文件</p>
</li>
<li><p>案例分析</p>
<ul>
<li>创建客户端，创建输入流对象指向文件，从文件循环读取数据，每读取一行就使用输出流给服务器输出一行</li>
<li>创建服务端，创建输出流对象指向文件，从客户端接受数据，每接受一行就给文件中输出一行</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装文本文件的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\InetAddressDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听客户端连接，返回一个对应的Socket对象</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//把数据写入文本文件</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-7TCP通信程序练习【应用】"><a href="#3-7TCP通信程序练习【应用】" class="headerlink" title="3.7TCP通信程序练习【应用】"></a>3.7TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：数据来自于文本文件，接收服务器反馈</p>
<p>服务器：接收到的数据写入文本文件，给出反馈</p>
</li>
<li><p>案例分析</p>
<ul>
<li>创建客户端对象，创建输入流对象指向文件，每读入一行数据就给服务器输出一行数据，输出结束后使用shutdownOutput()方法告知服务端传输结束</li>
<li>创建服务器对象，创建输出流对象指向文件，每接受一行数据就使用输出流输出到文件中，传输结束后。使用输出流给客户端反馈信息</li>
<li>客户端接受服务端的回馈信息</li>
</ul>
</li>
<li><p>相关方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void shutdownInput()</td>
<td>将此套接字的输入流放置在“流的末尾”</td>
</tr>
<tr>
<td>void shutdownOutput()</td>
<td>禁止用此套接字的输出流</td>
</tr>
</tbody></table>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装文本文件的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\InetAddressDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void shutdownOutput()</span></span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收反馈</span></span><br><span class="line">        BufferedReader brClient = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String data = brClient.readLine(); <span class="comment">//等待读取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的反馈：&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听客户端连接，返回一个对应的Socket对象</span></span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        <span class="comment">//把数据写入文本文件</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myNet\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123; <span class="comment">//等待读取数据</span></span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//给出反馈</span></span><br><span class="line">        BufferedWriter bwServer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">        bwServer.write(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">        bwServer.newLine();</span><br><span class="line">        bwServer.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        ss.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-8TCP通信程序练习【应用】"><a href="#3-8TCP通信程序练习【应用】" class="headerlink" title="3.8TCP通信程序练习【应用】"></a>3.8TCP通信程序练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>客户端：数据来自于文本文件，接收服务器反馈</p>
<p>服务器：接收到的数据写入文本文件，给出反馈，代码用线程进行封装，为每一个客户端开启一个线程</p>
</li>
<li><p>案例分析</p>
<ul>
<li>创建客户端对象，创建输入流对象指向文件，每读入一行数据就给服务器输出一行数据，输出结束后使用shutdownOutput()方法告知服务端传输结束</li>
<li>创建多线程类，在run()方法中读取客户端发送的数据，为了防止文件重名，使用计数器给文件名编号，接受结束后使用输出流给客户端发送反馈信息。</li>
<li>创建服务端对象，每监听到一个客户端则开启一个新的线程接受数据。</li>
<li>客户端接受服务端的回馈信息</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建客户端Socket对象</span></span><br><span class="line">        Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.1.66&quot;</span>,<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装文本文件的数据</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myNet\\InetAddressDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//封装输出流写数据</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line"></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收反馈</span></span><br><span class="line">        BufferedReader brClient = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">        String data = brClient.readLine(); <span class="comment">//等待读取数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的反馈：&quot;</span> + data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        br.close();</span><br><span class="line">        s.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket s;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//接收数据写到文本文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(s.getInputStream()));</span><br><span class="line">            <span class="comment">//解决名称冲突问题</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            File file = <span class="keyword">new</span> File(<span class="string">&quot;myNet\\Copy[&quot;</span>+count+<span class="string">&quot;].java&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (file.exists()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                file = <span class="keyword">new</span> File(<span class="string">&quot;myNet\\Copy[&quot;</span>+count+<span class="string">&quot;].java&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file));</span><br><span class="line"></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                bw.write(line);</span><br><span class="line">                bw.newLine();</span><br><span class="line">                bw.flush();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给出反馈</span></span><br><span class="line">            BufferedWriter bwServer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(s.getOutputStream()));</span><br><span class="line">            bwServer.write(<span class="string">&quot;文件上传成功&quot;</span>);</span><br><span class="line">            bwServer.newLine();</span><br><span class="line">            bwServer.flush();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            s.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务器Socket对象</span></span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//监听客户端连接，返回一个对应的Socket对象</span></span><br><span class="line">            Socket s = ss.accept();</span><br><span class="line">            <span class="comment">//为每一个客户端开启一个线程</span></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServerThread(s)).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Java新特性</title>
    <url>/2019/09/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190906Java%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1.Lambda表达式"></a>1.Lambda表达式</h2><h3 id="1-1体验Lambda表达式【理解】"><a href="#1-1体验Lambda表达式【理解】" class="headerlink" title="1.1体验Lambda表达式【理解】"></a>1.1体验Lambda表达式【理解】</h3><ul>
<li><p>案例需求</p>
<p>启动一个线程，在控制台输出一句话：多线程程序启动了</p>
</li>
<li><p>实现方式一</p>
<ul>
<li><p>实现步骤</p>
<ul>
<li>定义一个类MyRunnable实现Runnable接口，重写run()方法</li>
<li>创建MyRunnable类的对象</li>
<li>创建Thread类的对象，把MyRunnable的对象作为构造参数传递</li>
<li>启动线程</li>
</ul>
<a id="more"></a>
</li>
</ul>
</li>
<li><p>实现方式二</p>
<ul>
<li>匿名内部类的方式改进</li>
</ul>
</li>
<li><p>实现方式三</p>
<ul>
<li>Lambda表达式的方式改进</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一的线程类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;多线程程序启动了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//        MyRunnable my = new MyRunnable();</span></span><br><span class="line"><span class="comment">//        Thread t = new Thread(my);</span></span><br><span class="line"><span class="comment">//        t.start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二</span></span><br><span class="line"><span class="comment">//        new Thread(new Runnable() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void run() &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;多线程程序启动了&quot;);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;).start();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三</span></span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;多线程程序启动了&quot;</span>);</span><br><span class="line">        &#125; ).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数式编程思想概述</p>
<p>函数式思想则尽量忽略面向对象的复杂语法：“强调做什么，而不是以什么形式去做”</p>
<p>而我们要学习的Lambda表达式就是函数式思想的体现</p>
</li>
</ul>
<h3 id="1-2Lambda表达式的标准格式【理解】"><a href="#1-2Lambda表达式的标准格式【理解】" class="headerlink" title="1.2Lambda表达式的标准格式【理解】"></a>1.2Lambda表达式的标准格式【理解】</h3><ul>
<li><p>格式：</p>
<p>​    (形式参数) -&gt; {代码块}</p>
<ul>
<li>形式参数：如果有多个参数，参数之间用逗号隔开；如果没有参数，留空即可</li>
<li>-&gt;：由英文中画线和大于符号组成，固定写法。代表指向动作</li>
<li>代码块：是我们具体要做的事情，也就是以前我们写的方法体内容</li>
</ul>
</li>
<li><p>组成Lambda表达式的三要素：</p>
<ul>
<li>形式参数，箭头，代码块</li>
</ul>
</li>
</ul>
<h3 id="1-3Lambda表达式练习1【应用】"><a href="#1-3Lambda表达式练习1【应用】" class="headerlink" title="1.3Lambda表达式练习1【应用】"></a>1.3Lambda表达式练习1【应用】</h3><ul>
<li><p>Lambda表达式的使用前提</p>
<ul>
<li>有一个接口</li>
<li>接口中有且仅有一个抽象方法</li>
</ul>
</li>
<li><p>练习描述</p>
<p>​    无参无返回值抽象方法的练习</p>
</li>
<li><p>操作步骤</p>
<ul>
<li>定义一个接口(Eatable)，里面定义一个抽象方法：void eat();</li>
<li>定义一个测试类(EatableDemo)，在测试类中提供两个方法<ul>
<li>一个方法是：useEatable(Eatable e)</li>
<li>一个方法是主方法，在主方法中调用useEatable方法</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Eatable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatableImpl</span> <span class="keyword">implements</span> <span class="title">Eatable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一天一苹果，医生远离我&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EatableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用useEatable方法</span></span><br><span class="line">        Eatable e = <span class="keyword">new</span> EatableImpl();</span><br><span class="line">        useEatable(e);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        useEatable(<span class="keyword">new</span> Eatable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;一天一苹果，医生远离我&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda表达式</span></span><br><span class="line">        useEatable(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;一天一苹果，医生远离我&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useEatable</span><span class="params">(Eatable e)</span> </span>&#123;</span><br><span class="line">        e.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4Lambda表达式练习2【应用】"><a href="#1-4Lambda表达式练习2【应用】" class="headerlink" title="1.4Lambda表达式练习2【应用】"></a>1.4Lambda表达式练习2【应用】</h3><ul>
<li><p>练习描述</p>
<p>有参无返回值抽象方法的练习</p>
</li>
<li><p>操作步骤</p>
<ul>
<li>定义一个接口(Flyable)，里面定义一个抽象方法：void fly(String s);</li>
<li>定义一个测试类(FlyableDemo)，在测试类中提供两个方法<ul>
<li>一个方法是：useFlyable(Flyable f)</li>
<li>一个方法是主方法，在主方法中调用useFlyable方法</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用useFlyable方法</span></span><br><span class="line">        <span class="comment">//匿名内部类</span></span><br><span class="line">        useFlyable(<span class="keyword">new</span> Flyable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">                System.out.println(<span class="string">&quot;飞机自驾游&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lambda</span></span><br><span class="line">        useFlyable((String s) -&gt; &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">            System.out.println(<span class="string">&quot;飞机自驾游&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useFlyable</span><span class="params">(Flyable f)</span> </span>&#123;</span><br><span class="line">        f.fly(<span class="string">&quot;风和日丽，晴空万里&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5Lambda表达式练习3【应用】"><a href="#1-5Lambda表达式练习3【应用】" class="headerlink" title="1.5Lambda表达式练习3【应用】"></a>1.5Lambda表达式练习3【应用】</h3><ul>
<li><p>练习描述</p>
<p>有参有返回值抽象方法的练习</p>
</li>
<li><p>操作步骤</p>
<ul>
<li>定义一个接口(Addable)，里面定义一个抽象方法：int add(int x,int y);</li>
<li>定义一个测试类(AddableDemo)，在测试类中提供两个方法<ul>
<li>一个方法是：useAddable(Addable a)</li>
<li>一个方法是主方法，在主方法中调用useAddable方法</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Addable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用useAddable方法</span></span><br><span class="line">        useAddable((<span class="keyword">int</span> x,<span class="keyword">int</span> y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useAddable</span><span class="params">(Addable a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6Lambda表达式的省略模式【应用】"><a href="#1-6Lambda表达式的省略模式【应用】" class="headerlink" title="1.6Lambda表达式的省略模式【应用】"></a>1.6Lambda表达式的省略模式【应用】</h3><ul>
<li><p>省略的规则</p>
<ul>
<li>参数类型可以省略。但是有多个参数的情况下，不能只省略一个</li>
<li>如果参数有且仅有一个，那么小括号可以省略</li>
<li>如果代码块的语句只有一条，可以省略大括号和分号，和return关键字</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Addable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        useAddable((int x,int y) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            return x + y;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">//参数的类型可以省略</span></span><br><span class="line">        useAddable((x, y) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        useFlyable((String s) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        <span class="comment">//如果参数有且仅有一个，那么小括号可以省略</span></span><br><span class="line"><span class="comment">//        useFlyable(s -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果代码块的语句只有一条，可以省略大括号和分号</span></span><br><span class="line">        useFlyable(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果代码块的语句只有一条，可以省略大括号和分号，如果有return，return也要省略掉</span></span><br><span class="line">        useAddable((x, y) -&gt; x + y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useFlyable</span><span class="params">(Flyable f)</span> </span>&#123;</span><br><span class="line">        f.fly(<span class="string">&quot;风和日丽，晴空万里&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useAddable</span><span class="params">(Addable a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = a.add(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-7Lambda表达式的注意事项【理解】"><a href="#1-7Lambda表达式的注意事项【理解】" class="headerlink" title="1.7Lambda表达式的注意事项【理解】"></a>1.7Lambda表达式的注意事项【理解】</h3><ul>
<li><p>使用Lambda必须要有接口，并且要求接口中有且仅有一个抽象方法</p>
</li>
<li><p>必须有上下文环境，才能推导出Lambda对应的接口</p>
<ul>
<li><p>根据局部变量的赋值得知Lambda对应的接口</p>
<p>​    Runnable r = () -&gt; System.out.println(“Lambda表达式”);</p>
</li>
<li><p>根据调用方法的参数得知Lambda对应的接口</p>
<p>​    new Thread(() -&gt; System.out.println(“Lambda表达式”)).start();</p>
</li>
</ul>
</li>
</ul>
<h3 id="1-8Lambda表达式和匿名内部类的区别【理解】"><a href="#1-8Lambda表达式和匿名内部类的区别【理解】" class="headerlink" title="1.8Lambda表达式和匿名内部类的区别【理解】"></a>1.8Lambda表达式和匿名内部类的区别【理解】</h3><ul>
<li>所需类型不同<ul>
<li>匿名内部类：可以是接口，也可以是抽象类，还可以是具体类</li>
<li>Lambda表达式：只能是接口</li>
</ul>
</li>
<li>使用限制不同<ul>
<li>如果接口中有且仅有一个抽象方法，可以使用Lambda表达式，也可以使用匿名内部类</li>
<li>如果接口中多于一个抽象方法，只能使用匿名内部类，而不能使用Lambda表达式</li>
</ul>
</li>
<li>实现原理不同<ul>
<li>匿名内部类：编译之后，产生一个单独的.class字节码文件</li>
<li>Lambda表达式：编译之后，没有一个单独的.class字节码文件。对应的字节码会在运行的时候动态生成</li>
</ul>
</li>
</ul>
<h2 id="2-接口组成更新"><a href="#2-接口组成更新" class="headerlink" title="2.接口组成更新"></a>2.接口组成更新</h2><h3 id="2-1接口组成更新概述【理解】"><a href="#2-1接口组成更新概述【理解】" class="headerlink" title="2.1接口组成更新概述【理解】"></a>2.1接口组成更新概述【理解】</h3><ul>
<li><p>常量</p>
<p>public static final</p>
</li>
<li><p>抽象方法</p>
<p>public abstract</p>
</li>
<li><p>默认方法(Java 8)</p>
</li>
<li><p>静态方法(Java 8)</p>
</li>
<li><p>私有方法(Java 9)</p>
</li>
</ul>
<h3 id="2-2接口中默认方法【应用】"><a href="#2-2接口中默认方法【应用】" class="headerlink" title="2.2接口中默认方法【应用】"></a>2.2接口中默认方法【应用】</h3><ul>
<li><p>格式</p>
<p>public default 返回值类型 方法名(参数列表) {   }</p>
</li>
<li><p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">()</span> </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>默认方法不是抽象方法，所以不强制被重写。但是可以被重写，重写的时候去掉default关键字</li>
<li>public可以省略，default不能省略</li>
</ul>
</li>
</ul>
<h3 id="2-3接口中静态方法【应用】"><a href="#2-3接口中静态方法【应用】" class="headerlink" title="2.3接口中静态方法【应用】"></a>2.3接口中静态方法【应用】</h3><ul>
<li><p>格式</p>
<p>public static 返回值类型 方法名(参数列表) {   }</p>
</li>
<li><p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注意事项</p>
<ul>
<li>静态方法只能通过接口名调用，不能通过实现类名或者对象名调用</li>
<li>public可以省略，static不能省略</li>
</ul>
</li>
</ul>
<h3 id="2-4接口中私有方法【应用】"><a href="#2-4接口中私有方法【应用】" class="headerlink" title="2.4接口中私有方法【应用】"></a>2.4接口中私有方法【应用】</h3><ul>
<li><p>私有方法产生原因</p>
<p>Java 9中新增了带方法体的私有方法，这其实在Java 8中就埋下了伏笔：Java 8允许在接口中定义带方法体的默认方法和静态方法。这样可能就会引发一个问题：当两个默认方法或者静态方法中包含一段相同的代码实现时，程序必然考虑将这段实现代码抽取成一个共性方法，而这个共性方法是不需要让别人使用的，因此用私有给隐藏起来，这就是Java 9增加私有方法的必然性</p>
</li>
<li><p>定义格式</p>
<ul>
<li><p>格式1</p>
<p>private 返回值类型 方法名(参数列表) {   }</p>
</li>
<li><p>范例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>格式2</p>
<p>private static 返回值类型 方法名(参数列表) {   }</p>
</li>
<li><p>范例2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>默认方法可以调用私有的静态方法和非静态方法</li>
<li>静态方法只能调用私有的静态方法</li>
</ul>
</li>
</ul>
<h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3.方法引用"></a>3.方法引用</h2><h3 id="3-1体验方法引用【理解】"><a href="#3-1体验方法引用【理解】" class="headerlink" title="3.1体验方法引用【理解】"></a>3.1体验方法引用【理解】</h3><ul>
<li><p>方法引用的出现原因</p>
<p>在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿参数做操作</p>
<p>那么考虑一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑呢？答案肯定是没有必要</p>
<p>那我们又是如何使用已经存在的方案的呢？</p>
<p>这就是我们要讲解的方法引用，我们是通过方法引用来使用已经存在的方案</p>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printString</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用usePrintable方法</span></span><br><span class="line"><span class="comment">//        usePrintable((String s) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(s);</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">	    <span class="comment">//Lambda简化写法</span></span><br><span class="line">        usePrintable(s -&gt; System.out.println(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        usePrintable(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usePrintable</span><span class="params">(Printable p)</span> </span>&#123;</span><br><span class="line">        p.printString(<span class="string">&quot;爱生活爱Java&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2方法引用符【理解】"><a href="#3-2方法引用符【理解】" class="headerlink" title="3.2方法引用符【理解】"></a>3.2方法引用符【理解】</h3><ul>
<li><p>方法引用符</p>
<p>::  该符号为引用运算符，而它所在的表达式被称为方法引用</p>
</li>
<li><p>推导与省略</p>
<ul>
<li>如果使用Lambda，那么根据“可推导就是可省略”的原则，无需指定参数类型，也无需指定的重载形式，它们都将被自动推导</li>
<li>如果使用方法引用，也是同样可以根据上下文进行推导</li>
<li>方法引用是Lambda的孪生兄弟</li>
</ul>
</li>
</ul>
<h3 id="3-3引用类方法【应用】"><a href="#3-3引用类方法【应用】" class="headerlink" title="3.3引用类方法【应用】"></a>3.3引用类方法【应用】</h3><p>​    引用类方法，其实就是引用类的静态方法</p>
<ul>
<li><p>格式</p>
<p>类名::静态方法</p>
</li>
<li><p>范例</p>
<p>Integer::parseInt</p>
<p>Integer类的方法：public static int parseInt(String s) 将此String转换为int类型数据</p>
</li>
<li><p>练习描述</p>
<ul>
<li>定义一个接口(Converter)，里面定义一个抽象方法 int convert(String s);</li>
<li>定义一个测试类(ConverterDemo)，在测试类中提供两个方法<ul>
<li>一个方法是：useConverter(Converter c)</li>
<li>一个方法是主方法，在主方法中调用useConverter方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">convert</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConverterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Lambda写法</span></span><br><span class="line">        useConverter(s -&gt; Integer.parseInt(s));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类方法</span></span><br><span class="line">        useConverter(Integer::parseInt);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useConverter</span><span class="params">(Converter c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = c.convert(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用说明</p>
<p>Lambda表达式被类方法替代的时候，它的形式参数全部传递给静态方法作为参数</p>
</li>
</ul>
<h3 id="3-4引用对象的实例方法【应用】"><a href="#3-4引用对象的实例方法【应用】" class="headerlink" title="3.4引用对象的实例方法【应用】"></a>3.4引用对象的实例方法【应用】</h3><p>​    引用对象的实例方法，其实就引用类中的成员方法</p>
<ul>
<li><p>格式</p>
<p>对象::成员方法</p>
</li>
<li><p>范例</p>
<p>“HelloWorld”::toUpperCase</p>
<p>  String类中的方法：public String toUpperCase() 将此String所有字符转换为大写</p>
</li>
<li><p>练习描述</p>
<ul>
<li><p>定义一个类(PrintString)，里面定义一个方法</p>
<p>public void printUpper(String s)：把字符串参数变成大写的数据，然后在控制台输出</p>
</li>
<li><p>定义一个接口(Printer)，里面定义一个抽象方法</p>
<p>void printUpperCase(String s)</p>
</li>
<li><p>定义一个测试类(PrinterDemo)，在测试类中提供两个方法</p>
<ul>
<li>一个方法是：usePrinter(Printer p)</li>
<li>一个方法是主方法，在主方法中调用usePrinter方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintString</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把字符串参数变成大写的数据，然后在控制台输出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printUpper</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = s.toUpperCase();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printUpperCase</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrinterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Lambda简化写法</span></span><br><span class="line">        usePrinter(s -&gt; System.out.println(s.toUpperCase()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用对象的实例方法</span></span><br><span class="line">        PrintString ps = <span class="keyword">new</span> PrintString();</span><br><span class="line">        usePrinter(ps::printUpper);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">usePrinter</span><span class="params">(Printer p)</span> </span>&#123;</span><br><span class="line">        p.printUpperCase(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用说明</p>
<p>Lambda表达式被对象的实例方法替代的时候，它的形式参数全部传递给该方法作为参数</p>
</li>
</ul>
<h3 id="3-5引用类的实例方法【应用】"><a href="#3-5引用类的实例方法【应用】" class="headerlink" title="3.5引用类的实例方法【应用】"></a>3.5引用类的实例方法【应用】</h3><p>​    引用类的实例方法，其实就是引用类中的成员方法</p>
<ul>
<li><p>格式</p>
<p>类名::成员方法</p>
</li>
<li><p>范例</p>
<p>String::substring</p>
<p>public String substring(int beginIndex,int endIndex) </p>
<p>从beginIndex开始到endIndex结束，截取字符串。返回一个子串，子串的长度为endIndex-beginIndex</p>
</li>
<li><p>练习描述</p>
<ul>
<li><p>定义一个接口(MyString)，里面定义一个抽象方法：</p>
<p>String mySubString(String s,int x,int y);</p>
</li>
<li><p>定义一个测试类(MyStringDemo)，在测试类中提供两个方法</p>
<ul>
<li>一个方法是：useMyString(MyString my)</li>
<li>一个方法是主方法，在主方法中调用useMyString方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">mySubString</span><span class="params">(String s,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Lambda简化写法</span></span><br><span class="line">        useMyString((s,x,y) -&gt; s.substring(x,y));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用类的实例方法</span></span><br><span class="line">        useMyString(String::substring);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useMyString</span><span class="params">(MyString my)</span> </span>&#123;</span><br><span class="line">        String s = my.mySubString(<span class="string">&quot;HelloWorld&quot;</span>, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用说明</p>
<p>​    Lambda表达式被类的实例方法替代的时候<br>​    第一个参数作为调用者<br>​    后面的参数全部传递给该方法作为参数</p>
</li>
</ul>
<h3 id="3-6引用构造器【应用】"><a href="#3-6引用构造器【应用】" class="headerlink" title="3.6引用构造器【应用】"></a>3.6引用构造器【应用】</h3><p>​    引用构造器，其实就是引用构造方法</p>
<ul>
<li><p>l格式</p>
<p>类名::new</p>
</li>
<li><p>范例</p>
<p>Student::new</p>
</li>
<li><p>练习描述</p>
<ul>
<li><p>定义一个类(Student)，里面有两个成员变量(name,age)</p>
<p>并提供无参构造方法和带参构造方法，以及成员变量对应的get和set方法</p>
</li>
<li><p>定义一个接口(StudentBuilder)，里面定义一个抽象方法</p>
<p>Student build(String name,int age);</p>
</li>
<li><p>定义一个测试类(StudentDemo)，在测试类中提供两个方法</p>
<ul>
<li>一个方法是：useStudentBuilder(StudentBuilder s)</li>
<li>一个方法是主方法，在主方法中调用useStudentBuilder方法</li>
</ul>
</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">build</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//Lambda简化写法</span></span><br><span class="line">        useStudentBuilder((name,age) -&gt; <span class="keyword">new</span> Student(name,age));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用构造器</span></span><br><span class="line">        useStudentBuilder(Student::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useStudentBuilder</span><span class="params">(StudentBuilder sb)</span> </span>&#123;</span><br><span class="line">        Student s = sb.build(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用说明</p>
<p>Lambda表达式被构造器替代的时候，它的形式参数全部传递给构造器作为参数</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>函数式接口&amp;Stream流</title>
    <url>/2019/09/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190909%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3&amp;Stream%E6%B5%81/</url>
    <content><![CDATA[<h2 id="1-函数式接口"><a href="#1-函数式接口" class="headerlink" title="1.函数式接口"></a>1.函数式接口</h2><h3 id="1-1函数式接口概述【理解】"><a href="#1-1函数式接口概述【理解】" class="headerlink" title="1.1函数式接口概述【理解】"></a>1.1函数式接口概述【理解】</h3><ul>
<li><p>概念</p>
<p>有且仅有一个抽象方法的接口</p>
</li>
<li><p>如何检测一个接口是不是函数式接口</p>
<p>@FunctionalInterface</p>
<p>放在接口定义的上方：如果接口是函数式接口，编译通过；如果不是，编译失败</p>
</li>
<li><p>注意事项</p>
<p>我们自己定义函数式接口的时候，@FunctionalInterface是可选的，就算我不写这个注解，只要保证满足函数式接口定义的条件，也照样是函数式接口。但是，建议加上该注解</p>
<a id="more"></a>

</li>
</ul>
<h3 id="1-2函数式接口作为方法的参数【应用】"><a href="#1-2函数式接口作为方法的参数【应用】" class="headerlink" title="1.2函数式接口作为方法的参数【应用】"></a>1.2函数式接口作为方法的参数【应用】</h3><ul>
<li><p>需求描述</p>
<p>定义一个类(RunnableDemo)，在类中提供两个方法</p>
<p>一个方法是：startThread(Runnable r)   方法参数Runnable是一个函数式接口</p>
<p>一个方法是主方法，在主方法中调用startThread方法</p>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在主方法中调用startThread方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名内部类的方式</span></span><br><span class="line">        startThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程启动了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//Lambda方式</span></span><br><span class="line">        startThread(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;线程启动了&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(r).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3函数式接口作为方法的返回值【应用】"><a href="#1-3函数式接口作为方法的返回值【应用】" class="headerlink" title="1.3函数式接口作为方法的返回值【应用】"></a>1.3函数式接口作为方法的返回值【应用】</h3><ul>
<li><p>需求描述</p>
<p>定义一个类(ComparatorDemo)，在类中提供两个方法</p>
<p>一个方法是：Comparator<String> getComparator()   方法返回值Comparator是一个函数式接口</String></p>
<p>一个方法是主方法，在主方法中调用getComparator方法</p>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComparatorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义集合，存储字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        array.add(<span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span> + array);</span><br><span class="line"></span><br><span class="line">        Collections.sort(array, getComparator());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span> + array);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Comparator&lt;String&gt; <span class="title">getComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名内部类的方式实现</span></span><br><span class="line"><span class="comment">//        return new Comparator&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public int compare(String s1, String s2) &#123;</span></span><br><span class="line"><span class="comment">//                return s1.length()-s2.length();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line">        </span><br><span class="line">		<span class="comment">//Lambda方式实现</span></span><br><span class="line">        <span class="keyword">return</span> (s1, s2) -&gt; s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4常用函数式接口之Supplier【应用】"><a href="#1-4常用函数式接口之Supplier【应用】" class="headerlink" title="1.4常用函数式接口之Supplier【应用】"></a>1.4常用函数式接口之Supplier【应用】</h3><ul>
<li><p>Supplier接口</p>
<p>Supplier<T>接口也被称为生产型接口，如果我们指定了接口的泛型是什么类型，那么接口中的get方法就会生产什么类型的数据供我们使用。</T></p>
</li>
<li><p>常用方法</p>
<p>只有一个无参的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>T get()</td>
<td align="center">按照某种实现逻辑(由Lambda表达式实现)返回一个数据</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String s = getString(() -&gt; <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        </span><br><span class="line">        Integer i = getInteger(() -&gt; <span class="number">30</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，返回一个整数数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Integer <span class="title">getInteger</span><span class="params">(Supplier&lt;Integer&gt; sup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，返回一个字符串数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Supplier&lt;String&gt; sup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5Supplier接口练习之获取最大值【应用】"><a href="#1-5Supplier接口练习之获取最大值【应用】" class="headerlink" title="1.5Supplier接口练习之获取最大值【应用】"></a>1.5Supplier接口练习之获取最大值【应用】</h3><ul>
<li><p>案例需求</p>
<p>定义一个类(SupplierTest)，在类中提供两个方法</p>
<p>一个方法是：int getMax(Supplier<Integer> sup)   用于返回一个int数组中的最大值</Integer></p>
<p>一个方法是主方法，在主方法中调用getMax方法</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个int数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">50</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxValue = getMax(()-&gt; &#123;</span><br><span class="line">           <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">               <span class="keyword">if</span>(arr[i] &gt; max) &#123;</span><br><span class="line">                   max = arr[i];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> max;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(maxValue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回一个int数组中的最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(Supplier&lt;Integer&gt; sup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sup.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6常用函数式接口之Consumer【应用】"><a href="#1-6常用函数式接口之Consumer【应用】" class="headerlink" title="1.6常用函数式接口之Consumer【应用】"></a>1.6常用函数式接口之Consumer【应用】</h3><ul>
<li><p>Consumer接口</p>
<p>Consumer<T>接口也被称为消费型接口，它消费的数据的数据类型由泛型指定</T></p>
</li>
<li><p>常用方法</p>
<p>Consumer<T>：包含两个方法</T></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void  accept(T t)</td>
<td>对给定的参数执行此操作</td>
</tr>
<tr>
<td>default Consumer<T>          andThen(Consumer after)</T></td>
<td>返回一个组合的Consumer，依次执行此操作，然后执行 after操作</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//操作一</span></span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>, s -&gt; System.out.println(s));</span><br><span class="line">		<span class="comment">//操作二</span></span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>, s -&gt; System.out.println(<span class="keyword">new</span> StringBuilder(s).reverse().toString()));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">		<span class="comment">//传入两个操作使用andThen完成</span></span><br><span class="line">        operatorString(<span class="string">&quot;林青霞&quot;</span>, s -&gt; System.out.println(s), s -&gt; System.out.println(<span class="keyword">new</span> StringBuilder(s).reverse().toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用不同的方式消费同一个字符串数据两次</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operatorString</span><span class="params">(String name, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        con1.accept(name);</span></span><br><span class="line"><span class="comment">//        con2.accept(name);</span></span><br><span class="line">        con1.andThen(con2).accept(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，消费一个字符串数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operatorString</span><span class="params">(String name, Consumer&lt;String&gt; con)</span> </span>&#123;</span><br><span class="line">        con.accept(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-7Consumer接口练习之按要求打印信息【应用】"><a href="#1-7Consumer接口练习之按要求打印信息【应用】" class="headerlink" title="1.7Consumer接口练习之按要求打印信息【应用】"></a>1.7Consumer接口练习之按要求打印信息【应用】</h3><ul>
<li><p>案例需求</p>
<p>String[] strArray = {“林青霞,30”, “张曼玉,35”, “王祖贤,33”};</p>
<p>字符串数组中有多条信息，请按照格式：“姓名：XX,年龄：XX”的格式将信息打印出来</p>
<p>要求：</p>
<p>把打印姓名的动作作为第一个Consumer接口的Lambda实例</p>
<p>把打印年龄的动作作为第二个Consumer接口的Lambda实例</p>
<p>将两个Consumer接口按照顺序组合到一起使用</p>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        printInfo(strArray, str -&gt; System.out.print(<span class="string">&quot;姓名：&quot;</span> + str.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]),</span><br><span class="line">                str -&gt; System.out.println(<span class="string">&quot;,年龄：&quot;</span> + Integer.parseInt(str.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printInfo</span><span class="params">(String[] strArray, Consumer&lt;String&gt; con1, Consumer&lt;String&gt; con2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String str : strArray) &#123;</span><br><span class="line">            con1.andThen(con2).accept(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-8常用函数式接口之Predicate【应用】"><a href="#1-8常用函数式接口之Predicate【应用】" class="headerlink" title="1.8常用函数式接口之Predicate【应用】"></a>1.8常用函数式接口之Predicate【应用】</h3><ul>
<li><p>Predicate接口</p>
<p>Predicate<T>接口通常用于判断参数是否满足指定的条件</T></p>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>boolean test(T t)</td>
<td>对给定的参数进行判断(判断逻辑由Lambda表达式实现)，返回一个布尔值</td>
</tr>
<tr>
<td>default Predicate<T> negate()</T></td>
<td>返回一个逻辑的否定，对应逻辑非</td>
</tr>
<tr>
<td>default Predicate<T> and(Predicate other)</T></td>
<td>返回一个组合判断，对应短路与</td>
</tr>
<tr>
<td>default Predicate<T> or(Predicate other)</T></td>
<td>返回一个组合判断，对应短路或</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = checkString(<span class="string">&quot;hello&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = checkString(<span class="string">&quot;helloworld&quot;</span>,s -&gt; s.length() &gt; <span class="number">8</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断给定的字符串是否满足要求</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s, Predicate&lt;String&gt; pre)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return !pre.test(s);</span></span><br><span class="line">        <span class="keyword">return</span> pre.negate().test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = checkString(<span class="string">&quot;hello&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>);</span><br><span class="line">        System.out.println(b1);</span><br><span class="line">        <span class="keyword">boolean</span> b2 = checkString(<span class="string">&quot;helloworld&quot;</span>, s -&gt; s.length() &gt; <span class="number">8</span>);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = checkString(<span class="string">&quot;hello&quot;</span>,s -&gt; s.length() &gt; <span class="number">8</span>, s -&gt; s.length() &lt; <span class="number">15</span>);</span><br><span class="line">        System.out.println(b3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b4 = checkString(<span class="string">&quot;helloworld&quot;</span>,s -&gt; s.length() &gt; <span class="number">8</span>, s -&gt; s.length() &lt; <span class="number">15</span>);</span><br><span class="line">        System.out.println(b4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同一个字符串给出两个不同的判断条件，最后把这两个判断的结果做逻辑与运算的结果作为最终的结果</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s, Predicate&lt;String&gt; pre1, Predicate&lt;String&gt; pre2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre1.or(pre2).test(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断给定的字符串是否满足要求</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkString</span><span class="params">(String s, Predicate&lt;String&gt; pre)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.test(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-9Predicate接口练习之筛选满足条件数据【应用】"><a href="#1-9Predicate接口练习之筛选满足条件数据【应用】" class="headerlink" title="1.9Predicate接口练习之筛选满足条件数据【应用】"></a>1.9Predicate接口练习之筛选满足条件数据【应用】</h3><ul>
<li><p>练习描述</p>
<ul>
<li>String[] strArray = {“林青霞,30”, “柳岩,34”, “张曼玉,35”, “貂蝉,31”, “王祖贤,33”};</li>
<li>字符串数组中有多条信息，请通过Predicate接口的拼装将符合要求的字符串筛选到集合ArrayList中，并遍历ArrayList集合</li>
<li>同时满足如下要求：姓名长度大于2；年龄大于33</li>
</ul>
</li>
<li><p>分析</p>
<ul>
<li>有两个判断条件,所以需要使用两个Predicate接口,对条件进行判断</li>
<li>必须同时满足两个条件,所以可以使用and方法连接两个判断条件</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PredicateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;柳岩,34&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;貂蝉,31&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; array = myFilter(strArray, s -&gt; s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>].length() &gt; <span class="number">2</span>,</span><br><span class="line">                s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]) &gt; <span class="number">33</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : array) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过Predicate接口的拼装将符合要求的字符串筛选到集合ArrayList中</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">myFilter</span><span class="params">(String[] strArray, Predicate&lt;String&gt; pre1, Predicate&lt;String&gt; pre2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个集合</span></span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (String str : strArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre1.and(pre2).test(str)) &#123;</span><br><span class="line">                array.add(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-10常用函数式接口之Function【应用】"><a href="#1-10常用函数式接口之Function【应用】" class="headerlink" title="1.10常用函数式接口之Function【应用】"></a>1.10常用函数式接口之Function【应用】</h3><ul>
<li><p>Function接口</p>
<p>Function&lt;T,R&gt;接口通常用于对参数进行处理，转换(处理逻辑由Lambda表达式实现)，然后返回一个新的值</p>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>R  apply(T t)</td>
<td>将此函数应用于给定的参数</td>
</tr>
<tr>
<td>default <V> Function andThen(Function after)</V></td>
<td>返回一个组合函数，首先将该函数应用于输入，然后将after函数应用于结果</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//操作一</span></span><br><span class="line">        convert(<span class="string">&quot;100&quot;</span>,s -&gt; Integer.parseInt(s));</span><br><span class="line">		<span class="comment">//操作二</span></span><br><span class="line">        convert(<span class="number">100</span>,i -&gt; String.valueOf(i + <span class="number">566</span>));</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//使用andThen的方式连续执行两个操作</span></span><br><span class="line">        convert(<span class="string">&quot;100&quot;</span>, s -&gt; Integer.parseInt(s), i -&gt; String.valueOf(i + <span class="number">566</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，把一个字符串转换int类型，在控制台输出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String s, Function&lt;String,Integer&gt; fun)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Integer i = fun.apply(s);</span></span><br><span class="line">        <span class="keyword">int</span> i = fun.apply(s);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，把一个int类型的数据加上一个整数之后，转为字符串在控制台输出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(<span class="keyword">int</span> i, Function&lt;Integer,String&gt; fun)</span> </span>&#123;</span><br><span class="line">        String s = fun.apply(i);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，把一个字符串转换int类型，把int类型的数据加上一个整数之后，转为字符串在控制台输出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String s, Function&lt;String,Integer&gt; fun1, Function&lt;Integer,String&gt; fun2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String ss = fun1.andThen(fun2).apply(s);</span><br><span class="line">        System.out.println(ss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-11Function接口练习之按照指定要求操作数据【应用】"><a href="#1-11Function接口练习之按照指定要求操作数据【应用】" class="headerlink" title="1.11Function接口练习之按照指定要求操作数据【应用】"></a>1.11Function接口练习之按照指定要求操作数据【应用】</h3><ul>
<li><p>练习描述</p>
<ul>
<li><p>String s = “林青霞,30”;</p>
</li>
<li><p>请按照我指定的要求进行操作：</p>
<p>1:将字符串截取得到数字年龄部分   </p>
<p>2:将上一步的年龄字符串转换成为int类型的数据</p>
<p>3:将上一步的int数据加70，得到一个int结果，在控制台输出</p>
</li>
<li><p>请通过Function接口来实现函数拼接</p>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FunctionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;林青霞,30&quot;</span>;</span><br><span class="line">        convert(s, ss -&gt; ss.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>], Integer::parseInt, i -&gt; i + <span class="number">70</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String s, Function&lt;String, String&gt; fun1, Function&lt;String, Integer&gt; fun2, Function&lt;Integer, Integer&gt; fun3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = fun1.andThen(fun2).andThen(fun3).apply(s);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-Strem流"><a href="#2-Strem流" class="headerlink" title="2.Strem流"></a>2.Strem流</h2><h3 id="2-1体验Stream流【理解】"><a href="#2-1体验Stream流【理解】" class="headerlink" title="2.1体验Stream流【理解】"></a>2.1体验Stream流【理解】</h3><ul>
<li><p>案例需求</p>
<p>按照下面的要求完成集合的创建和遍历</p>
<ul>
<li>创建一个集合，存储多个字符串元素</li>
<li>把集合中所有以”张”开头的元素存储到一个新的集合</li>
<li>把”张”开头的集合中的长度为3的元素存储到一个新的集合</li>
<li>遍历上一步得到的集合</li>
</ul>
</li>
<li><p>原始方式示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把集合中所有以&quot;张&quot;开头的元素存储到一个新的集合</span></span><br><span class="line">        ArrayList&lt;String&gt; zhangList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.startsWith(<span class="string">&quot;张&quot;</span>)) &#123;</span><br><span class="line">                zhangList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(zhangList);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把&quot;张&quot;开头的集合中的长度为3的元素存储到一个新的集合</span></span><br><span class="line">        ArrayList&lt;String&gt; threeList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : zhangList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                threeList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(threeList);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历上一步得到的集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : threeList) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流来改进</span></span><br><span class="line"><span class="comment">//        list.stream().filter(s -&gt; s.startsWith(&quot;张&quot;)).filter(s -&gt; s.length() == 3).forEach(s -&gt; System.out.println(s));</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length() == <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Stream流示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Stream流来改进</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length() == <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Stream流的好处</p>
<ul>
<li>直接阅读代码的字面意思即可完美展示无关逻辑方式的语义：获取流、过滤姓张、过滤长度为3、逐一打印</li>
<li>Stream流把真正的函数式编程风格引入到Java中</li>
</ul>
</li>
</ul>
<h3 id="2-2Stream流的常见生成方式【应用】"><a href="#2-2Stream流的常见生成方式【应用】" class="headerlink" title="2.2Stream流的常见生成方式【应用】"></a>2.2Stream流的常见生成方式【应用】</h3><ul>
<li><p>Stream流的思想</p>
<p><img src="/2019/09/09/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190909%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3&Stream%E6%B5%81/Java%E8%B5%84%E6%96%99/2.JavaEE/day14(Stream%E6%B5%81%E6%96%B0%E7%89%B9%E6%80%A7)/%E7%AC%94%E8%AE%B0/img/Stream%E6%B5%81%E6%80%9D%E6%83%B3.jpg"></p>
</li>
<li><p>生成Stream流的方式</p>
<ul>
<li><p>Collection体系集合</p>
<p>使用默认方法stream()生成流， default Stream<E> stream()</E></p>
</li>
<li><p>Map体系集合</p>
<p>把Map转成Set集合，间接的生成流</p>
</li>
<li><p>数组</p>
<p>通过Stream接口的静态方法of(T… values)生成流</p>
</li>
</ul>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Collection体系的集合可以使用默认方法stream()生成流</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; listStream = list.stream();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        Stream&lt;String&gt; setStream = set.stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map体系的集合间接的生成流</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">        Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class="line">        Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class="line">        Stream&lt;Map.Entry&lt;String, Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组可以通过Stream接口的静态方法of(T... values)生成流</span></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;java&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; strArrayStream = Stream.of(strArray);</span><br><span class="line">        Stream&lt;String&gt; strArrayStream2 = Stream.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">        Stream&lt;Integer&gt; intStream = Stream.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3Stream流中间操作方法【应用】"><a href="#2-3Stream流中间操作方法【应用】" class="headerlink" title="2.3Stream流中间操作方法【应用】"></a>2.3Stream流中间操作方法【应用】</h3><ul>
<li><p>概念</p>
<p>中间操作的意思是，执行完此方法之后，Stream流依然可以继续执行其他操作。</p>
</li>
<li><p>常见方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Stream<T> filter(Predicate predicate)</T></td>
<td>用于对流中的数据进行过滤</td>
</tr>
<tr>
<td>Stream<T> limit(long maxSize)</T></td>
<td>返回此流中的元素组成的流，截取前指定参数个数的数据</td>
</tr>
<tr>
<td>Stream<T> skip(long n)</T></td>
<td>跳过指定参数个数的数据，返回由该流的剩余元素组成的流</td>
</tr>
<tr>
<td>static <T> Stream<T> concat(Stream a, Stream b)</T></T></td>
<td>合并a和b两个流为一个流</td>
</tr>
<tr>
<td>Stream<T> distinct()</T></td>
<td>返回由该流的不同元素（根据Object.equals(Object) ）组成的流</td>
</tr>
<tr>
<td>Stream<T> sorted()</T></td>
<td>返回由此流的元素组成的流，根据自然顺序排序</td>
</tr>
<tr>
<td>Stream<T> sorted(Comparator comparator)</T></td>
<td>返回由该流的元素组成的流，根据提供的Comparator进行排序</td>
</tr>
<tr>
<td><R> Stream<R> map(Function mapper)</R></R></td>
<td>返回由给定函数应用于此流的元素的结果组成的流</td>
</tr>
<tr>
<td>IntStream mapToInt(ToIntFunction mapper)</td>
<td>返回一个IntStream其中包含将给定函数应用于此流的元素的结果</td>
</tr>
</tbody></table>
</li>
<li><p>filter代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：把list集合中以张开头的元素在控制台输出</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：把list集合中长度为3的元素在控制台输出</span></span><br><span class="line">        list.stream().filter(s -&gt; s.length() == <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：把list集合中以张开头的，长度为3的元素在控制台输出</span></span><br><span class="line">        list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).filter(s -&gt; s.length() == <span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>limit&amp;skip代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前3个数据在控制台输出</span></span><br><span class="line">        list.stream().limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过3个元素，把剩下的元素在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：跳过2个元素，把剩下的元素中前2个在控制台输出</span></span><br><span class="line">        list.stream().skip(<span class="number">2</span>).limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>concat&amp;distinct代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：取前4个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s1 = list.stream().limit(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：跳过2个数据组成一个流</span></span><br><span class="line">        Stream&lt;String&gt; s2 = list.stream().skip(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求3：合并需求1和需求2得到的流，并把结果在控制台输出</span></span><br><span class="line"><span class="comment">//        Stream.concat(s1,s2).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求4：合并需求1和需求2得到的流，并把结果在控制台输出，要求字符串元素不能重复</span></span><br><span class="line">        Stream.concat(s1,s2).distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>sorted代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;linqingxia&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangmanyu&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;wangzuxian&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;liuyan&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangmin&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;zhangwuji&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：按照字母顺序把数据在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream().sorted().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：按照字符串长度把数据在控制台输出</span></span><br><span class="line">        list.stream().sorted((s1,s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> num = s1.length()-s2.length();</span><br><span class="line">            <span class="keyword">int</span> num2 = num==<span class="number">0</span>?s1.compareTo(s2):num;</span><br><span class="line">            <span class="keyword">return</span> num2;</span><br><span class="line">        &#125;).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>map&amp;mapToInt代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;20&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;30&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;40&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;50&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：将集合中的字符串数据转换为整数之后在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream().map(s -&gt; Integer.parseInt(s)).forEach(System.out::println);</span></span><br><span class="line"><span class="comment">//        list.stream().map(Integer::parseInt).forEach(System.out::println);</span></span><br><span class="line"><span class="comment">//        list.stream().mapToInt(Integer::parseInt).forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int sum() 返回此流中元素的总和</span></span><br><span class="line">        <span class="keyword">int</span> result = list.stream().mapToInt(Integer::parseInt).sum();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4Stream流终结操作方法【应用】"><a href="#2-4Stream流终结操作方法【应用】" class="headerlink" title="2.4Stream流终结操作方法【应用】"></a>2.4Stream流终结操作方法【应用】</h3><ul>
<li><p>概念</p>
<p>终结操作的意思是，执行完此方法之后，Stream流将不能再执行其他操作。</p>
</li>
<li><p>常见方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void forEach(Consumer action)</td>
<td>对此流的每个元素执行操作</td>
</tr>
<tr>
<td>long count()</td>
<td>返回此流中的元素数</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合，存储多个字符串元素</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张敏&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张无忌&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求1：把集合中的元素在控制台输出</span></span><br><span class="line"><span class="comment">//        list.stream().forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求2：统计集合中有几个以张开头的元素，并把统计结果在控制台输出</span></span><br><span class="line">        <span class="keyword">long</span> count = list.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;张&quot;</span>)).count();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5Stream流综合练习【应用】"><a href="#2-5Stream流综合练习【应用】" class="headerlink" title="2.5Stream流综合练习【应用】"></a>2.5Stream流综合练习【应用】</h3><ul>
<li><p>案例需求</p>
<p>现在有两个ArrayList集合，分别存储6名男演员名称和6名女演员名称，要求完成如下的操作</p>
<ul>
<li>男演员只要名字为3个字的前三人</li>
<li>女演员只要姓林的，并且不要第一个</li>
<li>把过滤后的男演员姓名和女演员姓名合并到一起</li>
<li>把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</li>
</ul>
<p>演员类Actor已经提供，里面有一个成员变量，一个带参构造方法，以及成员变量对应的get/set方法</p>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Actor</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; manList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        manList.add(<span class="string">&quot;周润发&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;成龙&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;刘德华&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;吴京&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">        manList.add(<span class="string">&quot;李连杰&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; womanList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        womanList.add(<span class="string">&quot;林心如&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;林志玲&quot;</span>);</span><br><span class="line">        womanList.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //男演员只要名字为3个字的前三人</span></span><br><span class="line"><span class="comment">        Stream&lt;String&gt; manStream = manList.stream().filter(s -&gt; s.length() == 3).limit(3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //女演员只要姓林的，并且不要第一个</span></span><br><span class="line"><span class="comment">        Stream&lt;String&gt; womanStream = womanList.stream().filter(s -&gt; s.startsWith(&quot;林&quot;)).skip(1);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //把过滤后的男演员姓名和女演员姓名合并到一起</span></span><br><span class="line"><span class="comment">        Stream&lt;String&gt; stream = Stream.concat(manStream, womanStream);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //把上一步操作后的元素作为构造方法的参数创建演员对象,遍历数据</span></span><br><span class="line"><span class="comment">//        stream.map(Actor::new).forEach(System.out::println);</span></span><br><span class="line"><span class="comment">        stream.map(Actor::new).forEach(p -&gt; System.out.println(p.getName()));</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        Stream.concat(manList.stream().filter(s -&gt; s.length() == <span class="number">3</span>).limit(<span class="number">3</span>),</span><br><span class="line">                womanList.stream().filter(s -&gt; s.startsWith(<span class="string">&quot;林&quot;</span>)).skip(<span class="number">1</span>)).map(Actor::<span class="keyword">new</span>).</span><br><span class="line">                forEach(p -&gt; System.out.println(p.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6Stream流的收集操作【应用】"><a href="#2-6Stream流的收集操作【应用】" class="headerlink" title="2.6Stream流的收集操作【应用】"></a>2.6Stream流的收集操作【应用】</h3><ul>
<li><p>概念</p>
<p>对数据使用Stream流的方式操作完毕后，可以把流中的数据收集到集合中。</p>
</li>
<li><p>常用方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>R collect(Collector collector)</td>
<td>把结果收集到集合中</td>
</tr>
</tbody></table>
</li>
<li><p>工具类Collectors提供了具体的收集方式</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static <T> Collector toList()</T></td>
<td>把元素收集到List集合中</td>
</tr>
<tr>
<td>public static <T> Collector toSet()</T></td>
<td>把元素收集到Set集合中</td>
</tr>
<tr>
<td>public static  Collector toMap(Function keyMapper,Function valueMapper)</td>
<td>把元素收集到Map集合中</td>
</tr>
</tbody></table>
</li>
<li><p>代码演示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;柳岩&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //需求1：得到名字为3个字的流</span></span><br><span class="line"><span class="comment">        Stream&lt;String&gt; listStream = list.stream().filter(s -&gt; s.length() == 3);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //需求2：把使用Stream流操作完毕的数据收集到List集合中并遍历</span></span><br><span class="line"><span class="comment">        List&lt;String&gt; names = listStream.collect(Collectors.toList());</span></span><br><span class="line"><span class="comment">        for(String name : names) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(name);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Set集合对象</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">        set.add(<span class="number">10</span>);</span><br><span class="line">        set.add(<span class="number">20</span>);</span><br><span class="line">        set.add(<span class="number">30</span>);</span><br><span class="line">        set.add(<span class="number">33</span>);</span><br><span class="line">        set.add(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //需求3：得到年龄大于25的流</span></span><br><span class="line"><span class="comment">        Stream&lt;Integer&gt; setStream = set.stream().filter(age -&gt; age &gt; 25);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //需求4：把使用Stream流操作完毕的数据收集到Set集合中并遍历</span></span><br><span class="line"><span class="comment">        Set&lt;Integer&gt; ages = setStream.collect(Collectors.toSet());</span></span><br><span class="line"><span class="comment">        for(Integer age : ages) &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(age);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//定义一个字符串数组，每一个字符串数据由姓名数据和年龄数据组合而成</span></span><br><span class="line">        String[] strArray = &#123;<span class="string">&quot;林青霞,30&quot;</span>, <span class="string">&quot;张曼玉,35&quot;</span>, <span class="string">&quot;王祖贤,33&quot;</span>, <span class="string">&quot;柳岩,25&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求5：得到字符串中年龄数据大于28的流</span></span><br><span class="line">        Stream&lt;String&gt; arrayStream = Stream.of(strArray).filter(s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]) &gt; <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求6：把使用Stream流操作完毕的数据收集到Map集合中并遍历，字符串中的姓名作键，年龄作值</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = arrayStream.collect(Collectors.toMap(s -&gt; s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>], s -&gt; Integer.parseInt(s.split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>])));</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2019/09/10/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190910.2%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="1-1反射的概述【理解】"><a href="#1-1反射的概述【理解】" class="headerlink" title="1.1反射的概述【理解】"></a>1.1反射的概述【理解】</h3><ul>
<li>是指在运行时去获取一个类的变量和方法信息。然后通过获取到的信息来创建对象，调用方法的一种机制。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</li>
</ul>
<h3 id="1-2获取Class类对象的三种方式【应用】"><a href="#1-2获取Class类对象的三种方式【应用】" class="headerlink" title="1.2获取Class类对象的三种方式【应用】"></a>1.2获取Class类对象的三种方式【应用】</h3><h4 id="1-2-1三种方式分类"><a href="#1-2-1三种方式分类" class="headerlink" title="1.2.1三种方式分类"></a>1.2.1三种方式分类</h4><ul>
<li>类名.class属性</li>
<li>对象名.getClass()方法</li>
<li>Class.forName(全类名)方法</li>
</ul>
<a id="more"></a>

<h4 id="1-2-2示例代码"><a href="#1-2-2示例代码" class="headerlink" title="1.2.2示例代码"></a>1.2.2示例代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//使用类的class属性来获取该类对应的Class对象</span></span><br><span class="line">        Class&lt;Student&gt; c1 = Student.class;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line"></span><br><span class="line">        Class&lt;Student&gt; c2 = Student.class;</span><br><span class="line">        System.out.println(c1 == c2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用对象的getClass()方法，返回该对象所属类对应的Class对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        Class&lt;? extends Student&gt; c3 = s.getClass();</span><br><span class="line">        System.out.println(c1 == c3);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Class类中的静态方法forName(String className)</span></span><br><span class="line">        Class&lt;?&gt; c4 = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line">        System.out.println(c1 == c4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3反射获取构造方法并使用【应用】"><a href="#1-3反射获取构造方法并使用【应用】" class="headerlink" title="1.3反射获取构造方法并使用【应用】"></a>1.3反射获取构造方法并使用【应用】</h3><h4 id="1-3-1Class类获取构造方法对象的方法"><a href="#1-3-1Class类获取构造方法对象的方法" class="headerlink" title="1.3.1Class类获取构造方法对象的方法"></a>1.3.1Class类获取构造方法对象的方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回所有构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</T></td>
<td>返回单个公共构造方法对象</td>
</tr>
<tr>
<td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</T></td>
<td>返回单个构造方法对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt;[] getConstructors() 返回一个包含 Constructor对象的数组， Constructor对象反映了由该 Class对象表示的类的所有公共构造函数</span></span><br><span class="line"><span class="comment">//        Constructor&lt;?&gt;[] cons = c.getConstructors();</span></span><br><span class="line">        <span class="comment">//Constructor&lt;?&gt;[] getDeclaredConstructors() 返回反映由该 Class对象表示的类声明的所有构造函数的 Constructor对象的数组</span></span><br><span class="line">        Constructor&lt;?&gt;[] cons = c.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span>(Constructor con : cons) &#123;</span><br><span class="line">            System.out.println(con);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes) 返回一个 Constructor对象，该对象反映由该 Class对象表示的类的指定公共构造函数</span></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes) 返回一个 Constructor对象，该对象反映由此 Class对象表示的类或接口的指定构造函数</span></span><br><span class="line">        <span class="comment">//参数：你要获取的构造方法的参数的个数和数据类型对应的字节码文件对象</span></span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Constructor提供了一个类的单个构造函数的信息和访问权限</span></span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs) 使用由此 Constructor对象表示的构造函数，使用指定的初始化参数来创建和初始化构造函数的声明类的新实例</span></span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-3-2Constructor类用于创建对象的方法"><a href="#1-3-2Constructor类用于创建对象的方法" class="headerlink" title="1.3.2Constructor类用于创建对象的方法"></a>1.3.2Constructor类用于创建对象的方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>根据指定的构造方法创建对象</td>
</tr>
</tbody></table>
<h3 id="1-4反射获取构造方法并使用练习1【应用】"><a href="#1-4反射获取构造方法并使用练习1【应用】" class="headerlink" title="1.4反射获取构造方法并使用练习1【应用】"></a>1.4反射获取构造方法并使用练习1【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射获取公共的构造方法并创建对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量：一个私有，一个默认，一个公共</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法：一个私有，一个默认，两个公共</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Student(String name, <span class="keyword">int</span> age) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法：一个私有，四个公共</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method3</span><span class="params">(String s, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s + <span class="string">&quot;,&quot;</span> + i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name, int age, String address)</span></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line">        <span class="comment">//基本数据类型也可以通过.class得到对应的Class类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)</span></span><br><span class="line">        Object obj = con.newInstance(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-5反射获取构造方法并使用练习2【应用】"><a href="#1-5反射获取构造方法并使用练习2【应用】" class="headerlink" title="1.5反射获取构造方法并使用练习2【应用】"></a>1.5反射获取构造方法并使用练习2【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射获取私有构造方法并创建对象</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类：参见上方学生类</p>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//private Student(String name)</span></span><br><span class="line">        <span class="comment">//Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//暴力反射</span></span><br><span class="line">        <span class="comment">//public void setAccessible(boolean flag):值为true，取消访问检查</span></span><br><span class="line">        con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Object obj = con.newInstance(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-6反射获取成员变量并使用【应用】"><a href="#1-6反射获取成员变量并使用【应用】" class="headerlink" title="1.6反射获取成员变量并使用【应用】"></a>1.6反射获取成员变量并使用【应用】</h3><h4 id="1-6-1Class类获取成员变量对象的方法"><a href="#1-6-1Class类获取成员变量对象的方法" class="headerlink" title="1.6.1Class类获取成员变量对象的方法"></a>1.6.1Class类获取成员变量对象的方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getFields()</td>
<td>返回所有公共成员变量对象的数组</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回所有成员变量对象的数组</td>
</tr>
<tr>
<td>Field getField(String name)</td>
<td>返回单个公共成员变量对象</td>
</tr>
<tr>
<td>Field getDeclaredField(String name)</td>
<td>返回单个成员变量对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field[] getFields() 返回一个包含 Field对象的数组， Field对象反映由该 Class对象表示的类或接口的所有可访问的公共字段</span></span><br><span class="line">        <span class="comment">//Field[] getDeclaredFields() 返回一个 Field对象的数组，反映了由该 Class对象表示的类或接口声明的所有字段</span></span><br><span class="line"><span class="comment">//        Field[] fields = c.getFields();</span></span><br><span class="line">        Field[] fields = c.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field getField(String name) 返回一个 Field对象，该对象反映由该 Class对象表示的类或接口的指定公共成员字段</span></span><br><span class="line">        <span class="comment">//Field getDeclaredField(String name) 返回一个 Field对象，该对象反映由该 Class对象表示的类或接口的指定声明字段</span></span><br><span class="line">        Field addressField = c.getField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取无参构造方法创建对象</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        obj.addressField = &quot;西安&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Field提供有关类或接口的单个字段的信息和动态访问</span></span><br><span class="line">        <span class="comment">//void set(Object obj, Object value) 将指定的对象参数中由此 Field对象表示的字段设置为指定的新值</span></span><br><span class="line">        addressField.set(obj,<span class="string">&quot;西安&quot;</span>); <span class="comment">//给obj的成员变量addressField赋值为西安</span></span><br><span class="line"></span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        s.address = &quot;西安&quot;;</span></span><br><span class="line"><span class="comment">//        System.out.println(s);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-6-2Field类用于给成员变量赋值的方法"><a href="#1-6-2Field类用于给成员变量赋值的方法" class="headerlink" title="1.6.2Field类用于给成员变量赋值的方法"></a>1.6.2Field类用于给成员变量赋值的方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>voidset(Object obj,Object value)</td>
<td>给obj对象的成员变量赋值为value</td>
</tr>
</tbody></table>
<h3 id="1-7反射获取成员变量并使用练习【应用】"><a href="#1-7反射获取成员变量并使用练习【应用】" class="headerlink" title="1.7反射获取成员变量并使用练习【应用】"></a>1.7反射获取成员变量并使用练习【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射获取成员变量并赋值</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类：参见上方学生类</p>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student s = new Student();</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.name = &quot;林青霞&quot;;</span></span><br><span class="line"><span class="comment">//        Field nameField = c.getField(&quot;name&quot;); //NoSuchFieldException: name</span></span><br><span class="line">        Field nameField = c.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        nameField.set(obj, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.age = 30;</span></span><br><span class="line">        Field ageField = c.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        ageField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        ageField.set(obj,<span class="number">30</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.address = &quot;西安&quot;;</span></span><br><span class="line">        Field addressField = c.getDeclaredField(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">        addressField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        addressField.set(obj,<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-8反射获取成员方法并使用【应用】"><a href="#1-8反射获取成员方法并使用【应用】" class="headerlink" title="1.8反射获取成员方法并使用【应用】"></a>1.8反射获取成员方法并使用【应用】</h3><h4 id="1-8-1Class类获取成员方法对象的方法"><a href="#1-8-1Class类获取成员方法对象的方法" class="headerlink" title="1.8.1Class类获取成员方法对象的方法"></a>1.8.1Class类获取成员方法对象的方法</h4><ul>
<li><p>方法分类</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>返回所有公共成员方法对象的数组，包括继承的</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>返回所有成员方法对象的数组，不包括继承的</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共成员方法对象</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Method[] getMethods() 返回一个包含 方法对象的数组， 方法对象反映由该 Class对象表示的类或接口的所有公共方法，包括由类或接口声明的对象以及从超类和超级接口继承的类</span></span><br><span class="line">        <span class="comment">//Method[] getDeclaredMethods() 返回一个包含 方法对象的数组， 方法对象反映由 Class对象表示的类或接口的所有声明方法，包括public，protected，default（package）访问和私有方法，但不包括继承方法</span></span><br><span class="line"><span class="comment">//        Method[] methods = c.getMethods();</span></span><br><span class="line">        Method[] methods = c.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span>(Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Method getMethod(String name, Class&lt;?&gt;... parameterTypes) 返回一个 方法对象，该对象反映由该 Class对象表示的类或接口的指定公共成员方法</span></span><br><span class="line">        <span class="comment">//Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes) 返回一个 方法对象，它反映此表示的类或接口的指定声明的方法 Class对象</span></span><br><span class="line">        <span class="comment">//public void method1()</span></span><br><span class="line">        Method m = c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取无参构造方法创建对象</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        obj.m();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//在类或接口上提供有关单一方法的信息和访问权限</span></span><br><span class="line">        <span class="comment">//Object invoke(Object obj, Object... args) 在具有指定参数的指定对象上调用此 方法对象表示的基础方法</span></span><br><span class="line">        <span class="comment">//Object：返回值类型</span></span><br><span class="line">        <span class="comment">//obj：调用方法的对象</span></span><br><span class="line">        <span class="comment">//args：方法需要的参数</span></span><br><span class="line">        m.invoke(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Student s = new Student();</span></span><br><span class="line"><span class="comment">//        s.method1();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-8-2Method类用于执行方法的方法"><a href="#1-8-2Method类用于执行方法的方法" class="headerlink" title="1.8.2Method类用于执行方法的方法"></a>1.8.2Method类用于执行方法的方法</h4><table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Objectinvoke(Object obj,Object… args)</td>
<td>调用obj对象的成员方法，参数是args,返回值是Object类型</td>
</tr>
</tbody></table>
<h3 id="1-9反射获取成员方法并使用练习【应用】"><a href="#1-9反射获取成员方法并使用练习【应用】" class="headerlink" title="1.9反射获取成员方法并使用练习【应用】"></a>1.9反射获取成员方法并使用练习【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射获取成员方法并调用</li>
</ul>
</li>
<li><p>代码实现</p>
<ul>
<li><p>学生类：参见上方学生类</p>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(<span class="string">&quot;com.itheima_02.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Student s = new Student();</span></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.method1();</span></span><br><span class="line">        Method m1 = c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">        m1.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.method2(&quot;林青霞&quot;);</span></span><br><span class="line">        Method m2 = c.getMethod(<span class="string">&quot;method2&quot;</span>, String.class);</span><br><span class="line">        m2.invoke(obj,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String ss = s.method3(&quot;林青霞&quot;,30);</span></span><br><span class="line"><span class="comment">//        System.out.println(ss);</span></span><br><span class="line">        Method m3 = c.getMethod(<span class="string">&quot;method3&quot;</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">        Object o = m3.invoke(obj, <span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//s.function();</span></span><br><span class="line"><span class="comment">//        Method m4 = c.getMethod(&quot;function&quot;); //NoSuchMethodException: com.itheima_02.Student.function()</span></span><br><span class="line">        Method m4 = c.getDeclaredMethod(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">        m4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m4.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="1-10反射的案例【应用】"><a href="#1-10反射的案例【应用】" class="headerlink" title="1.10反射的案例【应用】"></a>1.10反射的案例【应用】</h3><h4 id="1-10-1反射练习之越过泛型检查"><a href="#1-10-1反射练习之越过泛型检查" class="headerlink" title="1.10.1反射练习之越过泛型检查"></a>1.10.1反射练习之越过泛型检查</h4><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射技术，向一个泛型为Integer的集合中添加一些字符串数据</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合</span></span><br><span class="line">        ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        array.add(10);</span></span><br><span class="line"><span class="comment">//        array.add(20);</span></span><br><span class="line"><span class="comment">//        array.add(&quot;hello&quot;);</span></span><br><span class="line"></span><br><span class="line">        Class&lt;? extends ArrayList&gt; c = array.getClass();</span><br><span class="line">        Method m = c.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"></span><br><span class="line">        m.invoke(array,<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        m.invoke(array,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        m.invoke(array,<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-10-2运行配置文件中指定类的指定方法"><a href="#2-10-2运行配置文件中指定类的指定方法" class="headerlink" title="2.10.2运行配置文件中指定类的指定方法"></a>2.10.2运行配置文件中指定类的指定方法</h4><ul>
<li><p>案例需求</p>
<ul>
<li>通过反射运行配置文件中指定类的指定方法</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//加载数据</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myReflect\\class.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            className=com.itheima_06.Student</span></span><br><span class="line"><span class="comment">            methodName=study</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String className = prop.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        String methodName = prop.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射来使用</span></span><br><span class="line">        Class&lt;?&gt; c = Class.forName(className);<span class="comment">//com.itheima_06.Student</span></span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">        Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line">        Method m = c.getMethod(methodName);<span class="comment">//study</span></span><br><span class="line">        m.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2019/09/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190913MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 数据库的英文单词： DataBase 简称 ： DB</span><br><span class="line">2. 什么是数据库？</span><br><span class="line">	* 用于存储和管理数据的仓库。</span><br><span class="line">3. 数据库的特点：</span><br><span class="line">	1. 持久化存储数据的。其实数据库就是一个文件系统</span><br><span class="line">	2. 方便存储和管理数据</span><br><span class="line">	3. 使用了统一的方式操作数据库 -- SQL</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 安装</span><br><span class="line">	* 参见《MySQL基础.pdf》</span><br><span class="line">2. 卸载</span><br><span class="line">	1. 去mysql的安装目录找到my.ini文件</span><br><span class="line">		* 复制 datadir&#x3D;&quot;C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server 5.5&#x2F;Data&#x2F;&quot;</span><br><span class="line">	2. 卸载MySQL</span><br><span class="line">	3. 删除C:&#x2F;ProgramData目录下的MySQL文件夹。</span><br><span class="line">	</span><br><span class="line">3. 配置</span><br><span class="line">	* MySQL服务启动</span><br><span class="line">		1. 手动。</span><br><span class="line">		2. cmd--&gt; services.msc 打开服务的窗口</span><br><span class="line">		3. 使用管理员打开cmd</span><br><span class="line">			* net start mysql : 启动mysql的服务</span><br><span class="line">			* net stop mysql:关闭mysql服务</span><br><span class="line">	* MySQL登录</span><br><span class="line">		1. mysql -uroot -p密码</span><br><span class="line">		2. mysql -hip -uroot -p连接目标的密码</span><br><span class="line">		3. mysql --host&#x3D;ip --user&#x3D;root --password&#x3D;连接目标的密码</span><br><span class="line">	* MySQL退出</span><br><span class="line">		1. exit</span><br><span class="line">		2. quit</span><br><span class="line"></span><br><span class="line">	* MySQL目录结构</span><br><span class="line">		1. MySQL安装目录：basedir&#x3D;&quot;D:&#x2F;develop&#x2F;MySQL&#x2F;&quot;</span><br><span class="line">			* 配置文件 my.ini</span><br><span class="line">		2. MySQL数据目录：datadir&#x3D;&quot;C:&#x2F;ProgramData&#x2F;MySQL&#x2F;MySQL Server 5.5&#x2F;Data&#x2F;&quot;</span><br><span class="line">			* 几个概念</span><br><span class="line">				* 数据库：文件夹</span><br><span class="line">				* 表：文件</span><br><span class="line">				* 数据：数据</span><br></pre></td></tr></table></figure>

<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.什么是SQL？</span><br><span class="line">	Structured Query Language：结构化查询语言</span><br><span class="line">	其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</span><br><span class="line">	</span><br><span class="line">2.SQL通用语法</span><br><span class="line">	1. SQL 语句可以单行或多行书写，以分号结尾。</span><br><span class="line">	2. 可使用空格和缩进来增强语句的可读性。</span><br><span class="line">	3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</span><br><span class="line">	4. 3 种注释</span><br><span class="line">		* 单行注释: -- 注释内容 或 # 注释内容(mysql 特有) </span><br><span class="line">		* 多行注释: &#x2F;* 注释 *&#x2F;</span><br><span class="line">	</span><br><span class="line">3. SQL分类</span><br><span class="line">	1) DDL(Data Definition Language)数据定义语言</span><br><span class="line">		用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</span><br><span class="line">	2) DML(Data Manipulation Language)数据操作语言</span><br><span class="line">		用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</span><br><span class="line">	3) DQL(Data Query Language)数据查询语言</span><br><span class="line">		用来查询数据库中表的记录(数据)。关键字：select, where 等</span><br><span class="line">	4) DCL(Data Control Language)数据控制语言(了解)</span><br><span class="line">		用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</span><br></pre></td></tr></table></figure>

<h2 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 操作数据库：CRUD</span><br><span class="line">	1. C(Create):创建</span><br><span class="line">		* 创建数据库：</span><br><span class="line">			* create database 数据库名称;</span><br><span class="line">		* 创建数据库，判断不存在，再创建：</span><br><span class="line">			* create database if not exists 数据库名称;</span><br><span class="line">		* 创建数据库，并指定字符集</span><br><span class="line">			* create database 数据库名称 character set 字符集名;</span><br><span class="line"></span><br><span class="line">		* 练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</span><br><span class="line">			* create database if not exists db4 character set gbk;</span><br><span class="line">	2. R(Retrieve)：查询</span><br><span class="line">		* 查询所有数据库的名称:</span><br><span class="line">			* show databases;</span><br><span class="line">		* 查询某个数据库的字符集:查询某个数据库的创建语句</span><br><span class="line">			* show create database 数据库名称;</span><br><span class="line">	3. U(Update):修改</span><br><span class="line">		* 修改数据库的字符集</span><br><span class="line">			* alter database 数据库名称 character set 字符集名称;</span><br><span class="line">	4. D(Delete):删除</span><br><span class="line">		* 删除数据库</span><br><span class="line">			* drop database 数据库名称;</span><br><span class="line">		* 判断数据库存在，存在再删除</span><br><span class="line">			* drop database if exists 数据库名称;</span><br><span class="line">	5. 使用数据库</span><br><span class="line">		* 查询当前正在使用的数据库名称</span><br><span class="line">			* select database();</span><br><span class="line">		* 使用数据库</span><br><span class="line">			* use 数据库名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 操作表</span><br><span class="line">	1. C(Create):创建</span><br><span class="line">		1. 语法：</span><br><span class="line">			create table 表名(</span><br><span class="line">				列名1 数据类型1,</span><br><span class="line">				列名2 数据类型2,</span><br><span class="line">				....</span><br><span class="line">				列名n 数据类型n</span><br><span class="line">			);</span><br><span class="line">			* 注意：最后一列，不需要加逗号（,）</span><br><span class="line">			* 数据库类型：</span><br><span class="line">				1. int：整数类型</span><br><span class="line">					* age int,</span><br><span class="line">				2. double:小数类型</span><br><span class="line">					* score double(5,2)</span><br><span class="line">				3. date:日期，只包含年月日，yyyy-MM-dd</span><br><span class="line">				4. datetime:日期，包含年月日时分秒	 yyyy-MM-dd HH:mm:ss</span><br><span class="line">				5. timestamp:时间错类型	包含年月日时分秒	 yyyy-MM-dd HH:mm:ss	</span><br><span class="line">					* 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</span><br><span class="line"></span><br><span class="line">				6. varchar：字符串</span><br><span class="line">					* name varchar(20):姓名最大20个字符</span><br><span class="line">					* zhangsan 8个字符  张三 2个字符</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	* 创建表</span><br><span class="line">		create table student(</span><br><span class="line">			id int,</span><br><span class="line">			name varchar(32),</span><br><span class="line">			age int ,</span><br><span class="line">			score double(4,1),</span><br><span class="line">			birthday date,</span><br><span class="line">			insert_time timestamp</span><br><span class="line">		);</span><br><span class="line">	* 复制表：</span><br><span class="line">		* create table 表名 like 被复制的表名;	  	</span><br><span class="line">2. R(Retrieve)：查询</span><br><span class="line">	* 查询某个数据库中所有的表名称</span><br><span class="line">		* show tables;</span><br><span class="line">	* 查询表结构</span><br><span class="line">		* desc 表名;</span><br><span class="line">3. U(Update):修改</span><br><span class="line">	1. 修改表名</span><br><span class="line">		alter table 表名 rename to 新的表名;</span><br><span class="line">	2. 修改表的字符集</span><br><span class="line">		alter table 表名 character set 字符集名称;</span><br><span class="line">	3. 添加一列</span><br><span class="line">		alter table 表名 add 列名 数据类型;</span><br><span class="line">	4. 修改列名称 类型</span><br><span class="line">		alter table 表名 change 列名 新列别 新数据类型;</span><br><span class="line">		alter table 表名 modify 列名 新数据类型;</span><br><span class="line">	5. 删除列</span><br><span class="line">		alter table 表名 drop 列名;</span><br><span class="line">4. D(Delete):删除</span><br><span class="line">	* drop table 表名;</span><br><span class="line">	* drop table  if exists 表名 ;</span><br></pre></td></tr></table></figure>

<ul>
<li>客户端图形化工具：SQLYog</li>
</ul>
<h2 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 添加数据：</span><br><span class="line">	* 语法：</span><br><span class="line">		* insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);</span><br><span class="line">	* 注意：</span><br><span class="line">		1. 列名和值要一一对应。</span><br><span class="line">		2. 如果表名后，不定义列名，则默认给所有列添加值</span><br><span class="line">			insert into 表名 values(值1,值2,...值n);</span><br><span class="line">		3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来</span><br><span class="line">2. 删除数据：</span><br><span class="line">	* 语法：</span><br><span class="line">		* delete from 表名 [where 条件]</span><br><span class="line">	* 注意：</span><br><span class="line">		1. 如果不加条件，则删除表中所有记录。</span><br><span class="line">		2. 如果要删除所有记录</span><br><span class="line">			1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作</span><br><span class="line">			2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</span><br><span class="line">3. 修改数据：</span><br><span class="line">	* 语法：</span><br><span class="line">		* update 表名 set 列名1 &#x3D; 值1, 列名2 &#x3D; 值2,... [where 条件];</span><br><span class="line"></span><br><span class="line">	* 注意：</span><br><span class="line">		1. 如果不加任何条件，则会将表中所有记录全部修改。</span><br></pre></td></tr></table></figure>

<h2 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* select * from 表名;</span><br><span class="line"></span><br><span class="line">1. 语法：</span><br><span class="line">	select</span><br><span class="line">		字段列表</span><br><span class="line">	from</span><br><span class="line">		表名列表</span><br><span class="line">	where</span><br><span class="line">		条件列表</span><br><span class="line">	group by</span><br><span class="line">		分组字段</span><br><span class="line">	having</span><br><span class="line">		分组之后的条件</span><br><span class="line">	order by</span><br><span class="line">		排序</span><br><span class="line">	limit</span><br><span class="line">		分页限定</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 基础查询</span><br><span class="line">	1. 多个字段的查询</span><br><span class="line">		select 字段名1，字段名2... from 表名；</span><br><span class="line">		* 注意：</span><br><span class="line">			* 如果查询所有字段，则可以使用*来替代字段列表。</span><br><span class="line">	2. 去除重复：</span><br><span class="line">		* distinct</span><br><span class="line">	3. 计算列</span><br><span class="line">		* 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）</span><br><span class="line">		* ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null</span><br><span class="line">			* 表达式1：哪个字段需要判断是否为null</span><br><span class="line">			* 如果该字段为null后的替换值。</span><br><span class="line">	4. 起别名：</span><br><span class="line">		* as：as也可以省略</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 条件查询</span><br><span class="line">	1. where子句后跟条件</span><br><span class="line">	2. 运算符</span><br><span class="line">		* &gt; 、&lt; 、&lt;&#x3D; 、&gt;&#x3D; 、&#x3D; 、&lt;&gt;</span><br><span class="line">		* BETWEEN...AND  </span><br><span class="line">		* IN( 集合) </span><br><span class="line">		* LIKE：模糊查询</span><br><span class="line">			* 占位符：</span><br><span class="line">				* _:单个任意字符</span><br><span class="line">				* %：多个任意字符</span><br><span class="line">		* IS NULL  </span><br><span class="line">		* and  或 &amp;&amp;</span><br><span class="line">		* or  或 || </span><br><span class="line">		* not  或 !</span><br><span class="line">		</span><br><span class="line">			-- 查询年龄大于20岁</span><br><span class="line"></span><br><span class="line">			SELECT * FROM student WHERE age &gt; 20;</span><br><span class="line">			</span><br><span class="line">			SELECT * FROM student WHERE age &gt;&#x3D; 20;</span><br><span class="line">			</span><br><span class="line">			-- 查询年龄等于20岁</span><br><span class="line">			SELECT * FROM student WHERE age &#x3D; 20;</span><br><span class="line">			</span><br><span class="line">			-- 查询年龄不等于20岁</span><br><span class="line">			SELECT * FROM student WHERE age !&#x3D; 20;</span><br><span class="line">			SELECT * FROM student WHERE age &lt;&gt; 20;</span><br><span class="line">			</span><br><span class="line">			-- 查询年龄大于等于20 小于等于30</span><br><span class="line">			</span><br><span class="line">			SELECT * FROM student WHERE age &gt;&#x3D; 20 &amp;&amp;  age &lt;&#x3D;30;</span><br><span class="line">			SELECT * FROM student WHERE age &gt;&#x3D; 20 AND  age &lt;&#x3D;30;</span><br><span class="line">			SELECT * FROM student WHERE age BETWEEN 20 AND 30;</span><br><span class="line">			</span><br><span class="line">			-- 查询年龄22岁，18岁，25岁的信息</span><br><span class="line">			SELECT * FROM student WHERE age &#x3D; 22 OR age &#x3D; 18 OR age &#x3D; 25</span><br><span class="line">			SELECT * FROM student WHERE age IN (22,18,25);</span><br><span class="line">			</span><br><span class="line">			-- 查询英语成绩为null</span><br><span class="line">			SELECT * FROM student WHERE english &#x3D; NULL; -- 不对的。null值不能使用 &#x3D; （!&#x3D;） 判断</span><br><span class="line">			</span><br><span class="line">			SELECT * FROM student WHERE english IS NULL;</span><br><span class="line">			</span><br><span class="line">			-- 查询英语成绩不为null</span><br><span class="line">			SELECT * FROM student WHERE english  IS NOT NULL;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询姓马的有哪些？ like</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;马%&#39;;</span><br><span class="line">-- 查询姓名第二个字是化的人</span><br><span class="line"></span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;</span><br><span class="line"></span><br><span class="line">-- 查询姓名是3个字的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;___&#39;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询姓名中包含德的人</span><br><span class="line">SELECT * FROM student WHERE NAME LIKE &#39;%德%&#39;;</span><br></pre></td></tr></table></figure>

<h1 id="DQL-查询语句"><a href="#DQL-查询语句" class="headerlink" title="DQL:查询语句"></a>DQL:查询语句</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 排序查询</span><br><span class="line">	* 语法：order by 子句</span><br><span class="line">		* order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...</span><br><span class="line"></span><br><span class="line">	* 排序方式：</span><br><span class="line">		* ASC：升序，默认的。</span><br><span class="line">		* DESC：降序。</span><br><span class="line"></span><br><span class="line">	* 注意：</span><br><span class="line">		* 如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 聚合函数：将一列数据作为一个整体，进行纵向的计算。</span><br><span class="line">	1. count：计算个数</span><br><span class="line">		1. 一般选择非空的列：主键</span><br><span class="line">		2. count(*)</span><br><span class="line">	2. max：计算最大值</span><br><span class="line">	3. min：计算最小值</span><br><span class="line">	4. sum：计算和</span><br><span class="line">	5. avg：计算平均值</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	* 注意：聚合函数的计算，排除null值。</span><br><span class="line">		解决方案：</span><br><span class="line">			1. 选择不包含非空的列进行计算</span><br><span class="line">			2. IFNULL函数</span><br><span class="line"></span><br><span class="line">3. 分组查询:</span><br><span class="line">	1. 语法：group by 分组字段；</span><br><span class="line">	2. 注意：</span><br><span class="line">		1. 分组之后查询的字段：分组字段、聚合函数</span><br><span class="line">		2. where 和 having 的区别？</span><br><span class="line">			1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来</span><br><span class="line">			2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。</span><br><span class="line"></span><br><span class="line">		-- 按照性别分组。分别查询男、女同学的平均分</span><br><span class="line"></span><br><span class="line">		SELECT sex , AVG(math) FROM student GROUP BY sex;</span><br><span class="line">		</span><br><span class="line">		-- 按照性别分组。分别查询男、女同学的平均分,人数</span><br><span class="line">		</span><br><span class="line">		SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;</span><br><span class="line">		</span><br><span class="line">		--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span><br><span class="line">		SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex;</span><br><span class="line">		</span><br><span class="line">		--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span><br><span class="line">		SELECT sex , AVG(math),COUNT(id) FROM student WHERE math &gt; 70 GROUP BY sex HAVING COUNT(id) &gt; 2;</span><br><span class="line">		</span><br><span class="line">		SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math &gt; 70 GROUP BY sex HAVING 人数 &gt; 2;</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 分页查询</span><br><span class="line">	1. 语法：limit 开始的索引,每页查询的条数;</span><br><span class="line">	2. 公式：开始的索引 &#x3D; （当前的页码 - 1） * 每页显示的条数</span><br><span class="line">		-- 每页显示3条记录 </span><br><span class="line"></span><br><span class="line">		SELECT * FROM student LIMIT 0,3; -- 第1页</span><br><span class="line">		</span><br><span class="line">		SELECT * FROM student LIMIT 3,3; -- 第2页</span><br><span class="line">		</span><br><span class="line">		SELECT * FROM student LIMIT 6,3; -- 第3页</span><br><span class="line"></span><br><span class="line">	3. limit 是一个MySQL&quot;方言&quot;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.数据库</span><br><span class="line">	数据库类似文件夹 </span><br><span class="line">	表 ---&gt;文件</span><br><span class="line">	数据 ---&gt;保存在文件夹中的文件中的!!!!!</span><br><span class="line">2.SQL</span><br><span class="line">	本质:就是一套规则, 规定所有关系型数据库的操作方式</span><br><span class="line">3.sql的语法</span><br><span class="line">	1.以;结尾</span><br><span class="line">	2.关键字建议大写,其实不区分大小写</span><br><span class="line">	3.注释:  单行:--空格  #(mysql特有的)  多行: &#x2F;**&#x2F;</span><br><span class="line">4.sql语句的分类</span><br><span class="line">	DDL: ----&gt;对数据库,表的操作(create,alter,drop,show)</span><br><span class="line">		数据库的操作</span><br><span class="line">			增:</span><br><span class="line">				1.创建数据库(掌握)</span><br><span class="line">					create database 数据库名称;</span><br><span class="line">				2.创建数据库指定编码(了解)</span><br><span class="line">					create database 数据库名称 character set utf8;	</span><br><span class="line">				3.判断是否存在,在创建(了解)</span><br><span class="line">					create database if not exists 数据库名字</span><br><span class="line">				</span><br><span class="line">			删:</span><br><span class="line">				删除数据库</span><br><span class="line">				drop database 数据库的名称  </span><br><span class="line">				判断存在删除数据库</span><br><span class="line">				drop database if exists 数据库的名称</span><br><span class="line">			改:</span><br><span class="line">				alter database 数据库名字 character set 字符集名称</span><br><span class="line">			查:</span><br><span class="line">				1.查询所有数据库(了解)</span><br><span class="line">					show databases; </span><br><span class="line">				2.查询单个数据库的创建语句(了解)</span><br><span class="line">					show create database 数据库的名字</span><br><span class="line">			使用数据库</span><br><span class="line">				use 数据库名字</span><br><span class="line">		数据库表的操作</span><br><span class="line">			增:(死了都要会!!!!!!!!!!!!!!!!!)</span><br><span class="line">				语法格式:</span><br><span class="line">					create table 表名(</span><br><span class="line">						列名 数据类型 [约束],</span><br><span class="line">						列名 数据类型 [约束],</span><br><span class="line">						...</span><br><span class="line">						列名 数据类型 [约束]</span><br><span class="line">					);</span><br><span class="line">				数据类型:</span><br><span class="line">					int ---&gt;整数</span><br><span class="line">					double(总位数,小数位数) ---&gt;小数</span><br><span class="line">					date  ----&gt;年月日</span><br><span class="line">					datatime ----&gt; 年月日时分秒, 如果不给值,默认是null</span><br><span class="line">					TIMESTAMP ----&gt;年月日时分秒,如果不给值,或者给null,默认是系统当前时间</span><br><span class="line">					varchar(长度) ----&gt;字符串,代表可变字符串</span><br><span class="line">					char(长度)----&gt;字符串, 代表固定字符串</span><br><span class="line">						举例:</span><br><span class="line">							varchar(20) ----&gt;最长20个字符,如果不够20个,有几个占用多大空间</span><br><span class="line">							char(20) ---&gt;固定占20个字符的空间,如果不够也占20个,浪费空间</span><br><span class="line">				举例:</span><br><span class="line">					create table students(</span><br><span class="line">						sid varchar(20),</span><br><span class="line">						name varchar(20),</span><br><span class="line">						gender varchar(10),</span><br><span class="line">						age int,</span><br><span class="line">						address varchar(30),</span><br><span class="line">						birthday date</span><br><span class="line">					);</span><br><span class="line">				创建表和另外一张表的结构一样</span><br><span class="line">					create table 表名 like 另外一张表;</span><br><span class="line">			删:</span><br><span class="line">				drop table 表名;</span><br><span class="line">				drop table if exists 表名;</span><br><span class="line">			改:</span><br><span class="line">				修改表名</span><br><span class="line">				alter table 表名 rename to 新表名(了解)</span><br><span class="line">				修改字符集</span><br><span class="line">				alter table 表名 character set 字符集名称(了解)</span><br><span class="line">				修改表添加一列(掌握)</span><br><span class="line">				alter table 表名 add 列名 数据类型 [约束];</span><br><span class="line">				修改表删除一列(掌握)</span><br><span class="line">				alter table 表名 drop 列名</span><br><span class="line">				修改表修改一列(掌握)</span><br><span class="line">					改列名和类的类型:</span><br><span class="line">					alter table 表名 change 旧列名 新列明 新的数据类型 [约束];</span><br><span class="line">					改列的类型</span><br><span class="line">					alter table 表名 modify 列名 新的数据类型 [约束];</span><br><span class="line">					</span><br><span class="line">			查:</span><br><span class="line">				show tables ----&gt;查询当前数据库中所有的表(了解)</span><br><span class="line">				desc 表名 ----&gt;查询表的结构(了解)</span><br><span class="line">		</span><br><span class="line">	DML: ----&gt;对表中数据的增删改(insert into, delete , update)</span><br><span class="line">		增:(死了都要会!!!!!)</span><br><span class="line">			完整格式:</span><br><span class="line">				insert into 表名 (列名列表,多个列名用,隔开) values(值得列表,值和列要一一对应);</span><br><span class="line">			简化格式: (注意简化格式, 必须对所有列进行值得添加)</span><br><span class="line">				insert into 表名 values(所有值得列表);</span><br><span class="line">			批量插入格式:</span><br><span class="line">				insert into 表名 (列名列表,多个列名用,隔开) values(值得列表,值和列要一一对应),(值得列表,值和列要一一对应)</span><br><span class="line">				insert into 表名 values(所有值得列表),(所有值得列表),(所有值得列表);</span><br><span class="line">			注意:</span><br><span class="line">				1.列名和列值要一一对应</span><br><span class="line">				2.列值如果不是数字,要使用引号引起来</span><br><span class="line">				</span><br><span class="line">		删:(死了都要会!!!!!)</span><br><span class="line">			delete from 表名 where 条件</span><br><span class="line">			注意:</span><br><span class="line">				一定要加条件,不然全删了!!!!!</span><br><span class="line">				如果真的全删,建议使用:  truncate 表名</span><br><span class="line">				&quot;truncate 表名&quot; 和 &quot;delete from 表名&quot; 的区别:</span><br><span class="line">				1.&quot;truncate 表名&quot;不管数据有多少, 只会执行两条语句, &quot;delete from 表名&quot; 有多少数据,就操作多少次</span><br><span class="line">				2.&quot;truncate 表名&quot;属于DDL语句, &quot;delete from 表&quot;属于DML语句,DML语句支持事务会更好点</span><br><span class="line">				</span><br><span class="line">		改:(死了都要会!!!!!)</span><br><span class="line">			update 表名 set 列名1 &#x3D; 列值1,列名2 &#x3D; 列值2..... where 条件;</span><br><span class="line">			</span><br><span class="line">			注意: </span><br><span class="line">				千万不要忘了条件,不然就全改了</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">	DQL: ----&gt;对表中数据的查询操作</span><br><span class="line">		完整格式:</span><br><span class="line">			select</span><br><span class="line">				列名列表(多个列用,隔开)</span><br><span class="line">			from	</span><br><span class="line">				表名列表(多个表名用,隔开)</span><br><span class="line">			where</span><br><span class="line">				分组前过滤条件</span><br><span class="line">			group by</span><br><span class="line">				分组</span><br><span class="line">			having</span><br><span class="line">				分组后过滤的条件</span><br><span class="line">			order by</span><br><span class="line">				排序</span><br><span class="line">			limit</span><br><span class="line">				开始的位置,要多少条数据</span><br><span class="line">		基础查询:</span><br><span class="line">			查询某几列:</span><br><span class="line">				select	</span><br><span class="line">					列名1,列名2...</span><br><span class="line">				from</span><br><span class="line">					表名;</span><br><span class="line">			去重查询:</span><br><span class="line">				select	distinct</span><br><span class="line">					列名1,列名2....</span><br><span class="line">				from</span><br><span class="line">					表名;</span><br><span class="line">				注意: 如果有多个列的话,必须所有的列的值都一样才算重复</span><br><span class="line">				</span><br><span class="line">			给查询的列起别名:</span><br><span class="line">				通过as关键字,而且as还可以省略</span><br><span class="line">				例如:</span><br><span class="line">					select math as 数学 from students; ---&gt;从students表中查math这一列,将列名改成&quot;数学&quot;</span><br><span class="line">					select math 数学 from students; ---&gt;从students表中查math这一列,将列名改成&quot;数学&quot;</span><br><span class="line">					</span><br><span class="line">		条件:</span><br><span class="line">			&gt;,&lt;,&gt;&#x3D;,&lt;&#x3D;,&#x3D;,!&#x3D;(&lt;&gt;)</span><br><span class="line">			&amp;&amp;(and),||(or),!(not)</span><br><span class="line">			&gt;&#x3D; ,&lt;&#x3D; 可以被between and替代,  between and,小的值只能放到前面,大的的值只能放到后面</span><br><span class="line">			多个or可以用in(值1,值2,值3)</span><br><span class="line">			null是非常特殊的东西, null的判断用is或者is not来判断</span><br><span class="line">			like ----&gt;模糊查询</span><br><span class="line">				_:匹配单个字符</span><br><span class="line">				%:匹配多个字符</span><br><span class="line">			举例:</span><br><span class="line">				select * from students where name like &quot;%梅&quot; &#x2F;&#x2F; 最后一个字是&quot;梅&quot;</span><br><span class="line">				select * from students where name like &quot;梅%&quot; &#x2F;&#x2F; 第一个字是&quot;梅&quot;</span><br><span class="line">				</span><br><span class="line">					</span><br><span class="line">	DCL: ----&gt;对用户的授权,撤权,创建用户,删除用户</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>多表&amp;事务</title>
    <url>/2019/09/15/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190915%E5%A4%9A%E8%A1%A8&amp;%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="多表查询："><a href="#多表查询：" class="headerlink" title="多表查询："></a>多表查询：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 查询语法：</span><br><span class="line">	select</span><br><span class="line">		列名列表</span><br><span class="line">	from</span><br><span class="line">		表名列表</span><br><span class="line">	where....</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 准备sql</span><br><span class="line">	# 创建部门表</span><br><span class="line">	CREATE TABLE dept(</span><br><span class="line">		id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">		NAME VARCHAR(20)</span><br><span class="line">	);</span><br><span class="line">	INSERT INTO dept (NAME) VALUES (&#39;开发部&#39;),(&#39;市场部&#39;),(&#39;财务部&#39;);</span><br><span class="line">	# 创建员工表</span><br><span class="line">	CREATE TABLE emp (</span><br><span class="line">		id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">		NAME VARCHAR(10),</span><br><span class="line">		gender CHAR(1), -- 性别</span><br><span class="line">		salary DOUBLE, -- 工资</span><br><span class="line">		join_date DATE, -- 入职日期</span><br><span class="line">		dept_id INT,</span><br><span class="line">		FOREIGN KEY (dept_id) REFERENCES dept(id) -- 外键，关联部门表(部门表的主键)</span><br><span class="line">	);</span><br><span class="line">	INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;孙悟空&#39;,&#39;男&#39;,7200,&#39;2013-02-24&#39;,1);</span><br><span class="line">	INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;猪八戒&#39;,&#39;男&#39;,3600,&#39;2010-12-02&#39;,2);</span><br><span class="line">	INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;唐僧&#39;,&#39;男&#39;,9000,&#39;2008-08-08&#39;,2);</span><br><span class="line">	INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;白骨精&#39;,&#39;女&#39;,5000,&#39;2015-10-07&#39;,3);</span><br><span class="line">	INSERT INTO emp(NAME,gender,salary,join_date,dept_id) VALUES(&#39;蜘蛛精&#39;,&#39;女&#39;,4500,&#39;2011-03-14&#39;,1);</span><br><span class="line">* 笛卡尔积：</span><br><span class="line">	* 有两个集合A,B .取这两个集合的所有组成情况。</span><br><span class="line">	* 要完成多表查询，需要消除无用的数据</span><br><span class="line">* 多表查询的分类：</span><br><span class="line">	1. 内连接查询：</span><br><span class="line">		1. 隐式内连接：使用where条件消除无用数据</span><br><span class="line">			* 例子：</span><br><span class="line">			-- 查询所有员工信息和对应的部门信息</span><br><span class="line"></span><br><span class="line">			SELECT * FROM emp,dept WHERE emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96;;</span><br><span class="line">			</span><br><span class="line">			-- 查询员工表的名称，性别。部门表的名称</span><br><span class="line">			SELECT emp.name,emp.gender,dept.name FROM emp,dept WHERE emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96;;</span><br><span class="line">			</span><br><span class="line">			SELECT </span><br><span class="line">				t1.name, -- 员工表的姓名</span><br><span class="line">				t1.gender,-- 员工表的性别</span><br><span class="line">				t2.name -- 部门表的名称</span><br><span class="line">			FROM</span><br><span class="line">				emp t1,</span><br><span class="line">				dept t2</span><br><span class="line">			WHERE </span><br><span class="line">				t1.&#96;dept_id&#96; &#x3D; t2.&#96;id&#96;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	2. 显式内连接：</span><br><span class="line">		* 语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件</span><br><span class="line">		* 例如：</span><br><span class="line">			* SELECT * FROM emp INNER JOIN dept ON emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96;;	</span><br><span class="line">			* SELECT * FROM emp JOIN dept ON emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96;;	</span><br><span class="line"></span><br><span class="line">	3. 内连接查询：</span><br><span class="line">		1. 从哪些表中查询数据</span><br><span class="line">		2. 条件是什么</span><br><span class="line">		3. 查询哪些字段</span><br><span class="line">2. 外链接查询：</span><br><span class="line">	1. 左外连接：</span><br><span class="line">		* 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</span><br><span class="line">		* 查询的是左表所有数据以及其交集部分。</span><br><span class="line">		* 例子：</span><br><span class="line">			-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span><br><span class="line">			SELECT 	t1.*,t2.&#96;name&#96; FROM emp t1 LEFT JOIN dept t2 ON t1.&#96;dept_id&#96; &#x3D; t2.&#96;id&#96;;</span><br><span class="line">	2. 右外连接：</span><br><span class="line">		* 语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；</span><br><span class="line">		* 查询的是右表所有数据以及其交集部分。</span><br><span class="line">		* 例子：</span><br><span class="line">			SELECT 	* FROM dept t2 RIGHT JOIN emp t1 ON t1.&#96;dept_id&#96; &#x3D; t2.&#96;id&#96;;</span><br><span class="line">3. 子查询：</span><br><span class="line">	* 概念：查询中嵌套查询，称嵌套查询为子查询。</span><br><span class="line">		-- 查询工资最高的员工信息</span><br><span class="line">		-- 1 查询最高的工资是多少 9000</span><br><span class="line">		SELECT MAX(salary) FROM emp;</span><br><span class="line">		</span><br><span class="line">		-- 2 查询员工信息，并且工资等于9000的</span><br><span class="line">		SELECT * FROM emp WHERE emp.&#96;salary&#96; &#x3D; 9000;</span><br><span class="line">		</span><br><span class="line">		-- 一条sql就完成这个操作。子查询</span><br><span class="line">		SELECT * FROM emp WHERE emp.&#96;salary&#96; &#x3D; (SELECT MAX(salary) FROM emp);</span><br><span class="line"></span><br><span class="line">	* 子查询不同情况</span><br><span class="line">		1. 子查询的结果是单行单列的：</span><br><span class="line">			* 子查询可以作为条件，使用运算符去判断。 运算符： &gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D;</span><br><span class="line">			* </span><br><span class="line">			-- 查询员工工资小于平均工资的人</span><br><span class="line">			SELECT * FROM emp WHERE emp.salary &lt; (SELECT AVG(salary) FROM emp);</span><br><span class="line">		2. 子查询的结果是多行单列的：</span><br><span class="line">			* 子查询可以作为条件，使用运算符in来判断</span><br><span class="line">			-- 查询&#39;财务部&#39;和&#39;市场部&#39;所有的员工信息</span><br><span class="line">			SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;;</span><br><span class="line">			SELECT * FROM emp WHERE dept_id &#x3D; 3 OR dept_id &#x3D; 2;</span><br><span class="line">			-- 子查询</span><br><span class="line">			SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME &#x3D; &#39;财务部&#39; OR NAME &#x3D; &#39;市场部&#39;);</span><br><span class="line"></span><br><span class="line">		3. 子查询的结果是多行多列的：</span><br><span class="line">			* 子查询可以作为一张虚拟表参与查询</span><br><span class="line">			-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span><br><span class="line">			-- 子查询</span><br><span class="line">			SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.&#96;join_date&#96; &gt; &#39;2011-11-11&#39;) t2</span><br><span class="line">			WHERE t1.id &#x3D; t2.dept_id;</span><br><span class="line">			</span><br><span class="line">			-- 普通内连接</span><br><span class="line">			SELECT * FROM emp t1,dept t2 WHERE t1.&#96;dept_id&#96; &#x3D; t2.&#96;id&#96; AND t1.&#96;join_date&#96; &gt;  &#39;2011-11-11&#39;</span><br><span class="line"></span><br><span class="line">* 多表查询练习</span><br><span class="line"></span><br><span class="line">		-- 部门表</span><br><span class="line">		CREATE TABLE dept (</span><br><span class="line">		  id INT PRIMARY KEY PRIMARY KEY, -- 部门id</span><br><span class="line">		  dname VARCHAR(50), -- 部门名称</span><br><span class="line">		  loc VARCHAR(50) -- 部门所在地</span><br><span class="line">		);</span><br><span class="line">		</span><br><span class="line">		-- 添加4个部门</span><br><span class="line">		INSERT INTO dept(id,dname,loc) VALUES </span><br><span class="line">		(10,&#39;教研部&#39;,&#39;北京&#39;),</span><br><span class="line">		(20,&#39;学工部&#39;,&#39;上海&#39;),</span><br><span class="line">		(30,&#39;销售部&#39;,&#39;广州&#39;),</span><br><span class="line">		(40,&#39;财务部&#39;,&#39;深圳&#39;);</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 职务表，职务名称，职务描述</span><br><span class="line">CREATE TABLE job (</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">  jname VARCHAR(20),</span><br><span class="line">  description VARCHAR(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加4个职务</span><br><span class="line">INSERT INTO job (id, jname, description) VALUES</span><br><span class="line">(1, &#39;董事长&#39;, &#39;管理整个公司，接单&#39;),</span><br><span class="line">(2, &#39;经理&#39;, &#39;管理部门员工&#39;),</span><br><span class="line">(3, &#39;销售员&#39;, &#39;向客人推销产品&#39;),</span><br><span class="line">(4, &#39;文员&#39;, &#39;使用办公软件&#39;);</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 员工表</span><br><span class="line">CREATE TABLE emp (</span><br><span class="line">  id INT PRIMARY KEY, -- 员工id</span><br><span class="line">  ename VARCHAR(50), -- 员工姓名</span><br><span class="line">  job_id INT, -- 职务id</span><br><span class="line">  mgr INT , -- 上级领导</span><br><span class="line">  joindate DATE, -- 入职日期</span><br><span class="line">  salary DECIMAL(7,2), -- 工资</span><br><span class="line">  bonus DECIMAL(7,2), -- 奖金</span><br><span class="line">  dept_id INT, -- 所在部门编号</span><br><span class="line">  CONSTRAINT emp_jobid_ref_job_id_fk FOREIGN KEY (job_id) REFERENCES job (id),</span><br><span class="line">  CONSTRAINT emp_deptid_ref_dept_id_fk FOREIGN KEY (dept_id) REFERENCES dept (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加员工</span><br><span class="line">INSERT INTO emp(id,ename,job_id,mgr,joindate,salary,bonus,dept_id) VALUES </span><br><span class="line">(1001,&#39;孙悟空&#39;,4,1004,&#39;2000-12-17&#39;,&#39;8000.00&#39;,NULL,20),</span><br><span class="line">(1002,&#39;卢俊义&#39;,3,1006,&#39;2001-02-20&#39;,&#39;16000.00&#39;,&#39;3000.00&#39;,30),</span><br><span class="line">(1003,&#39;林冲&#39;,3,1006,&#39;2001-02-22&#39;,&#39;12500.00&#39;,&#39;5000.00&#39;,30),</span><br><span class="line">(1004,&#39;唐僧&#39;,2,1009,&#39;2001-04-02&#39;,&#39;29750.00&#39;,NULL,20),</span><br><span class="line">(1005,&#39;李逵&#39;,4,1006,&#39;2001-09-28&#39;,&#39;12500.00&#39;,&#39;14000.00&#39;,30),</span><br><span class="line">(1006,&#39;宋江&#39;,2,1009,&#39;2001-05-01&#39;,&#39;28500.00&#39;,NULL,30),</span><br><span class="line">(1007,&#39;刘备&#39;,2,1009,&#39;2001-09-01&#39;,&#39;24500.00&#39;,NULL,10),</span><br><span class="line">(1008,&#39;猪八戒&#39;,4,1004,&#39;2007-04-19&#39;,&#39;30000.00&#39;,NULL,20),</span><br><span class="line">(1009,&#39;罗贯中&#39;,1,NULL,&#39;2001-11-17&#39;,&#39;50000.00&#39;,NULL,10),</span><br><span class="line">(1010,&#39;吴用&#39;,3,1006,&#39;2001-09-08&#39;,&#39;15000.00&#39;,&#39;0.00&#39;,30),</span><br><span class="line">(1011,&#39;沙僧&#39;,4,1004,&#39;2007-05-23&#39;,&#39;11000.00&#39;,NULL,20),</span><br><span class="line">(1012,&#39;李逵&#39;,4,1006,&#39;2001-12-03&#39;,&#39;9500.00&#39;,NULL,30),</span><br><span class="line">(1013,&#39;小白龙&#39;,4,1004,&#39;2001-12-03&#39;,&#39;30000.00&#39;,NULL,20),</span><br><span class="line">(1014,&#39;关羽&#39;,4,1007,&#39;2002-01-23&#39;,&#39;13000.00&#39;,NULL,10);</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 工资等级表</span><br><span class="line">CREATE TABLE salarygrade (</span><br><span class="line">  grade INT PRIMARY KEY,   -- 级别</span><br><span class="line">  losalary INT,  -- 最低工资</span><br><span class="line">  hisalary INT -- 最高工资</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 添加5个工资等级</span><br><span class="line">INSERT INTO salarygrade(grade,losalary,hisalary) VALUES </span><br><span class="line">(1,7000,12000),</span><br><span class="line">(2,12010,14000),</span><br><span class="line">(3,14010,20000),</span><br><span class="line">(4,20010,30000),</span><br><span class="line">(5,30010,99990);</span><br><span class="line"></span><br><span class="line">-- 需求：</span><br><span class="line"></span><br><span class="line">-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述</span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表</span><br><span class="line">		2.查询条件 emp.job_id &#x3D; job.id</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">	t1.&#96;id&#96;, -- 员工编号</span><br><span class="line">	t1.&#96;ename&#96;, -- 员工姓名</span><br><span class="line">	t1.&#96;salary&#96;,-- 工资</span><br><span class="line">	t2.&#96;jname&#96;, -- 职务名称</span><br><span class="line">	t2.&#96;description&#96; -- 职务描述</span><br><span class="line">FROM </span><br><span class="line">	emp t1, job t2</span><br><span class="line">WHERE </span><br><span class="line">	t1.&#96;job_id&#96; &#x3D; t2.&#96;id&#96;;</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置</span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept</span><br><span class="line">		2. 条件： emp.job_id &#x3D; job.id and emp.dept_id &#x3D; dept.id</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	t1.&#96;id&#96;, -- 员工编号</span><br><span class="line">	t1.&#96;ename&#96;, -- 员工姓名</span><br><span class="line">	t1.&#96;salary&#96;,-- 工资</span><br><span class="line">	t2.&#96;jname&#96;, -- 职务名称</span><br><span class="line">	t2.&#96;description&#96;, -- 职务描述</span><br><span class="line">	t3.&#96;dname&#96;, -- 部门名称</span><br><span class="line">	t3.&#96;loc&#96; -- 部门位置</span><br><span class="line">FROM </span><br><span class="line">	emp t1, job t2,dept t3</span><br><span class="line">WHERE </span><br><span class="line">	t1.&#96;job_id&#96; &#x3D; t2.&#96;id&#96; AND t1.&#96;dept_id&#96; &#x3D; t3.&#96;id&#96;;</span><br><span class="line">   </span><br><span class="line">-- 3.查询员工姓名，工资，工资等级</span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1.员工姓名，工资 emp  工资等级 salarygrade</span><br><span class="line">		2.条件 emp.salary &gt;&#x3D; salarygrade.losalary and emp.salary &lt;&#x3D; salarygrade.hisalary</span><br><span class="line">			emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">	t1.ename ,</span><br><span class="line">	t1.&#96;salary&#96;,</span><br><span class="line">	t2.*</span><br><span class="line">FROM emp t1, salarygrade t2</span><br><span class="line">WHERE t1.&#96;salary&#96; BETWEEN t2.&#96;losalary&#96; AND t2.&#96;hisalary&#96;;</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级</span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade</span><br><span class="line">		2. 条件： emp.job_id &#x3D; job.id and emp.dept_id &#x3D; dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary</span><br><span class="line">			</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">	t1.&#96;ename&#96;,</span><br><span class="line">	t1.&#96;salary&#96;,</span><br><span class="line">	t2.&#96;jname&#96;,</span><br><span class="line">	t2.&#96;description&#96;,</span><br><span class="line">	t3.&#96;dname&#96;,</span><br><span class="line">	t3.&#96;loc&#96;,</span><br><span class="line">	t4.&#96;grade&#96;</span><br><span class="line">FROM </span><br><span class="line">	emp t1,job t2,dept t3,salarygrade t4</span><br><span class="line">WHERE </span><br><span class="line">	t1.&#96;job_id&#96; &#x3D; t2.&#96;id&#96; </span><br><span class="line">	AND t1.&#96;dept_id&#96; &#x3D; t3.&#96;id&#96;</span><br><span class="line">	AND t1.&#96;salary&#96; BETWEEN t4.&#96;losalary&#96; AND t4.&#96;hisalary&#96;;</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 5.查询出部门编号、部门名称、部门位置、部门人数</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表</span><br><span class="line">		2.使用分组查询。按照emp.dept_id完成分组，查询count(id)</span><br><span class="line">		3.使用子查询将第2步的查询结果和dept表进行关联查询</span><br><span class="line">		</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">	t1.&#96;id&#96;,t1.&#96;dname&#96;,t1.&#96;loc&#96; , t2.total</span><br><span class="line">FROM </span><br><span class="line">	dept t1,</span><br><span class="line">	(SELECT</span><br><span class="line">		dept_id,COUNT(id) total</span><br><span class="line">	FROM </span><br><span class="line">		emp</span><br><span class="line">	GROUP BY dept_id) t2</span><br><span class="line">WHERE t1.&#96;id&#96; &#x3D; t2.dept_id;</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">	分析：</span><br><span class="line">		1.姓名 emp， 直接上级的姓名 emp</span><br><span class="line">			* emp表的id 和 mgr 是自关联</span><br><span class="line">		2.条件 emp.id &#x3D; emp.mgr</span><br><span class="line">		3.查询左表的所有数据，和 交集数据</span><br><span class="line">			* 使用左外连接查询</span><br><span class="line">	</span><br><span class="line">*&#x2F;</span><br><span class="line">&#x2F;*</span><br><span class="line">select</span><br><span class="line">	t1.ename,</span><br><span class="line">	t1.mgr,</span><br><span class="line">	t2.&#96;id&#96;,</span><br><span class="line">	t2.ename</span><br><span class="line">from emp t1, emp t2</span><br><span class="line">where t1.mgr &#x3D; t2.&#96;id&#96;;</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SELECT </span><br><span class="line">	t1.ename,</span><br><span class="line">	t1.mgr,</span><br><span class="line">	t2.&#96;id&#96;,</span><br><span class="line">	t2.&#96;ename&#96;</span><br><span class="line">FROM emp t1</span><br><span class="line">LEFT JOIN emp t2</span><br><span class="line">ON t1.&#96;mgr&#96; &#x3D; t2.&#96;id&#96;;</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 事务的基本介绍</span><br><span class="line">	1. 概念：</span><br><span class="line">		*  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。</span><br><span class="line">		</span><br><span class="line">	2. 操作：</span><br><span class="line">		1. 开启事务： start transaction;</span><br><span class="line">		2. 回滚：rollback;</span><br><span class="line">		3. 提交：commit;</span><br><span class="line">	3. 例子：</span><br><span class="line">		CREATE TABLE account (</span><br><span class="line">			id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">			NAME VARCHAR(10),</span><br><span class="line">			balance DOUBLE</span><br><span class="line">		);</span><br><span class="line">		-- 添加数据</span><br><span class="line">		INSERT INTO account (NAME, balance) VALUES (&#39;zhangsan&#39;, 1000), (&#39;lisi&#39;, 1000);</span><br></pre></td></tr></table></figure>

<p>​            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	SELECT * FROM account;</span><br><span class="line">	UPDATE account SET balance &#x3D; 1000;</span><br><span class="line">	-- 张三给李四转账 500 元</span><br><span class="line">	</span><br><span class="line">	-- 0. 开启事务</span><br><span class="line">	START TRANSACTION;</span><br><span class="line">	-- 1. 张三账户 -500</span><br><span class="line">	</span><br><span class="line">	UPDATE account SET balance &#x3D; balance - 500 WHERE NAME &#x3D; &#39;zhangsan&#39;;</span><br><span class="line">	-- 2. 李四账户 +500</span><br><span class="line">	-- 出错了...</span><br><span class="line">	UPDATE account SET balance &#x3D; balance + 500 WHERE NAME &#x3D; &#39;lisi&#39;;</span><br><span class="line">	</span><br><span class="line">	-- 发现执行没有问题，提交事务</span><br><span class="line">	COMMIT;</span><br><span class="line">	</span><br><span class="line">	-- 发现出问题了，回滚事务</span><br><span class="line">	ROLLBACK;</span><br><span class="line">4. MySQL数据库中事务默认自动提交</span><br><span class="line">	</span><br><span class="line">	* 事务提交的两种方式：</span><br><span class="line">		* 自动提交：</span><br><span class="line">			* mysql就是自动提交的</span><br><span class="line">			* 一条DML(增删改)语句会自动提交一次事务。</span><br><span class="line">		* 手动提交：</span><br><span class="line">			* Oracle 数据库默认是手动提交事务</span><br><span class="line">			* 需要先开启事务，再提交</span><br><span class="line">	* 修改事务的默认提交方式：</span><br><span class="line">		* 查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交</span><br><span class="line">		* 修改默认提交方式： set @@autocommit &#x3D; 0;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 事务的四大特征：</span><br><span class="line">	1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。</span><br><span class="line">	2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。</span><br><span class="line">	3. 隔离性：多个事务之间。相互独立。</span><br><span class="line">	4. 一致性：事务操作前后，数据总量不变</span><br><span class="line">3. 事务的隔离级别（了解）</span><br><span class="line">	* 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</span><br><span class="line">	* 存在问题：</span><br><span class="line">		1. 脏读：一个事务，读取到另一个事务中没有提交的数据</span><br><span class="line">		2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。</span><br><span class="line">		3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</span><br><span class="line">	* 隔离级别：</span><br><span class="line">		1. read uncommitted：读未提交</span><br><span class="line">			* 产生的问题：脏读、不可重复读、幻读</span><br><span class="line">		2. read committed：读已提交 （Oracle）</span><br><span class="line">			* 产生的问题：不可重复读、幻读</span><br><span class="line">		3. repeatable read：可重复读 （MySQL默认）</span><br><span class="line">			* 产生的问题：幻读</span><br><span class="line">		4. serializable：串行化</span><br><span class="line">			* 可以解决所有的问题</span><br><span class="line"></span><br><span class="line">		* 注意：隔离级别从小到大安全性越来越高，但是效率越来越低</span><br><span class="line">		* 数据库查询隔离级别：</span><br><span class="line">			* select @@tx_isolation;</span><br><span class="line">		* 数据库设置隔离级别：</span><br><span class="line">			* set global transaction isolation level  级别字符串;</span><br><span class="line"></span><br><span class="line">	* 演示：</span><br><span class="line">		set global transaction isolation level read uncommitted;</span><br><span class="line">		start transaction;</span><br><span class="line">		-- 转账操作</span><br><span class="line">		update account set balance &#x3D; balance - 500 where id &#x3D; 1;</span><br><span class="line">		update account set balance &#x3D; balance + 500 where id &#x3D; 2;</span><br></pre></td></tr></table></figure>



<h2 id="DCL："><a href="#DCL：" class="headerlink" title="DCL："></a>DCL：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* SQL分类：</span><br><span class="line">	1. DDL：操作数据库和表</span><br><span class="line">	2. DML：增删改表中数据</span><br><span class="line">	3. DQL：查询表中数据</span><br><span class="line">	4. DCL：管理用户，授权</span><br><span class="line"></span><br><span class="line">* DBA：数据库管理员</span><br><span class="line"></span><br><span class="line">* DCL：管理用户，授权</span><br><span class="line">	1. 管理用户</span><br><span class="line">		1. 添加用户：</span><br><span class="line">			* 语法：CREATE USER &#39;用户名&#39;@&#39;主机名&#39; IDENTIFIED BY &#39;密码&#39;;</span><br><span class="line">		2. 删除用户：</span><br><span class="line">			* 语法：DROP USER &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">		3. 修改用户密码：</span><br><span class="line">			</span><br><span class="line">			UPDATE USER SET PASSWORD &#x3D; PASSWORD(&#39;新密码&#39;) WHERE USER &#x3D; &#39;用户名&#39;;</span><br><span class="line">			UPDATE USER SET PASSWORD &#x3D; PASSWORD(&#39;abc&#39;) WHERE USER &#x3D; &#39;lisi&#39;;</span><br><span class="line">			</span><br><span class="line">			SET PASSWORD FOR &#39;用户名&#39;@&#39;主机名&#39; &#x3D; PASSWORD(&#39;新密码&#39;);</span><br><span class="line">			SET PASSWORD FOR &#39;root&#39;@&#39;localhost&#39; &#x3D; PASSWORD(&#39;123&#39;);</span><br><span class="line"></span><br><span class="line">			* mysql中忘记了root用户的密码？</span><br><span class="line">				1. cmd -- &gt; net stop mysql 停止mysql服务</span><br><span class="line">					* 需要管理员运行该cmd</span><br><span class="line"></span><br><span class="line">				2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables</span><br><span class="line">				3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功</span><br><span class="line">				4. use mysql;</span><br><span class="line">				5. update user set password &#x3D; password(&#39;你的新密码&#39;) where user &#x3D; &#39;root&#39;;</span><br><span class="line">				6. 关闭两个窗口</span><br><span class="line">				7. 打开任务管理器，手动结束mysqld.exe 的进程</span><br><span class="line">				8. 启动mysql服务</span><br><span class="line">				9. 使用新密码登录。</span><br><span class="line">		4. 查询用户：</span><br><span class="line">			-- 1. 切换到mysql数据库</span><br><span class="line">			USE myql;</span><br><span class="line">			-- 2. 查询user表</span><br><span class="line">			SELECT * FROM USER;</span><br><span class="line">			</span><br><span class="line">			* 通配符： % 表示可以在任意主机使用用户登录数据库</span><br><span class="line"></span><br><span class="line">	2. 权限管理：</span><br><span class="line">		1. 查询权限：</span><br><span class="line">			-- 查询权限</span><br><span class="line">			SHOW GRANTS FOR &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">			SHOW GRANTS FOR &#39;lisi&#39;@&#39;%&#39;;</span><br><span class="line"></span><br><span class="line">		2. 授予权限：</span><br><span class="line">			-- 授予权限</span><br><span class="line">			grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">			-- 给张三用户授予所有权限，在任意数据库任意表上</span><br><span class="line">			</span><br><span class="line">			GRANT ALL ON *.* TO &#39;zhangsan&#39;@&#39;localhost&#39;;</span><br><span class="line">		3. 撤销权限：</span><br><span class="line">			-- 撤销权限：</span><br><span class="line">			revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">			REVOKE UPDATE ON db3.&#96;account&#96; FROM &#39;lisi&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.内连接</span><br><span class="line">	隐式:(开发百分百用这种)</span><br><span class="line">		select</span><br><span class="line">			列的列表</span><br><span class="line">		from</span><br><span class="line">			表的列表</span><br><span class="line">		where</span><br><span class="line">			多个表之间的关系</span><br><span class="line">		例如:</span><br><span class="line">			select</span><br><span class="line">				*</span><br><span class="line">			from</span><br><span class="line">				emp,dept</span><br><span class="line">			where</span><br><span class="line">				emp.dept_id &#x3D; dept.id;</span><br><span class="line">	显示:</span><br><span class="line">		select	</span><br><span class="line">			列的列表</span><br><span class="line">		from	</span><br><span class="line">			表名1</span><br><span class="line">		[inner] join </span><br><span class="line">			表名2</span><br><span class="line">		on</span><br><span class="line">			条件</span><br><span class="line">2.外连接</span><br><span class="line">	左外:</span><br><span class="line">		select	</span><br><span class="line">			列的列表</span><br><span class="line">		from	</span><br><span class="line">			表名1</span><br><span class="line">		left [outer] join </span><br><span class="line">			表名2</span><br><span class="line">		on</span><br><span class="line">			条件</span><br><span class="line">		意义: 查左边的全部, 和两张表的交集</span><br><span class="line">		</span><br><span class="line">		举例:</span><br><span class="line">			select</span><br><span class="line">				*</span><br><span class="line">			from</span><br><span class="line">				emp t1</span><br><span class="line">			left outer join</span><br><span class="line">				dept t2</span><br><span class="line">			on	</span><br><span class="line">				t1.dept_id &#x3D; t2.id;</span><br><span class="line">	右外:</span><br><span class="line">		select	</span><br><span class="line">			列的列表</span><br><span class="line">		from	</span><br><span class="line">			表名1</span><br><span class="line">		right [outer] join </span><br><span class="line">			表名2</span><br><span class="line">		on</span><br><span class="line">			条件</span><br><span class="line">		意义: 查右边的全部, 和两张表的交集	</span><br><span class="line">3.子查询 ----&gt; 一个查询语句中,嵌套另一个查询语句</span><br><span class="line">	1.值是单行单列</span><br><span class="line">		用到 &gt;,&gt;&#x3D; ,&lt;&#x3D;,&lt;,&#x3D;,!&#x3D;</span><br><span class="line">	2.值是多行单列</span><br><span class="line">		用到 or或者in,还可以使用内连接替代</span><br><span class="line">	3.值是多行多列</span><br><span class="line">		一般将查询的结果当成一张虚拟表,然后和其他表联查,还可以使用内连接替代</span><br><span class="line">4.事务</span><br><span class="line">	保证一组操作要不一起成功,要么一起失败</span><br><span class="line">	操作:</span><br><span class="line">		开启事务: (DML更新语句,并没有直接更新到文件中, 除非&quot;提交&quot;或者&quot;回滚&quot;) start transaction</span><br><span class="line">		提交: 								commit</span><br><span class="line">		回滚: 将表回到开始事务之前的状态	rollback</span><br><span class="line">	mysql:</span><br><span class="line">		采用自动提交</span><br><span class="line">			一定要经过开启事务的过程start transaction</span><br><span class="line">	oracle</span><br><span class="line">		采用的手动提交</span><br><span class="line">		注意: 写完DML语句记得要commit</span><br><span class="line">	小知识点:</span><br><span class="line">		select @@autocommit; ----&gt;查询提交方式</span><br><span class="line">		set @@autocommit &#x3D; 0 | 1; ---&gt; 设置提交方式</span><br><span class="line">5.事务的特性(背会!!!!!)</span><br><span class="line">	原子性: 代表事务不能分割</span><br><span class="line">	持久性: 一旦提交或者回滚,数据就会持久化保存</span><br><span class="line">	隔离性: 一个事务不应该受到另外一个事务的影响</span><br><span class="line">	一致性: 事务前后数据总量不变</span><br><span class="line">6.设置隔离级别(不要动隔离级别)</span><br><span class="line">	READ UNCOMMITTED ---&gt; 读未提交读</span><br><span class="line">		脏读</span><br><span class="line">		不可重复读(虚读)</span><br><span class="line">		幻读</span><br><span class="line">	READ COMMITTED ----&gt;读已提交读(ORACLE)</span><br><span class="line">		不可重复读(虚读)</span><br><span class="line">		幻读</span><br><span class="line">	REPEATABLE READ	----&gt; 可重复读(MYSQL的方式)</span><br><span class="line">		幻读</span><br><span class="line">	SERIALIZABLE	----&gt;串行化</span><br><span class="line">		可以解决所有的问题</span><br><span class="line">7.DCL(了解)</span><br><span class="line">	用户管理</span><br><span class="line">		主机名可以%设置, 代表任何设备都可以登录</span><br><span class="line">		增: create user &#39;用户名&#39;@&#39;主机名&#39; identity by &#39;密码&#39;;</span><br><span class="line">		删: drop user &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">		改:</span><br><span class="line">			update user set password &#x3D; password(&#39;新密码&#39;) where user &#x3D; &#39;用户名&#39;; </span><br><span class="line">			set password for &#39;用户名&#39;@&#39;主机名&#39; &#x3D; password(&#39;新密码&#39;);</span><br><span class="line">			忘记了root的密码</span><br><span class="line">				详情请参见网络或者笔记</span><br><span class="line">				</span><br><span class="line">		查: 切换到mysql数据库的user表中, select * from user;</span><br><span class="line">	用户授权</span><br><span class="line">		查询:</span><br><span class="line">			show grants for &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">		授予</span><br><span class="line">			grant 权限列表 on 数据库名.表名 to &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">		撤销</span><br><span class="line">			revoke 权限列表 on 数据库名.表名 from &#39;用户名&#39;@&#39;主机名&#39;;</span><br><span class="line">		</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2019/09/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190916JDBC/</url>
    <content><![CDATA[<h2 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</span><br><span class="line">	* JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 快速入门：</span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</span><br><span class="line">			1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下</span><br><span class="line">			2.右键--&gt;Add As Library</span><br><span class="line">		2. 注册驱动</span><br><span class="line">		3. 获取数据库连接对象 Connection</span><br><span class="line">		4. 定义sql</span><br><span class="line">		5. 获取执行sql语句的对象 Statement</span><br><span class="line">		6. 执行sql，接受返回结果</span><br><span class="line">		7. 处理结果</span><br><span class="line">		8. 释放资源</span><br><span class="line"></span><br><span class="line">	* 代码实现：</span><br><span class="line">	  	&#x2F;&#x2F;1. 导入驱动jar包</span><br><span class="line">        &#x2F;&#x2F;2.注册驱动</span><br><span class="line">        Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">        &#x2F;&#x2F;3.获取数据库连接对象</span><br><span class="line">        Connection conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db3&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line">        &#x2F;&#x2F;4.定义sql语句</span><br><span class="line">        String sql &#x3D; &quot;update account set balance &#x3D; 500 where id &#x3D; 1&quot;;</span><br><span class="line">        &#x2F;&#x2F;5.获取执行sql的对象 Statement</span><br><span class="line">        Statement stmt &#x3D; conn.createStatement();</span><br><span class="line">        &#x2F;&#x2F;6.执行sql</span><br><span class="line">        int count &#x3D; stmt.executeUpdate(sql);</span><br><span class="line">        &#x2F;&#x2F;7.处理结果</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        &#x2F;&#x2F;8.释放资源</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line"></span><br><span class="line">3. 详解各个对象：</span><br><span class="line">	1. DriverManager：驱动管理对象</span><br><span class="line">		* 功能：</span><br><span class="line">			1. 注册驱动：告诉程序该使用哪一个数据库驱动jar</span><br><span class="line">				static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 </span><br><span class="line">				写代码使用：  Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">				通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块</span><br><span class="line">				 static &#123;</span><br><span class="line">				        try &#123;</span><br><span class="line">				            java.sql.DriverManager.registerDriver(new Driver());</span><br><span class="line">				        &#125; catch (SQLException E) &#123;</span><br><span class="line">				            throw new RuntimeException(&quot;Can&#39;t register driver!&quot;);</span><br><span class="line">				        &#125;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。</span><br><span class="line">			2. 获取数据库连接：</span><br><span class="line">				* 方法：static Connection getConnection(String url, String user, String password) </span><br><span class="line">				* 参数：</span><br><span class="line">					* url：指定连接的路径</span><br><span class="line">						* 语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称</span><br><span class="line">						* 例子：jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;db3</span><br><span class="line">						* 细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称</span><br><span class="line">					* user：用户名</span><br><span class="line">					* password：密码 </span><br><span class="line">	2. Connection：数据库连接对象</span><br><span class="line">		1. 功能：</span><br><span class="line">			1. 获取执行sql 的对象</span><br><span class="line">				* Statement createStatement()</span><br><span class="line">				* PreparedStatement prepareStatement(String sql)  </span><br><span class="line">			2. 管理事务：</span><br><span class="line">				* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</span><br><span class="line">				* 提交事务：commit() </span><br><span class="line">				* 回滚事务：rollback() </span><br><span class="line">	3. Statement：执行sql的对象</span><br><span class="line">		1. 执行sql</span><br><span class="line">			1. boolean execute(String sql) ：可以执行任意的sql 了解 </span><br><span class="line">			2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句</span><br><span class="line">				* 返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</span><br><span class="line">			3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句</span><br><span class="line">		2. 练习：</span><br><span class="line">			1. account表 添加一条记录</span><br><span class="line">			2. account表 修改记录</span><br><span class="line">			3. account表 删除一条记录</span><br><span class="line"></span><br><span class="line">			代码：</span><br><span class="line">				Statement stmt &#x3D; null;</span><br><span class="line">		        Connection conn &#x3D; null;</span><br><span class="line">		        try &#123;</span><br><span class="line">		            &#x2F;&#x2F;1. 注册驱动</span><br><span class="line">		            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">		            &#x2F;&#x2F;2. 定义sql</span><br><span class="line">		            String sql &#x3D; &quot;insert into account values(null,&#39;王五&#39;,3000)&quot;;</span><br><span class="line">		            &#x2F;&#x2F;3.获取Connection对象</span><br><span class="line">		            conn &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;&#x2F;db3&quot;, &quot;root&quot;, &quot;root&quot;);</span><br><span class="line">		            &#x2F;&#x2F;4.获取执行sql的对象 Statement</span><br><span class="line">		            stmt &#x3D; conn.createStatement();</span><br><span class="line">		            &#x2F;&#x2F;5.执行sql</span><br><span class="line">		            int count &#x3D; stmt.executeUpdate(sql);&#x2F;&#x2F;影响的行数</span><br><span class="line">		            &#x2F;&#x2F;6.处理结果</span><br><span class="line">		            System.out.println(count);</span><br><span class="line">		            if(count &gt; 0)&#123;</span><br><span class="line">		                System.out.println(&quot;添加成功！&quot;);</span><br><span class="line">		            &#125;else&#123;</span><br><span class="line">		                System.out.println(&quot;添加失败！&quot;);</span><br><span class="line">		            &#125;</span><br><span class="line">		</span><br><span class="line">		        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">		            e.printStackTrace();</span><br><span class="line">		        &#125; catch (SQLException e) &#123;</span><br><span class="line">		            e.printStackTrace();</span><br><span class="line">		        &#125;finally &#123;</span><br><span class="line">		            &#x2F;&#x2F;stmt.close();</span><br><span class="line">		            &#x2F;&#x2F;7. 释放资源</span><br><span class="line">		            &#x2F;&#x2F;避免空指针异常</span><br><span class="line">		            if(stmt !&#x3D; null)&#123;</span><br><span class="line">		                try &#123;</span><br><span class="line">		                    stmt.close();</span><br><span class="line">		                &#125; catch (SQLException e) &#123;</span><br><span class="line">		                    e.printStackTrace();</span><br><span class="line">		                &#125;</span><br><span class="line">		            &#125;</span><br><span class="line">		</span><br><span class="line">		            if(conn !&#x3D; null)&#123;</span><br><span class="line">		                try &#123;</span><br><span class="line">		                    conn.close();</span><br><span class="line">		                &#125; catch (SQLException e) &#123;</span><br><span class="line">		                    e.printStackTrace();</span><br><span class="line">		                &#125;</span><br><span class="line">		            &#125;</span><br><span class="line">		        &#125;</span><br><span class="line">			</span><br><span class="line">	4. ResultSet：结果集对象,封装查询结果</span><br><span class="line">		* boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</span><br><span class="line">		* getXxx(参数):获取数据</span><br><span class="line">			* Xxx：代表数据类型   如： int getInt() ,	String getString()</span><br><span class="line">			* 参数：</span><br><span class="line">				1. int：代表列的编号,从1开始   如： getString(1)</span><br><span class="line">				2. String：代表列名称。 如： getDouble(&quot;balance&quot;)</span><br><span class="line">		</span><br><span class="line">		* 注意：</span><br><span class="line">			* 使用步骤：</span><br><span class="line">				1. 游标向下移动一行</span><br><span class="line">				2. 判断是否有数据</span><br><span class="line">				3. 获取数据</span><br><span class="line"></span><br><span class="line">			   &#x2F;&#x2F;循环判断游标是否是最后一行末尾。</span><br><span class="line">	            while(rs.next())&#123;</span><br><span class="line">	                &#x2F;&#x2F;获取数据</span><br><span class="line">	                &#x2F;&#x2F;6.2 获取数据</span><br><span class="line">	                int id &#x3D; rs.getInt(1);</span><br><span class="line">	                String name &#x3D; rs.getString(&quot;name&quot;);</span><br><span class="line">	                double balance &#x3D; rs.getDouble(3);</span><br><span class="line">	</span><br><span class="line">	                System.out.println(id + &quot;---&quot; + name + &quot;---&quot; + balance);</span><br><span class="line">	            &#125;</span><br><span class="line"></span><br><span class="line">		* 练习：</span><br><span class="line">			* 定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。</span><br><span class="line">				1. 定义Emp类</span><br><span class="line">				2. 定义方法 public List&lt;Emp&gt; findAll()&#123;&#125;</span><br><span class="line">				3. 实现方法 select * from emp;</span><br><span class="line">					</span><br><span class="line">	5. PreparedStatement：执行sql的对象</span><br><span class="line">		1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题</span><br><span class="line">			1. 输入用户随便，输入密码：a&#39; or &#39;a&#39; &#x3D; &#39;a</span><br><span class="line">			2. sql：select * from user where username &#x3D; &#39;fhdsjkf&#39; and password &#x3D; &#39;a&#39; or &#39;a&#39; &#x3D; &#39;a&#39; </span><br><span class="line"></span><br><span class="line">		2. 解决sql注入问题：使用PreparedStatement对象来解决</span><br><span class="line">		3. 预编译的SQL：参数使用?作为占位符</span><br><span class="line">		4. 步骤：</span><br><span class="line">			1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</span><br><span class="line">			2. 注册驱动</span><br><span class="line">			3. 获取数据库连接对象 Connection</span><br><span class="line">			4. 定义sql</span><br><span class="line">				* 注意：sql的参数使用？作为占位符。 如：select * from user where username &#x3D; ? and password &#x3D; ?;</span><br><span class="line">			5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </span><br><span class="line">			6. 给？赋值：</span><br><span class="line">				* 方法： setXxx(参数1,参数2)</span><br><span class="line">					* 参数1：？的位置编号 从1 开始</span><br><span class="line">					* 参数2：？的值</span><br><span class="line">			7. 执行sql，接受返回结果，不需要传递sql语句</span><br><span class="line">			8. 处理结果</span><br><span class="line">			9. 释放资源</span><br><span class="line"></span><br><span class="line">		5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作</span><br><span class="line">			1. 可以防止SQL注入</span><br><span class="line">			2. 效率更高</span><br></pre></td></tr></table></figure>

<h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 目的：简化书写</span><br><span class="line">* 分析：</span><br><span class="line">	1. 注册驱动也抽取</span><br><span class="line">	2. 抽取一个方法获取连接对象</span><br><span class="line">		* 需求：不想传递参数（麻烦），还得保证工具类的通用性。</span><br><span class="line">		* 解决：配置文件</span><br><span class="line">			jdbc.properties</span><br><span class="line">				url&#x3D;</span><br><span class="line">				user&#x3D;</span><br><span class="line">				password&#x3D;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	3. 抽取一个方法释放资源</span><br><span class="line"></span><br><span class="line">* 代码实现：</span><br><span class="line">	public class JDBCUtils &#123;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String driver;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 文件的读取，只需要读取一次即可拿到这些值。使用静态代码块</span><br><span class="line">     *&#x2F;</span><br><span class="line">    static&#123;</span><br><span class="line">        &#x2F;&#x2F;读取资源文件，获取值。</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F;1. 创建Properties集合类。</span><br><span class="line">            Properties pro &#x3D; new Properties();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;获取src路径下的文件的方式---&gt;ClassLoader 类加载器</span><br><span class="line">            ClassLoader classLoader &#x3D; JDBCUtils.class.getClassLoader();</span><br><span class="line">            URL res  &#x3D; classLoader.getResource(&quot;jdbc.properties&quot;);</span><br><span class="line">            String path &#x3D; res.getPath();</span><br><span class="line">            System.out.println(path);&#x2F;&#x2F;&#x2F;D:&#x2F;IdeaProjects&#x2F;itcast&#x2F;out&#x2F;production&#x2F;day04_jdbc&#x2F;jdbc.properties</span><br><span class="line">            &#x2F;&#x2F;2. 加载文件</span><br><span class="line">           &#x2F;&#x2F; pro.load(new FileReader(&quot;D:\\IdeaProjects\\itcast\\day04_jdbc\\src\\jdbc.properties&quot;));</span><br><span class="line">            pro.load(new FileReader(path));</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;3. 获取数据，赋值</span><br><span class="line">            url &#x3D; pro.getProperty(&quot;url&quot;);</span><br><span class="line">            user &#x3D; pro.getProperty(&quot;user&quot;);</span><br><span class="line">            password &#x3D; pro.getProperty(&quot;password&quot;);</span><br><span class="line">            driver &#x3D; pro.getProperty(&quot;driver&quot;);</span><br><span class="line">            &#x2F;&#x2F;4. 注册驱动</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 获取连接</span><br><span class="line"> * @return 连接对象</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static Connection getConnection() throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">    return DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 释放资源</span><br><span class="line"> * @param stmt</span><br><span class="line"> * @param conn</span><br><span class="line"> *&#x2F;</span><br><span class="line">public static void close(Statement stmt,Connection conn)&#123;</span><br><span class="line">    if( stmt !&#x3D; null)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if( conn !&#x3D; null)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &#x2F;**</span><br><span class="line">     * 释放资源</span><br><span class="line">     * @param stmt</span><br><span class="line">     * @param conn</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void close(ResultSet rs,Statement stmt, Connection conn)&#123;</span><br><span class="line">        if( rs !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( stmt !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if( conn !&#x3D; null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* 练习：</span><br><span class="line">	* 需求：</span><br><span class="line">		1. 通过键盘录入用户名和密码</span><br><span class="line">		2. 判断用户是否登录成功</span><br><span class="line">			* select * from user where username &#x3D; &quot;&quot; and password &#x3D; &quot;&quot;;</span><br><span class="line">			* 如果这个sql有查询结果，则成功，反之，则失败</span><br><span class="line"></span><br><span class="line">	* 步骤：</span><br><span class="line">		1. 创建数据库表 user</span><br><span class="line">			CREATE TABLE USER(</span><br><span class="line">				id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">				username VARCHAR(32),</span><br><span class="line">				PASSWORD VARCHAR(32)</span><br><span class="line">			</span><br><span class="line">			);</span><br><span class="line"></span><br><span class="line">			INSERT INTO USER VALUES(NULL,&#39;zhangsan&#39;,&#39;123&#39;);</span><br><span class="line">			INSERT INTO USER VALUES(NULL,&#39;lisi&#39;,&#39;234&#39;);</span><br><span class="line"></span><br><span class="line">		2. 代码实现：</span><br><span class="line">			public class JDBCDemo9 &#123;</span><br><span class="line"></span><br><span class="line">			    public static void main(String[] args) &#123;</span><br><span class="line">			        &#x2F;&#x2F;1.键盘录入，接受用户名和密码</span><br><span class="line">			        Scanner sc &#x3D; new Scanner(System.in);</span><br><span class="line">			        System.out.println(&quot;请输入用户名：&quot;);</span><br><span class="line">			        String username &#x3D; sc.nextLine();</span><br><span class="line">			        System.out.println(&quot;请输入密码：&quot;);</span><br><span class="line">			        String password &#x3D; sc.nextLine();</span><br><span class="line">			        &#x2F;&#x2F;2.调用方法</span><br><span class="line">			        boolean flag &#x3D; new JDBCDemo9().login(username, password);</span><br><span class="line">			        &#x2F;&#x2F;3.判断结果，输出不同语句</span><br><span class="line">			        if(flag)&#123;</span><br><span class="line">			            &#x2F;&#x2F;登录成功</span><br><span class="line">			            System.out.println(&quot;登录成功！&quot;);</span><br><span class="line">			        &#125;else&#123;</span><br><span class="line">			            System.out.println(&quot;用户名或密码错误！&quot;);</span><br><span class="line">			        &#125;</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​<br>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 登录方法</span><br><span class="line"> *&#x2F;</span><br><span class="line">public boolean login(String username ,String password)&#123;</span><br><span class="line">    if(username &#x3D;&#x3D; null || password &#x3D;&#x3D; null)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;连接数据库判断是否登录成功</span><br><span class="line">    Connection conn &#x3D; null;</span><br><span class="line">    Statement stmt &#x3D;  null;</span><br><span class="line">    ResultSet rs &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F;1.获取连接</span><br><span class="line">    try &#123;</span><br><span class="line">        conn &#x3D;  JDBCUtils.getConnection();</span><br><span class="line">        &#x2F;&#x2F;2.定义sql</span><br><span class="line">        String sql &#x3D; &quot;select * from user where username &#x3D; &#39;&quot;+username+&quot;&#39; and password &#x3D; &#39;&quot;+password+&quot;&#39; &quot;;</span><br><span class="line">        &#x2F;&#x2F;3.获取执行sql的对象</span><br><span class="line">        stmt &#x3D; conn.createStatement();</span><br><span class="line">        &#x2F;&#x2F;4.执行查询</span><br><span class="line">        rs &#x3D; stmt.executeQuery(sql);</span><br><span class="line">        &#x2F;&#x2F;5.判断</span><br><span class="line">       &#x2F;* if(rs.next())&#123;&#x2F;&#x2F;如果有下一行，则返回true</span><br><span class="line">            return true;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;*&#x2F;</span><br><span class="line">       return rs.next();&#x2F;&#x2F;如果有下一行，则返回true</span><br><span class="line">			</span><br><span class="line">    &#125; catch (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">        JDBCUtils.close(rs,stmt,conn);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​                </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</span><br><span class="line">2. 操作：</span><br><span class="line">	1. 开启事务</span><br><span class="line">	2. 提交事务</span><br><span class="line">	3. 回滚事务</span><br><span class="line">3. 使用Connection对象来管理事务</span><br><span class="line">	* 开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</span><br><span class="line">		* 在执行sql之前开启事务</span><br><span class="line">	* 提交事务：commit() </span><br><span class="line">		* 当所有sql都执行完提交事务</span><br><span class="line">	* 回滚事务：rollback() </span><br><span class="line">		* 在catch中回滚事务</span><br><span class="line"></span><br><span class="line">4. 代码：</span><br><span class="line">	public class JDBCDemo10 &#123;</span><br><span class="line"></span><br><span class="line">	    public static void main(String[] args) &#123;</span><br><span class="line">	        Connection conn &#x3D; null;</span><br><span class="line">	        PreparedStatement pstmt1 &#x3D; null;</span><br><span class="line">	        PreparedStatement pstmt2 &#x3D; null;</span><br><span class="line">	</span><br><span class="line">	        try &#123;</span><br><span class="line">	            &#x2F;&#x2F;1.获取连接</span><br><span class="line">	            conn &#x3D; JDBCUtils.getConnection();</span><br><span class="line">	            &#x2F;&#x2F;开启事务</span><br><span class="line">	            conn.setAutoCommit(false);</span><br><span class="line">	</span><br><span class="line">	            &#x2F;&#x2F;2.定义sql</span><br><span class="line">	            &#x2F;&#x2F;2.1 张三 - 500</span><br><span class="line">	            String sql1 &#x3D; &quot;update account set balance &#x3D; balance - ? where id &#x3D; ?&quot;;</span><br><span class="line">	            &#x2F;&#x2F;2.2 李四 + 500</span><br><span class="line">	            String sql2 &#x3D; &quot;update account set balance &#x3D; balance + ? where id &#x3D; ?&quot;;</span><br><span class="line">	            &#x2F;&#x2F;3.获取执行sql对象</span><br><span class="line">	            pstmt1 &#x3D; conn.prepareStatement(sql1);</span><br><span class="line">	            pstmt2 &#x3D; conn.prepareStatement(sql2);</span><br><span class="line">	            &#x2F;&#x2F;4. 设置参数</span><br><span class="line">	            pstmt1.setDouble(1,500);</span><br><span class="line">	            pstmt1.setInt(2,1);</span><br><span class="line">	</span><br><span class="line">	            pstmt2.setDouble(1,500);</span><br><span class="line">	            pstmt2.setInt(2,2);</span><br><span class="line">	            &#x2F;&#x2F;5.执行sql</span><br><span class="line">	            pstmt1.executeUpdate();</span><br><span class="line">	            &#x2F;&#x2F; 手动制造异常</span><br><span class="line">	            int i &#x3D; 3&#x2F;0;</span><br><span class="line">	</span><br><span class="line">	            pstmt2.executeUpdate();</span><br><span class="line">	            &#x2F;&#x2F;提交事务</span><br><span class="line">	            conn.commit();</span><br><span class="line">	        &#125; catch (Exception e) &#123;</span><br><span class="line">	            &#x2F;&#x2F;事务回滚</span><br><span class="line">	            try &#123;</span><br><span class="line">	                if(conn !&#x3D; null) &#123;</span><br><span class="line">	                    conn.rollback();</span><br><span class="line">	                &#125;</span><br><span class="line">	            &#125; catch (SQLException e1) &#123;</span><br><span class="line">	                e1.printStackTrace();</span><br><span class="line">	            &#125;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125;finally &#123;</span><br><span class="line">	            JDBCUtils.close(pstmt1,conn);</span><br><span class="line">	            JDBCUtils.close(pstmt2,null);</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;	</span><br><span class="line">	&#125;	       </span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JDBC</span><br><span class="line">	他是一套接口, java提供的, 数据库厂商去实现</span><br><span class="line">快速入门</span><br><span class="line">	1.导入驱动jar包</span><br><span class="line">	2.注册驱动</span><br><span class="line">	3.获取连接</span><br><span class="line">	4.获取执行者对象</span><br><span class="line">	5.执行sql语句得到结果</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">1.DriverManager</span><br><span class="line">	1.注册驱动</span><br><span class="line">		static registerDriver(Driver driver);</span><br><span class="line">		开发过程中:采用 Class.forName(&quot;com.mysql.jdbc.Driver&quot;);因为这里有静态代码块,静态代码块中已经注册了驱动</span><br><span class="line">		registerDriver(new Driver());采用传统方式会注册两次,没有必要</span><br><span class="line">	2.获取连接</span><br><span class="line">		static getConnection(url,username,password);</span><br><span class="line">		url ----&gt;  jdbc:mysql:&#x2F;&#x2F;IP地址:端口&#x2F;数据库</span><br><span class="line">			注意: 如果连接的是本机的3306的数据库可以简写成&quot;  jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库&quot;</span><br><span class="line">2.Connection</span><br><span class="line">	1.获取执行者对象</span><br><span class="line">		Statement createStatement()</span><br><span class="line">		preparedStatement preparedStatement()</span><br><span class="line">	2.管理事务</span><br><span class="line">		&#x2F;&#x2F;开启事务</span><br><span class="line">		start transaction ----&gt; setAutoCommit(false);更改的不是整个数据库的提交方式,而且是这一次的提交方式!!!!!!</span><br><span class="line">		&#x2F;&#x2F;提交事务</span><br><span class="line">		commit()</span><br><span class="line">		&#x2F;&#x2F;回滚事务</span><br><span class="line">		rollback();</span><br><span class="line">		注意: &quot;当需要大量操作要不同时成功,或者同时失败&quot;,需要&quot;开启事务&quot;, &quot;当出现异常的时候需要回滚&quot;, 当try里面所有代码都执行完毕么有错误,需要提交</span><br><span class="line">		举例:</span><br><span class="line">			try&#123;</span><br><span class="line">				&#x2F;&#x2F;开启事务</span><br><span class="line">				1.操作1</span><br><span class="line">				2.操作2</span><br><span class="line">				...</span><br><span class="line">				&#x2F;&#x2F;提交事务</span><br><span class="line">			</span><br><span class="line">			&#125;catch()&#123;</span><br><span class="line">				&#x2F;&#x2F;回滚操作</span><br><span class="line">			&#125;</span><br><span class="line">3.Statement</span><br><span class="line">	boolean excute(String sql) ---&gt;用的不多,可以忘了, 因为DQL,没有办法得到结果集</span><br><span class="line">	int excuteUpdate(String sql) ----&gt;执行DML语句</span><br><span class="line">	ResultSet excuteQuery(String sql) ----&gt;执行DQL语句</span><br><span class="line">4.ResultSet</span><br><span class="line">	boolean next() ----&gt; 将游标向下移动一行,并且返回是否有数据</span><br><span class="line">	Xxx getXxx(参数) ----&gt;获取数据</span><br><span class="line">		Xxx:代表数据类型 , 例如: getString  getDouble getInt.....</span><br><span class="line">		参数:</span><br><span class="line">			int: 列的编号,从1开始(不推荐,开发没有用, 因为编号会根据查询的列的变化而变化,不通用)</span><br><span class="line">				select sid,sname  from student</span><br><span class="line">			String:(推荐使用, 因为列名比较通用)</span><br><span class="line">				select sname,sid  from student</span><br><span class="line">				getString(&quot;sname&quot;);</span><br><span class="line">	注意:</span><br><span class="line">		1.以后再定义数据库对应的实体类时,所有的基本数据类型建议全部变成引用数据类型,因为数据库的int可以赋值为null</span><br></pre></td></tr></table></figure>



<p>​            </p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>BootStrap</title>
    <url>/2019/09/22/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/190922BootStrap/</url>
    <content><![CDATA[<h2 id="Bootstrap："><a href="#Bootstrap：" class="headerlink" title="Bootstrap："></a>Bootstrap：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</span><br><span class="line">	* 框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</span><br><span class="line">	* 好处：</span><br><span class="line">		1. 定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得到丰富的页面效果。</span><br><span class="line">		2. 响应式布局。</span><br><span class="line">			* 同一套页面可以兼容不同分辨率的设备。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 快速入门</span><br><span class="line">	1. 下载Bootstrap</span><br><span class="line">	2. 在项目中将这三个文件夹复制</span><br><span class="line">	3. 创建html页面，引入必要的资源文件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap HelloWorld&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好，世界！&lt;&#x2F;h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 同一套页面可以兼容不同分辨率的设备。</span><br><span class="line">* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</span><br><span class="line">* 步骤：</span><br><span class="line">	1. 定义容器。相当于之前的table、</span><br><span class="line">		* 容器分类：</span><br><span class="line">			1. container：两边留白</span><br><span class="line">			2. container-fluid：每一种设备都是100%宽度</span><br><span class="line">	2. 定义行。相当于之前的tr   样式：row</span><br><span class="line">	3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目</span><br><span class="line">		* 设备代号：</span><br><span class="line">			1. xs：超小屏幕 手机 (&lt;768px)：col-xs-12</span><br><span class="line">			2. sm：小屏幕 平板 (≥768px)</span><br><span class="line">			3. md：中等屏幕 桌面显示器 (≥992px)</span><br><span class="line">			4. lg：大屏幕 大桌面显示器 (≥1200px)</span><br><span class="line"></span><br><span class="line">	* 注意：</span><br><span class="line">		1. 一行中如果格子数目超过12，则超出部分自动换行。</span><br><span class="line">		2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</span><br><span class="line">		3. 如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</span><br></pre></td></tr></table></figure>

<h2 id="CSS样式和JS插件"><a href="#CSS样式和JS插件" class="headerlink" title="CSS样式和JS插件"></a>CSS样式和JS插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 全局CSS样式：</span><br><span class="line">	* 按钮：class&#x3D;&quot;btn btn-default&quot;</span><br><span class="line">	* 图片：</span><br><span class="line">		*  class&#x3D;&quot;img-responsive&quot;：图片在任意尺寸都占100%</span><br><span class="line">		*  图片形状</span><br><span class="line">			*  &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-rounded&quot;&gt;：方形</span><br><span class="line">			*  &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-circle&quot;&gt; ： 圆形</span><br><span class="line">			*  &lt;img src&#x3D;&quot;...&quot; alt&#x3D;&quot;...&quot; class&#x3D;&quot;img-thumbnail&quot;&gt; ：相框</span><br><span class="line">	* 表格</span><br><span class="line">		* table</span><br><span class="line">		* table-bordered</span><br><span class="line">		* table-hover</span><br><span class="line">	* 表单</span><br><span class="line">		* 给表单项添加：class&#x3D;&quot;form-control&quot; </span><br><span class="line">2. 组件：</span><br><span class="line">	* 导航条</span><br><span class="line">	* 分页条</span><br><span class="line">3. 插件：</span><br><span class="line">	* 轮播图</span><br></pre></td></tr></table></figure>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap HelloWorld&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;jquery-3.2.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .paddtop&#123;</span><br><span class="line">            padding-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .search-btn&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            border:1px solid #ffc900;</span><br><span class="line">            width: 90px;</span><br><span class="line">            height: 35px;</span><br><span class="line">            background-color:#ffc900 ;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 35px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .search-input&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            border:2px solid #ffc900;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 35px;</span><br><span class="line">            padding-left: 5px;</span><br><span class="line">            margin-top: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">        .jx&#123;</span><br><span class="line">            border-bottom: 2px solid #ffc900;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">        .company&#123;</span><br><span class="line">            height: 40px;</span><br><span class="line">            background-color: #ffc900;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height:40px ;</span><br><span class="line">            font-size: 8px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 1.页眉部分--&gt;</span><br><span class="line">   &lt;header class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">           &lt;img src&#x3D;&quot;img&#x2F;top_banner.jpg&quot; class&#x3D;&quot;img-responsive&quot;&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row paddtop&quot;&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;col-md-3&quot;&gt;</span><br><span class="line">               &lt;img src&#x3D;&quot;img&#x2F;logo.jpg&quot; class&#x3D;&quot;img-responsive&quot;&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;col-md-5&quot;&gt;</span><br><span class="line">               &lt;input class&#x3D;&quot;search-input&quot; placeholder&#x3D;&quot;请输入线路名称&quot;&gt;</span><br><span class="line">               &lt;a class&#x3D;&quot;search-btn&quot; href&#x3D;&quot;#&quot;&gt;搜索&lt;&#x2F;a&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">               &lt;img src&#x3D;&quot;img&#x2F;hotel_tel.png&quot; class&#x3D;&quot;img-responsive&quot;&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;!--导航栏--&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">           &lt;nav class&#x3D;&quot;navbar navbar-default&quot;&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">                   &lt;!-- Brand and toggle get grouped for better mobile display --&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;navbar-header&quot;&gt;</span><br><span class="line">                       &lt;!-- 定义汉堡按钮 --&gt;</span><br><span class="line">                       &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle collapsed&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;#bs-example-navbar-collapse-1&quot; aria-expanded&#x3D;&quot;false&quot;&gt;</span><br><span class="line">                           &lt;span class&#x3D;&quot;sr-only&quot;&gt;Toggle navigation&lt;&#x2F;span&gt;</span><br><span class="line">                           &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                           &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                           &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                       &lt;&#x2F;button&gt;</span><br><span class="line">                       &lt;a class&#x3D;&quot;navbar-brand&quot; href&#x3D;&quot;#&quot;&gt;首页&lt;&#x2F;a&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;collapse navbar-collapse&quot; id&#x3D;&quot;bs-example-navbar-collapse-1&quot;&gt;</span><br><span class="line">                       &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">                           &lt;li class&#x3D;&quot;active&quot;&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link &lt;span class&#x3D;&quot;sr-only&quot;&gt;(current)&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                           &lt;li&gt;&lt;a href&#x3D;&quot;#&quot;&gt;Link&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;&#x2F;ul&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;&lt;!-- &#x2F;.navbar-collapse --&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;&lt;!-- &#x2F;.container-fluid --&gt;</span><br><span class="line">           &lt;&#x2F;nav&gt;</span><br><span class="line"></span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!--轮播图--&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">           &lt;div id&#x3D;&quot;carousel-example-generic&quot; class&#x3D;&quot;carousel slide&quot; data-ride&#x3D;&quot;carousel&quot;&gt;</span><br><span class="line">               &lt;!-- Indicators --&gt;</span><br><span class="line">               &lt;ol class&#x3D;&quot;carousel-indicators&quot;&gt;</span><br><span class="line">                   &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;0&quot; class&#x3D;&quot;active&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;1&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">                   &lt;li data-target&#x3D;&quot;#carousel-example-generic&quot; data-slide-to&#x3D;&quot;2&quot;&gt;&lt;&#x2F;li&gt;</span><br><span class="line">               &lt;&#x2F;ol&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Wrapper for slides --&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;carousel-inner&quot; role&#x3D;&quot;listbox&quot;&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;item active&quot;&gt;</span><br><span class="line">                       &lt;img src&#x3D;&quot;img&#x2F;banner_1.jpg&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">                       &lt;img src&#x3D;&quot;img&#x2F;banner_2.jpg&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;item&quot;&gt;</span><br><span class="line">                       &lt;img src&#x3D;&quot;img&#x2F;banner_3.jpg&quot; alt&#x3D;&quot;...&quot;&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;!-- Controls --&gt;</span><br><span class="line">               &lt;a class&#x3D;&quot;left carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;prev&quot;&gt;</span><br><span class="line">                   &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                   &lt;span class&#x3D;&quot;sr-only&quot;&gt;Previous&lt;&#x2F;span&gt;</span><br><span class="line">               &lt;&#x2F;a&gt;</span><br><span class="line">               &lt;a class&#x3D;&quot;right carousel-control&quot; href&#x3D;&quot;#carousel-example-generic&quot; role&#x3D;&quot;button&quot; data-slide&#x3D;&quot;next&quot;&gt;</span><br><span class="line">                   &lt;span class&#x3D;&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">                   &lt;span class&#x3D;&quot;sr-only&quot;&gt;Next&lt;&#x2F;span&gt;</span><br><span class="line">               &lt;&#x2F;a&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>​<br>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;header&gt;</span><br><span class="line">&lt;!-- 2.主体部分--&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">     &lt;div class&#x3D;&quot;row jx&quot;&gt;</span><br><span class="line">         &lt;img src&#x3D;&quot;img&#x2F;icon_5.jpg&quot;&gt;</span><br><span class="line">         &lt;span&gt;黑马精选&lt;&#x2F;span&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class&#x3D;&quot;row paddtop&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-3&quot;&gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                 &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                 &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                 &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-3&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-3&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-3&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>​    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row jx&quot;&gt;</span><br><span class="line">           &lt;img src&#x3D;&quot;img&#x2F;icon_6.jpg&quot;&gt;</span><br><span class="line">           &lt;span&gt;国内游&lt;&#x2F;span&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row paddtop&quot;&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">               &lt;img src&#x3D;&quot;img&#x2F;guonei_1.jpg&quot;&gt;</span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line">           &lt;div class&#x3D;&quot;col-md-8&quot;&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line"></span><br><span class="line">                       &lt;div class&#x3D;&quot;thumbnail&quot;&gt;</span><br><span class="line">                           &lt;img src&#x3D;&quot;img&#x2F;jiangxuan_3.jpg&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">                           &lt;p&gt;上海直飞三亚5天4晚自由行(春节预售+亲子&#x2F;蜜月&#x2F;休闲游首选+豪华酒店任选+接送机)&lt;&#x2F;p&gt;</span><br><span class="line">                           &lt;font color&#x3D;&quot;red&quot;&gt;&amp;yen; 699&lt;&#x2F;font&gt;</span><br><span class="line">                       &lt;&#x2F;div&gt;</span><br><span class="line">                   &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">           &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;!-- 3.页脚部分--&gt;</span><br><span class="line">   &lt;footer class&#x3D;&quot;container-fluid&quot;&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">           &lt;img src&#x3D;&quot;img&#x2F;footer_service.png&quot; class&#x3D;&quot;img-responsive&quot;&gt;</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line">       &lt;div class&#x3D;&quot;row company&quot;&gt;</span><br><span class="line">           江苏传智播客教育科技股份有限公司 版权所有Copyright 2006-2018, All Rights Reserved 苏ICP备16007882</span><br><span class="line">       &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### BootStrap</span><br><span class="line"></span><br><span class="line">​	twitter公司开源的免费的前端框架。可以简化前端的开发工作，可以实现响应式页面布局。</span><br><span class="line"></span><br><span class="line">​	分为全局样式、组件（有特定功能的一组元素）、Javascript插件（具有一些功能的元素及JS代码）</span><br><span class="line"></span><br><span class="line">#### 基本使用</span><br><span class="line"></span><br><span class="line">​	1、导入文件：(必须导入)</span><br><span class="line"></span><br><span class="line">​		bootstrap.css</span><br><span class="line"></span><br><span class="line">​		jquery-x.x.x.min.js</span><br><span class="line"></span><br><span class="line">​		bootstrap.js</span><br><span class="line"></span><br><span class="line">​	2、全局样式的使用：</span><br><span class="line"></span><br><span class="line">​		编写html文件，再标签中class属性。</span><br><span class="line"></span><br><span class="line">​	3、组件的使用：</span><br><span class="line"></span><br><span class="line">​		复制组件的相关HTML元素，进行修改。 </span><br><span class="line"></span><br><span class="line">​	4、JS插件的使用：</span><br><span class="line"></span><br><span class="line">​		复制插件的HTML元素，如果需要修改动态效果，一般需要额外写一些JS代码，这个代码可以去文档中找。</span><br><span class="line"></span><br><span class="line">#### 栅格系统</span><br><span class="line"></span><br><span class="line">​	把一个页面分成12份，靠一个元素再不同的分辨率下占据的个数来控制元素的大小。</span><br><span class="line"></span><br><span class="line">​	1、有一个容器（容器需要设置一个class属性，container或者container-fluid）</span><br><span class="line"></span><br><span class="line">​	2、需要有行（就是一个div设置一个class属性，row）</span><br><span class="line"></span><br><span class="line">​	3、需要有元素（可以是任意元素，需要指定元素再不同的分辨率下的占的格数，可以设置class属性，col-屏幕类型-占的列数）</span><br><span class="line"></span><br><span class="line">### XML</span><br><span class="line"></span><br><span class="line">​	eXtensiable Markup Language 可扩展标记语言。最初的设计目的是为了取得HTML进行页面的展示。后来发现XML比较适合存储结构化数据。一般用于数据的存储、网络的传输、配置文件。</span><br><span class="line"></span><br><span class="line">​	数据存储被数据库取代。网络传输被JSON取代。现在主要用于配置文件。</span><br><span class="line"></span><br><span class="line">#### 格式</span><br><span class="line"></span><br><span class="line">​	1、文档声明</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;js</span><br><span class="line">&#x2F;&#x2F; 在xml的0行0列编写文档声明</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;</span><br><span class="line">    三个属性：</span><br><span class="line">		version：版本，一般就是1.0，必须的</span><br><span class="line">		encoding：文件的编码格式，注意一定要与文件实际保存的格式一致。</span><br><span class="line">		standalone：是否独立存在（不重要）</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​	2、指令：</span><br><span class="line"></span><br><span class="line">​	3、标签：</span><br><span class="line"></span><br><span class="line">​	4、属性：</span><br><span class="line"></span><br><span class="line">​	5、文本区域：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">&lt;![CDATA[   文本内容   ]]&gt;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">#### 约束</span><br><span class="line"></span><br><span class="line">​	DTD：（早期的约束）</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">导入方式：</span><br><span class="line">&lt;!DOCTYPE 根标签名 SYSTEM &quot;文件路径&quot;&gt;</span><br><span class="line">基本写法：</span><br><span class="line">&lt;!ELEMENT 。。。&gt; 声明一个元素标签</span><br><span class="line">&lt;!ATTLIST ....&gt;  声明一个标签的属性</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">​	Schema：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line">导入：</span><br><span class="line">	1、编写一个根标签，需要跟约束文件中定义的跟标签一致</span><br><span class="line">	2、在根标签中添加一个固定属性</span><br><span class="line">xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">	3、指定约束文件的位置及命名空间</span><br><span class="line">xsi:schemaLocation&#x3D;&quot;约束文件的命名空间 约束文件的位置URL&quot;</span><br><span class="line">约束文件的命名空间可以任意写 http:&#x2F;&#x2F;abc</span><br><span class="line">	4、给约束文件的命名空间起个别名</span><br><span class="line">xmlns&#x3D;&quot;约束文件的命名空间&quot;</span><br><span class="line">​&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>AOP</title>
    <url>/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/</url>
    <content><![CDATA[<h3 id="1-Spring-的-AOP-简介"><a href="#1-Spring-的-AOP-简介" class="headerlink" title="1.Spring 的 AOP 简介"></a>1.Spring 的 AOP 简介</h3><h4 id="1-1-什么是-AOP"><a href="#1-1-什么是-AOP" class="headerlink" title="1.1 什么是 AOP"></a>1.1 什么是 AOP</h4><p>AOP 为 Aspect Oriented Programming 的缩写，意思为面向切面编程，是通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p>
<p>AOP 是 OOP 的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<h4 id="1-2-AOP-的作用及其优势"><a href="#1-2-AOP-的作用及其优势" class="headerlink" title="1.2 AOP 的作用及其优势"></a>1.2 AOP 的作用及其优势</h4><p>作用：在程序运行期间，在不修改源码的情况下对方法进行功能增强(动态代理)</p>
<p>优势：减少重复代码，提高开发效率，并且便于维护</p>
<a id="more"></a>

<h4 id="1-3-AOP-的底层实现"><a href="#1-3-AOP-的底层实现" class="headerlink" title="1.3 AOP 的底层实现"></a>1.3 AOP 的底层实现</h4><p>1.3 补充 装饰者模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  诉求 : 是只写一次 / 我不想修改原来的带代码</span></span><br><span class="line"><span class="comment"> * 装饰者模式:</span></span><br><span class="line"><span class="comment"> *     对dao 进行了一个装饰</span></span><br><span class="line"><span class="comment"> *  优点: 不修改代码的基础上对原有的功能进行增强</span></span><br><span class="line"><span class="comment"> *  缺点:</span></span><br><span class="line"><span class="comment"> *      1) 如果方法增加了 ,代码需要变更</span></span><br><span class="line"><span class="comment"> *      2) 每个接口都需要一个工具类</span></span><br><span class="line"><span class="comment">        3) 没有实现代码只写一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil_UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogUtil_UserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start =System.currentTimeMillis();</span><br><span class="line">        userDao.save();</span><br><span class="line">        <span class="keyword">long</span> end =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao+save&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start =System.currentTimeMillis();</span><br><span class="line">             userDao.update();</span><br><span class="line">        <span class="keyword">long</span> end =System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDao+update&quot;</span>+(end-start));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>实际上，AOP 的底层是通过 Spring 提供的的动态代理技术实现的。在运行期间，Spring通过动态代理技术动态的生成代理对象，代理对象方法执行时进行增强功能的介入，在去调用目标对象的方法，从而完成功能的增强。</p>
<h4 id="1-4-AOP-的动态代理技术"><a href="#1-4-AOP-的动态代理技术" class="headerlink" title="1.4 AOP 的动态代理技术"></a>1.4 AOP 的动态代理技术</h4><p>常用的动态代理技术</p>
<p>JDK 代理 : 基于接口的动态代理技术</p>
<p>cglib 代理：基于父类的动态代理技术</p>
<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%871.png"></p>
<h4 id="1-5-JDK-的动态代理"><a href="#1-5-JDK-的动态代理" class="headerlink" title="1.5 JDK 的动态代理"></a>1.5 JDK 的动态代理</h4><p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/assets/1564629234341.png" alt="1564629234341"></p>
<p>①目标类接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②目标类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③动态代理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Target target = <span class="keyword">new</span> Target(); <span class="comment">//创建目标对象</span></span><br><span class="line"><span class="comment">//创建代理对象</span></span><br><span class="line">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(target.getClass()</span><br><span class="line">.getClassLoader(),target.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> </span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;前置增强代码...&quot;</span>);</span><br><span class="line">                Object invoke = method.invoke(target, args);</span><br><span class="line">                System.out.println(<span class="string">&quot;后置增强代码...&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>④  调用代理对象的方法测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测试,当调用接口的任何方法时，代理对象的代码都无序修改</span></span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%872.png"></p>
<p>1.5) 补充(动态代理解析)</p>
<p>​    1) 没有实现类我们如何创建一个对象</p>
<p>普通方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       TargetInterface  targetInterface=  <span class="keyword">new</span> TargetInterface() &#123;</span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;代理 saving.....&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line">       targetInterface.save();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>动态代理的方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">               TargetInterface.class.getClassLoader(), <span class="comment">//目标对象类加载器</span></span><br><span class="line">              <span class="keyword">new</span> Class[]&#123;TargetInterface.class&#125;, <span class="comment">//目标对象相同的接口字节码对象数组</span></span><br><span class="line">               <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">           <span class="comment">//调用代理对象的任何方法  实质执行的都是invoke方法</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">               String name = method.getName();</span><br><span class="line">               <span class="keyword">if</span>(<span class="string">&quot;save&quot;</span>.equals(name)) &#123;</span><br><span class="line">                   System.out.println(<span class="string">&quot;save...jdbc...&quot;</span>);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125; <span class="comment">// return null;</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       );</span><br></pre></td></tr></table></figure>





<h4 id="1-6-cglib-的动态代理"><a href="#1-6-cglib-的动态代理" class="headerlink" title="1.6 cglib 的动态代理"></a>1.6 cglib 的动态代理</h4><p>①目标类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②动态代理代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Target target = <span class="keyword">new</span> Target(); <span class="comment">//创建目标对象</span></span><br><span class="line">Enhancer enhancer = <span class="keyword">new</span> Enhancer();   <span class="comment">//创建增强器</span></span><br><span class="line">enhancer.setSuperclass(Target.class); <span class="comment">//设置父类</span></span><br><span class="line">enhancer.setCallback(<span class="keyword">new</span> MethodInterceptor() &#123; <span class="comment">//设置回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, </span></span></span><br><span class="line"><span class="function"><span class="params">    MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强....&quot;</span>);</span><br><span class="line">        Object invoke = method.invoke(target, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;后置代码增强....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">Target proxy = (Target) enhancer.create(); <span class="comment">//创建代理对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③调用代理对象的方法测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试,当调用接口的任何方法时，代理对象的代码都无序修改</span></span><br><span class="line">proxy.method();</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%873.png"></p>
<p>1.6)(补) 动态代理实现工具类</p>
<ol>
<li><p>编写一个工具类</p>
</li>
<li><p>编写一个方法,接收一个Object 对象</p>
</li>
<li><p>使用动态代理增强对象,然后讲增强后的对象返回</p>
</li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil_common</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(<span class="keyword">final</span> Object obj)</span></span>&#123;<span class="comment">//UserDaoImpl</span></span><br><span class="line">        <span class="comment">// 动态</span></span><br><span class="line">       <span class="keyword">return</span>  Proxy.newProxyInstance(obj.getClass().getClassLoader(),obj.getClass().getInterfaces(),<span class="keyword">new</span> InvocationHandler()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">               <span class="comment">// 用反射让方法通用</span></span><br><span class="line">                <span class="keyword">long</span> start =System.currentTimeMillis();</span><br><span class="line">                <span class="comment">//--------------------</span></span><br><span class="line">                Object ret = method.invoke(obj, args); <span class="comment">// ret= obj.method(args)</span></span><br><span class="line">                <span class="comment">//--------------------</span></span><br><span class="line">                <span class="keyword">long</span> end =System.currentTimeMillis();</span><br><span class="line">                System.out.println(obj.getClass().getName()+<span class="string">&quot;:&quot;</span>+(end-start));</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h4 id="1-7-AOP-相关概念"><a href="#1-7-AOP-相关概念" class="headerlink" title="1.7 AOP 相关概念"></a>1.7 AOP 相关概念</h4><p>Spring 的 AOP 实现底层就是对上面的动态代理的代码进行了封装，封装后我们只需要对需要关注的部分进行代码编写，并通过配置的方式完成指定目标的方法增强。</p>
<p>在正式讲解 AOP 的操作之前，我们必须理解 AOP 的相关术语，常用的术语如下：</p>
<ul>
<li>Target（目标对象）：代理的目标对象</li>
<li>Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</li>
<li>Joinpoint（连接点）：所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法，因为spring只支持方法类型的连接点</li>
<li>Pointcut（切入点）：所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义</li>
<li>Advice（通知/ 增强）：所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知</li>
<li>Aspect（切面）：是切入点和通知（引介）的结合</li>
<li>Weaving（织入）：是指把增强应用到目标对象来创建新的代理对象的过程。spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入</li>
</ul>
<h4 id="1-8-AOP-开发明确的事项"><a href="#1-8-AOP-开发明确的事项" class="headerlink" title="1.8 AOP 开发明确的事项"></a>1.8 AOP 开发明确的事项</h4><h5 id="1-需要编写的内容"><a href="#1-需要编写的内容" class="headerlink" title="1)需要编写的内容"></a>1)需要编写的内容</h5><ul>
<li>编写核心业务代码（目标类的目标方法）</li>
<li>编写切面类(通知类)，切面类中有通知(增强功能方法) </li>
<li>在配置文件中，配置织入关系，即将哪些通知与哪些连接点进行结合</li>
</ul>
<h5 id="2）AOP-技术实现的内容"><a href="#2）AOP-技术实现的内容" class="headerlink" title="2）AOP 技术实现的内容"></a>2）AOP 技术实现的内容</h5><p>Spring 框架监控切入点方法的执行。一旦监控到切入点方法被运行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码逻辑运行。</p>
<h5 id="3）AOP-底层使用哪种代理方式"><a href="#3）AOP-底层使用哪种代理方式" class="headerlink" title="3）AOP 底层使用哪种代理方式"></a>3）AOP 底层使用哪种代理方式</h5><p>在 spring 中，框架会根据目标类是否实现了接口来决定采用哪种动态代理的方式。</p>
<h4 id="1-9-知识要点"><a href="#1-9-知识要点" class="headerlink" title="1.9 知识要点"></a>1.9 知识要点</h4><ul>
<li><p>aop：面向切面编程</p>
</li>
<li><p>aop底层实现：基于JDK的动态代理 和 基于Cglib的动态代理</p>
</li>
<li><p>aop的重点概念：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Target 的所有方法（目标对象）：代理的目标对象</span><br><span class="line"> Proxy （代理）：一个类被 AOP 织入增强后，就产生一个结果代理类</span><br><span class="line"> Joinpoint（连接点）:Target 的所有方法</span><br><span class="line">Pointcut（切入点）：被增强的方法 (del没有被增强,就不是pointcut)  (Joinpoint&gt;Pointcut)</span><br><span class="line"></span><br><span class="line">Advice（通知&#x2F; 增强）：封装增强业务逻辑的方法</span><br><span class="line">Aspect（切面）：切点+通知  &lt;!--织入的结果叫切面--&gt;</span><br><span class="line">Weaving（织入）：将切点与通知结合的过程</span><br></pre></td></tr></table></figure>
</li>
<li><p>开发明确事项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">谁是切点（切点表达式配置）dao</span><br><span class="line">谁是通知（切面类中的增强方法） advice</span><br><span class="line">将切点和通知进行织入配置</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-基于-XML-的-AOP-开发"><a href="#2-基于-XML-的-AOP-开发" class="headerlink" title="2. 基于 XML 的 AOP 开发"></a>2. 基于 XML 的 AOP 开发</h3><h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><p>①导入 AOP 相关坐标</p>
<p>②创建目标接口和目标类（内部有切点）</p>
<p>③创建通知类（内部有增强方法）</p>
<p>④将目标类和切面类的对象创建权交给 spring</p>
<p>⑤在 applicationContext.xml 中配置织入关系</p>
<p>⑥测试代码</p>
<p>①导入 AOP 相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入spring的context坐标，context依赖aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- aspectj的织入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②创建目标接口和目标类（内部有切点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③创建切面类（内部有增强方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④将目标类和切面类的对象创建权交给 spring</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置目标类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置通知类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑤在 applicationContext.xml 中配置织入关系</p>
<p>导入aop命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑤在 applicationContext.xml 中配置织入关系</p>
<p>配置切点表达式和前置增强的织入关系</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置Target的method方法执行时要进行myAspect的before方法前置增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void com.itheima.aop.Target.method())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑥测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑦测试结果</p>
<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%874.png"></p>
<h4 id="2-2-XML-配置-AOP-详解"><a href="#2-2-XML-配置-AOP-详解" class="headerlink" title="2.2 XML 配置 AOP 详解"></a>2.2 XML 配置 AOP 详解</h4><h5 id="1-切点表达式的写法"><a href="#1-切点表达式的写法" class="headerlink" title="1) 切点表达式的写法"></a>1) 切点表达式的写法</h5><p>表达式语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure>

<ul>
<li>访问修饰符可以省略</li>
<li>返回值类型、包名、类名、方法名可以使用星号*  代表任意</li>
<li>包名与类名之间一个点 . 代表当前包下的类，两个点 .. 表示当前包及其子包下的类</li>
<li>参数列表可以使用两个点 .. 表示任意个数，任意类型的参数列表</li>
</ul>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">全部不省略</span><br><span class="line">     public void com.itcast.dao.UserDaoImpl.save()</span><br><span class="line">     修饰符可以省</span><br><span class="line">     void com.itcast.dao.UserDaoImpl.save()</span><br><span class="line">      方法名称可以使用通配符</span><br><span class="line">      void com.itcast.dao.UserDaoImpl.*()</span><br><span class="line">       void com.itcast.dao.UserDaoImpl.find*()</span><br><span class="line">       类 名称可以使用通配符</span><br><span class="line">       void com.itcast.dao.*.*()</span><br><span class="line">        void com.itcast.dao.UserDaoI*.*()</span><br><span class="line">         包 名称可以使用通配符,.. 表示当前包及其子包</span><br><span class="line">          void *..*.*()</span><br><span class="line">         返回值可以使用通配符</span><br><span class="line">          * *..*.*()</span><br><span class="line"></span><br><span class="line">        参数</span><br><span class="line">         基本类型  直接写名称</span><br><span class="line">         对象类型,写全类名</span><br><span class="line">         .. 表示有无参数均可</span><br></pre></td></tr></table></figure>

<h5 id="2-通知的类型"><a href="#2-通知的类型" class="headerlink" title="2) 通知的类型"></a>2) 通知的类型</h5><p>通知的配置语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:通知类型</span> <span class="attr">method</span>=<span class="string">“切面类中方法名”</span> <span class="attr">pointcut</span>=<span class="string">“切点表达式</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">aop:通知类型</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%875.png"></p>
<p>补充环绕通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">     Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类名:&quot;</span>+pjp.getTarget().getClass().getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;方法:&quot;</span>+ pjp.getSignature().getName());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;before....&quot;</span>);</span><br><span class="line">            obj=  pjp.proceed(pjp.getArgs());<span class="comment">//  userDao.save()</span></span><br><span class="line">            System.out.println(<span class="string">&quot;afterRetruning....&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;afterThrowing....&quot;</span>);</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;after....&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>补充1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void before(JoinPoint pjp) &#123;</span><br><span class="line">        System.out.println(&quot;类名:&quot;+pjp.getTarget().getClass().getName());</span><br><span class="line">        System.out.println(&quot;方法:&quot;+ pjp.getSignature().getName());</span><br><span class="line">        System.out.println(&quot;before....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补充2 获取返回值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:after-returning method&#x3D;&quot;afterRetruning&quot; returning&#x3D;&quot;args&quot; pointcut&#x3D;&quot;execution(* com.itheima..*.*(..))&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line">public void afterRetruning(JoinPoint pjp,Object args) &#123;</span><br><span class="line">        System.out.println(&quot;afterRetruning....&quot;+args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补充3 获取异常信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;aop:after-throwing method&#x3D;&quot;afterThrowing&quot; throwing&#x3D;&quot;ex&quot; pointcut&#x3D;&quot;execution(* com.itheima..*.*(..))&quot;&#x2F;&gt;</span><br><span class="line">public void afterThrowing(Exception ex) &#123;</span><br><span class="line">        System.out.println(&quot;afterThrowing....&quot;+ex.getMessage()+&quot;.............&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-切点表达式的抽取"><a href="#3-切点表达式的抽取" class="headerlink" title="3) 切点表达式的抽取"></a>3) 切点表达式的抽取</h5><p>当多个增强的切点表达式相同时，可以将切点表达式进行抽取，在增强中使用 pointcut-ref 属性代替 pointcut 属性来引用抽取后的切点表达式。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用myAspect的Bean为切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.aop.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-知识要点"><a href="#2-3-知识要点" class="headerlink" title="2.3 知识要点"></a>2.3 知识要点</h4><ul>
<li>aop织入的配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">“切面类”</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">“通知方法名称”</span> <span class="attr">pointcut</span>=<span class="string">“切点表达式</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通知的类型：前置通知、后置通知、环绕通知、异常抛出通知、最终通知</li>
<li>切点表达式的写法：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">execution([修饰符] 返回值类型 包名.类名.方法名(参数))</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">      全限定 public void com.itheima.dao.UserDaoImpl.save()</span><br><span class="line">   1) 修饰符可以省略</span><br><span class="line">               void com.itheima.dao.UserDaoImpl.save()</span><br><span class="line">   2) 返回值类型可以使用*</span><br><span class="line">                 * com.itheima.dao.UserDaoImpl.save()</span><br><span class="line">   3) 包名可以使用* 代替,但是有几级包要写几个*.</span><br><span class="line"></span><br><span class="line">                     * *.*.*.UserDaoImpl.save()</span><br><span class="line">   4) 可以使用 *.. 表示包及其子包</span><br><span class="line"></span><br><span class="line">                     * *..UserDaoImpl.save()</span><br><span class="line">     5) 类名 可以使用* 代替</span><br><span class="line"></span><br><span class="line">                     * *..*.save()</span><br><span class="line">     6) 方法名 可以使用* 代替</span><br><span class="line"></span><br><span class="line">                     * *..*.*()</span><br><span class="line">       7) 参数 ,如果不写 表示无参的函数</span><br><span class="line">          如果是基本类型则写基本类型</span><br><span class="line">          如果是对象类型,应该写 全限定类名 (包名.类名)</span><br><span class="line">           可以使用.. 表示 所有参数,有参无参均可</span><br><span class="line">                     * *..*.*(..)</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure>



<h3 id="3-基于注解的-AOP-开发"><a href="#3-基于注解的-AOP-开发" class="headerlink" title="3.基于注解的 AOP 开发"></a>3.基于注解的 AOP 开发</h3><h4 id="3-1-快速入门"><a href="#3-1-快速入门" class="headerlink" title="3.1 快速入门"></a>3.1 快速入门</h4><p>基于注解的aop开发步骤：</p>
<p>①创建目标接口和目标类（内部有切点）</p>
<p>②创建切面类（内部有增强方法）</p>
<p>③将目标类和切面类的对象创建权交给 spring</p>
<p>④在切面类中使用注解配置织入关系</p>
<p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p>
<p>⑥测试</p>
<p>①创建目标接口和目标类（内部有切点）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>②创建切面类（内部有增强方法)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//前置增强方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③将目标类和切面类的对象创建权交给 spring</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Target running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④在切面类中使用注解配置织入关系</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑤在配置文件中开启组件扫描和 AOP 的自动代理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.aop&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--aop的自动代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑥测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        target.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑦测试结果</p>
<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%876.png"></p>
<h4 id="3-2-注解配置-AOP-详解"><a href="#3-2-注解配置-AOP-详解" class="headerlink" title="3.2 注解配置 AOP 详解"></a>3.2 注解配置 AOP 详解</h4><h5 id="1-注解通知的类型"><a href="#1-注解通知的类型" class="headerlink" title="1) 注解通知的类型"></a>1) 注解通知的类型</h5><p>通知的配置语法：@通知注解(“切点表达式”)</p>
<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%877.png"></p>
<h5 id="2-切点表达式的抽取"><a href="#2-切点表达式的抽取" class="headerlink" title="2) 切点表达式的抽取"></a>2) 切点表达式的抽取</h5><p>同 xml配置<br>aop 一样，我们可以将切点表达式抽取。抽取方式是在切面内定义方法，在该方法上使用@Pointcut注解定义切点表达式，然后在在增强注解中进行引用。具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">@<span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;MyAspect.myPoint()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置代码增强.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h4><ul>
<li>注解aop开发步骤</li>
</ul>
<p>①使用@Aspect标注切面类</p>
<p>②使用@通知注解标注通知方法</p>
<p>③在配置文件中配置aop自动代理<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a></p>
<ul>
<li>通知注解类型</li>
</ul>
<p><img src="/2019/10/17/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191017AOP/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/03spring03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%878.png"></p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>JdbcTemplate基本使用&amp;声明式事务</title>
    <url>/2019/10/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191018JdbcTemplate%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="JdbcTemplate基本使用"><a href="#JdbcTemplate基本使用" class="headerlink" title="JdbcTemplate基本使用"></a>JdbcTemplate基本使用</h1><h2 id="01-JdbcTemplate基本使用-概述-了解"><a href="#01-JdbcTemplate基本使用-概述-了解" class="headerlink" title="01-JdbcTemplate基本使用-概述(了解)"></a>01-JdbcTemplate基本使用-概述(了解)</h2><p>JdbcTemplate是spring框架中提供的一个对象，是对原始繁琐的Jdbc API对象的简单封装。spring框架为我们提供了很多的操作模板类。例如：操作关系型数据的JdbcTemplate和HibernateTemplate，操作nosql数据库的RedisTemplate，操作消息队列的JmsTemplate等等。</p>
<h2 id="02-JdbcTemplate基本使用-开发步骤-理解"><a href="#02-JdbcTemplate基本使用-开发步骤-理解" class="headerlink" title="02-JdbcTemplate基本使用-开发步骤(理解)"></a>02-JdbcTemplate基本使用-开发步骤(理解)</h2><p>①导入spring-jdbc和spring-tx坐标</p>
<p>②创建数据库表和实体</p>
<p>③创建JdbcTemplate对象</p>
<p>④执行数据库操作</p>
<a id="more"></a>

<h2 id="03-JdbcTemplate基本使用-快速入门代码实现-应用"><a href="#03-JdbcTemplate基本使用-快速入门代码实现-应用" class="headerlink" title="03-JdbcTemplate基本使用-快速入门代码实现(应用)"></a>03-JdbcTemplate基本使用-快速入门代码实现(应用)</h2><p>导入spring-jdbc和spring-tx坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>itheima_spring_jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>itheima_spring_jdbc Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建数据库表和实体</p>
<p><img src="/2019/10/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191018JdbcTemplate%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/04spring04/%E7%AC%94%E8%AE%B0/img/1.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String getNa <span class="title">me</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建JdbcTemplate对象</p>
<p>执行数据库操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//测试JdbcTemplate开发步骤</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源对象</span></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate();</span><br><span class="line">        <span class="comment">//设置数据源对象  知道数据库在哪</span></span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//执行操作</span></span><br><span class="line">        <span class="keyword">int</span> row = jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">        System.out.println(row);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="04-JdbcTemplate基本使用-spring产生模板对象分析-理解"><a href="#04-JdbcTemplate基本使用-spring产生模板对象分析-理解" class="headerlink" title="04-JdbcTemplate基本使用-spring产生模板对象分析(理解)"></a>04-JdbcTemplate基本使用-spring产生模板对象分析(理解)</h2><p>我们可以将JdbcTemplate的创建权交给Spring，将数据源DataSource的创建权也交给Spring，在Spring容器内部将数据源DataSource注入到JdbcTemplate模版对象中,然后通过Spring容器获得JdbcTemplate对象来执行操作。</p>
<h2 id="05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用"><a href="#05-JdbcTemplate基本使用-spring产生模板对象代码实现-应用" class="headerlink" title="05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)"></a>05-JdbcTemplate基本使用-spring产生模板对象代码实现(应用)</h2><p>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="comment">//测试Spring产生jdbcTemplate对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> PropertyVetoException </span>&#123;</span><br><span class="line">       ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       JdbcTemplate jdbcTemplate = app.getBean(JdbcTemplate.class);</span><br><span class="line">       <span class="keyword">int</span> row = jdbcTemplate.update(<span class="string">&quot;insert into account values(?,?)&quot;</span>, <span class="string">&quot;lisi&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">       System.out.println(row);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用"><a href="#06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc-properties）-应用" class="headerlink" title="06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)"></a>06-JdbcTemplate基本使用-spring产生模板对象代码实现（抽取jdbc.properties）(应用)</h2><p>将数据库的连接信息抽取到外部配置文件中，和spring的配置文件分离开，有利于后期维护</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>配置文件修改为:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jdbc模板对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="07-JdbcTemplate基本使用-常用操作-更新操作-应用"><a href="#07-JdbcTemplate基本使用-常用操作-更新操作-应用" class="headerlink" title="07-JdbcTemplate基本使用-常用操作-更新操作(应用)"></a>07-JdbcTemplate基本使用-常用操作-更新操作(应用)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateCRUDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//修改更新</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=? where name=?&quot;</span>,<span class="number">10000</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from account where name=?&quot;</span>,<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="08-JdbcTemplate基本使用-常用操作-查询操作-应用"><a href="#08-JdbcTemplate基本使用-常用操作-查询操作-应用" class="headerlink" title="08-JdbcTemplate基本使用-常用操作-查询操作(应用)"></a>08-JdbcTemplate基本使用-常用操作-查询操作(应用)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateCRUDTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">//聚合查询</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Long count = jdbcTemplate.queryForObject(<span class="string">&quot;select count(*) from account&quot;</span>, Long.class);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//查询一个</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Account account = jdbcTemplate.queryForObject(<span class="string">&quot;select * from account where name=?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class), <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//查询所有</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = jdbcTemplate.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Account&gt;(Account.class));</span><br><span class="line">        System.out.println(accountList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="09-JdbcTemplate基本使用-知识要点-理解，记忆"><a href="#09-JdbcTemplate基本使用-知识要点-理解，记忆" class="headerlink" title="09-JdbcTemplate基本使用-知识要点(理解，记忆)"></a>09-JdbcTemplate基本使用-知识要点(理解，记忆)</h2><p>①导入spring-jdbc和spring-tx坐标</p>
<p>②创建数据库表和实体</p>
<p>③创建JdbcTemplate对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate &#x3D; newJdbcTemplate();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>              jdbcTemplate.setDataSource(dataSource);</code></pre>
<p>④执行数据库操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">更新操作：</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.update (sql,params)</span><br><span class="line"></span><br><span class="line">查询操作：</span><br><span class="line"></span><br><span class="line">    jdbcTemplate.query (sql,Mapper,params)</span><br><span class="line"></span><br><span class="line">jdbcTemplate.queryForObject(sql,Mapper,params)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="声明式事务控制"><a href="#声明式事务控制" class="headerlink" title="声明式事务控制"></a>声明式事务控制</h1><h2 id="1-编程式事务控制相关对象"><a href="#1-编程式事务控制相关对象" class="headerlink" title="1. 编程式事务控制相关对象"></a>1. 编程式事务控制相关对象</h2><h3 id="1-1-PlatformTransactionManager"><a href="#1-1-PlatformTransactionManager" class="headerlink" title="1.1 PlatformTransactionManager"></a>1.1 PlatformTransactionManager</h3><p>PlatformTransactionManager 接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法。</p>
<p>注意：</p>
<p>PlatformTransactionManager 是接口类型，不同的 Dao 层技术则有不同的实现类，例如：Dao 层技术是jdbc 或 mybatis 时：org.springframework.jdbc.datasource.DataSourceTransactionManager </p>
<p>Dao 层技术是hibernate时：org.springframework.orm.hibernate5.HibernateTransactionManager</p>
<h3 id="1-2-TransactionDefinition"><a href="#1-2-TransactionDefinition" class="headerlink" title="1.2 TransactionDefinition"></a>1.2 TransactionDefinition</h3><p>TransactionDefinition 是事务的定义信息对象</p>
<h4 id="1-事务隔离级别"><a href="#1-事务隔离级别" class="headerlink" title="1. 事务隔离级别"></a>1. 事务隔离级别</h4><p>设置隔离级别，可以解决事务并发产生的问题，如脏读、不可重复读和虚读。</p>
<ul>
<li>ISOLATION_DEFAULT</li>
<li>ISOLATION_READ_UNCOMMITTED</li>
<li>ISOLATION_READ_COMMITTED(oracle)</li>
<li>ISOLATION_REPEATABLE_READ(mysql)</li>
<li>ISOLATION_SERIALIZABLE</li>
</ul>
<h4 id="2-事务传播行为"><a href="#2-事务传播行为" class="headerlink" title="2. 事务传播行为"></a>2. 事务传播行为</h4><ul>
<li><strong>REQUIRED：如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</strong></li>
<li><strong>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</strong></li>
<li>MANDATORY：使用当前的事务，如果当前没有事务，就抛出异常</li>
<li>REQUERS_NEW：新建事务，如果当前在事务中，把当前事务挂起。</li>
<li>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li>
<li>NEVER：以非事务方式运行，如果当前存在事务，抛出异常</li>
<li>NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作</li>
<li>超时时间：默认值是-1，没有超时限制。如果有，以秒为单位进行设置</li>
<li>是否只读：建议查询时设置为只读</li>
</ul>
<h3 id="1-3-TransactionStatus"><a href="#1-3-TransactionStatus" class="headerlink" title="1.3 TransactionStatus"></a>1.3 TransactionStatus</h3><p>TransactionStatus 接口提供的是事务具体的运行状态，</p>
<h3 id="1-4-知识要点"><a href="#1-4-知识要点" class="headerlink" title="1.4 知识要点"></a>1.4 知识要点</h3><p>编程式事务控制三大对象</p>
<ul>
<li>PlatformTransactionManager</li>
<li>TransactionDefinition</li>
<li>TransactionStatus</li>
</ul>
<h2 id="2-基于-XML-的声明式事务控制"><a href="#2-基于-XML-的声明式事务控制" class="headerlink" title="2 基于 XML 的声明式事务控制"></a>2 基于 XML 的声明式事务控制</h2><h3 id="2-1-什么是声明式事务控制"><a href="#2-1-什么是声明式事务控制" class="headerlink" title="2.1 什么是声明式事务控制"></a>2.1 什么是声明式事务控制</h3><p>Spring 的声明式事务顾名思义就是采用声明的方式来处理事务。这里所说的声明，就是指在配置文件中声明，用在 Spring 配置文件中声明式的处理事务来代替代码式的处理事务。</p>
<p><strong>声明式事务处理的作用</strong></p>
<ul>
<li>事务管理不侵入开发的组件。具体来说，业务逻辑对象就不会意识到正在事务管理之中，事实上也应该如此，因为事务管理是属于系统层面的服务，而不是业务逻辑的一部分，如果想要改变事务管理策划的话，也只需要在定义文件中重新配置即可</li>
<li>在不需要事务管理的时候，只要在设定文件上修改一下，即可移去事务管理服务，无需改变代码重新编译，这样维护起来极其方便</li>
</ul>
<p><strong>注意：Spring 声明式事务控制底层就是AOP。</strong></p>
<h3 id="2-2-声明式事务控制的实现"><a href="#2-2-声明式事务控制的实现" class="headerlink" title="2.2 声明式事务控制的实现"></a>2.2 声明式事务控制的实现</h3><p>声明式事务控制明确事项：</p>
<ul>
<li>谁是切点？</li>
<li>谁是通知？</li>
<li>配置切面？</li>
</ul>
<p>①引入tx命名空间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>②配置事务增强</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">transactionManager ? 为什们要配置 ,因为是核心工具类必须配置,干活的</span></span><br><span class="line"><span class="comment">   dataSource: 需要传入,因为需要增强 ,比如开启事务,提交,回滚等</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--transactionManager  灰色表示默认,可以省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>③配置事务 AOP 织入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--advisor  , 事务是所有项目都碰到的问题,spring 专门为 事务开发了一个标签 配置事务--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--思考 : 事务应该在哪儿控制 ? service, 是处理业务逻辑的,所以需要处理事务--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>④测试事务控制转账业务代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">    accountDao.out(outMan,money);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    accountDao.in(inMan,money);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-3-切点方法的事务参数的配置"><a href="#2-3-切点方法的事务参数的配置" class="headerlink" title="2.3 切点方法的事务参数的配置"></a>2.3 切点方法的事务参数的配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--事务增强配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中，<a href="tx:method">tx:method</a> 代表切点方法的事务参数的配置，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer&quot;</span> <span class="attr">isolation</span>=<span class="string">&quot;REPEATABLE_READ&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span> <span class="attr">timeout</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>name：切点方法名称</li>
<li>isolation:事务的隔离级别</li>
<li>propogation：事务的传播行为</li>
<li>timeout：超时时间</li>
<li>read-only：是否只读</li>
</ul>
<p><img src="/2019/10/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191018JdbcTemplate%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/04spring04/%E7%AC%94%E8%AE%B0/assets/1567930150950.png" alt="1567930150950"></p>
<h3 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h3><p><strong>声明式事务控制的配置要点</strong></p>
<ul>
<li>平台事务管理器配置</li>
<li>事务通知的配置</li>
<li>事务aop织入的配置</li>
</ul>
<h2 id="3-基于注解的声明式事务控制"><a href="#3-基于注解的声明式事务控制" class="headerlink" title="3 基于注解的声明式事务控制"></a>3 基于注解的声明式事务控制</h2><h3 id="3-1-使用注解配置声明式事务控制"><a href="#3-1-使用注解配置声明式事务控制" class="headerlink" title="3.1 使用注解配置声明式事务控制"></a>3.1 使用注解配置声明式事务控制</h3><ol>
<li>编写 AccoutDao</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;accountDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String outMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money-? where name=?&quot;</span>,money,outMan);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;update account set money=money+? where name=?&quot;</span>,money,inMan);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写 AccoutService</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String outMan, String inMan, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(outMan,money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(inMan,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编写 applicationContext.xml 配置文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!—之前省略datsSource、jdbcTemplate、平台事务管理器的配置--</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--组件扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--事务的注解驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2-注解配置声明式事务控制解析"><a href="#3-2-注解配置声明式事务控制解析" class="headerlink" title="3.2 注解配置声明式事务控制解析"></a>3.2 注解配置声明式事务控制解析</h3><p>①使用 @Transactional 在需要进行事务控制的类或是方法上修饰，注解可用的属性同 xml 配置方式，例如隔离级别、传播行为等。</p>
<p>②注解使用在类上，那么该类下的所有方法都使用同一套注解参数配置。</p>
<p>③使用在方法上，不同的方法可以采用不同的事务参数配置。</p>
<p>④Xml配置文件中要开启事务的注解驱动&lt;tx:annotation-driven /&gt;</p>
<h3 id="3-3-知识要点"><a href="#3-3-知识要点" class="headerlink" title="3.3 知识要点"></a>3.3 知识要点</h3><p><strong>注解声明式事务控制的配置要点</strong></p>
<ul>
<li>平台事务管理器配置（xml方式）</li>
<li>事务通知的配置（@Transactional注解配置）</li>
<li>事务注解驱动的配置 <a href="tx:annotation-driven/">tx:annotation-driven/</a></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>springmvc_Spring与Web环境集成</title>
    <url>/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<h2 id="关于创建项目与启动tomcat"><a href="#关于创建项目与启动tomcat" class="headerlink" title="关于创建项目与启动tomcat"></a>关于创建项目与启动tomcat</h2><h3 id="Idea-创建web-项目"><a href="#Idea-创建web-项目" class="headerlink" title="Idea 创建web 项目"></a>Idea 创建web 项目</h3><p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/assets/Idea%E5%88%9B%E5%BB%BAweb%E9%A1%B9%E7%9B%AE.png"></p>
<a id="more"></a>

<h3 id="Idea-插件"><a href="#Idea-插件" class="headerlink" title="Idea 插件"></a>Idea 插件</h3><p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/assets/1563458272642.png"></p>
<h3 id="maven-tomcat-插件坐标"><a href="#maven-tomcat-插件坐标" class="headerlink" title="maven tomcat 插件坐标"></a>maven tomcat 插件坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--maven插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--jdk编译插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--tomcat插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- tomcat7的插件， 不同tomcat版本这个也不一样 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 通过maven tomcat7:run运行项目时，访问项目的端口号 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 项目访问路径  本例：localhost:9090,  如果配置的aa， 则访问路径为localhost:9090/aa--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/travel<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                     <span class="comment">&lt;!--中文乱码--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">-----------------------------</span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        test : jar 只能在测试包使用</span></span><br><span class="line"><span class="comment">        compile: 编译时有效,运行时也有效,测试时有效</span></span><br><span class="line"><span class="comment">        runtime:  编译时无效,运行时也有效,</span></span><br><span class="line"><span class="comment">        provided  编译时有效,运行时无效,</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-Spring与Web环境集成"><a href="#1-Spring与Web环境集成" class="headerlink" title="1. Spring与Web环境集成"></a>1. Spring与Web环境集成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">为什么要创建  ContextLoaderListener?</span><br><span class="line">    为了保证只初始化一次配置文件</span><br><span class="line">为什么 要配置  &lt;context-param&gt; ?</span><br><span class="line">    为了解耦,配置文件名称可以配置,不写死</span><br><span class="line">为什么抽取 WebApplicationContextUtils?</span><br><span class="line">方便分工合作,</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--  web 提供的配置全局变量的方法--&gt;</span><br><span class="line">&lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;name&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;zhangsan&lt;&#x2F;param-value&gt;</span><br><span class="line">&lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app version&#x3D;&quot;3.0&quot; xmlns&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee http:&#x2F;&#x2F;java.sun.com&#x2F;xml&#x2F;ns&#x2F;javaee&#x2F;web-app_3_0.xsd&quot;&gt;&lt;!-- 配置监听器 ,因为我们的自定义工具类和spring 提供的一样,所以配置时要注意  --&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="1-1-ApplicationContext应用上下文获取方式"><a href="#1-1-ApplicationContext应用上下文获取方式" class="headerlink" title="1.1 ApplicationContext应用上下文获取方式"></a>1.1 ApplicationContext应用上下文获取方式</h3><p>应用上下文对象是通过new ClasspathXmlApplicationContext(spring配置文件) 方式获取的，但是每次从容器中获得Bean时都要编写new ClasspathXmlApplicationContext(spring配置文件) ，这样的弊端是配置文件加载多次，应用上下文对象创建多次。</p>
<p>在Web项目中，可以使用ServletContextListener监听Web应用的启动，我们可以在Web应用启动时，就加载Spring的配置文件，创建应用上下文对象ApplicationContext，在将其存储到最大的域servletContext域中，这样就可以在任意位置从域中获得应用上下文ApplicationContext对象了。</p>
<h3 id="1-2-Spring提供获取应用上下文的工具"><a href="#1-2-Spring提供获取应用上下文的工具" class="headerlink" title="1.2 Spring提供获取应用上下文的工具"></a>1.2 Spring提供获取应用上下文的工具</h3><p>上面的分析不用手动实现，Spring提供了一个监听器ContextLoaderListener就是对上述功能的封装，该监听器内部加载Spring配置文件，创建应用上下文对象，并存储到ServletContext域中，提供了一个客户端工具WebApplicationContextUtils供使用者获得应用上下文对象。</p>
<p>所以我们需要做的只有两件事：</p>
<p>①在web.xml中配置ContextLoaderListener监听器（导入spring-web坐标）</p>
<p>②使用WebApplicationContextUtils获得应用上下文对象ApplicationContext</p>
<h3 id="1-3-导入Spring集成web的坐标"><a href="#1-3-导入Spring集成web的坐标" class="headerlink" title="1.3 导入Spring集成web的坐标"></a>1.3 导入Spring集成web的坐标</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-4-配置ContextLoaderListener监听器"><a href="#1-4-配置ContextLoaderListener监听器" class="headerlink" title="1.4 配置ContextLoaderListener监听器"></a>1.4 配置ContextLoaderListener监听器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">       org.springframework.web.context.ContextLoaderListener</span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-通过工具获得应用上下文对象"><a href="#1-5-通过工具获得应用上下文对象" class="headerlink" title="1.5 通过工具获得应用上下文对象"></a>1.5 通过工具获得应用上下文对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext applicationContext =    </span><br><span class="line">    WebApplicationContextUtils.getWebApplicationContext(servletContext);</span><br><span class="line">    Object obj = applicationContext.getBean(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>知识要点</strong></p>
<p>Spring集成web环境步骤</p>
<p>​      ①配置ContextLoaderListener监听器</p>
<p>​      ②使用WebApplicationContextUtils获得应用上下文</p>
<h3 id="1-6-JAVA-WEB-三大组件-补充"><a href="#1-6-JAVA-WEB-三大组件-补充" class="headerlink" title="1.6) JAVA WEB 三大组件(补充)"></a>1.6) JAVA WEB 三大组件(补充)</h3><h4 id="Sevlet"><a href="#Sevlet" class="headerlink" title="Sevlet"></a>Sevlet</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">广义上说,servlet是运行在web服务器或应用服务器的程序,用来处理客户端请求的动态资源.Servlet &#x3D; Service + Applet，表示小服务程序。狭义上来说,狭义的Servlet是指Java语言实现的一个接口，该接口有一个实现类为GenericServlet,该实现类有一个子类为HttpServlet,而我们实际开发中用的比较多的,就是我们通过根据具体的业务需求而继承HttpServlet来创建的servlet.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)实现Servlet接口</span><br><span class="line">2)继承GenericServlet类</span><br><span class="line">3)继承HttpServlet类.</span><br><span class="line">通常最后一种用的比较多,在开发中,可以自己手动地创建servlet</span><br></pre></td></tr></table></figure>

<p>配置方式 web.xml 中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servlet的全限定名,即包含了包名了的<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servlet名称<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>匹配路径,例如/addServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原理概念</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet接口 中定义了三个方法</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="comment">// 初始化对象时调用</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span>   <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span><span class="comment">//处理 http 请求</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;<span class="comment">// 销毁时</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中 </span><br><span class="line">service 方法时任何形式的请求都会进入该方法</span><br><span class="line">而 HttpServlet 对方法进行了区分, get 请求 执行doGet post 执行doPost</span><br><span class="line">但是不论那个方法最红执行的都是 service 方法</span><br></pre></td></tr></table></figure>

<h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>  Filter称之为过滤器，是用来做一些拦截的任务， 在Servlet接受请求之前，做一些事情，如果不满足限定，可以拒绝进入Servlet</p>
<p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/img/1563503145077.png" alt="1563503145077"></p>
<p>执行流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一个http请求过来之后</span><br><span class="line">- 首先进入filter，执行相关业务逻辑</span><br><span class="line">- 若判定通行，则进入Servlet逻辑，Servlet执行完毕之后，又返回Filter，最后在返回给请求方</span><br><span class="line">- 判定失败，直接返回，不需要将请求发给Servlet</span><br></pre></td></tr></table></figure>

<p>应用场景</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)可以考虑在filter层做权限拦截</span><br><span class="line">2)拦截所有的请求统一编码处理,</span><br></pre></td></tr></table></figure>

<p>配置方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharchaterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.itcast.travel.web.filter.CharchaterFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharchaterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Javaweb中的监听器是用于监听web常见对象HttpServletRequest,HttpSession,ServletContext</span><br><span class="line">监听web对象创建与销毁的监听器</span><br><span class="line">   1) ServletContext创建与销毁要监听ServletContextListener</span><br><span class="line">   2) Httpsession的创建与与销毁监听HttpSessionListener</span><br><span class="line">   3) HttpServletRequest创建与销毁监听ServletRequestListener</span><br></pre></td></tr></table></figure>

<p>监听器的作用(比较官方的概念)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.监听web对象创建与销毁.</span><br><span class="line">2.监听web对象的属性变化</span><br><span class="line">3.监听session绑定javaBean操作.</span><br></pre></td></tr></table></figure>

<p>监听器的作用(实际应用)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我我们知道一个项目只有一个ServletContext 对象. 我们可以利用这一点加载配置文件:</span><br><span class="line">框架阶段会频繁使用,稍安勿躁</span><br></pre></td></tr></table></figure>

<p>配置方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>cn.itcast.travel.XXXListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-SpringMVC的简介"><a href="#2-SpringMVC的简介" class="headerlink" title="2. SpringMVC的简介"></a>2. SpringMVC的简介</h2><h3 id="2-1-SpringMVC概述"><a href="#2-1-SpringMVC概述" class="headerlink" title="2.1 SpringMVC概述"></a>2.1 SpringMVC概述</h3><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 中。</p>
<p>SpringMVC 已经成为目前最主流的MVC框架之一，并且随着Spring3.0 的发布，全面超越 Struts2，成为最优秀的 MVC 框架。它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持 RESTful 编程风格的请求。</p>
<h3 id="2-3-SpringMVC快速入门"><a href="#2-3-SpringMVC快速入门" class="headerlink" title="2.3 SpringMVC快速入门"></a>2.3 SpringMVC快速入门</h3><p>需求：客户端发起请求，服务器端接收请求，执行逻辑并进行视图跳转。</p>
<p><strong>开发步骤</strong></p>
<p>①导入SpringMVC相关坐标</p>
<p>②配置SpringMVC核心控制器DispathcerServlet</p>
<p>③创建Controller类和视图页面</p>
<p>④使用注解配置Controller类中业务方法的映射地址</p>
<p>⑤配置SpringMVC核心文件 spring-mvc.xml</p>
<p>⑥客户端发起请求测试</p>
<p><strong>代码实现</strong></p>
<p>①导入Spring和SpringMVC的坐标、导入Servlet和Jsp的坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--Spring坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--SpringMVC坐标--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jsp坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于标签的说明</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span><span class="comment">&lt;!-- complile : 编译时需要,打包时也需要</span></span><br><span class="line"><span class="comment">                                 runtime : 编译时不需要,打包时需要  mysql</span></span><br><span class="line"><span class="comment">                                 provided : 编译时需要,打包时不需要 servlet</span></span><br><span class="line"><span class="comment">                                  test: 测试时需要,其他不需要 junit</span></span><br><span class="line"><span class="comment">          servlet-api,jsp-api,这两个jar, tomcat 自带所以打包时不需要,否则tomcat7 启动报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>②在web.xml配置SpringMVC的核心控制器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动时加载</span></span><br><span class="line"><span class="comment">        load-on-startup &quot;避免第一次惩罚&quot;</span></span><br><span class="line"><span class="comment">         0 优先级</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       1)  /*  拦截所有  ,拦截jsp   </span></span><br><span class="line"><span class="comment">      2)   / 表示拦截所有 (不拦截jsp)</span></span><br><span class="line"><span class="comment">     3)      /user/* 拦截user 下的所有资源</span></span><br><span class="line"><span class="comment">      4)     *.do    拦截.do 结尾的请求</span></span><br><span class="line"><span class="comment">       错误:    /*.do 非法配置</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br></pre></td></tr></table></figure>

<p>③创建Controller和业务方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">quickMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>③创建视图页面index.jsp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;Hello SpringMVC!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>④配置注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickController</span> </span>&#123;</span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/quick&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">quickMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;quickMethod running.....&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⑤创建spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/spring-mvc.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置注解扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑥访问测试地址</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/itheima_springmvc1/quick </span><br></pre></td></tr></table></figure>

<p>控制台打印</p>
<p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%871.png"></p>
<p>页面显示</p>
<p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%872.png" alt="1550741609792"></p>
<h3 id="2-3-SpringMVC流程图示"><a href="#2-3-SpringMVC流程图示" class="headerlink" title="2.3 SpringMVC流程图示"></a>2.3 SpringMVC流程图示</h3><p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%873.png" alt="1550741658405"></p>
<h3 id="2-4-知识要点"><a href="#2-4-知识要点" class="headerlink" title="2.4 知识要点"></a>2.4 知识要点</h3><p>SpringMVC的开发步骤 </p>
<p>   ①导入SpringMVC相关坐标</p>
<p>   ②配置SpringMVC核心控制器DispathcerServlet</p>
<p>   ③创建Controller类和视图页面</p>
<p>   ④使用注解配置Controller类中业务方法的映射地址</p>
<p>   ⑤配置SpringMVC核心文件 spring-mvc.xml</p>
<p>   ⑥客户端发起请求测试</p>
<h2 id="3-SpringMVC的组件解析"><a href="#3-SpringMVC的组件解析" class="headerlink" title="3. SpringMVC的组件解析"></a>3. SpringMVC的组件解析</h2><h3 id="3-1-SpringMVC的执行流程"><a href="#3-1-SpringMVC的执行流程" class="headerlink" title="3.1 SpringMVC的执行流程"></a>3.1 SpringMVC的执行流程</h3><p><img src="/2019/10/20/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191020springmvc_Spring%E4%B8%8EWeb%E7%8E%AF%E5%A2%83%E9%9B%86%E6%88%90/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/05springmvc01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%874.png" alt="1550741934406"></p>
<p>①用户发送请求至前端控制器DispatcherServlet。</p>
<p>②DispatcherServlet收到请求调用HandlerMapping处理器映射器。</p>
<p>③处理器映射器找到具体的处理器(可以根据xml配置、注解进行查找)，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。</p>
<p>④DispatcherServlet调用HandlerAdapter处理器适配器。</p>
<p>⑤HandlerAdapter经过适配调用具体的处理器(Controller，也叫后端控制器)。</p>
<p>⑥Controller执行完成返回ModelAndView。</p>
<p>⑦HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet。</p>
<p>⑧DispatcherServlet将ModelAndView传给ViewReslover视图解析器。</p>
<p>⑨ViewReslover解析后返回具体View。</p>
<p>⑩DispatcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户。</p>
<h3 id="3-2-SpringMVC组件解析"><a href="#3-2-SpringMVC组件解析" class="headerlink" title="3.2 SpringMVC组件解析"></a>3.2 SpringMVC组件解析</h3><ol>
<li><strong>前端控制器：DispatcherServlet</strong></li>
</ol>
<p>​    用户请求到达前端控制器，它就相当于 MVC 模式中的 C，DispatcherServlet 是整个流程控制的中心，由</p>
<p>它调用其它组件处理用户的请求，DispatcherServlet 的存在降低了组件之间的耦合性。</p>
<ol start="2">
<li><strong>处理器映射器：HandlerMapping</strong></li>
</ol>
<p>​    HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的</p>
<p>映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>
<ol start="3">
<li><strong>处理器适配器：HandlerAdapter</strong></li>
</ol>
<p>​    通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理</p>
<p>器进行执行。</p>
<ol start="4">
<li><strong>处理器：Handler</strong></li>
</ol>
<p>​    它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由</p>
<p>Handler 对具体的用户请求进行处理。</p>
<ol start="5">
<li><strong>视图解析器：View Resolver</strong></li>
</ol>
<p>​    View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名，即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p>
<ol start="6">
<li><strong>视图：View</strong></li>
</ol>
<p>​    SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。最常用的视图就是 jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面</p>
<h3 id="3-3-SpringMVC注解解析"><a href="#3-3-SpringMVC注解解析" class="headerlink" title="3.3 SpringMVC注解解析"></a>3.3 SpringMVC注解解析</h3><p>@RequestMapping</p>
<p>作用：用于建立请求 URL 和处理请求方法之间的对应关系</p>
<p>位置：</p>
<p>​      类上，请求URL 的第一级访问目录。此处不写的话，就相当于应用的根目录</p>
<p>​      方法上，请求 URL 的第二级访问目录，与类上的使用@ReqquestMapping标注的一级目录一起组成访问虚拟路径</p>
<p>属性：</p>
<p>​      value：用于指定请求的URL。它和path属性的作用是一样的</p>
<p>​      method：用于指定请求的方式</p>
<p>​      params：用于指定限制请求参数的条件。它支持简单的表达式。要求请求参数的key和value必须和配置的一模一样</p>
<p>例如：</p>
<p>​      params = {“accountName”}，表示请求参数必须有accountName</p>
<p>​      params = {“moeny!100”}，表示请求参数中money不能是100</p>
<p>1.mvc命名空间引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">命名空间：xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">        xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">约束地址：http://www.springframework.org/schema/context</span><br><span class="line">        http://www.springframework.org/schema/context/spring-context.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc </span><br><span class="line">        http://www.springframework.org/schema/mvc/spring-mvc.xsd</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/save&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br></pre></td></tr></table></figure>



<p>2.<br>组件扫描</p>
<p>SpringMVC基于Spring容器，所以在进行SpringMVC操作时，需要将Controller存储到Spring容器中，如果使用@Controller注解标注的话，就需要使用&lt;context:component-scan base-package=“com.itheima.controller”/&gt;进行组件扫描。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1) 默认扫描  com.itheima 包及其子包  + @Controller--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--2)阻止 默认扫描  com.itheima 包及其子包  ,仅@Controller--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--3)默认扫描  com.itheima 包及其子包  ,不扫描@Service--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:exclude-filter</span>  <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Service&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="3-4-SpringMVC的XML配置解析"><a href="#3-4-SpringMVC的XML配置解析" class="headerlink" title="3.4 SpringMVC的XML配置解析"></a>3.4 SpringMVC的XML配置解析</h3><p>SpringMVC有默认组件配置，默认组件都是DispatcherServlet.properties配置文件中配置的，该配置文件地址org/springframework/web/servlet/DispatcherServlet.properties，该文件中配置了默认的视图解析器，如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">org.springframework.web.servlet.ViewResolver</span>=<span class="string">org.springframework.web.servlet.view.InternalResourceViewResolver</span></span><br></pre></td></tr></table></figure>

<p>翻看该解析器源码，可以看到该解析器的默认设置，如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">REDIRECT_URL_PREFIX</span> = <span class="string">&quot;redirect:&quot;  --重定向前缀</span></span><br><span class="line"><span class="attr">FORWARD_URL_PREFIX</span> = <span class="string">&quot;forward:&quot;    --转发前缀（默认值）</span></span><br><span class="line"><span class="attr">prefix</span> = <span class="string">&quot;&quot;;     --视图名称前缀</span></span><br><span class="line"><span class="attr">suffix</span> = <span class="string">&quot;&quot;;     --视图名称后缀</span></span><br></pre></td></tr></table></figure>

<ol>
<li>视图解析器</li>
</ol>
<p>我们可以通过属性注入的方式修改视图的的前后缀</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置内部资源视图解析器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 不配置视图解析器</span><br><span class="line">       1.1)  (默认)请求转发 forward:</span><br><span class="line">                不带斜杠  &#x2F;  相对路径</span><br><span class="line"></span><br><span class="line">                带斜杠  &#x2F;  绝对路径</span><br><span class="line"></span><br><span class="line">        1.2)  (默认)请求重定向 redirect:</span><br><span class="line"></span><br><span class="line">                不带斜杠  &#x2F;  相对路径</span><br><span class="line"></span><br><span class="line">                带斜杠  &#x2F;  绝对路径</span><br><span class="line">1) 配置视图解析器</span><br><span class="line">       1.1) (默认)请求转发 走视图解析器解析</span><br><span class="line">       1.2) 如果有  forward:  或者 redirect: 前缀,则不走视图解析器解析</span><br></pre></td></tr></table></figure>



<h3 id="3-5-知识要点"><a href="#3-5-知识要点" class="headerlink" title="3.5 知识要点"></a>3.5 知识要点</h3><p><strong>SpringMVC的相关组件</strong> </p>
<p>前端控制器：DispatcherServlet</p>
<p>处理器映射器：HandlerMapping</p>
<p>处理器适配器：HandlerAdapter</p>
<p>处理器：Handler</p>
<p>视图解析器：View Resolver</p>
<p>视图：View</p>
<p><strong>SpringMVC的注解和配置</strong> </p>
<p>请求映射注解：@RequestMapping</p>
<p>视图解析器配置：</p>
<p>REDIRECT_URL_PREFIX = “redirect:”  </p>
<p>FORWARD_URL_PREFIX = “forward:”    </p>
<p>prefix = “”;     </p>
<p>suffix = “”;     </p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringMVC_请求和响应</title>
    <url>/2019/10/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191021SpringMVC_%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h1 id="SpringMVC的请求和响应"><a href="#SpringMVC的请求和响应" class="headerlink" title="SpringMVC的请求和响应"></a>SpringMVC的请求和响应</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;test&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.itheima.web.UserServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;test&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        &#x2F;  拦截除jsp 以外的所有资源</span><br><span class="line">        &#x2F;*  拦截所有资源 包含jsp</span><br><span class="line">        *.do 只拦截 .do结尾的请求</span><br><span class="line">        --&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="SpringMVC的数据响应"><a href="#SpringMVC的数据响应" class="headerlink" title="SpringMVC的数据响应"></a>SpringMVC的数据响应</h2><h3 id="01-SpringMVC的数据响应-数据响应方式-理解"><a href="#01-SpringMVC的数据响应-数据响应方式-理解" class="headerlink" title="01-SpringMVC的数据响应-数据响应方式(理解)"></a>01-SpringMVC的数据响应-数据响应方式(理解)</h3><ol>
<li>   页面跳转</li>
</ol>
<p>直接返回字符串</p>
<p>通过ModelAndView对象返回</p>
<p>2） 回写数据 </p>
<p>直接返回字符串</p>
<p>返回对象或集合    </p>
<h3 id="02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）"><a href="#02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）" class="headerlink" title="02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）"></a>02-SpringMVC的数据响应-页面跳转-返回字符串形式（应用）</h3><p><img src="/2019/10/21/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191021SpringMVC_%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/06springmvc02/%E7%AC%94%E8%AE%B0/img/1.jpg"></p>
<h3 id="03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用"><a href="#03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1-应用" class="headerlink" title="03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)"></a>03-SpringMVC的数据响应-页面跳转-返回ModelAndView形式1(应用)</h3><p>注意:</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">页面中的EL 表达式 在 web2.<span class="number">3</span> 的版本中默认并没有开启,需要在jsp 中增加配置</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span>  isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br></pre></td></tr></table></figure>

<p>或者使用3.0 版本 ,EL 表达式默认开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">&quot;3.0&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在Controller中方法返回ModelAndView对象，并且设置视图名称</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Model:模型 作用封装数据</span></span><br><span class="line"><span class="comment">            View：视图 作用展示数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//设置模型数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//设置视图名称</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用"><a href="#04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2-应用" class="headerlink" title="04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)"></a>04-SpringMVC的数据响应-页面跳转-返回ModelAndView形式2(应用)</h3><p>n在Controller中方法形参上直接声明ModelAndView，无需在方法中自己创建，在方法中直接使用该对象设置视图，同样可以跳转页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(value=&quot;/quick3&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">save3</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick4&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save4</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;博学谷&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用"><a href="#05-SpringMVC的数据响应-页面跳转-返回ModelAndView3-应用" class="headerlink" title="05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)"></a>05-SpringMVC的数据响应-页面跳转-返回ModelAndView3(应用)</h3><p>在Controller方法的形参上可以直接使用原生的HttpServeltRequest对象，只需声明即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick5&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save5</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;酷丁鱼&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="06-SpringMVC的数据响应-回写数据-直接回写字符串-应用"><a href="#06-SpringMVC的数据响应-回写数据-直接回写字符串-应用" class="headerlink" title="06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)"></a>06-SpringMVC的数据响应-回写数据-直接回写字符串(应用)</h3><p>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”) 回写数据，此时不需要视图跳转，业务方法返回值为void</p>
<p>将需要回写的字符串直接返回，但此时需要通过@ResponseBody注解告知SpringMVC框架，方法返回的字符串不是跳转是直接在http响应体中返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick7&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span>  <span class="comment">//告知SpringMVC框架 不进行视图跳转 直接进行数据响应</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save7</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello itheima&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value=&quot;/quick6&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save6</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;hello itcast&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用"><a href="#07-SpringMVC的数据响应-回写数据-直接回写json格式字符串-应用" class="headerlink" title="07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)"></a>07-SpringMVC的数据响应-回写数据-直接回写json格式字符串(应用)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick8&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save8</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;username\&quot;:\&quot;zhangsan\&quot;,\&quot;age\&quot;:18&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>手动拼接json格式字符串的方式很麻烦，开发中往往要将复杂的java对象转换成json格式的字符串，我们可以使用web阶段学习过的json转换工具jackson进行转换,通过jackson转换json格式字符串，回写字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick9&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save9</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//使用json的转换工具将对象转换成json格式字符串在返回</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = objectMapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="08-SpringMVC的数据响应-回写数据-返回对象或集合-应用"><a href="#08-SpringMVC的数据响应-回写数据-返回对象或集合-应用" class="headerlink" title="08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)"></a>08-SpringMVC的数据响应-回写数据-返回对象或集合(应用)</h3><p>通过SpringMVC帮助我们对对象或集合进行json字符串的转换并回写，为处理器适配器配置消息转换参数，指定使用jackson进行对象或集合的转换，因此需要在spring-mvc.xml中进行如下配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;messageConverters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick10&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="comment">//期望SpringMVC自动将User转换成json格式的字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">save10</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lisi2&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用"><a href="#09-SpringMVC的数据响应-回写数据-返回对象或集合2-应用" class="headerlink" title="09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)"></a>09-SpringMVC的数据响应-回写数据-返回对象或集合2(应用)</h3><p>在方法上添加@ResponseBody就可以返回json格式的字符串，但是这样配置比较麻烦，配置的代码比较多，因此，我们可以使用mvc的注解驱动代替上述配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p>
<p>使用<code>&lt;mvc:annotation-driven /&gt;</code>自动加载 RequestMappingHandlerMapping（处理映射器）和</p>
<p>RequestMappingHandlerAdapter（ 处 理 适 配 器 ），可用在Spring-xml.xml配置文件中使用</p>
<p><code>&lt;mvc:annotation-driven /&gt;</code>替代注解处理器和适配器的配置。</p>
<p>同时使用<code>&lt;mvc:annotation-driven /&gt;</code></p>
<p>默认底层就会集成jackson进行对象或集合的json格式字符串的转换</p>
<h3 id="10-SpringMVC的数据响应-知识要点小结-理解，记忆"><a href="#10-SpringMVC的数据响应-知识要点小结-理解，记忆" class="headerlink" title="10-SpringMVC的数据响应-知识要点小结(理解，记忆)"></a>10-SpringMVC的数据响应-知识要点小结(理解，记忆)</h3><p>1） 页面跳转</p>
<p>直接返回字符串</p>
<p>通过ModelAndView对象返回</p>
<p>2） 回写数据 </p>
<p>直接返回字符串</p>
<p>HttpServletResponse 对象直接写回数据，HttpServletRequest对象带回数据，Model对象带回数据或者@ResponseBody将字符串数据写回</p>
<p>返回对象或集合 </p>
<p>@ResponseBody+<code>&lt;mvc:annotation-driven/&gt;   </code></p>
<h2 id="SpringMVC的请求"><a href="#SpringMVC的请求" class="headerlink" title="SpringMVC的请求"></a>SpringMVC的请求</h2><h3 id="11-SpringMVC的请求-获得请求参数-请求参数类型-理解"><a href="#11-SpringMVC的请求-获得请求参数-请求参数类型-理解" class="headerlink" title="11-SpringMVC的请求-获得请求参数-请求参数类型(理解)"></a>11-SpringMVC的请求-获得请求参数-请求参数类型(理解)</h3><p>客户端请求参数的格式是：name=value&amp;name=value……</p>
<p>服务器端要获得请求的参数，有时还需要进行数据的封装，SpringMVC可以接收如下类型的参数</p>
<p>基本类型参数</p>
<p>POJO类型参数</p>
<p>数组类型参数</p>
<p>集合类型参数</p>
<h3 id="12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用"><a href="#12-SpringMVC的请求-获得请求参数-获得基本类型参数-应用" class="headerlink" title="12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)"></a>12-SpringMVC的请求-获得请求参数-获得基本类型参数(应用)</h3><p>Controller中的业务方法的参数名称要与请求参数的name一致，参数值会自动映射匹配。并且能自动做类型转换；</p>
<p>自动的类型转换是指从String向其他类型的转换</p>
<p><code>http://localhost:8080/itheima_springmvc1/quick9?username=zhangsan&amp;age=12</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick11&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save11</span><span class="params">(String username,<span class="keyword">int</span> age)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用"><a href="#13-SpringMVC的请求-获得请求参数-获得POJO类型参数-应用" class="headerlink" title="13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)"></a>13-SpringMVC的请求-获得请求参数-获得POJO类型参数(应用)</h3><p>Controller中的业务方法的POJO参数的属性名与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick12&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save12</span><span class="params">(User user)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用"><a href="#14-SpringMVC的请求-获得请求参数-获得数组类型参数-应用" class="headerlink" title="14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)"></a>14-SpringMVC的请求-获得请求参数-获得数组类型参数(应用)</h3><p>Controller中的业务方法数组名称与请求参数的name一致，参数值会自动映射匹配。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick13&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save13</span><span class="params">(String[] strs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(Arrays.asList(strs));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用"><a href="#15-SpringMVC的请求-获得请求参数-获得集合类型参数1-应用" class="headerlink" title="15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)"></a>15-SpringMVC的请求-获得请求参数-获得集合类型参数1(应用)</h3><p>获得集合参数时，要将集合参数包装到一个POJO中才可以。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick14&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;%--表明是第一个User对象的username age--%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[0].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].username&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userList[1].age&quot;</span>&gt;&lt;br/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList = userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VO&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;userList=&quot;</span> + userList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick14&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save14</span><span class="params">(VO vo)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(vo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用"><a href="#16-SpringMVC的请求-获得请求参数-获得集合类型参数2-应用" class="headerlink" title="16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)"></a>16-SpringMVC的请求-获得请求参数-获得集合类型参数2(应用)</h3><p>当使用ajax提交时，可以指定contentType为json形式，那么在方法参数位置使用@RequestBody可以直接接收集合数据而无需使用POJO进行包装</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;$&#123;pageContext.request.contextPath&#125;/js/jquery-3.3.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> userList = <span class="keyword">new</span> Array();</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;zhangsan&quot;</span>,age:<span class="number">18</span>&#125;);</span><br><span class="line">        userList.push(&#123;username:<span class="string">&quot;lisi&quot;</span>,age:<span class="number">28</span>&#125;);</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line">            url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/quick15&quot;</span>,</span><br><span class="line">            data:JSON.stringify(userList),</span><br><span class="line">            contentType:<span class="string">&quot;application/json;charset=utf-8&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick15&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save15</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; userList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用"><a href="#17-SpringMVC的请求-获得请求参数-静态资源访问的开启-应用" class="headerlink" title="17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)"></a>17-SpringMVC的请求-获得请求参数-静态资源访问的开启(应用)</h3><p>当有静态资源需要加载时，比如jquery文件，通过谷歌开发者工具抓包发现，没有加载到jquery文件，原因是SpringMVC的前端控制器DispatcherServlet的url-pattern配置的是/,代表对所有的资源都进行过滤操作，我们可以通过以下两种方式指定放行静态资源：</p>
<p>•在spring-mvc.xml配置文件中指定放行的资源</p>
<p>​     <code>&lt;mvc:resources mapping=&quot;/js/**&quot;location=&quot;/js/&quot;/&gt; </code></p>
<p>•使用<code>&lt;mvc:default-servlet-handler/&gt;</code>标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开发资源的访问--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mvc:resources mapping=&quot;/js/**&quot; location=&quot;/js/&quot;/&gt;</span></span><br><span class="line"><span class="comment">    &lt;mvc:resources mapping=&quot;/img/**&quot; location=&quot;/img/&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用"><a href="#18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器-应用" class="headerlink" title="18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)"></a>18-SpringMVC的请求-获得请求参数-配置全局乱码过滤器(应用)</h3><p>当post请求时，数据会出现乱码，我们可以设置一个过滤器来进行编码的过滤。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置全局过滤的filter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用"><a href="#19-SpringMVC的请求-获得请求参数-参数绑定注解-RequestParam-应用" class="headerlink" title="19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)"></a>19-SpringMVC的请求-获得请求参数-参数绑定注解@RequestParam(应用)</h3><p>当请求的参数名称与Controller的业务方法参数名称不一致时，就需要通过@RequestParam注解显示的绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/quick16&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick16&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save16</span><span class="params">(<span class="meta">@RequestParam(value=&quot;name&quot;,required = false,defaultValue = &quot;itcast&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用"><a href="#20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取-应用" class="headerlink" title="20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)"></a>20-SpringMVC的请求-获得请求参数-Restful风格的参数的获取(应用)</h3><p>Restful是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。主要用于客户端和服务器交互类的软件，基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存机制等。</p>
<p>Restful风格的请求是使用“url+请求方式”表示一次请求目的的，HTTP 协议里面四个表示操作方式的动词如下：</p>
<p>GET：用于获取资源</p>
<p>POST：用于新建资源</p>
<p>PUT：用于更新资源</p>
<p>DELETE：用于删除资源  </p>
<p>例如：</p>
<p>/user/1    GET ：       得到 id = 1 的 user</p>
<p>/user/1   DELETE：  删除 id = 1 的 user</p>
<p>/user/1    PUT：       更新 id = 1 的 user</p>
<p>/user       POST：      新增 user</p>
<p>上述url地址/user/1中的1就是要获得的请求参数，在SpringMVC中可以使用占位符进行参数绑定。地址/user/1可以写成/user/{id}，占位符{id}对应的就是1的值。在业务方法中我们可以使用@PathVariable注解进行占位符的匹配获取工作。</p>
<p><code>http://localhost:8080/itheima_springmvc1/quick17/zhangsan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick17/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save17</span><span class="params">(<span class="meta">@PathVariable(value=&quot;name&quot;)</span> String username)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用"><a href="#21-SpringMVC的请求-获得请求参数-自定义类型转换器-应用" class="headerlink" title="21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)"></a>21-SpringMVC的请求-获得请求参数-自定义类型转换器(应用)</h3><p>SpringMVC 默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。</p>
<p>但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如：日期类型的数据就需要自定义转换器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">convert</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将日期字符串转换成日期对象 返回</span></span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = format.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick18&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save18</span><span class="params">(Date date)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用"><a href="#22-SpringMVC的请求-获得请求参数-获得Servlet相关API-应用" class="headerlink" title="22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)"></a>22-SpringMVC的请求-获得请求参数-获得Servlet相关API(应用)</h3><p>SpringMVC支持使用原始ServletAPI对象作为控制器方法的参数进行注入，常用的对象如下：</p>
<p>HttpServletRequest</p>
<p>HttpServletResponse</p>
<p>HttpSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick19&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save19</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(request);</span><br><span class="line">        System.out.println(response);</span><br><span class="line">        System.out.println(session);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="23-SpringMVC的请求-获得请求参数-获得请求头信息-应用"><a href="#23-SpringMVC的请求-获得请求参数-获得请求头信息-应用" class="headerlink" title="23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)"></a>23-SpringMVC的请求-获得请求参数-获得请求头信息(应用)</h3><p>使用@RequestHeader可以获得请求头信息，相当于web阶段学习的request.getHeader(name)</p>
<p>@RequestHeader注解的属性如下：</p>
<p>value：请求头的名称</p>
<p>required：是否必须携带此请求头</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick20&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save20</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;User-Agent&quot;,required = false)</span> String user_agent)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(user_agent);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>使用@CookieValue可以获得指定Cookie的值</p>
<p>@CookieValue注解的属性如下：</p>
<p>value：指定cookie的名称</p>
<p>required：是否必须携带此cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/quick21&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save21</span><span class="params">(<span class="meta">@CookieValue(value = &quot;JSESSIONID&quot;)</span> String jsessionId)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       System.out.println(jsessionId);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Spring+SpringMVC练习</title>
    <url>/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Spring练习"><a href="#Spring练习" class="headerlink" title="Spring练习"></a>Spring练习</h1><h2 id="01-Spring练习-环境搭建步骤分析-理解"><a href="#01-Spring练习-环境搭建步骤分析-理解" class="headerlink" title="01-Spring练习-环境搭建步骤分析(理解)"></a>01-Spring练习-环境搭建步骤分析(理解)</h2><p>案例环境搭建步骤：</p>
<p>①创建工程（Project&amp;Module）</p>
<p>②导入静态页面（见资料jsp页面）</p>
<p>③导入需要坐标（见资料中的pom.xml）</p>
<p>④创建包结构（controller、service、dao、domain、utils）</p>
<p>⑤导入数据库脚本（见资料test.sql）</p>
<p>⑥创建POJO类（见资料User.java和Role.java）</p>
<p>创建配置文件（applicationContext.xml,spring-mvc.xml,jdbc.properties,log4j.properties）</p>
<a id="more"></a>

<h2 id="02-Spring练习-环境搭建实现1-应用"><a href="#02-Spring练习-环境搭建实现1-应用" class="headerlink" title="02-Spring练习-环境搭建实现1(应用)"></a>02-Spring练习-环境搭建实现1(应用)</h2><p>创建工程,导入jsp，添加项目依赖</p>
<p>创建包结构，导入数据库脚本，导入POJO</p>
<h2 id="03-Spring练习-环境搭建实现2-应用"><a href="#03-Spring练习-环境搭建实现2-应用" class="headerlink" title="03-Spring练习-环境搭建实现2(应用)"></a>03-Spring练习-环境搭建实现2(应用)</h2><p>创建Spring的核心配置文件applicationContext.xml</p>
<p>创建SpringMVC核心配置文件spring-mvc.xml</p>
<p>创建数据库配置文件jdbc.properties</p>
<p>拷贝日志配置文件log4j.properties</p>
<p>配置web.xml如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--全局的初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring的监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringMVC的前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="04-Spring练习-环境搭建实现3-应用"><a href="#04-Spring练习-环境搭建实现3-应用" class="headerlink" title="04-Spring练习-环境搭建实现3(应用)"></a>04-Spring练习-环境搭建实现3(应用)</h2><p>配置springm-mvc.xml：注解驱动，视图解析器，静态资源的开放</p>
<p>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、静态资源权限开放--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="05-Spring练习-环境搭建实现4-应用"><a href="#05-Spring练习-环境搭建实现4-应用" class="headerlink" title="05-Spring练习-环境搭建实现4(应用)"></a>05-Spring练习-环境搭建实现4(应用)</h2><p>配置applicationContext.xml：加载propertiest,配置数据源对象，配置JdbcTemplate对象</p>
<p>配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1、加载jdbc.properties--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2、配置数据源对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、配置JdbcTemplate对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="06-Spring练习-用户表和角色表的分析-理解"><a href="#06-Spring练习-用户表和角色表的分析-理解" class="headerlink" title="06-Spring练习-用户表和角色表的分析(理解)"></a>06-Spring练习-用户表和角色表的分析(理解)</h2><p>分析用户和角色在数据库设计中的表关系：多对多关系，关系如图所示：</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/1.png"></p>
<h2 id="07-Spring练习-角色列表展示分析-理解"><a href="#07-Spring练习-角色列表展示分析-理解" class="headerlink" title="07-Spring练习-角色列表展示分析(理解)"></a>07-Spring练习-角色列表展示分析(理解)</h2><p>需求：角色列表展示，需求如图所示：</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/2.png"></p>
<p>完成该功能的思路和步骤为：</p>
<p>①点击角色管理菜单发送请求到服务器端（修改角色管理菜单的url地址）</p>
<p>②创建RoleController和list()方法</p>
<p>③创建RoleService和list()方法</p>
<p>④创建RoleDao和findAll()方法</p>
<p>⑤使用JdbcTemplate完成查询操作</p>
<p>⑥将查询数据存储到modelAndView中</p>
<p>⑦转发到role-list.jsp页面进行展示</p>
<h2 id="08-Spring练习-角色列表展示-controller层实现-应用"><a href="#08-Spring练习-角色列表展示-controller层实现-应用" class="headerlink" title="08-Spring练习-角色列表展示-controller层实现(应用)"></a>08-Spring练习-角色列表展示-controller层实现(应用)</h2><p>1：修改左侧菜单链接地址</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;treeview-menu&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">					&lt;li&gt;&lt;a</span><br><span class="line">						href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/list&quot;</span>&gt; &lt;i</span><br><span class="line">							class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 用户管理</span><br><span class="line">					&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">					&lt;li&gt;&lt;a</span><br><span class="line">						href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/role/list&quot;</span>&gt; &lt;i</span><br><span class="line">							class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 角色管理</span><br><span class="line">					&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">					&lt;li&gt;&lt;a</span><br><span class="line">						href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/pages/syslog-list.jsp&quot;</span>&gt; &lt;i</span><br><span class="line">							class=&quot;fa fa-circle-o&quot;&gt;&lt;/i&gt; 访问日志</span><br><span class="line">					&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">				&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

<p>Controller层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/role&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RoleService roleService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.list();</span><br><span class="line">        <span class="comment">//设置模型</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;roleList&quot;</span>,roleList);</span><br><span class="line">        <span class="comment">//设置视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;role-list&quot;</span>);</span><br><span class="line">        System.out.println(roleList);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="09-Spring练习-角色列表展示-service和dao层实现-应用"><a href="#09-Spring练习-角色列表展示-service和dao层实现-应用" class="headerlink" title="09-Spring练习-角色列表展示-service和dao层实现(应用)"></a>09-Spring练习-角色列表展示-service和dao层实现(应用)</h2><p>service层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleDao</span><span class="params">(RoleDao roleDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDao = roleDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Role&gt; roleList = roleDao.findAll();</span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dao层代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">implements</span> <span class="title">RoleDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJdbcTemplate</span><span class="params">(JdbcTemplate jdbcTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Role&gt; roleList = jdbcTemplate.query(<span class="string">&quot;select * from sys_role&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Role&gt;(Role.class));</span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="10-Spring练习-角色列表展示-配置实现-应用"><a href="#10-Spring练习-角色列表展示-配置实现-应用" class="headerlink" title="10-Spring练习-角色列表展示-配置实现(应用)"></a>10-Spring练习-角色列表展示-配置实现(应用)</h2><p>配置spring-mvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--4、组件扫描  扫描Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>配置applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置RoleService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;roleService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.RoleServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;roleDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;roleDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置RoleDao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;roleDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.RoleDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdbcTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="11-Spring练习-角色列表展示-页面展示-应用"><a href="#11-Spring练习-角色列表展示-页面展示-应用" class="headerlink" title="11-Spring练习-角色列表展示-页面展示(应用)"></a>11-Spring练习-角色列表展示-页面展示(应用)</h2><p>在role-list.jsp中将数据取出来并展示,核心代码如下：</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;roleList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">	&lt;td&gt;&lt;input name=&quot;ids&quot; type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;role.id&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;role.roleName&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;role.roleDesc&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text-center&quot;</span>&gt;</span><br><span class="line">	&lt;a href=&quot;javascript:void(0);&quot; class=&quot;btn bg-olive btn-xs&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">	&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="12-Spring练习-角色的添加操作-应用"><a href="#12-Spring练习-角色的添加操作-应用" class="headerlink" title="12-Spring练习-角色的添加操作(应用)"></a>12-Spring练习-角色的添加操作(应用)</h2><p>需求：添加角色，需求图如下：</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/3.png"></p>
<p>操作步骤如下：</p>
<p>①点击列表页面新建按钮跳转到角色添加页面</p>
<p>②输入角色信息，点击保存按钮，表单数据提交服务器</p>
<p>③编写RoleController的save()方法</p>
<p>④编写RoleService的save()方法</p>
<p>⑤编写RoleDao的save()方法</p>
<p>⑥使用JdbcTemplate保存Role数据到sys_role</p>
<p>⑦跳转回角色列表页面</p>
<p>controller代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Role role)</span></span>&#123;</span><br><span class="line">        roleService.save(role);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/role/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        roleDao.save(role);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Role role)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;insert into sys_role values(?,?,?)&quot;</span>,<span class="keyword">null</span>,role.getRoleName(),role.getRoleDesc());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为了解决post提交中文乱码问题，需要在web.xml中配置全局乱码过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决乱码的过滤器--&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试，完成该功能。</p>
<h2 id="13-Spring练习-用户列表展示1-应用"><a href="#13-Spring练习-用户列表展示1-应用" class="headerlink" title="13-Spring练习-用户列表展示1(应用)"></a>13-Spring练习-用户列表展示1(应用)</h2><p>需求：查询用户列表，需求图如下：</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/4.png"></p>
<p>完成该功能的操作步骤：</p>
<p>①点击用户管理菜单发送请求到服务器端（修改用户管理菜单的url地址）</p>
<p>②创建UserController和list()方法</p>
<p>③创建UserService和list()方法</p>
<p>④创建UserDao和findAll()方法</p>
<p>⑤使用JdbcTemplate完成查询操作</p>
<p>⑥将查询数据存储到modelAndView中</p>
<p>⑦转发到user-list.jsp页面进行展示</p>
<p>跟查询角色列表一样，查询用户列表，创建UserController,UserService,UserDao,User实体等结构，编写各层代码并配置</p>
<p>用户列表Controller,service,dao层代码如下：</p>
<p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userService.list();</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;userList&quot;</span>,userList);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;user-list&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="comment">//封装userList中的每一个User的roles数据</span></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = jdbcTemplate.query(<span class="string">&quot;select * from sys_user&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;User&gt;(User.class));</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="14-Spring练习-用户列表展示2-应用"><a href="#14-Spring练习-用户列表展示2-应用" class="headerlink" title="14-Spring练习-用户列表展示2(应用)"></a>14-Spring练习-用户列表展示2(应用)</h2><p>查询用户的时候关联查询出该用户所具有的所有角色信息,需要完善查询用户的service层代码</p>
<p>1，在角色的dao中添加方法，根据用户id查询角色列表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在角色dao中根据用户id查询用户具有的角色信息</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">findRoleByUserId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        List&lt;Role&gt; roles = jdbcTemplate.query(<span class="string">&quot;select * from sys_user_role ur,sys_role r where ur.roleId=r.id and ur.userId=?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Role&gt;(Role.class), id);</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>完善userservcie层代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在查询用户的service中关联查询用户具有的角色</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userDao.findAll();</span><br><span class="line">        <span class="comment">//封装userList中的每一个User的roles数据</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            <span class="comment">//获得user的id</span></span><br><span class="line">            Long id = user.getId();</span><br><span class="line">            <span class="comment">//将id作为参数 查询当前userId对应的Role集合数据</span></span><br><span class="line">            List&lt;Role&gt; roles = roleDao.findRoleByUserId(id);</span><br><span class="line">            user.setRoles(roles);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询用户的时候关联查询出该用户所具有的所有角色信息，前端jsp页面核心代码</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;userList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">	&lt;td&gt;&lt;input name=&quot;ids&quot; type=&quot;checkbox&quot;&gt;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;user.id&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;user.email&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td&gt;$&#123;user.phoneNum&#125;&lt;/td&gt;</span><br><span class="line">	&lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text-center&quot;</span>&gt;</span><br><span class="line">		&lt;c:forEach items=<span class="string">&quot;$&#123;user.roles&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span><br><span class="line">		&amp;nbsp;&amp;nbsp;$&#123;role.roleName&#125;</span><br><span class="line">		&lt;/c:forEach&gt;</span><br><span class="line">	&lt;/td&gt;</span><br><span class="line">	&lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text-center&quot;</span>&gt;</span><br><span class="line">		&lt;a href=&quot;javascript:void(0);&quot; onclick=&quot;delUser(&#x27;$&#123;user.id&#125;&#x27;)&quot; class=&quot;btn bg-olive btn-xs&quot;&gt;删除&lt;/a&gt;</span><br><span class="line">	&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="15-Spring练习-用户添加操作-添加页面展示-应用"><a href="#15-Spring练习-用户添加操作-添加页面展示-应用" class="headerlink" title="15-Spring练习-用户添加操作-添加页面展示(应用)"></a>15-Spring练习-用户添加操作-添加页面展示(应用)</h2><p>需求：添加用户，需求图如下：</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/5.png"></p>
<p>新建用户时，点击新建按钮先去到添加用户的页面user-add.jsp,在添加用户页面需要展示可供选择的角色信息，因此来到添加页面时需要查询所有的角色信息并展示</p>
<p>去到user-add.jsp页面时先查询所有角色信息的controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/saveUI&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">saveUI</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.list();</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;roleList&quot;</span>,roleList);</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;user-add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>因为查询所有角色信息的service层和dao层代码在之前角色列表展示功能的时候已经写了，因此只需调用即可，</p>
<p>在user-add.jsp页面展示所有角色信息的核心代码</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-md-10 data&quot;</span>&gt;</span><br><span class="line">	&lt;c:forEach items=<span class="string">&quot;$&#123;roleList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;role&quot;</span>&gt;</span><br><span class="line">	&lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;roleIds&quot;</span> value=<span class="string">&quot;$&#123;role.id&#125;&quot;</span>&gt;$&#123;role.roleName&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="16-Spring练习-用户添加操作-添加数据到数据库-应用"><a href="#16-Spring练习-用户添加操作-添加数据到数据库-应用" class="headerlink" title="16-Spring练习-用户添加操作-添加数据到数据库(应用)"></a>16-Spring练习-用户添加操作-添加数据到数据库(应用)</h2><p>添加用户页面有两部分数据，一部分属于用户基础数据需要插入到用户表user中，另一部分是用户的角色数据，需要插入到中间表sys_user_role中</p>
<p>user-add.jsp页面提交数据到controller完成数据添加操作的controller层和service层代码分别如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//controller层代码</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(User user,Long[] roleIds)</span></span>&#123;</span><br><span class="line">        userService.save(user,roleIds);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/user/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service层代码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user, Long[] roleIds)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一步 向sys_user表中存储数据</span></span><br><span class="line">        Long userId = userDao.save(user);</span><br><span class="line">        <span class="comment">//第二步 向sys_user_role 关系表中存储多条数据</span></span><br><span class="line">        userDao.saveUserRoleRel(userId,roleIds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao层代码因为还需要重新构建，因此学完下一个章节后重新编写，因为这里留下了一个问题，在dao层操作后如何获得自增的主键id值呢?</p>
<h2 id="17-Spring练习-用户添加操作-添加数据到数据库2-应用"><a href="#17-Spring练习-用户添加操作-添加数据到数据库2-应用" class="headerlink" title="17-Spring练习-用户添加操作-添加数据到数据库2(应用)"></a>17-Spring练习-用户添加操作-添加数据到数据库2(应用)</h2><p>添加用户时用户分配的角色信息应存储到中间表sys_user_role表中，需要用户的id，角色的id，而角色的id由前台页面点选的，用户的id应该是在保存操作由mysql主键自动生成的，那如何获取mysql自增的主键值呢？</p>
<p>使用JdbcTemplate执行插入操作时获取mysql自增的主键值：</p>
<p>添加操作的dao层代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUserRoleRel</span><span class="params">(Long userId, Long[] roleIds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Long roleId : roleIds) &#123;</span><br><span class="line">            jdbcTemplate.update(<span class="string">&quot;insert into sys_user_role values(?,?)&quot;</span>,userId,roleId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="18-Spring练习-删除用户操作-应用"><a href="#18-Spring练习-删除用户操作-应用" class="headerlink" title="18-Spring练习-删除用户操作(应用)"></a>18-Spring练习-删除用户操作(应用)</h2><p>删除用户功能的需求如图所示:</p>
<p><img src="/2019/10/24/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191024Spring_SpringMVC%E7%BB%83%E4%B9%A0/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/08spring+springmvc%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%AC%94%E8%AE%B0/img/6.png"></p>
<p>操作步骤如下：</p>
<p>①点击用户列表的删除按钮，发送请求到服务器端</p>
<p>②编写UserController的del()方法</p>
<p>③编写UserService的del()方法</p>
<p>⑤编写UserDao的delUserRoleRel()方法</p>
<p>⑥跳回当前用户列表页面</p>
<p>完成用户的删除操作，不仅要删除用户表数据，同时需要将用户和角色的关联表数据进行删除：</p>
<p>controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">del</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span></span>&#123;</span><br><span class="line">        userService.del(userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/user/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>service代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1、删除sys_user_role关系表</span></span><br><span class="line">        userDao.delUserRoleRel(userId);</span><br><span class="line">        <span class="comment">//2、删除sys_user表</span></span><br><span class="line">        userDao.del(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>dao代码:不仅要删除用户表数据，同时需要将用户和角色的关联表数据进行删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delUserRoleRel</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from sys_user_role where userId=?&quot;</span>,userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">&quot;delete from sys_user where id=?&quot;</span>,userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/</url>
    <content><![CDATA[<h3 id="1-Mybatis简介"><a href="#1-Mybatis简介" class="headerlink" title="1.Mybatis简介"></a>1.Mybatis简介</h3><h4 id="1-1原始jdbc操作（查询数据）"><a href="#1-1原始jdbc操作（查询数据）" class="headerlink" title="1.1原始jdbc操作（查询数据）"></a>1.1原始jdbc操作（查询数据）</h4><p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%871.png"></p>
<a id="more"></a>

<h4 id="1-2原始jdbc操作（插入数据）"><a href="#1-2原始jdbc操作（插入数据）" class="headerlink" title="1.2原始jdbc操作（插入数据）"></a>1.2原始jdbc操作（插入数据）</h4><p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%872.png"></p>
<h4 id="1-3-原始jdbc操作的分析"><a href="#1-3-原始jdbc操作的分析" class="headerlink" title="1.3 原始jdbc操作的分析"></a>1.3 原始jdbc操作的分析</h4><p>原始jdbc开发存在的问题如下：</p>
<p>①数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能(c3p0)</p>
<p>②sql 语句在代码中硬编码，造成代码不易维护，实际应用 sql 变化的可能较大，sql 变动需要改变java代码。</p>
<p>③查询操作时，需要手动将结果集中的数据手动封装到实体中。插入操作时，需要手动将实体的数据设置到sql语句的占位符位置(jdbcTemplate)</p>
<p>应对上述问题给出的解决方案：</p>
<p>①使用数据库连接池初始化连接资源</p>
<p>②将sql语句抽取到xml配置文件中</p>
<p>③使用反射、内省等底层技术，自动将实体与表进行属性与字段的自动映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#内省</span><br><span class="line">BeanUtils.populate(user,map);&#x2F;&#x2F; 通过反射,给对象属性赋值的操作叫做内省</span><br></pre></td></tr></table></figure>

<p>jdbc</p>
<p>jdbcTemplate</p>
<p>dbutils</p>
<p>hibernate</p>
<p>mybatis</p>
<h4 id="1-3-补-为什么不使用jdbcTemplate"><a href="#1-3-补-为什么不使用jdbcTemplate" class="headerlink" title="1.3) (补)为什么不使用jdbcTemplate"></a>1.3) (补)为什么不使用jdbcTemplate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) sql 语句在代码中硬编码，造成代码不易维护</span><br><span class="line">2) sql 参数封装麻烦</span><br><span class="line">3) 不智能,我们希望有一个框架能自动帮助我们生成sql 语句而不是每次都手写(后续补充讲解,mybatis 提供了工具能够自动生成dao 层的代码)</span><br></pre></td></tr></table></figure>

<h4 id="1-4-什么是Mybatis-ibatis"><a href="#1-4-什么是Mybatis-ibatis" class="headerlink" title="1.4 什么是Mybatis  (ibatis)"></a>1.4 什么是Mybatis  (ibatis)</h4><p>mybatis 是一个优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，而不需要花费精力去处理加载驱动、创建连接、创建statement等繁杂的过程。</p>
<p>mybatis通过xml或注解的方式将要执行的各种 statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句。</p>
<p>最后mybatis框架执行sql并将结果映射为java对象并返回。采用ORM思想解决了实体和数据库映射的问题，对jdbc 进行了封装，屏蔽了jdbc api 底层访问细节，使我们不用与jdbc api 打交道，就可以完成对数据库的持久化操作。</p>
<p>ORM 思想</p>
<p>Object relation Mapping</p>
<p>​    把java pojo对象和数据库表 字段之间通过一个配置文件关联起来的 想法,叫做orm 思想</p>
<h3 id="2-Mybatis的快速入门"><a href="#2-Mybatis的快速入门" class="headerlink" title="2.Mybatis的快速入门"></a>2.Mybatis的快速入门</h3><h4 id="2-1-MyBatis开发步骤"><a href="#2-1-MyBatis开发步骤" class="headerlink" title="2.1 MyBatis开发步骤"></a>2.1 MyBatis开发步骤</h4><p>MyBatis官网地址：<a href="http://www.mybatis.org/mybatis-3/">http://www.mybatis.org/mybatis-3/</a> </p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%873.png"></p>
<p><strong>MyBatis开发步骤：</strong></p>
<p>①添加MyBatis的坐标</p>
<p>②创建user数据表</p>
<p>③编写User实体类 </p>
<p>④编写映射文件UserMapper.xml</p>
<p>⑤编写核心文件SqlMapConfig.xml</p>
<p>⑥编写测试类</p>
<h4 id="2-2-环境搭建"><a href="#2-2-环境搭建" class="headerlink" title="2.2 环境搭建"></a>2.2 环境搭建</h4><p>1)导入MyBatis的坐标和其他相关坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--日志坐标--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li> 创建user数据表</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;lucy&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;2018-12-12&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;haohao&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;2019-12-12&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%875.png"></p>
<ol start="3">
<li>编写User实体</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;    </span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;    </span><br><span class="line">	<span class="keyword">private</span> String username;    </span><br><span class="line">	<span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略get个set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4)编写UserMapper映射文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span>        </span></span><br><span class="line"><span class="meta">	<span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>        </span></span><br><span class="line"><span class="meta">	<span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span>        </span><br><span class="line">		select * from User    </span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>编写MyBatis核心文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span>        </span><br><span class="line">		<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span>            </span><br><span class="line">			<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span>            </span><br><span class="line">			<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span>                </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///test&quot;</span>/&gt;</span>                </span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span>            </span><br><span class="line">			<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span>        </span><br><span class="line">		<span class="tag">&lt;/<span class="name">environment</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;/<span class="name">environments</span>&gt;</span>    </span><br><span class="line">	</span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/mapper/UserMapper.xml&quot;</span>/&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="2-3-编写测试代码"><a href="#2-3-编写测试代码" class="headerlink" title="2.3 编写测试代码"></a>2.3 编写测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载核心配置文件</span></span><br><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获得sqlSession工厂对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span>            </span><br><span class="line">                           SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line"><span class="comment">//获得sqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">System.out.println(userList);</span><br><span class="line"><span class="comment">//释放资源. </span></span><br><span class="line">sqlSession.close();</span><br><span class="line">inputStream.close();</span><br></pre></td></tr></table></figure>

<h4 id="2-4-知识小结"><a href="#2-4-知识小结" class="headerlink" title="2.4 知识小结"></a>2.4 知识小结</h4><p><strong>MyBatis开发步骤：</strong></p>
<p>①添加MyBatis的坐标</p>
<p>②创建user数据表</p>
<p>③编写User实体类 </p>
<p>④编写映射文件UserMapper.xml</p>
<p>⑤编写核心文件SqlMapConfig.xml</p>
<p>⑥编写测试类</p>
<h3 id="3-MyBatis的映射文件概述"><a href="#3-MyBatis的映射文件概述" class="headerlink" title="3. MyBatis的映射文件概述"></a>3. MyBatis的映射文件概述</h3><p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%876.png"></p>
<h3 id="4-MyBatis的增删改查操作"><a href="#4-MyBatis的增删改查操作" class="headerlink" title="4. MyBatis的增删改查操作"></a>4. MyBatis的增删改查操作</h3><h4 id="4-1-MyBatis的插入数据操作"><a href="#4-1-MyBatis的插入数据操作" class="headerlink" title="4.1 MyBatis的插入数据操作"></a>4.1 MyBatis的插入数据操作</h4><p><strong>1)编写UserMapper映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span>    </span><br><span class="line">	<span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span>        </span><br><span class="line">		insert into user values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)    </span><br><span class="line">	<span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2)编写插入实体User的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> </span><br><span class="line">                        SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> insert = sqlSession.insert(<span class="string">&quot;userMapper.add&quot;</span>, user);</span><br><span class="line">System.out.println(insert);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明</span><br><span class="line">	因为在数据库表中ID采用了自增ID策略。默认情况下当ID是0或者null的时候，数据库会自动产生一个新的自增序列作为这条记录的ID。</span><br><span class="line">	此处我们 new 的User i默认是0 所以id 自动增加</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#123;&#125;和$&#123;&#125; 的去区别</span><br><span class="line"></span><br><span class="line">0)  $&#123;&#125; 如果只有一个基本类型参数必须使用  $&#123;value&#125;</span><br><span class="line"></span><br><span class="line">1)</span><br><span class="line">    #&#123;&#125; 使用的是占位符, 效率高</span><br><span class="line">    	-- 预编译</span><br><span class="line">        SELECT * FROM USER WHERE id&#x3D;?    -- 翻译一次  0.5s</span><br><span class="line">        -- 1W </span><br><span class="line">        -- 1-10000</span><br><span class="line">    </span><br><span class="line">    $&#123;&#125; 直接拼接sql ,需要再字段上加上 &#39;$&#123;uername&#125;&#39; 效率较低</span><br><span class="line"></span><br><span class="line">    -------</span><br><span class="line">    -- 使用传统方式 发送100w 条数据 ,需要编译 100w</span><br><span class="line">    INSERT INTO USER (id,username,PASSWORD) VALUES (1,&#39;zhangsan&#39;,&#39;zhangsan&#39;) ;</span><br><span class="line">    ------- 只编译一次</span><br><span class="line">    INSERT INTO USER (id,username,PASSWORD) VALUES (?,?,?) </span><br><span class="line">2) </span><br><span class="line">	#&#123;&#125; 能够防止sql  注入</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">sql 注入</span><br><span class="line">---</span><br><span class="line">sqlSession.delete(&quot;UserMapper.delete&quot;,&quot;10 or id in (11,12,13,14)&quot;);</span><br><span class="line">---</span><br><span class="line">  <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span>&gt;</span></span><br><span class="line"> 	 delete from user where id=$&#123;value&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>3)插入操作注意问题**</p>
<p>• 插入语句使用insert标签</p>
<p>• 在映射文件中使用parameterType属性指定要插入的数据类型 (可以省略)</p>
<p>•Sql语句中使用#{实体属性名}方式引用实体中的属性值</p>
<p>•插入操作使用的API是sqlSession.insert(“命名空间.id”,实体对象);</p>
<p>•插入操作涉及数据库数据变化，所以要使用sqlSession对象显示的提交事务，即sqlSession.commit() </p>
<p>(mybatis 默认事务不自动提交)</p>
<p>4.1) 插入补充,获取插入的主键</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">keyColumn=&quot;id&quot;  数据库自增字段名称</span><br><span class="line">resultType=&quot;int&quot; 返回值类型,对应java 实体类 属性的类型</span><br><span class="line">keyProperty=&quot;id&quot; java 实体类属性名</span><br><span class="line">order=&quot;AFTER&quot; 在插入之后执行</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            SELECT LAST_INSERT_ID()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(id,username,password) values(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-MyBatis的修改数据操作"><a href="#4-2-MyBatis的修改数据操作" class="headerlink" title="4.2 MyBatis的修改数据操作"></a>4.2 MyBatis的修改数据操作</h4><p><strong>1)编写UserMapper映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2)编写修改实体User的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> update = sqlSession.update(<span class="string">&quot;userMapper.update&quot;</span>, user);</span><br><span class="line">System.out.println(update);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3)修改操作注意问题</strong></p>
<p>• 修改语句使用update标签</p>
<p>• 修改操作使用的API是sqlSession.update(“命名空间.id”,实体对象);</p>
<h4 id="4-3-MyBatis的删除数据操作"><a href="#4-3-MyBatis的删除数据操作" class="headerlink" title="4.3 MyBatis的删除数据操作"></a>4.3 MyBatis的删除数据操作</h4><p><strong>1)编写UserMapper映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;userMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>2)编写删除数据的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">int</span> delete = sqlSession.delete(<span class="string">&quot;userMapper.delete&quot;</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(delete);</span><br><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>3)删除操作注意问题</strong></p>
<p>• 删除语句使用delete标签</p>
<p>•Sql语句中使用#{任意字符串}方式引用传递的<strong>单个参数</strong></p>
<p>•删除操作使用的API是sqlSession.delete(“命名空间.id”,Object);</p>
<h4 id="4-4-知识小结"><a href="#4-4-知识小结" class="headerlink" title="4.4 知识小结"></a>4.4 知识小结</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增删改查映射配置与API：</span><br><span class="line">查询数据： List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAll&quot;</span> resultType=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span><br><span class="line">        select * from User</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">添加数据： sqlSession.insert(<span class="string">&quot;userMapper.add&quot;</span>, user);</span><br><span class="line">    &lt;insert id=<span class="string">&quot;add&quot;</span> parameterType=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span><br><span class="line">        &lt;selectKey keyColumn=<span class="string">&quot;id&quot;</span> resultType=<span class="string">&quot;int&quot;</span> keyProperty=<span class="string">&quot;id&quot;</span> order=<span class="string">&quot;AFTER&quot;</span>&gt;</span><br><span class="line">            <span class="function">SELECT <span class="title">LAST_INSERT_ID</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        &lt;/selectKey&gt;</span></span><br><span class="line"><span class="function">        insert into user <span class="title">values</span><span class="params">(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">修改数据： sqlSession.<span class="title">update</span><span class="params">(<span class="string">&quot;userMapper.update&quot;</span>, user)</span></span>;</span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span><br><span class="line">        update user set username=#&#123;username&#125;,password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">删除数据：sqlSession.delete(<span class="string">&quot;userMapper.delete&quot;</span>,<span class="number">3</span>);</span><br><span class="line">    &lt;delete id=<span class="string">&quot;delete&quot;</span> parameterType=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span><br><span class="line">        delete from user where id=#&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-MyBatis核心配置文件概述"><a href="#5-MyBatis核心配置文件概述" class="headerlink" title="5. MyBatis核心配置文件概述"></a>5. MyBatis核心配置文件概述</h3><h4 id="5-1-MyBatis核心配置文件层级关系"><a href="#5-1-MyBatis核心配置文件层级关系" class="headerlink" title="5.1 MyBatis核心配置文件层级关系"></a>5.1 MyBatis核心配置文件层级关系</h4><p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%877.png"></p>
<h4 id="5-2-MyBatis常用配置解析"><a href="#5-2-MyBatis常用配置解析" class="headerlink" title="5.2 MyBatis常用配置解析"></a>5.2 MyBatis常用配置解析</h4><p><strong>1)environments标签</strong></p>
<p>数据库环境的配置，支持多环境配置</p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%878.png"></p>
<p>其中，事务管理器（transactionManager）类型有两种：</p>
<p>•JDBC：这个配置就是直接使用了JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。</p>
<p>•MANAGED：这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让(spring)容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。</p>
<p>​    (  MANAGED  例如: 使用spring 声明式事务帮我们管理事务,我们的mybatis 不处理事务)</p>
<p>其中，数据源（dataSource）类型有三种：</p>
<p>•UNPOOLED：这个数据源的实现只是每次被请求时打开和关闭连接。</p>
<p>•POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来。</p>
<p>•JNDI：这个数据源的实现是为了能在如 EJB 或应用服务器(tomcat,weblogic)这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。(简单来讲就是让tomcat 来帮助我们管理我们的数据库连接)</p>
<p>  (JNDI 把数据库连接管理交给tomcat 容器,而不是我们自己去使用c3p0 )</p>
<p><strong>2)mapper标签</strong></p>
<p>该标签的作用是加载映射的，加载方式有如下几种：</p>
<p>•使用相对于类路径的资源引用，例如：</p>
<mapper resource="org/mybatis/builder/AuthorMapper.xml">

<p>•使用完全限定资源定位符（URL），例如：</p>
<mapper url="file:///var/mappers/AuthorMapper.xml">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper url&#x3D;&quot;file:&#x2F;&#x2F;&#x2F;D:\code\05_mybatis\day01\mybatis_test\src\main\resources\com\itheima\mapper\UserMapper.xml&quot;&#x2F;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>•使用映射器接口实现类的完全限定类名，例如：</p>
<mapper class="org.mybatis.builder.AuthorMapper">

<p>•将包内的映射器接口实现全部注册为映射器，例如：</p>
<package name="org.mybatis.builder">

<p><strong>3)Properties标签</strong></p>
<p>实际开发中，习惯将数据源的配置信息单独抽取成一个properties文件，该标签可以加载额外配置的properties文件</p>
<p>  <img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%879.png"></p>
<p><strong>4)typeAliases标签</strong></p>
<p>类型别名是为Java 类型设置一个短的名字。原来的类型名称配置如下</p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8710.png"></p>
<p>配置typeAliases，为com.itheima.domain.User定义别名为user</p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8711.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--统一给domain 包起别名--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.domain&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面我们是自定义的别名，mybatis框架已经为我们设置好的一些常用的类型的别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeAliasRegistry.java 中配置了那些可以使用别名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8712.png"></p>
<h4 id="5-3-知识小结"><a href="#5-3-知识小结" class="headerlink" title="5.3 知识小结"></a>5.3 知识小结</h4><p><strong>核心配置文件常用配置：</strong></p>
<p>properties标签：该标签可以加载外部的properties文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>typeAliases标签：设置类型别名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mappers标签：加载映射配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itheima/mapper/UserMapping.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>environments标签：数据源环境配置标签</p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8713.png"></p>
<h3 id="6-MyBatis相应API"><a href="#6-MyBatis相应API" class="headerlink" title="6.MyBatis相应API"></a>6.MyBatis相应API</h3><h4 id="6-1-SqlSession工厂构建器SqlSessionFactoryBuilder"><a href="#6-1-SqlSession工厂构建器SqlSessionFactoryBuilder" class="headerlink" title="6.1 SqlSession工厂构建器SqlSessionFactoryBuilder"></a>6.1 SqlSession工厂构建器SqlSessionFactoryBuilder</h4><p>常用API：SqlSessionFactory  build(InputStream inputStream)</p>
<p>通过加载mybatis的核心文件的输入流的形式构建一个SqlSessionFactory对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/builder/mybatis-config.xml&quot;</span>; </span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource); </span><br><span class="line"><span class="comment">// // 构建者模式, 构建者负责创建工厂,优势,可扩展性好</span></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder(); </span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 工厂模式: 工厂负责创建对象,优势,可扩展性好</span></span><br><span class="line">SqlSession sqlSession = factory.openSession();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中， Resources 工具类，这个类在 org.apache.ibatis.io 包中。Resources 类帮助你从类路径下、文件系统或一个 web URL 中加载资源文件。</p>
<h4 id="6-2-SqlSession工厂对象SqlSessionFactory"><a href="#6-2-SqlSession工厂对象SqlSessionFactory" class="headerlink" title="6.2 SqlSession工厂对象SqlSessionFactory"></a>6.2 SqlSession工厂对象SqlSessionFactory</h4><p>SqlSessionFactory 有多个个方法创建SqlSession 实例。常用的有如下两个：</p>
<p><img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8714.png" alt="1552653723002"></p>
<h4 id="6-3-SqlSession会话对象"><a href="#6-3-SqlSession会话对象" class="headerlink" title="6.3 SqlSession会话对象"></a>6.3 SqlSession会话对象</h4><p>SqlSession 实例在 MyBatis 中是非常强大的一个类。在这里你会看到所有执行语句、提交或回滚事务和获取映射器实例的方法。</p>
<p>执行语句的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function">&lt;E&gt; List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span></span></span><br></pre></td></tr></table></figure>

<p>操作事务的方法主要有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p>​    <img src="/2019/10/26/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191026mybatis/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/09mybatis-day01/%E7%AC%94%E8%AE%B0/assets/1565426688963.png" alt="1565426688963"></p>
</package></mapper></mapper></mapper>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的Dao层实现和文件深入</title>
    <url>/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/</url>
    <content><![CDATA[<h3 id="1-Mybatis的Dao层实现"><a href="#1-Mybatis的Dao层实现" class="headerlink" title="1.Mybatis的Dao层实现"></a>1.Mybatis的Dao层实现</h3><h4 id="1-1-传统开发方式"><a href="#1-1-传统开发方式" class="headerlink" title="1.1 传统开发方式"></a>1.1 传统开发方式</h4><h5 id="1-1-1编写UserDao接口"><a href="#1-1-1编写UserDao接口" class="headerlink" title="1.1.1编写UserDao接口"></a>1.1.1编写UserDao接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-2-编写UserDaoImpl实现"><a href="#1-1-2-编写UserDaoImpl实现" class="headerlink" title="1.1.2.编写UserDaoImpl实现"></a>1.1.2.编写UserDaoImpl实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream resourceAsStream = </span><br><span class="line">                    Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> </span><br><span class="line">                    SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;userMapper.findAll&quot;</span>);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="1-1-3-测试传统方式"><a href="#1-1-3-测试传统方式" class="headerlink" title="1.1.3 测试传统方式"></a>1.1.3 测试传统方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTraditionDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    List&lt;User&gt; all = userDao.findAll();</span><br><span class="line">    System.out.println(all);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">传统方式的缺点</span><br><span class="line">1) 每调用一次方法都要加载一次配置文件</span><br><span class="line">2) dao 层代码编写复杂,大量冗余代码</span><br><span class="line">针对上述缺陷,mybatis 底层使用动态代理+反射的技术提供了一些额外的功能,能够让我们的Dao 层代码变得更加简单</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="1-2-代理开发方式"><a href="#1-2-代理开发方式" class="headerlink" title="1.2 代理开发方式"></a>1.2 代理开发方式</h4><h5 id="1-2-1-代理开发方式介绍"><a href="#1-2-1-代理开发方式介绍" class="headerlink" title="1.2.1 代理开发方式介绍"></a>1.2.1 代理开发方式介绍</h5><p>采用 Mybatis 的代理开发方式实现 DAO 层的开发，这种方式是我们后面进入企业的主流。</p>
<p>Mapper 接口开发方法只需要程序员编写Mapper 接口（相当于Dao 接口），由Mybatis 框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。</p>
<p>Mapper 接口开发需要遵循以下规范：</p>
<p><strong>1) Mapper.xml文件中的namespace与mapper接口的全限定名相同</strong></p>
<p><strong>2) Mapper接口方法名和Mapper.xml中定义的每个statement的id相同</strong></p>
<p><strong>3) Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql的parameterType的类型相同</strong></p>
<p><strong>4) Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同</strong></p>
<p>补充:</p>
<p>​    0) 方法名称不能重复(不允许重载)</p>
<p>​        1) 同一个配置文件不能加载两次</p>
<p>​        2) <mapper class="com.itheima.dao.UserMapper"> 根据类名加载配置</mapper></p>
<p>​         要求 Mapper.java 和 Mapper.xml 名称应该一致,包名应该一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--加载映射文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper resource=&quot;com/itheima/mapper/UserMapper.xml&quot;&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;mapper class=&quot;com.itheima.dao.UserMapper&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.dao&quot;</span>/&gt;</span> 当配置文件很多的时候的时候,可以使用这种方式简化配置</span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为什么?</p>
<p>​    1) 如果 namespace与mapper接口的全限定名不同, </p>
<p>​        或者Mapper接口方法名和Mapper.xml中定义的每个statement的id不同</p>
<p>​        结果: mybatis 找不到 那条sql 要执行</p>
<p>​         2) 如果请求参数类型不同,无法封装请求参数</p>
<p>​         3) 如果 返回参数不同,mybatis 不知道要怎么封装参数</p>
<h5 id="1-2-2-编写UserMapper接口"><a href="#1-2-2-编写UserMapper接口" class="headerlink" title="1.2.2 编写UserMapper接口"></a>1.2.2 编写UserMapper接口</h5><p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE1.png"></p>
<h5 id="1-2-3测试代理方式"><a href="#1-2-3测试代理方式" class="headerlink" title="1.2.3测试代理方式"></a>1.2.3测试代理方式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxyDao</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">  UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-知识小结"><a href="#1-3-知识小结" class="headerlink" title="1.3 知识小结"></a>1.3 知识小结</h4><p>MyBatis的Dao层实现的两种方式：</p>
<p>手动对Dao进行实现：传统开发方式</p>
<p><strong>代理方式对Dao进行实现：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UserMapper userMapper &#x3D; sqlSession.getMapper(UserMapper.class);</span><br></pre></td></tr></table></figure>

<h4 id="1-4-为什么叫代理模式-即存在的问题"><a href="#1-4-为什么叫代理模式-即存在的问题" class="headerlink" title="1.4  为什么叫代理模式? 即存在的问题"></a>1.4  为什么叫代理模式? 即存在的问题</h4><p>mybatis底层使用的是代理模式</p>
<p>问题:</p>
<p>​    虽然我们dao 层代码简单了,但是我们的service 层代码变得复杂了? </p>
<p>后续和spring 整合,时会彻底解决</p>
<h3 id="2-MyBatis映射文件深入"><a href="#2-MyBatis映射文件深入" class="headerlink" title="2.MyBatis映射文件深入"></a>2.MyBatis映射文件深入</h3><h4 id="2-1-动态sql语句"><a href="#2-1-动态sql语句" class="headerlink" title="2.1 动态sql语句"></a>2.1 动态sql语句</h4><h5 id="2-1-1动态sql语句概述"><a href="#2-1-1动态sql语句概述" class="headerlink" title="2.1.1动态sql语句概述"></a>2.1.1动态sql语句概述</h5><p>Mybatis 的映射文件中，前面我们的 SQL 都是比较简单的，有些时候业务逻辑复杂时，我们的 SQL是动态变化的，此时在前面的学习中我们的 SQL 就不能满足要求了。</p>
<p>参考的官方文档，描述如下：</p>
<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%872.png"></p>
<h5 id="2-1-2动态-SQL-之-lt-if-gt"><a href="#2-1-2动态-SQL-之-lt-if-gt" class="headerlink" title="2.1.2动态 SQL  之&lt;**if&gt;**"></a>2.1.2动态 SQL  之&lt;**if&gt;**</h5><p>我们根据实体类的不同取值，使用不同的 SQL语句来进行查询。比如在 id如果不为空时可以根据id查询，如果username 不同空时还要加入用户名作为条件。这种情况在我们的多条件组合查询中经常会碰到。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;id!=0&quot;</span>&gt;</span></span><br><span class="line">            and id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null&quot;</span>&gt;</span></span><br><span class="line">            and username=#&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username!=null or  id!=0&quot;</span>  &gt;</span> 多判断条件</span><br><span class="line">               and username=#&#123;username&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当查询条件id和username都存在时，控制台打印的sql语句如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   … … …</span><br><span class="line">   <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">  User condition = <span class="keyword">new</span> User();</span><br><span class="line">  condition.setId(<span class="number">1</span>);</span><br><span class="line">  condition.setUsername(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line">  User user = userMapper.findByCondition(condition);</span><br><span class="line">  … … …</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%873.png"></p>
<p>当查询条件只有id存在时，控制台打印的sql语句如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> … … …</span><br><span class="line"> <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">User condition = <span class="keyword">new</span> User();</span><br><span class="line">condition.setId(<span class="number">1</span>);</span><br><span class="line">User user = userMapper.findByCondition(condition);</span><br><span class="line">… … …</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%874.png"></p>
<ol>
<li><p>where 标签会自动去除第一个and</p>
</li>
<li><p>where 标签不会帮助我们添加and</p>
</li>
</ol>
<h5 id="2-1-3-动态-SQL-之-lt-foreach-gt"><a href="#2-1-3-动态-SQL-之-lt-foreach-gt" class="headerlink" title="2.1.3 动态 SQL  之&lt;**foreach&gt;**"></a>2.1.3 动态 SQL  之&lt;**foreach&gt;**</h5><p>循环执行sql的拼接操作，例如：SELECT * FROM USER WHERE id IN (1,2,5)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from User</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"> open: 开始标签</span><br><span class="line"> close: 结束标签</span><br><span class="line"> separator: 分隔符</span><br><span class="line">collection: 被遍历的集合,默认必须是 collection 或者 list </span><br><span class="line">		可以使用 &quot;findByIds(@Param(&quot;ids&quot;) List<span class="tag">&lt;<span class="name">Integer</span>&gt;</span> ids);&quot; 自定义名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试代码片段如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> … … …</span><br><span class="line"> <span class="comment">//获得MyBatis框架生成的UserMapper接口的实现类</span></span><br><span class="line">UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="keyword">int</span>[] ids = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;;</span><br><span class="line">List&lt;User&gt; userList = userMapper.findByIds(ids);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">… … …</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%875.png"></p>
<p>foreach标签的属性含义如下：</p>
<p><foreach>标签用于遍历集合，它的属性：</foreach></p>
<p>•collection：代表要遍历的集合元素，注意编写时不要写#{}</p>
<p>•open：代表语句的开始部分</p>
<p>•close：代表结束部分</p>
<p>•item：代表遍历集合的每个元素，生成的变量名(局部变量)</p>
<p>•sperator：代表分隔符</p>
<h4 id="2-2-SQL片段抽取"><a href="#2-2-SQL片段抽取" class="headerlink" title="2.2 SQL片段抽取"></a>2.2 SQL片段抽取</h4><p>Sql 中可将重复的 sql 提取出来，使用时用 include 引用即可，最终达到 sql 重用的目的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--抽取sql片段简化编写--&gt;</span></span><br><span class="line">&lt;sql id=&quot;selectUser&quot; select * from User&lt;/sql&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span> where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByIds&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">补充: 不提倡使用select * 因为后续数据库发生变更 可能会导致字段不一致而有问题</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-3-知识小结"><a href="#2-3-知识小结" class="headerlink" title="2.3 知识小结"></a>2.3 知识小结</h4><p>MyBatis映射文件配置：</p>
<p>&lt;select&gt;：查询<br>&lt;insert&gt;：插入</p>
<p>​    <selectKey>: </selectKey></p>
<p><update>：修改</update></p>
<p><delete>：删除</delete></p>
<p><where>：where条件</where></p>
<p><if>：if判断</if></p>
<p><foreach>：循环</foreach></p>
<p><sql>：sql片段抽取</sql></p>
<h4 id="2-4-补充-Param"><a href="#2-4-补充-Param" class="headerlink" title="2.4 补充 @Param"></a>2.4 补充 @Param</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">public List<span class="tag">&lt;<span class="name">User</span>&gt;</span> findByUserNameAndPassword(@Param(&quot;username&quot;) String username ,@Param(&quot;password&quot;)String password);</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUserNameAndPassword&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">         select * from user where  password=#&#123;password&#125; and username=#&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3-MyBatis核心配置文件深入"><a href="#3-MyBatis核心配置文件深入" class="headerlink" title="3. MyBatis核心配置文件深入"></a>3. MyBatis核心配置文件深入</h3><h4 id="3-1typeHandlers标签"><a href="#3-1typeHandlers标签" class="headerlink" title="3.1typeHandlers标签"></a>3.1typeHandlers标签</h4><p>无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器（截取部分）。</p>
<p> <img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%876.png"></p>
<p>你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler， 然后可以选择性地将它映射到一个JDBC类型。例如需求：一个Java中的Date数据类型，我想将之存到数据库的时候存成一个1970年至今的毫秒数，取出来时转换成java的Date，即java的Date与数据库的varchar毫秒值之间转换。</p>
<p>开发步骤：</p>
<p>①定义转换类继承类BaseTypeHandler<T></T></p>
<p>②覆盖4个未实现的方法，其中setNonNullParameter为java程序设置数据到数据库的回调方法，getNullableResult为查询时 mysql的字符串类型转换成 java的Type类型的方法</p>
<p>③在MyBatis核心配置文件中进行注册</p>
<p>测试转换是否正确</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1)此处的泛型指的是 java 类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTypeHandler</span> <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">Date</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//将java类型 转换成 数据库需要的类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preparedStatement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i  ? 索引角标位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> date</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jdbcType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement preparedStatement, <span class="keyword">int</span> i, Date date, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        preparedStatement.setLong(i,time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="comment">//String参数  要转换的字段名称</span></span><br><span class="line">    <span class="comment">//ResultSet 查询出的结果集</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, String cloumnNname)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//获得结果集中需要的数据(long) 转换成Date类型 返回</span></span><br><span class="line">        <span class="keyword">long</span> aLong = resultSet.getLong(cloumnNname);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(ResultSet resultSet, <span class="keyword">int</span> index)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> aLong = resultSet.getLong(index);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据库中类型 转换成java类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getNullableResult</span><span class="params">(CallableStatement callableStatement, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> aLong = callableStatement.getLong(i);</span><br><span class="line">        Date date = <span class="keyword">new</span> Date(aLong);</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(<span class="string">&quot;select id,username,password,birthday from user&quot;</span>);</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            resultSet.getLong(<span class="number">3</span>);</span><br><span class="line">            resultSet.getLong(<span class="string">&quot;birthday&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册类型自定义转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.itheima.typeHandlers.MyDateTypeHandler&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandler</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试添加操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">userMapper.add2(user);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数据库数据：</p>
<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%877.png"></p>
<p>测试查询操作：</p>
<p>​    </p>
<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%878.png"></p>
<h4 id="3-2-plugins标签"><a href="#3-2-plugins标签" class="headerlink" title="3.2 plugins标签"></a>3.2 plugins标签</h4><p>MyBatis可以使用第三方的插件来对功能进行扩展，分页助手PageHelper是将分页的复杂操作进行封装，使用简单的方式即可获得分页的相关数据</p>
<p>开发步骤：</p>
<p>①导入通用PageHelper的坐标</p>
<p>②在mybatis核心配置文件中配置PageHelper插件</p>
<p>③测试分页数据获取</p>
<h5 id="①导入通用PageHelper坐标"><a href="#①导入通用PageHelper坐标" class="headerlink" title="①导入通用PageHelper坐标"></a>①导入通用PageHelper坐标</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页助手 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="②在mybatis核心配置文件中配置PageHelper插件"><a href="#②在mybatis核心配置文件中配置PageHelper插件" class="headerlink" title="②在mybatis核心配置文件中配置PageHelper插件"></a>②在mybatis核心配置文件中配置PageHelper插件</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注意：分页助手的插件  配置在通用馆mapper之前 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageHelper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定方言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="③测试分页代码实现"><a href="#③测试分页代码实现" class="headerlink" title="③测试分页代码实现"></a>③测试分页代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置分页参数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; select = userMapper2.select(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// Page&lt;User&gt; userList = (Page&lt;User&gt;)mapper.findAll();</span></span><br><span class="line">    <span class="keyword">for</span>(User user : select)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------</span><br><span class="line"> PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">// 当前线程全局变量 ,紧跟着的查询第一次使用后失效</span></span><br><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>获得分页相关的其他参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其他分页的数据</span></span><br><span class="line">PageInfo&lt;User&gt; pageInfo = <span class="keyword">new</span> PageInfo&lt;User&gt;(select);</span><br><span class="line">System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">System.out.println(<span class="string">&quot;总页数：&quot;</span>+pageInfo.getPages());</span><br><span class="line">System.out.println(<span class="string">&quot;当前页：&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">System.out.println(<span class="string">&quot;每页显示长度：&quot;</span>+pageInfo.getPageSize());</span><br><span class="line">System.out.println(<span class="string">&quot;是否第一页：&quot;</span>+pageInfo.isIsFirstPage());</span><br><span class="line">System.out.println(<span class="string">&quot;是否最后一页：&quot;</span>+pageInfo.isIsLastPage());</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-3-知识小结"><a href="#3-3-知识小结" class="headerlink" title="3.3 知识小结"></a>3.3 知识小结</h4><p>MyBatis核心配置文件常用标签：</p>
<p>1、properties标签：该标签可以加载外部的properties文件</p>
<p>2、typeAliases标签：设置类型别名</p>
<p>3、environments标签：数据源环境配置标签</p>
<p>4、typeHandlers标签：配置自定义类型处理器</p>
<p>5、plugins标签：配置MyBatis的插件</p>
<h3 id="补充ResultMap"><a href="#补充ResultMap" class="headerlink" title="补充ResultMap"></a>补充ResultMap</h3><ol>
<li>当数据库字段类型和java POJO 类不匹配时</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//private String userName;// linux 下区分大小写,windows 环境下不区分大小写</span></span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--resultMap 标签用来处理映射字段不一致的问题</span></span><br><span class="line"><span class="comment">       1)id=&quot;userMap&quot; 表示 给  &lt;resultMap 标签起一个名字</span></span><br><span class="line"><span class="comment">       2)type=&quot;user&quot;: 返回类型,</span></span><br><span class="line"><span class="comment">===========================</span></span><br><span class="line"><span class="comment">        &lt;id&gt;&lt;/id&gt; 用于主键字段</span></span><br><span class="line"><span class="comment">        &lt;result&gt;用于非主键字段</span></span><br><span class="line"><span class="comment">        property=&quot;id&quot; 表示java 实体类属性字段</span></span><br><span class="line"><span class="comment">         column=&quot;id&quot;  表示 数据库字段</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span> &gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2019/10/27/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191027Mybatis%E7%9A%84Dao%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%96%87%E4%BB%B6%E6%B7%B1%E5%85%A5/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/10mybatis-day02/%E7%AC%94%E8%AE%B0/assets/1565279531746.png" alt="1565279531746"></p>
<h5 id><a href="#" class="headerlink" title></a></h5><h2 id="补充-逆向工程"><a href="#补充-逆向工程" class="headerlink" title="补充 逆向工程"></a>补充 逆向工程</h2><p>简介</p>
<p>​    mybatis 官方提供了一种逆袭自动生成dao 层所需的所有代码的工具,,使用该工具我们将会自动生成dao 层所需的所有代码,后续将极大加快我们开发的速度</p>
<p> 步骤</p>
<ol>
<li>修改 generatorConfig.xml</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)修改数据库连接</span><br><span class="line">2)修改生成文件的包名和路径</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2)双击执行 执行脚本 autoscript.bat</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意:</span><br><span class="line">	每次执行时请先删除原来的文件,否则生成的xml 文件会重复</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>生成文件说明</p>
</li>
<li><p>数据库的每个表会生成</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UserMapp.java 接口</span><br><span class="line"></span><br><span class="line">UserMapp.xml 配置文件</span><br><span class="line"></span><br><span class="line">User.java 实体类</span><br><span class="line">UserExample.java 查询工具类</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li> 查询工具类使用方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1) 获取接口</span></span><br><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"><span class="comment">// 2)通过构造工具类</span></span><br><span class="line">UserExample util = <span class="keyword">new</span> UserExample(); </span><br><span class="line"><span class="comment">// selet * from user where 1=1 and  id like and name =&#x27;lucy&#x27; </span></span><br><span class="line"><span class="comment">// 3)构造查询条件</span></span><br><span class="line">   util.createCriteria().andIdEqualTo(<span class="number">1</span>).andUserNameEqualTo(<span class="string">&quot;lucy&quot;</span>);</span><br><span class="line"><span class="comment">// 4) 执行查询</span></span><br><span class="line">        List&lt;User&gt; list = mapper.selectByExample(util);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的多表查询和注解开发</title>
    <url>/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="1-Mybatis多表查询"><a href="#1-Mybatis多表查询" class="headerlink" title="1.Mybatis多表查询"></a>1.Mybatis多表查询</h3><h4 id="1-1-一对一查询"><a href="#1-1-一对一查询" class="headerlink" title="1.1 一对一查询"></a>1.1 一对一查询</h4><h5 id="1-1-1-一对一查询的模型"><a href="#1-1-1-一对一查询的模型" class="headerlink" title="1.1.1 一对一查询的模型"></a>1.1.1 一对一查询的模型</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%871.png"></p>
<a id="more"></a>

<h5 id="1-1-2一对一查询的语句"><a href="#1-1-2一对一查询的语句" class="headerlink" title="1.1.2一对一查询的语句"></a>1.1.2一对一查询的语句</h5><p>对应的sql语句：select *  from orders o,user u where o.uid=u.id;</p>
<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%872.png"></p>
<h5 id="1-1-3-创建Order和User实体"><a href="#1-1-3-创建Order和User实体" class="headerlink" title="1.1.3 创建Order和User实体"></a>1.1.3 创建Order和User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-4-创建OrderMapper接口"><a href="#1-1-4-创建OrderMapper接口" class="headerlink" title="1.1.4 创建OrderMapper接口"></a>1.1.4 创建OrderMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-1-5-配置OrderMapper-xml"><a href="#1-1-5-配置OrderMapper-xml" class="headerlink" title="1.1.5 配置OrderMapper.xml"></a>1.1.5 配置OrderMapper.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;user.birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;orderMap&quot;</span>&gt;</span></span><br><span class="line">        select * from orders o,user u where o.uid=u.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<resultMap>还可以配置如下：</resultMap></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;orderMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-1-6-测试结果"><a href="#1-1-6-测试结果" class="headerlink" title="1.1.6 测试结果"></a>1.1.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OrderMapper mapper = sqlSession.getMapper(OrderMapper.class);</span><br><span class="line">List&lt;Order&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(Order order : all)&#123;</span><br><span class="line">    System.out.println(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%873.png"></p>
<h4 id="1-2-一对多查询"><a href="#1-2-一对多查询" class="headerlink" title="1.2 一对多查询"></a>1.2 一对多查询</h4><h5 id="1-2-1-一对多查询的模型"><a href="#1-2-1-一对多查询的模型" class="headerlink" title="1.2.1 一对多查询的模型"></a>1.2.1 一对多查询的模型</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p>
<p>  <img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%874.png"></p>
<h5 id="1-2-2-一对多查询的语句"><a href="#1-2-2-一对多查询的语句" class="headerlink" title="1.2.2 一对多查询的语句"></a>1.2.2 一对多查询的语句</h5><p>对应的sql语句：select *,o.id oid from user u left join orders o on u.id=o.uid;</p>
<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%875.png"></p>
<h5 id="1-2-3-修改User实体"><a href="#1-2-3-修改User实体" class="headerlink" title="1.2.3 修改User实体"></a>1.2.3 修改User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1-2-4-创建UserMapper接口"><a href="#1-2-4-创建UserMapper接口" class="headerlink" title="1.2.4 创建UserMapper接口"></a>1.2.4 创建UserMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1-2-5-配置UserMapper-xml"><a href="#1-2-5-配置UserMapper-xml" class="headerlink" title="1.2.5 配置UserMapper.xml"></a>1.2.5 配置UserMapper.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;orderList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Order&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;oid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;ordertime&quot;</span> <span class="attr">property</span>=<span class="string">&quot;ordertime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select *,o.id oid from user u left join orders o on u.id=o.uid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-6-测试结果"><a href="#1-2-6-测试结果" class="headerlink" title="1.2.6 测试结果"></a>1.2.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAll();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%876.png"></p>
<h4 id="1-3-多对多查询"><a href="#1-3-多对多查询" class="headerlink" title="1.3 多对多查询"></a>1.3 多对多查询</h4><h5 id="1-3-1-多对多查询的模型"><a href="#1-3-1-多对多查询的模型" class="headerlink" title="1.3.1 多对多查询的模型"></a>1.3.1 多对多查询的模型</h5><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%877.png"></p>
<h5 id="1-3-2-多对多查询的语句"><a href="#1-3-2-多对多查询的语句" class="headerlink" title="1.3.2 多对多查询的语句"></a>1.3.2 多对多查询的语句</h5><p>对应的sql语句：select u.<em>,r.</em>,r.id rid from user u left join user_role ur on u.id=ur.user_id</p>
<p> inner join role r on ur.role_id=r.id;</p>
<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%878.png"></p>
<h5 id="1-3-3-创建Role实体，修改User实体"><a href="#1-3-3-创建Role实体，修改User实体" class="headerlink" title="1.3.3 创建Role实体，修改User实体"></a>1.3.3 创建Role实体，修改User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1-3-4-添加UserMapper接口方法"><a href="#1-3-4-添加UserMapper接口方法" class="headerlink" title="1.3.4  添加UserMapper接口方法"></a>1.3.4  添加UserMapper接口方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndRole</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="1-3-5-配置UserMapper-xml"><a href="#1-3-5-配置UserMapper-xml" class="headerlink" title="1.3.5 配置UserMapper.xml"></a>1.3.5 配置UserMapper.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userRoleMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roleList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Role&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;rolename&quot;</span> <span class="attr">property</span>=<span class="string">&quot;rolename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAllUserAndRole&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userRoleMap&quot;</span>&gt;</span></span><br><span class="line">    select u.*,r.*,r.id rid from user u left join user_role ur on u.id=ur.user_id</span><br><span class="line">    inner join role r on ur.role_id=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-3-6-测试结果"><a href="#1-3-6-测试结果" class="headerlink" title="1.3.6 测试结果"></a>1.3.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList)&#123;</span><br><span class="line">        System.out.println(role);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%879.png"></p>
<h4 id="1-4-知识小结"><a href="#1-4-知识小结" class="headerlink" title="1.4 知识小结"></a>1.4 知识小结</h4><p>MyBatis多表配置方式：</p>
<p><strong>一对一配置：使用<resultMap>做配置</resultMap></strong></p>
<p><strong>一对多配置：使用<resultMap>+<collection>做配置</collection></resultMap></strong></p>
<p><strong>多对多配置：使用<resultMap>+<collection>做配置</collection></resultMap></strong></p>
<h3 id="2-Mybatis的注解开发"><a href="#2-Mybatis的注解开发" class="headerlink" title="2.Mybatis的注解开发"></a>2.Mybatis的注解开发</h3><h4 id="2-1-MyBatis的常用注解"><a href="#2-1-MyBatis的常用注解" class="headerlink" title="2.1 MyBatis的常用注解"></a>2.1 MyBatis的常用注解</h4><p>这几年来注解开发越来越流行，Mybatis也可以使用注解开发方式，这样我们就可以减少编写Mapper</p>
<p>映射文件了。我们先围绕一些基本的CRUD来学习，再学习复杂映射多表操作。</p>
<p>@Insert：实现新增</p>
<p>@Update：实现更新</p>
<p>@Delete：实现删除</p>
<p>@Select：实现查询</p>
<p>@Result：实现结果集封装</p>
<p>@Results：可以与@Result 一起使用，封装多个结果集</p>
<p>@One：实现一对一结果集封装</p>
<p>@Many：实现一对多结果集封装</p>
<h4 id="2-2-MyBatis的增删改查"><a href="#2-2-MyBatis的增删改查" class="headerlink" title="2.2 MyBatis的增删改查"></a>2.2 MyBatis的增删改查</h4><p>我们完成简单的user表的增删改查的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> </span><br><span class="line">                 SqlSessionFactoryBuilder().build(resourceAsStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">    userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(<span class="string">&quot;测试数据&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    userMapper.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setId(<span class="number">16</span>);</span><br><span class="line">    user.setUsername(<span class="string">&quot;测试数据修改&quot;</span>);</span><br><span class="line">    user.setPassword(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    user.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    userMapper.delete(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    User user = userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改MyBatis的核心配置文件，我们使用了注解替代的映射文件，所以我们只需要加载使用了注解的Mapper接口即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者指定扫描包含映射关系的接口所在的包也可以</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描使用注解的类所在的包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-MyBatis的注解实现复杂映射开发"><a href="#2-3-MyBatis的注解实现复杂映射开发" class="headerlink" title="2.3 MyBatis的注解实现复杂映射开发"></a>2.3 MyBatis的注解实现复杂映射开发</h4><p>实现复杂关系映射之前我们可以在映射文件中通过配置<resultMap>来实现，使用注解开发后，我们可以使用@Results注解，@Result注解，@One注解，@Many注解组合完成复杂关系的配置</resultMap></p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8710.png"></p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8711.png"></p>
<h4 id="2-4-一对一查询"><a href="#2-4-一对一查询" class="headerlink" title="2.4 一对一查询"></a>2.4 一对一查询</h4><h5 id="2-4-1-一对一查询的模型"><a href="#2-4-1-一对一查询的模型" class="headerlink" title="2.4.1 一对一查询的模型"></a>2.4.1 一对一查询的模型</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对一查询的需求：查询一个订单，与此同时查询出该订单所属的用户</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8712.png"></p>
<h5 id="2-4-2-一对一查询的语句"><a href="#2-4-2-一对一查询的语句" class="headerlink" title="2.4.2 一对一查询的语句"></a>2.4.2 一对一查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from orders;</span><br><span class="line"></span><br><span class="line">select * from user where id&#x3D;查询出订单的uid;</span><br></pre></td></tr></table></figure>

<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8713.png"></p>
<h5 id="2-4-3-创建Order和User实体"><a href="#2-4-3-创建Order和User实体" class="headerlink" title="2.4.3 创建Order和User实体"></a>2.4.3 创建Order和User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-4-创建OrderMapper接口"><a href="#2-4-4-创建OrderMapper接口" class="headerlink" title="2.4.4 创建OrderMapper接口"></a>2.4.4 创建OrderMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-5-使用注解配置Mapper"><a href="#2-4-5-使用注解配置Mapper" class="headerlink" title="2.4.5 使用注解配置Mapper"></a>2.4.5 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id=true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;ordertime&quot;,column = &quot;ordertime&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;total&quot;,column = &quot;total&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;user&quot;,column = &quot;uid&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = User.class,</span></span><br><span class="line"><span class="meta">                    one = @One(select = &quot;com.itheima.mapper.UserMapper.findById&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-6-测试结果"><a href="#2-4-6-测试结果" class="headerlink" title="2.4.6 测试结果"></a>2.4.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOrderAndUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Order&gt; all = orderMapper.findAll();</span><br><span class="line">    <span class="keyword">for</span>(Order order : all)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8714.png"></p>
<h4 id="2-5-一对多查询"><a href="#2-5-一对多查询" class="headerlink" title="2.5 一对多查询"></a>2.5 一对多查询</h4><h5 id="2-5-1-一对多查询的模型"><a href="#2-5-1-一对多查询的模型" class="headerlink" title="2.5.1 一对多查询的模型"></a>2.5.1 一对多查询的模型</h5><p>用户表和订单表的关系为，一个用户有多个订单，一个订单只从属于一个用户</p>
<p>一对多查询的需求：查询一个用户，与此同时查询出该用户具有的订单</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8715.png"></p>
<h5 id="2-5-2-一对多查询的语句"><a href="#2-5-2-一对多查询的语句" class="headerlink" title="2.5.2 一对多查询的语句"></a>2.5.2 一对多查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user;</span><br><span class="line"></span><br><span class="line">select * from orders where uid&#x3D;查询出用户的id;</span><br></pre></td></tr></table></figure>

<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8716.png"></p>
<h5 id="2-5-3-修改User实体"><a href="#2-5-3-修改User实体" class="headerlink" title="2.5.3 修改User实体"></a>2.5.3 修改User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Date ordertime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> total;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//代表当前订单从属于哪一个客户</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-4-创建UserMapper接口"><a href="#2-5-4-创建UserMapper接口" class="headerlink" title="2.5.4 创建UserMapper接口"></a>2.5.4 创建UserMapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndOrder</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-5-使用注解配置Mapper"><a href="#2-5-5-使用注解配置Mapper" class="headerlink" title="2.5.5 使用注解配置Mapper"></a>2.5.5 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;username&quot;,column = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;password&quot;,column = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;birthday&quot;,column = &quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;orderList&quot;,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                    javaType = List.class,</span></span><br><span class="line"><span class="meta">                    many = @Many(select = &quot;com.itheima.mapper.OrderMapper.findByUid&quot;))</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAllUserAndOrder</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from orders where uid=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-5-6-测试结果"><a href="#2-5-6-测试结果" class="headerlink" title="2.5.6 测试结果"></a>2.5.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; all = userMapper.findAllUserAndOrder();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Order&gt; orderList = user.getOrderList();</span><br><span class="line">    <span class="keyword">for</span>(Order order : orderList)&#123;</span><br><span class="line">        System.out.println(order);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8717.png"></p>
<h4 id="2-6-多对多查询"><a href="#2-6-多对多查询" class="headerlink" title="2.6 多对多查询"></a>2.6 多对多查询</h4><h5 id="2-6-1-多对多查询的模型"><a href="#2-6-1-多对多查询的模型" class="headerlink" title="2.6.1 多对多查询的模型"></a>2.6.1 多对多查询的模型</h5><p>用户表和角色表的关系为，一个用户有多个角色，一个角色被多个用户使用</p>
<p>多对多查询的需求：查询用户同时查询出该用户的所有角色</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8718.png"></p>
<h5 id="2-6-2-多对多查询的语句"><a href="#2-6-2-多对多查询的语句" class="headerlink" title="2.6.2 多对多查询的语句"></a>2.6.2 多对多查询的语句</h5><p>对应的sql语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user;</span><br><span class="line"></span><br><span class="line">select * from role r,user_role ur where r.id&#x3D;ur.role_id and ur.user_id&#x3D;用户的id</span><br></pre></td></tr></table></figure>

<p>查询的结果如下：</p>
<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8719.png"></p>
<h5 id="2-6-3-创建Role实体，修改User实体"><a href="#2-6-3-创建Role实体，修改User实体" class="headerlink" title="2.6.3 创建Role实体，修改User实体"></a>2.6.3 创建Role实体，修改User实体</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些订单</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Order&gt; orderList;</span><br><span class="line">    <span class="comment">//代表当前用户具备哪些角色</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roleList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String rolename;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-4-添加UserMapper接口方法"><a href="#2-6-4-添加UserMapper接口方法" class="headerlink" title="2.6.4 添加UserMapper接口方法"></a>2.6.4 添加UserMapper接口方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndRole</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h5 id="2-6-5-使用注解配置Mapper"><a href="#2-6-5-使用注解配置Mapper" class="headerlink" title="2.6.5 使用注解配置Mapper"></a>2.6.5 使用注解配置Mapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;username&quot;,column = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;password&quot;,column = &quot;password&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;birthday&quot;,column = &quot;birthday&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;roleList&quot;,column = &quot;id&quot;,</span></span><br><span class="line"><span class="meta">                javaType = List.class,</span></span><br><span class="line"><span class="meta">                many = @Many(select = &quot;com.itheima.mapper.RoleMapper.findByUid&quot;))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findAllUserAndRole</span><span class="params">()</span></span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RoleMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from role r,user_role ur where r.id=ur.role_id and ur.user_id=#&#123;uid&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Role&gt; <span class="title">findByUid</span><span class="params">(<span class="keyword">int</span> uid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-6-6-测试结果"><a href="#2-6-6-测试结果" class="headerlink" title="2.6.6 测试结果"></a>2.6.6 测试结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; all = mapper.findAllUserAndRole();</span><br><span class="line"><span class="keyword">for</span>(User user : all)&#123;</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    List&lt;Role&gt; roleList = user.getRoleList();</span><br><span class="line">    <span class="keyword">for</span>(Role role : roleList)&#123;</span><br><span class="line">        System.out.println(role);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/%E5%9B%BE%E7%89%8720.png"></p>
<h3 id="SSM框架整合"><a href="#SSM框架整合" class="headerlink" title="SSM框架整合"></a>SSM框架整合</h3><h4 id="1-1-原始方式整合"><a href="#1-1-原始方式整合" class="headerlink" title="1.1 原始方式整合"></a>1.1 原始方式整合</h4><h5 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.准备工作"></a>1.准备工作</h5><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/7.png"></p>
<h5 id="2-创建Maven工程"><a href="#2-创建Maven工程" class="headerlink" title="2.创建Maven工程"></a>2.创建Maven工程</h5><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/8.png"></p>
<h5 id="3-导入Maven坐标"><a href="#3-导入Maven坐标" class="headerlink" title="3.导入Maven坐标"></a>3.导入Maven坐标</h5><p>参考：<strong>素材/配置文件/pom.xml文件</strong></p>
<h5 id="4-编写实体类"><a href="#4-编写实体类" class="headerlink" title="4.编写实体类"></a>4.编写实体类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-编写Mapper接口"><a href="#5-编写Mapper接口" class="headerlink" title="5.编写Mapper接口"></a>5.编写Mapper接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>;</span><br><span class="line">    <span class="comment">//查询账户数据</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6-编写Service接口"><a href="#6-编写Service接口" class="headerlink" title="6.编写Service接口"></a>6.编写Service接口</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span></span>; <span class="comment">//保存账户数据</span></span><br><span class="line">    <span class="function">List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span></span>; <span class="comment">//查询账户数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7-编写Service接口实现"><a href="#7-编写Service接口实现" class="headerlink" title="7.编写Service接口实现"></a>7.编写Service接口实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.openSession();</span><br><span class="line">        AccountMapper accountMapper = sqlSession.getMapper(AccountMapper.class);</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8-编写Controller"><a href="#8-编写Controller" class="headerlink" title="8.编写Controller"></a>8.编写Controller</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(Account account)</span></span>&#123;</span><br><span class="line">        accountService.save(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;save success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;accountList&quot;</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;accountList&quot;</span>,accountService.findAll());</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="9-编写添加页面"><a href="#9-编写添加页面" class="headerlink" title="9.编写添加页面"></a>9.编写添加页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> <span class="attr">language</span>=<span class="string">&quot;java&quot;</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>保存账户信息表单<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/save.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        账户金额<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="10-编写列表页面"><a href="#10-编写列表页面" class="headerlink" title="10.编写列表页面"></a>10.编写列表页面</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>账户金额<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;accountList&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;account.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;account.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;account.money&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="11-编写相应配置文件-文件参考目录：素材-配置文件"><a href="#11-编写相应配置文件-文件参考目录：素材-配置文件" class="headerlink" title="11.编写相应配置文件(文件参考目录：素材/配置文件)"></a>11.编写相应配置文件(文件参考目录：素材/配置文件)</h5><p>•Spring配置文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/applicationContext.xml">applicationContext.xml</a></p>
<p>•SprngMVC配置文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/spring-mvc.xml">spring-mvc.xml</a></p>
<p>•MyBatis映射文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/AccountMapper.xml">AccountMapper.xml</a></p>
<p>•MyBatis核心文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/sqlMapConfig.xml">sqlMapConfig.xml</a></p>
<p>•数据库连接信息文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/jdbc.properties">jdbc.properties</a></p>
<p>•Web.xml文件：<a href="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/web.xml">web.xml</a></p>
<p>•日志文件：[log4j.xml](</p>
<h5 id="12-测试添加账户"><a href="#12-测试添加账户" class="headerlink" title="12.测试添加账户"></a>12.测试添加账户</h5><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/9.jpg"></p>
<h5 id="13-测试账户列表"><a href="#13-测试账户列表" class="headerlink" title="13.测试账户列表"></a>13.测试账户列表</h5><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/10.png"></p>
<h4 id="1-2-Spring整合MyBatis"><a href="#1-2-Spring整合MyBatis" class="headerlink" title="1.2 Spring整合MyBatis"></a>1.2 Spring整合MyBatis</h4><h5 id="1-整合思路"><a href="#1-整合思路" class="headerlink" title="1.整合思路"></a>1.整合思路</h5><p><img src="/2019/10/28/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191028Mybatis%E7%9A%84%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/01.JavaSSM/11mybatis-day03/%E7%AC%94%E8%AE%B0/img/11.png"></p>
<h5 id="2-将SqlSessionFactory配置到Spring容器中"><a href="#2-将SqlSessionFactory配置到Spring容器中" class="headerlink" title="2.将SqlSessionFactory配置到Spring容器中"></a>2.将SqlSessionFactory配置到Spring容器中</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--加载jdbc.properties--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置MyBatis的SqlSessionFactory--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:sqlMapConfig.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3-扫描Mapper，让Spring容器产生Mapper实现类"><a href="#3-扫描Mapper，让Spring容器产生Mapper实现类" class="headerlink" title="3.扫描Mapper，让Spring容器产生Mapper实现类"></a>3.扫描Mapper，让Spring容器产生Mapper实现类</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置Mapper扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4-配置声明式事务控制"><a href="#4-配置声明式事务控制" class="headerlink" title="4.配置声明式事务控制"></a>4.配置声明式事务控制</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置声明式事务控制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transacionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transacionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itheima.service.impl.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="5-修改Service实现类代码"><a href="#5-修改Service实现类代码" class="headerlink" title="5.修改Service实现类代码"></a>5.修改Service实现类代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;accountService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountMapper accountMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        accountMapper.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/</url>
    <content><![CDATA[<p>IDea 设置自动提示 .安装后重启</p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1573614083577.png" alt="1573614083577"></p>
<p>使用nmp 安装的vue 才会提示,不使用 npm 而是直接导入的idea 没有提示</p>
<p>如果还没有提示:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;li1325169021&#x2F;article&#x2F;details&#x2F;99710057</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="1-Vue概述"><a href="#1-Vue概述" class="headerlink" title="1. Vue概述"></a>1. Vue概述</h2><p><strong>目标</strong>：MVVM模式应用特点，Vue概念</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVVM模式</span><br><span class="line">M：即Model，模型，包括数据和一些基本操作</span><br><span class="line">V：即View，视图，页面渲染结果</span><br><span class="line">VM：即View-Model，模型与视图间的双向操作,系统自动执行（无需开发人员干涉）</span><br></pre></td></tr></table></figure>

<p>MVVM通过视图与模型的双向绑定，简化前端操作。Vue是一款前端渐进式框架，可以提高前端开发效率。</p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1573609896584.png" alt="1573609896584"></p>
<h2 id="2-搭建示例工程"><a href="#2-搭建示例工程" class="headerlink" title="2. 搭建示例工程"></a>2. 搭建示例工程</h2><p><strong>目标</strong>：使用IDEA创建示例工程并在工程中通过npm安装下载vue.js</p>
<p><strong>分析</strong>：</p>
<p>vue是一个前端框架，也是其实是一个js文件；下载vue.js文件并在页面中引入该js文件。</p>
<p>vue.js的下载方式：</p>
<ul>
<li><p>可以引用在线的vue.js； (需要依赖别人网站的资源,,一般不使用)</p>
</li>
<li><p>可以离线下载vue.js；(本地下载好引用)</p>
</li>
<li><p>npm包资源管理器，可以下载vue.js </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm 安装的方式和自己下载的区别在于 npm 的安装会将vue 所依赖的其他js 文件一并下载</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>小结</strong>：</p>
<p>使用了npm的方式安装vue模块：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment">#下载vue模块</span></span><br><span class="line">npm install vue --save</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install 和   npm install --save 的区别   npm install --save-dev</span><br><span class="line"></span><br><span class="line">1)npm install  默认是 npm install --save </span><br><span class="line">2)安装完毕之后会将安装信息写在 package.json &lt;dependencies&gt; 文件中(相当于自动导入maven 的坐标, scope 是 compile)</span><br><span class="line">3) npm install --save-dev  装完毕之后会将安装信息写在 package.json &lt;devdependencies&gt; 中</span><br><span class="line">(相当于自动导入maven 的坐标, scope 是 provide) 开发有效,有序上限不需要</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="3-演示双向绑定与事件处理"><a href="#3-演示双向绑定与事件处理" class="headerlink" title="3. 演示双向绑定与事件处理"></a>3. 演示双向绑定与事件处理</h2><p><strong>目标</strong>：创建01-demo.html页面并初始化Vue实例，通过console修改Vue数据实现双向绑定效果和创建按钮实现点击即自增</p>
<p><strong>分析</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 创建页面，初始化vue；</span><br><span class="line">2. &#123;&#123;&#125;&#125;获取显示数据；</span><br><span class="line">3. v-model实现双向绑定；</span><br><span class="line">4. v-on演示事件处理</span><br></pre></td></tr></table></figure>

<p>注意事项:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) js 代码必须写在 html 标签后面否则不识别,应为 html 是从上至下解析</span><br><span class="line">2)  &#123;&#123;&#125;&#125;  没有 $ </span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vuejs测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125; 非常酷！有&#123;&#123;num&#125;&#125;个学科。<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            name:<span class="string">&quot;黑马&quot;</span>,</span></span><br><span class="line">            num: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1566982014687.png" alt="1566982014687"></p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1566982178097.png" alt="1566982178097"></p>
<h2 id="4-Vue实例生命周期及钩子函数"><a href="#4-Vue实例生命周期及钩子函数" class="headerlink" title="4. Vue实例生命周期及钩子函数"></a>4. Vue实例生命周期及钩子函数</h2><p><strong>目标</strong>：了解Vue实例生命周期，生命周期的钩子函数及created函数常用场景</p>
<p><strong>分析</strong>：</p>
<p>在创建vue实例的时候可以指定模板id、数据和方法；而如果要在实例化、模板渲染的过程中需要执行一些其它操作的话；那么可以使用钩子函数。</p>
<p><strong>小结</strong>：</p>
<p>VUE 的声明周期</p>
<p>VUE 的整个执行是有一个动态的过程的,先干什么,后干什么,这个过程我们叫做生命周期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">生命周期的过程</span><br><span class="line">1) 初始化 init</span><br><span class="line">2) 将初始化的数据 和页面元素绑定 (mount)  (单词: mount: v.准备,阻止展开)</span><br><span class="line">    (页面元素发生变化,会持续update)</span><br><span class="line">3) 销毁</span><br></pre></td></tr></table></figure>

<p>而整个生命周期我们可以定义函数进行干预,vue 的整个过程</p>
<p>vue 自带了一些函数 能够让我们干预,这些函数叫做钩子函数, 只要我们定义好了,<strong>VUE底层会自动”钩取”调用</strong></p>
<p>钩子函数会在vue实例的各个生命周期阶段自动调用；具体有：</p>
<p>beforeCreate， </p>
<p>created,  (对象创建时)</p>
<p>beforeMount,</p>
<p>mounted, (渲染,就是第一次吧数据赋值到html 元素中)</p>
<p>beforeUpdate，</p>
<p>updated, (更新)</p>
<p>beforeDestroy</p>
<p>destroyed，</p>
<p>例如</p>
<p>​    creatre 钩子函数常用场景：用于初始化数据</p>
<blockquote>
<p>钩子函数不要使用箭头函数的方式编写。</p>
</blockquote>
<p>回忆箭头函数</p>
<p>在es6 中定义函数有了一种新的写法(箭头函数)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> hello=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// es6 无参</span></span><br><span class="line">    <span class="keyword">var</span> hello2 =<span class="function">()=&gt;</span>  alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 有参</span></span><br><span class="line"><span class="keyword">var</span> hello3 =<span class="function">(<span class="params">t</span>)=&gt;</span>  alert(t);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1568861943673.png" alt="1568861943673"></p>
<p>Idea 默认只支持ES5 语法,需要设置ES6</p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1568817543395.png" alt="1568817543395"></p>
<h2 id="5-插值、v-text和v-html"><a href="#5-插值、v-text和v-html" class="headerlink" title="5. 插值、v-text和v-html"></a>5. 插值、v-text和v-html</h2><p><strong>目标</strong>：插值使用场景和要求；v-text和v-html的作用</p>
<p><strong>小结</strong>：</p>
<p>插值表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;表达式&#125;&#125; 从data 中获取数据</span><br></pre></td></tr></table></figure>

<p><strong>插值</strong>可以使用在有需要显示vue实例数据的地方，可以在插值表达式中调用实例的数据属性和函数。</p>
<p>v-text和v-html的作用：可以将数据在模板中进行显示；<strong>区别</strong>：</p>
<p>v-html会对内容中出现的html标签进行渲染，而v-text会将内容当做普遍文本输出到元素里面。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    v-text：&lt;span v-text=<span class="string">&quot;msg&quot;</span>&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">    v-html：&lt;span v-html=<span class="string">&quot;msg&quot;</span>&gt;&lt;/span&gt;&lt;br&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            msg: <span class="string">&quot;&lt;h2&gt;hello, vue&lt;/h2&gt;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1566995496948.png" alt="1566995496948"></p>
<h2 id="6-指令-v-model使用"><a href="#6-指令-v-model使用" class="headerlink" title="6. 指令- v-model使用"></a>6. 指令- v-model使用</h2><p><strong>目标</strong>：使用v-model指令实现复选框的双向绑定</p>
<p><strong>小结</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>Java<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Python&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>Python<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Swift&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span>&gt;</span>Swift<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        你选择了：&#123;&#123;language.join(&quot;，&quot;)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            language:[]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>多个 checkbox 对应一个model时，model的类型是一个数组，单个checkbox值是boolean类型<br>radio对应的值是input的value值<br>input 和 textarea 默认对应的model是字符串<br>select 单选对应字符串，多选对应也是数组</p>
</blockquote>
<h2 id="7-指令-v-on使用"><a href="#7-指令-v-on使用" class="headerlink" title="7. 指令- v-on使用"></a>7. 指令- v-on使用</h2><p><strong>目标</strong>：了解v-on指令的语法实现按钮点击后的递增和递减</p>
<p><strong>分析</strong>：</p>
<p>在没有使用vue之前；页面标签可以通过设置onXXX响应事件；在vue中可以通过v-on指令响应事件。</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v-on:click  对应   onclick</span><br><span class="line">v-on:click 可以使用 简写方式 @click  类似还有 @dbclick</span><br></pre></td></tr></table></figure>



<p>v-on的使用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrement&quot;</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        num = &#123;&#123;num&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    事件冒泡测试：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue; width:100px;height:100px&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;print(&#x27;div被点击了&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;print(&#x27;点击了button&#x27;)&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>阻止默认事件：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.itcast.cn&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;print(&#x27;点击了超链接&#x27;)&quot;</span> &gt;</span>传智播客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;once&quot;</span>&gt;</span>点我只有第一次有效<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      .self 测试</span><br><span class="line">    <span class="comment">&lt;!--.self 是只有是自己触发的自己才会执行,如果接受到内部的冒泡事件传递信号触发,会忽略掉这个信号--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  现象 ,当点击 div 是事件触发 当点击  button 是 实际上还是有 穿透事件发生但是div 认为 点击事件不是发生在自己身上,不处理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue; width:100px;height:100px&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;print(&#x27;div被点击了&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;print(&#x27;点击了button&#x27;)&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    .capture 测试</span><br><span class="line">    <span class="comment">&lt;!--capture 是改变js默认的事件机制,默认是冒泡,capture功能是将冒泡改为倾听模式(事件默认是从 上之下,但是现在是从下至上)--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: lightblue; width:100px;height:100px&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;print(&#x27;div被点击了&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;print(&#x27;点击了button&#x27;)&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            num:1</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//递减</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">decrement</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num--;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="comment">//打印</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">print</span>(<span class="params">str</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(str);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">once</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">              alert(1) ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>事件冒泡:</p>
<p>​    指的是点击顶层标签, 所有标签上的事件自上而下执行,叫冒泡,为啥叫”冒泡”,应为重代码上来看是向上冒泡的</p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1568818122262.png" alt="1568818122262"></p>
<p><strong>事件修饰符</strong>：语法v-on:xxxx.修饰符，常用的修饰符有：</p>
<p>.stop ：阻止事件冒泡 ,(html 组件层叠是只触发最顶层组件的事件)<br>.prevent ：阻止默认事件发生<br>.capture ：使用事件捕获模式(VIP)<br>.self ：只有元素自身触发事件才执行。（冒泡或捕获的都不执行）<br>.once ：只执行一次</p>
<h2 id="8-指令v-for使用"><a href="#8-指令v-for使用" class="headerlink" title="8. 指令v-for使用"></a>8. 指令v-for使用</h2><p><strong>目标</strong>：了解v-for指令语法实现对数组、对象的遍历</p>
<p><strong>分析</strong>：</p>
<p>实现：可以在vue实例化的时候指定要遍历的数据，然后通过v-for指令在模板中遍历显示数据。一般情况下，要遍历的数据可以通过钩子函数created发送异步请求获取数据。</p>
<p><strong>小结</strong>：</p>
<p>可以使用v-for遍历数组、对象：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in person&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;key&#125;&#125;--&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            users:[</span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;黑马&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">13</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;传智播客&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">13</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;女&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;酷丁鱼&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">4</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>&#125;</span></span><br><span class="line">            ],</span><br><span class="line"><span class="javascript">            person:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;传智汇&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">13</span>,<span class="string">&quot;gender&quot;</span>:<span class="string">&quot;男&quot;</span>,<span class="string">&quot;address&quot;</span>:<span class="string">&quot;中国&quot;</span>&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果遍历的时候需要使用到索引号，可以在循环遍历的位置，添加一个参数；该索引号是从0开始的。</p>
</blockquote>
<p>注意此时代码中的 :key=index 是有问题的,下述的案例选中后,点击添加, 会有问题,应该使用 </p>
<p>item.id  作为key </p>
<p>从这一点未来要求后台返回的数据都要有一个 主键id </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vuejs测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in list&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> &#123;&#123;item.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 Vue 实例，得到 ViewModel</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">                newId: 3,</span><br><span class="line">                list: [</span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;itcast&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;itheima&#x27;</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;传智播客&#x27;</span> &#125;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//注意这里是unshift,意思是从上往下添加</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.list.unshift(&#123; <span class="attr">id</span>: ++<span class="built_in">this</span>.newId, <span class="attr">name</span>: <span class="built_in">this</span>.name &#125;)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9-指令-v-if和v-show使用"><a href="#9-指令-v-if和v-show使用" class="headerlink" title="9. 指令-v-if和v-show使用"></a>9. 指令-v-if和v-show使用</h2><p><strong>目标</strong>：说出v-if与v-show的区别；通过一个按钮的点击，实现遍历数组结果的显示存在与否并在遍历过程中使用v-if对数据进行判断处理；实现文本内容的隐藏</p>
<p><strong>分析</strong>：</p>
<ul>
<li>v-if：通过一个按钮的点击，实现遍历数组结果的显示存在与否并在遍历过程中使用v-if对数据进行判断处理</li>
<li>v-show：实现文本内容的隐藏</li>
</ul>
<p><strong>小结</strong>：</p>
<p>v-if在条件不满足的时候元素不会存在；v-show条件不满足的时候只是对元素进行隐藏。</p>
<p>v-if 和 v-else 中间不能间隔其他html  标签例如</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender==&#x27;女&#x27;&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: deeppink&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">这里嵌套了一个 li 标签导致下方的 v-else 失效(控制台报错)</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-else</span> <span class="attr">style</span>=<span class="string">&quot;background-color: blue&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="10-指令-v-bind使用"><a href="#10-指令-v-bind使用" class="headerlink" title="10. 指令-v-bind使用"></a>10. 指令-v-bind使用</h2><p><strong>目标</strong>：了解v-bind语法和作用；实现点击不同按钮切换不同的属性值；使用class属性中的特殊用法实现一个按钮切换背景色</p>
<p><strong>分析</strong>：</p>
<p><img src height> 其中src和height的值如果不想写死，而是想获取vue实例中的数据属性值的话；那可以通过使用v-bind实现：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;vue实例中的数据属性名&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;vue实例中的数据属性名&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<p>可以使用v-bind：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color=&#x27;red&#x27;&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color=&#x27;blue&#x27;&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">        点击按钮改变背景颜色</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bool=!bool&quot;</span>&gt;</span>点我改变下面色块的颜色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red:bool, blue:!bool&#125;&quot;</span>&gt;</span></span><br><span class="line">        点击按钮改变背景颜色</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            color:<span class="string">&quot;red&quot;</span>,</span></span><br><span class="line"><span class="javascript">            bool:<span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-bind的作用：可以对所有元素的属性设置vue实例的数据。</p>
</blockquote>
<h2 id="11-计算属性的使用"><a href="#11-计算属性的使用" class="headerlink" title="11. 计算属性的使用"></a>11. 计算属性的使用</h2><p><strong>目标</strong>：计算属性的应用场景，实现将一个日期时间值转换为yyyy-MM-dd格式字符串</p>
<p><strong>分析</strong>：</p>
<p>一个日期的毫秒值要显示为格式化（yyyy-MM-dd）的日期字符串的话；可以使用computed计算属性里面的方法进行处理。</p>
<p><strong>小结</strong>：</p>
<p>计算属性的应用：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        你的生日是：</span><br><span class="line">        &#123;&#123;new Date(birthday).getFullYear()&#125;&#125;-&#123;&#123;new Date(birthday).getMonth()+1&#125;&#125;-&#123;&#123;new Date(birthday).getDay()&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        你的生日是：</span><br><span class="line">        &#123;&#123;birth&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            birthday:1429032123201</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">birth</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">this</span>.birthday);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> date.getFullYear() + <span class="string">&quot;-&quot;</span> + (date.getMonth()+<span class="number">1</span>) + <span class="string">&quot;-&quot;</span> + date.getDay();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>computed计算属性的应用场景：可以应用在插值或者指令表示式复杂的时候。可以将一些属性数据经过方法处理之后返回。</p>
<h2 id="12-watch基本和深度监控"><a href="#12-watch基本和深度监控" class="headerlink" title="12. watch基本和深度监控"></a>12. watch基本和深度监控</h2><p><strong>目标</strong>：watch的使用场景；并使用其监听简单属性值及其对象中属性值的变化</p>
<p><strong>分析</strong>：</p>
<p>在vue实例中数据属性；因为在页面中修改而产生了变化；可以通过watch监控获取其改变前后的值。</p>
<p>如果是修改的对象数据属性，可以开启深度监控获取修改后最新的对象数据。如：person.name</p>
<p><strong>小结</strong>：</p>
<p>可以如下使用watch进行数据属性的监控：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.age++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        姓名为：&#123;&#123;person.name&#125;&#125;；年龄为：&#123;&#123;person.age&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message:<span class="string">&quot;黑马&quot;</span>,</span></span><br><span class="line"><span class="javascript">            person:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;heima&quot;</span>, <span class="string">&quot;age&quot;</span>:<span class="number">13</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">message</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;新值：&quot;</span> + newValue + <span class="string">&quot;；旧值：&quot;</span> + oldValue);</span></span><br><span class="line">            &#125;,</span><br><span class="line">            person: &#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//开启深度监控；监控对象中的属性值变化</span></span></span><br><span class="line"><span class="javascript">                deep: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//可以获取到最新的对象属性数据</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">obj</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&quot;name = &quot;</span> + obj.name + <span class="string">&quot;; age=&quot;</span> + obj.age);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>watch使用场景：可以监控视图中数据的变化而做出响应；如：下拉框列表中，当如果选择了对于的下拉框选项之后，要根据最新的值去加载一些其它数据的话。</p>
<p>computed 和watch  的区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed :作用是用多个值的变化影响一个值</span><br><span class="line">watch    :作用用一个值的变化影响多个值</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="13-组件使用"><a href="#13-组件使用" class="headerlink" title="13. 组件使用"></a>13. 组件使用</h2><p><strong>目标</strong>：了解组件的使用场景；定义点击则计数的组件并使用全局注册和局部注册方式</p>
<p><strong>分析</strong>：</p>
<p>可以将通用或者公用的页面模块抽取成vue组件，在vue实例中引用。</p>
<p><strong>小结</strong>：</p>
<p>在页面中可以如下实验组件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> counter = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&quot;<span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;num++&#x27;</span>&gt;</span>你点击了</span><span class="template-variable">&#123;&#123;<span class="name">num</span>&#125;&#125;</span><span class="xml">次<span class="tag">&lt;/<span class="name">button</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">num</span>:<span class="number">0</span>&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//全局注册组件：在所有的vue实例中都可以使用组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//参数1：组件名称，参数2：具体的组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//Vue.component(&quot;counter&quot;, counter);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line">            counter: counter</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1568878844830.png" alt="1568878844830"></p>
<p>组件使用场景：在项目需要重用某个模块（头部、尾部、新闻。。。）的时候，可以将模块抽取成组件，其它页面中注册组件并引用。</p>
<ul>
<li>全局注册：在任何vue实例中都可以引用，如：一般网站的头部导航菜单</li>
<li>局部注册：可以在有需要的页面引入组件，如：商城网站首页页面中各种活动模块</li>
</ul>
<h2 id="14-父组件向子组件通信"><a href="#14-父组件向子组件通信" class="headerlink" title="14. 父组件向子组件通信"></a>14. 父组件向子组件通信</h2><p><strong>目标</strong>：父组件与子组件通信的意义；实现父组件将简单字符串和对象更新到子组件</p>
<p><strong>小结</strong>：</p>
<p>组件通信意义：父子组件之间数据的交换，能够及时更新组件内容。</p>
<ul>
<li>父组件将简单字符串更新传递到子组件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注册组件的特殊写法:</span><br><span class="line">&#x2F;&#x2F; es5</span><br><span class="line">components:&#123;</span><br><span class="line">            myList:myList</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; es6 </span><br><span class="line">components:&#123;</span><br><span class="line">            myList</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">introduce</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">introduce</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> introduce = &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template:&quot;<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//定义接收父组件的属性</span></span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;title&quot;</span>]</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//全局注册组件：在所有的vue实例中都可以使用组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//参数1：组件名称，参数2：具体的组件</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;introduce&quot;</span>, introduce);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">&quot;父组件的msg属性数据内容&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">introduce</span> <span class="attr">:title</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">introduce</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">&quot;父组件的msg属性数据内容&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            introduce:&#123;</span><br><span class="line"><span class="handlebars"><span class="xml">                template:&quot;<span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//定义接收父组件的属性</span></span></span><br><span class="line"><span class="javascript">                props:[<span class="string">&quot;title&quot;</span>]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1568643041950.png" alt="1568643041950"></p>
<ul>
<li>父组件将数组更新传递到子组件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">:items</span>=<span class="string">&quot;lessons&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myList = &#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.id</span>&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;<span class="name">item.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line"><span class="javascript">        <span class="comment">//定义接收父组件的属性</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line">            items:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//数据类型，如果是数组则是Array，如果是对象则是Object</span></span></span><br><span class="line"><span class="javascript">                type:<span class="built_in">Array</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span>:[]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">&quot;父组件的msg属性数据内容&quot;</span>,</span></span><br><span class="line">            lessons:[</span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;id&quot;</span>:<span class="number">1</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Java&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;id&quot;</span>:<span class="number">2</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;Php&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="string">&quot;id&quot;</span>:<span class="number">3</span>, <span class="string">&quot;name&quot;</span>:<span class="string">&quot;前端&quot;</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            myList</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-list</span> <span class="attr">v-bind:p</span>=<span class="string">&quot;person&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> myList = &#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">p.name</span>&#125;&#125;</span><span class="xml">:</span><span class="template-variable">&#123;&#123;<span class="name">p.age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line"><span class="javascript">        <span class="comment">//定义接收父组件的属性</span></span></span><br><span class="line">        props:&#123;</span><br><span class="line">            p:&#123;</span><br><span class="line"><span class="javascript">                <span class="comment">//数据类型，如果是数组则是Array，如果是对象则是Object</span></span></span><br><span class="line"><span class="javascript">                type:<span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">//默认值</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">default</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&quot;&quot;</span>, <span class="attr">age</span>: <span class="number">0</span>&#125;;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            msg:<span class="string">&quot;父组件的msg属性数据内容&quot;</span>,</span></span><br><span class="line"><span class="javascript">            person:&#123;<span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,<span class="attr">age</span>:<span class="number">12</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            myList</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1567243479714.png" alt="1567243479714"></p>
<h2 id="15-子组件向父组件通信"><a href="#15-子组件向父组件通信" class="headerlink" title="15. 子组件向父组件通信"></a>15. 子组件向父组件通信</h2><p><strong>目标</strong>：在子组件中点击对应按钮实现父组件中属性数据的改变</p>
<p><strong>小结</strong>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>num = &#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用组件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">counter</span> @<span class="attr">plus</span>=<span class="string">&quot;numPlus&quot;</span> @<span class="attr">reduce</span>=<span class="string">&quot;numReduce&quot;</span> <span class="attr">:snum</span>=<span class="string">&quot;num&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//定义组件</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> counter = &#123;</span></span><br><span class="line">        template:`</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;incrNum&#x27;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;decrNum&#x27;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `,</span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;snum&quot;</span>],</span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//递增</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">incrNum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//调用到父组件中的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$emit(<span class="string">&quot;plus&quot;</span>);</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">decrNum</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//调用到父组件中的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.$emit(<span class="string">&quot;reduce&quot;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//全局注册组件：在所有的vue实例中都可以使用组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//参数1：组件名称，参数2：具体的组件</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//Vue.component(&quot;counter&quot;, counter);</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        components:&#123;</span><br><span class="line">            counter: counter</span><br><span class="line">        &#125;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            num:0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">numPlus</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num++;</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">numReduce</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.num--;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/%E5%AD%90%E7%88%B6.png"></p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1573636236872.png" alt="1573636236872"></p>
<h2 id="16-axios概述"><a href="#16-axios概述" class="headerlink" title="16. axios概述"></a>16. axios概述</h2><p><strong>目标</strong>：axios的用途及了解常见方法</p>
<p><strong>小结</strong>：</p>
<p>axios的作用：<strong>发送异步请求获取数据</strong>。常见的方法：<strong>get、post</strong>；在发送的时候可以指定参数（地址、请求方式和请求头部信息）；返回数据结构（<strong>data</strong>/status/statusText/headers/config）</p>
<h2 id="17-axios方法及get、post方法使用"><a href="#17-axios方法及get、post方法使用" class="headerlink" title="17. axios方法及get、post方法使用"></a>17. axios方法及get、post方法使用</h2><p><strong>目标</strong>：使用axios方法获取数据并在页面中将数据遍历显示；切换改为get/post方法实现数据加载</p>
<p><strong>小结</strong>：</p>
<p>可以使用axios获取对应服务器数据；如果不是同一个服务的数据则可能会出现跨域请求；需要在相应的服务器上配置跨域。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vuejs测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user, index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125;--&#123;&#123;user.name&#125;&#125;--&#123;&#123;user.age&#125;&#125;--&#123;&#123;user.gender&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line">            users:[]</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//初始化加载数据</span></span></span><br><span class="line"><span class="javascript">            axios.post(<span class="string">&quot;data.json&quot;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将数据赋值到vue实例中的数据属性users；</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//如果使用的是箭头函数可以使用this，this 表示 new VUE 组件</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.users = res.data;</span></span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>alert(err));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="comment">//初始化加载数据</span></span></span><br><span class="line"><span class="javascript">            axios.post(<span class="string">&quot;data.json&quot;</span>).then(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//将数据赋值到vue实例中的数据属性users；</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//如果使用的是匿名函数,不能使用this，在axios回调函数中表示当前函数本身，不是vue实例</span></span></span><br><span class="line">                    app.users = res.data;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            ).catch(<span class="function"><span class="params">err</span>=&gt;</span>alert(err));</span></span><br><span class="line">/*</span><br><span class="line">            axios(&#123;</span><br><span class="line"><span class="javascript">                url:<span class="string">&quot;data.json&quot;</span>,</span></span><br><span class="line"><span class="javascript">                method:<span class="string">&quot;get&quot;</span></span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(res);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//将数据赋值到vue实例中的数据属性users；</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//不能使用this，在axios回调函数中表示窗口，不是vue实例</span></span></span><br><span class="line">                app.users = res.data;</span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>alert(err));</span></span><br><span class="line">*/</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>跨域：在前端js中如果发送异步请求的话，请求的地址与当前服务器的ip或者端口号不同都是跨域请求，可以使用如下方式在服务器端进行配置：</p>
</blockquote>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/1561967287268.png" alt="1561967287268"></p>
<p>补充什么是跨域</p>
<p><img src="/2019/11/04/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191104Vue/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/03.vue/%E7%AC%94%E8%AE%B0/assets/%E8%B7%A8%E5%9F%9F.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">什么是不同的域?</span><br><span class="line">	只要协议、域名、端口有任何一个不同，都被当作是不同的域	</span><br><span class="line">	</span><br><span class="line">什么是跨域?</span><br><span class="line">	通俗的讲,a 网站请求b 网站的资源叫做跨域</span><br><span class="line">浏览器默认js是不允许跨域(Ajax)</span><br><span class="line">	注意是在js 中不允许跨域,</span><br><span class="line">但是可以在&lt;img src&#x3D;&quot;www.jd.com&#x2F;sss.jpg&quot;&gt; 或者&lt;a href&#x3D;&quot;www.baidu.com&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">跨域会有什么问题? 有安全隐患</span><br><span class="line"></span><br><span class="line">案例</span><br><span class="line">	1)用户A访问www.aaa.com 进行登陆(开启了7天免密登陆,其实就是存储了一个cookies)然后支付,(开通了免密支付),</span><br><span class="line">	2)黑客B 开发了一个网站 www.bbb.com ,</span><br><span class="line">	3) (假设允许跨域:)A客户使用同一个浏览器访问B网站,B网站就可以拿到客户的cookies 信息,盗取客户A 在网站的cookies</span><br><span class="line">	4) 黑客b此时就可以拿着A 的cookies 请求A 网站,畅通无阻</span><br><span class="line">----浏览器为了组织跨域请求的危险,默认不允许跨域请求</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Dubbo</title>
    <url>/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/</url>
    <content><![CDATA[<h1 id="分布式RPC框架Apache-Dubbo"><a href="#分布式RPC框架Apache-Dubbo" class="headerlink" title="分布式RPC框架Apache Dubbo"></a>分布式RPC框架Apache Dubbo</h1><h2 id="1-软件架构的演进过程"><a href="#1-软件架构的演进过程" class="headerlink" title="1. 软件架构的演进过程"></a>1. 软件架构的演进过程</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。</p>
<h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/1.png" alt="1"></p>
<p>架构说明：</p>
<p>​      全部功能集中在一个项目内（All in one）。</p>
<p>架构优点：</p>
<p>​      架构简单，前期开发成本低、开发周期短，适合小型项目。</p>
<p>架构缺点：</p>
<p>​       全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p>
<p>​       技术栈受限，只能使用一种语言开发。</p>
<p>​       系统性能扩展只能通过扩展集群节点，成本高。</p>
<a id="more"></a>

<h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/18.png" alt="18"></p>
<p>架构说明：       </p>
<p>​      按照业务进行切割，形成小的单体项目。</p>
<p>架构优点：</p>
<p>​      技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p>
<p>架构缺点：</p>
<p>​       功能集中在一个项目中，不利于开发、扩展、维护。</p>
<p>​       系统扩张只能通过集群的方式。</p>
<p>​       项目之间功能冗余、数据冗余、耦合性强。</p>
<h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><p>SOA全称为Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p>
<p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/19.png" alt="19"></p>
<p>架构说明：</p>
<p>​      将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p>
<p>架构优点：</p>
<p>​       重复功能或模块抽取为服务，提高开发效率。</p>
<p>​       可重用性高。</p>
<p>​       可维护性高。</p>
<p>架构缺点：</p>
<p>​       各系统之间业务不同，很难确认功能或模块是重复的。(设计难度增大)</p>
<p>​       抽取服务的粒度大。</p>
<p>​       系统和服务之间耦合度高。</p>
<h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/20.png" alt="20"></p>
<p>架构说明：</p>
<p>​       将系统服务层完全独立出来，抽取为一个一个的微服务。</p>
<p>​       抽取的粒度更细，遵循单一原则。</p>
<p>​       采用轻量级框架协议传输。</p>
<p>架构优点：</p>
<p>​       服务拆分粒度更细，有利于提高开发效率。 </p>
<p>​       可以针对不同服务制定对应的优化方案。</p>
<p>​       适用于互联网时代，产品迭代周期更短。</p>
<p>架构缺点：</p>
<p>​      粒度太细导致服务太多，维护成本高。</p>
<p>​      分布式系统开发的技术成本高，对团队的挑战大。</p>
<h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>
<p><strong>什么是RPC？</strong></p>
<p>RPC全称为remote procedure call，即<strong>远程过程调用</strong>。比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p>
<p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p>
<p>Dubbo官网地址：<a href="http://dubbo.apache.org/">http://dubbo.apache.org</a></p>
<p>Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>Dubbo架构图（Dubbo官方提供）如下：</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/2.png" alt="2"></p>
<p>节点角色说明：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>角色名称</th>
</tr>
</thead>
<tbody><tr>
<td>Provider</td>
<td>暴露服务的服务提供方</td>
</tr>
<tr>
<td>Consumer</td>
<td>调用远程服务的服务消费方</td>
</tr>
<tr>
<td>Registry</td>
<td>服务注册与发现的注册中心</td>
</tr>
<tr>
<td>Monitor</td>
<td>统计服务的调用次数和调用时间的监控中心</td>
</tr>
<tr>
<td>Container</td>
<td>服务运行容器</td>
</tr>
</tbody></table>
<p>虚线都是异步访问，实线都是同步访问<br>蓝色虚线:在启动时完成的功能<br>红色虚线(实线)都是程序运行过程中执行的功能</p>
<p>调用关系说明:</p>
<ol start="0">
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>
</ol>
<h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo 支持很多中在注册中心,但是官方推荐的是zookeeper</span><br><span class="line"></span><br><span class="line">1、Zookeeper(官方推荐)</span><br><span class="line">优点:支持分布式.很多周边产品。</span><br><span class="line">缺点: 受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优。</span><br><span class="line">2、Multicast</span><br><span class="line">优点:去中心化,不需要单独安装软件。</span><br><span class="line">缺点:Provider和Consumer和Registry不能跨机房(路由)。</span><br><span class="line">3、Redis</span><br><span class="line">优点:支持集群,性能高。</span><br><span class="line">缺点:要求服务器时间同步.否则可能出现集群失败问题。</span><br><span class="line">4、Simple</span><br><span class="line">优点: 标准RPC服务.没有兼容问题。</span><br><span class="line">缺点: 不支持集群。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p>
<p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/4.png" alt="4"></p>
<p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径，例如：C:\Windows\itcast\hello.txt。</p>
<p>Zookeeper树型目录服务：</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/3.png" alt="3"></p>
<p>流程说明：</p>
<ul>
<li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li>
<li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li>
<li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li>
</ul>
<h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p>
<p>本课程使用的Zookeeper版本为3.4.6，下载完成后可以获得名称为zookeeper-3.4.6.tar.gz的压缩文件。</p>
<p>安装步骤：</p>
<p>第一步：安装 jdk（略）<br>第二步：把 zookeeper 的压缩包（zookeeper-3.4.6.tar.gz）上传到 linux 系统<br>第三步：解压缩压缩包<br>​    tar -zxvf zookeeper-3.4.6.tar.gz<br>第四步：进入zookeeper-3.4.6目录，创建data目录<br>​    mkdir data<br>第五步：进入conf目录 ，把zoo_sample.cfg 改名为zoo.cfg<br>​    cd conf<br>​    mv zoo_sample.cfg zoo.cfg<br>第六步：打开zoo.cfg文件,  修改data属性：dataDir=/root/zookeeper-3.4.6/data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows 环境,路径配置 </span><br><span class="line">D:\\develop\\zookeeper-3.4.6\\zookeeper-3.4.6\\data</span><br></pre></td></tr></table></figure>



<h3 id="3-3-启动、停止Zookeeper"><a href="#3-3-启动、停止Zookeeper" class="headerlink" title="3.3 启动、停止Zookeeper"></a>3.3 启动、停止Zookeeper</h3><p>进入Zookeeper的bin目录，启动服务命令<br> ./zkServer.sh start</p>
<p>停止服务命令<br>./zkServer.sh stop</p>
<p>查看服务状态：<br>./zkServer.sh status</p>
<h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p>
<h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/assets/1569123691384.png" alt="1569123691384"></p>
<p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）创建服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）创建服务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：服务实现类上使用的Service注解是Dubbo提供的，用于对外发布服务</p>
<p>（5）在src/main/resources下创建applicationContext-service.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service.impl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（6）启动服务</p>
<p>tomcat7:run</p>
<h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_consumer，pom.xml配置和上面服务提供者相同，只需要将Tomcat插件的端口号改为8082即可</p>
<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p>
<p>（4）编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</p>
<p>（5）在src/main/resources下创建applicationContext-web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo-consumer&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（6）运行测试</p>
<p>tomcat7:run启动</p>
<p>在浏览器输入<a href="http://localhost:8082/demo/hello.do?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) provider 不一定需要部署在tomcat ,main 方法也可以需要死循环</span><br><span class="line">2) 一旦comsumer 和provider 建立连接,是长连接,及时zookeeper 宕机也不影响</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p>
<p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p>
<p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p>
<p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。可以通过开发工具的debug功能查看此代理对象的内部结构。另外，Dubbo实现网络传输底层是基于Netty框架完成的。</p>
<p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p>
<p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p>
<h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p>
<h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p>
<p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p>
<p>（2）启动tomcat，此war文件会自动解压</p>
<p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p>
<p>​    dubbo.registry.address=zookeeper://192.168.134.129:2181<br>​    dubbo.admin.root.password=root<br>​    dubbo.admin.guest.password=guest</p>
<p>（4）重启tomcat</p>
<h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p>
<p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D(root)%E5%92%8C%E5%AF%86%E7%A0%81(root)">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/5.png" alt="5"></p>
<p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/6.png" alt="6"></p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/7.png" alt="7"></p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/8.png" alt="8"></p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/9.png" alt="9"></p>
<h2 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6. Dubbo相关配置说明"></a>6. Dubbo相关配置说明</h2><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p>
<p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.HelloServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作为服务消费者，可以通过如下配置来引用服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">interface</span> =<span class="string">&quot;com.itheima.api.HelloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p>
<h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p>
<p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p>
<p>推荐使用的是dubbo协议。</p>
<p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>
<p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;rmi&quot;</span> <span class="attr">port</span>=<span class="string">&quot;1099&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;dubbo&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;rmi&quot;</span> /&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p>
<p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p>
<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p>
<p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p>
<p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference(check = false,loadbalance = &quot;random&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p>
<p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p>
<p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p>
<h4 id="dubbo-负载均衡策略"><a href="#dubbo-负载均衡策略" class="headerlink" title="dubbo 负载均衡策略 ,"></a>dubbo 负载均衡策略 ,</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)RandomLoadBalance:随机负载均衡。随机的选择一个。是Dubbo的默认负载均衡策略。</span><br><span class="line">2)RoundRobinLoadBalance:轮询负载均衡。轮询选择一个。</span><br><span class="line">3)LeastActiveLoadBalance:最少活跃调用数，相同活跃数的随机。活跃数指调用前后计数差。使慢的 Provider 收到更少请求，因为越慢的 Provider 的调用前后计数差会越大。</span><br><span class="line">4) ConsistentHashLoadBalance:一致性哈希负载均衡。相同参数的请求总是落在同一台机器上。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如何配置: </p>
<p>  LoadBalance 接口有四个字类,源代码中有配置选项,可以找到配置选择项</p>
<h3 id="6-5-超时时间配置"><a href="#6-5-超时时间配置" class="headerlink" title="6.5 超时时间配置"></a>6.5 超时时间配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候我们的查询业务需要较长的时间才能返回结果,dubbo 默认 1s 没有响应结果则认为服务调用失败,会报错</span><br><span class="line">我们可以指定超时时间策略</span><br><span class="line"> @Service(timeout &#x3D; 10000) &#x2F;&#x2F; 10s </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p>
<p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p>
<h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p>
<p>操作步骤：</p>
<p>（1）在pom.xml文件中增加maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面连接的数据库可以自行创建</p>
<p>（3）在HelloServiceImpl类上加入@Transactional注解</p>
<p>（4）启动服务提供者和服务消费者，并访问</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/12.png" alt="12"></p>
<p>上面的错误为没有可用的服务提供者</p>
<p>查看dubbo管理控制台发现服务并没有发布，如下：</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/13.png" alt="13"></p>
<p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/14.png" alt="14"></p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/15.png" alt="15"></p>
<h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.itheima.service），所以后面真正发布服务的代码没有执行。</p>
<p>解决方式操作步骤：</p>
<p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/17.png" alt="17"></p>
<p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p>
<p><img src="/2019/11/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191106Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/05.dubbo/%E7%AC%94%E8%AE%B0/img/16.png" alt="16"></p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Nodejs&amp;ES6</title>
    <url>/2019/11/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191112Nodejs&amp;ES6/</url>
    <content><![CDATA[<h2 id="1-Node-js"><a href="#1-Node-js" class="headerlink" title="1. Node.js"></a>1. Node.js</h2><h4 id="1-1Node-js安装"><a href="#1-1Node-js安装" class="headerlink" title="1.1Node.js安装"></a>1.1Node.js安装</h4><ul>
<li>下载对应你系统的Node.js版本,推荐下载LTS版本。</li>
</ul>
<p><a href="https://nodejs.org/en/download/">Node.js官网</a></p>
<ul>
<li>查看版本:在控制台输入<code>node -v </code></li>
</ul>
<h4 id="1-2什么是Node-JS-理解"><a href="#1-2什么是Node-JS-理解" class="headerlink" title="1.2什么是Node.JS(理解)"></a>1.2什么是Node.JS(理解)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">简单的说 Node.js 就是运行在服务端的 JavaScript。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>&emsp;&emsp;我们知道 javaEE 可以使用Request,Respose **”接受参数处理业务逻辑,返回数据”**等操作,所以我们可以把我们写的java代码部署在tomcat 上运行,变成一个服务器</p>
<p>&emsp;&emsp;仔细想想, 我们的 javascript 语言 是不是也能 <strong>接受参数,处理业务逻辑返回数据</strong>,如果能有一个软件能部署我们的 js 代码,那么我们是不是就可以使用js 写服务器端代码呢?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>  (<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么软件可以解析 js 代码?  答: “浏览器”</p>
<p>Nodejs 就是基于 Google 浏览器 的V8 引擎 开发的 平台(类似于tomcat ) 能够部署我们使用 js 写的服务器代码 </p>
<p>有了这个技术,前端开发人员也可以写服务器端代码了. </p>
<p>一句话总结:  Node.js是一个可以在js中接收和处理web请求的应用平台。</p>
<h2 id="2-Nodejs模块化编程"><a href="#2-Nodejs模块化编程" class="headerlink" title="2. Nodejs模块化编程"></a>2. Nodejs模块化编程</h2><p><strong>目标</strong>：编写模块文件使用require引入模块后使用node.js执行</p>
<p><strong>小结1</strong>：</p>
<p>node demo1.js<br>证明 node 可以解析 我们的js文件,就像我们的tomcat 可以解析 servlet 一样</p>
<p><strong>小结2</strong>：</p>
<p>&emsp;&emsp;默认每一个JS 文件中的 变量函数是私有的,为了能够像其他语言一样能够重复调用代码(类似java)<br>Node 引入了 模块的概念(类似于java 中的 “类”)</p>
<ol>
<li>一个 JavaScript 文件就是一个模块</li>
<li>模块天生就是一个私有的作用域，默认模块内定义的变量等成员只能被模块内部访问,(这里的意思是不写exports 外部文件无法访问)</li>
<li>每一个模块中都有一个 module.exports 编程接口对象，默认是一个空对象,可以通过给 module.exports 编程接口对象添加成员向外暴露内部成员</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">add=<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认 module.exports=&#123;&#125;;</span></span><br><span class="line"><span class="comment">// 我们可以往  exports 属性中增加属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.add=add;</span><br><span class="line"><span class="comment">// 也可以使用简写方式</span></span><br><span class="line"><span class="built_in">exports</span>.add=add;</span><br><span class="line"></span><br><span class="line">---------</span><br><span class="line">    <span class="keyword">var</span> demo= <span class="built_in">require</span>(<span class="string">&#x27;./demo3_1&#x27;</span>); 这里是文件名称</span><br></pre></td></tr></table></figure>

<p>一句话总结:</p>
<p>&emsp;&emsp;可以使用exports将js方法导出，并使用require引入对应的js模块，然后再引入之后可以使用对应的方法。</p>
<h2 id="3-创建Nodejs-Web服务器"><a href="#3-创建Nodejs-Web服务器" class="headerlink" title="3. 创建Nodejs Web服务器"></a>3. 创建Nodejs Web服务器</h2><p><strong>目标</strong>：引入http模块监听8888端口实现输出字符</p>
<p><strong>小结</strong>：</p>
<p>可以利用node.js创建web服务器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;Hello World \n&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure>



<h2 id="4-处理Nodejs-Web请求参数"><a href="#4-处理Nodejs-Web请求参数" class="headerlink" title="4. 处理Nodejs Web请求参数"></a>4. 处理Nodejs Web请求参数</h2><p><strong>目标</strong>：引入http和url模块创建web容器并使用url解析请求路径中参数且输出</p>
<p><strong>分析</strong>：</p>
<p>需求：<a href="http://127.0.0.1:8888/?id=123&amp;name=heima">http://127.0.0.1:8888?id=123&amp;name=heima</a> 获取到请求路径中参数及值并输出</p>
<p>实现步骤：</p>
<ol>
<li>创建web服务器；</li>
<li>引入url模块；</li>
<li>利用url解析请求地址中的参数和值并输出</li>
<li>启动测试；</li>
</ol>
<p><strong>小结</strong>：</p>
<p>在node.js中可以引入url内置模块对请求地址进行处理：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入node.js内置http模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并监听web服务器</span></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送http头部</span></span><br><span class="line">    <span class="comment">//参数1：响应状态码，200表示成功</span></span><br><span class="line">    <span class="comment">//参数2：响应头部信息，Content-Type内容类型：纯文本</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析请求地址</span></span><br><span class="line">    <span class="comment">//参数1：请求地址</span></span><br><span class="line">    <span class="comment">//参数2：true的话使用query解析参数到一个对象，默认false</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url, <span class="literal">true</span>).query;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> key <span class="keyword">in</span> params</span>)</span>&#123;</span><br><span class="line">        response.write( key + <span class="string">&quot; = &quot;</span> + params[key]);</span><br><span class="line">        response.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送响应数据</span></span><br><span class="line">    response.end(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;服务器运行在 http://127.0.0.1:8888 &quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们后续可以判断url 然后执行不同的业务逻辑,当然了自己判断肯定麻烦,NodeJs 也有框架</p>
<p>学习到这里应该明白一件事</p>
<p>&emsp;&emsp;”js语言也可以写服务器端的业务逻辑”</p>
<p>当然了 用上述代码写服务器肯定很麻烦实际上Node也有一些前端框架可以供我们使用,官方推荐的Express就是其中之一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其他框架自行翻看</span><br><span class="line">https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;49c58dd7e9bb</span><br></pre></td></tr></table></figure>



<h2 id="5-包资源管理器NPM"><a href="#5-包资源管理器NPM" class="headerlink" title="5. 包资源管理器NPM"></a>5. 包资源管理器NPM</h2><p><strong>目标</strong>：说出npm的作用；区别本地安装和全局安装</p>
<p><strong>小结</strong>1：</p>
<p>nmp 类似于我们java的maven,我们可以使用npm安装前端框架需要的工具包(其实是一堆js文件)</p>
<p><strong>小结</strong>2：npm  intstall  express</p>
<p>&emsp;&emsp;package.json,package-lock.json 这两个文件相当于我们 maven 的pom 文件<br>如果我们把刚才下载依赖的删除,我们可以再次使用 “npm install” 命令下载<br>此时的下载规则是:<br>&emsp;&emsp;package.json文件记录你项目中所需要的所有模块。<br>&emsp;&emsp;package-lock.json文件锁定所有模块的版本号，包括主模块和所有依赖子模块。<br>&emsp;&emsp;当你执行npm install的时候，node从package.json文件读取模块名称，从package-lock.json文件中获取版本号，然后进行下载或者更新。 </p>
<p><strong>小结</strong>3：</p>
<p>npm是一个node.js的管理和分发工具，可以根据配置package.json下载js库。</p>
<ul>
<li>本地安装：将下载的模块安装到当前目录（项目）；</li>
<li>全局安装：将下载的模块安装到全局的目录（ <code>npm root -g</code> ）</li>
</ul>
<p><strong>小结</strong>4：</p>
<p>全局安装和本地安装的区别:</p>
<p>&emsp;&emsp;全局安装完毕后 任意目录下都可以使用安装的命令,一般只安装全局的配置文件例如 cnpm 等工具,安装完,任意地方都可以使用,像项目中全局安装jquery ,实际项目中并不能直接使用(说白了就是玩玩,无用操作)<br>局部安装只当前项目有效</p>
<h2 id="6-切换NPM镜像"><a href="#6-切换NPM镜像" class="headerlink" title="6. 切换NPM镜像"></a>6. 切换NPM镜像</h2><p><strong>原因</strong>：npm是从国外下载速度较慢,使用国内淘宝镜像下载速度比较快</p>
<p><strong>目标</strong>：安装nrm组件将npm的镜像切换为淘宝镜像</p>
<p><strong>小结</strong>：</p>
<ul>
<li>使用nrm 切换镜像源</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install nrm -g</span><br><span class="line"><span class="comment">#查看命令 </span></span><br><span class="line">nrm ls</span><br><span class="line"><span class="comment"># 切换</span></span><br><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure>

<ul>
<li>使用cnpm下载</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 使用案例如下 </span></span><br><span class="line">cnpm install **</span><br></pre></td></tr></table></figure>

<ul>
<li>补充</li>
</ul>
<p>npm install 和   npm install –save 的区别   npm install –save-dev</p>
<p>   1)npm install  默认是 npm install –save<br>    2)安装完毕之后会将安装信息写在 package.json <dependencies> 文件中(相当于自动导入maven 的坐标, scope 是 compile)<br>    3) npm install –save-dev  装完毕之后会将安装信息写在 package.json <devdependencies> 中<br>    (相当于自动导入maven 的坐标, scope 是 provide) 开发有效,有序上限不需要</devdependencies></dependencies></p>
<ul>
<li>npm 和cnpm 的区别**(最直观区别是cnpm下载速度比npm快)**</li>
</ul>
<ol>
<li>cnpm install  不支持  package_lock.json 文件 即,上一个小结中的  package_lock.json  文件不会被生成,即使手动创建了也不会被使用</li>
<li>cnpm install 默认是  npm install –no-save<br> npm install  默认是   npm install –save </li>
</ol>
<h2 id="7-webpack概述"><a href="#7-webpack概述" class="headerlink" title="7. webpack概述"></a>7. webpack概述</h2><p><strong>目标</strong>：webpack的作用是什么并安装webpack</p>
<p>安装命令如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<p>“脚手架”  ==== maven 的”骨架”</p>
<p>&emsp;&emsp;最近经常看到“脚手架”这个词，这个就是一个比喻，比喻项目开发的前期工作。每次开始一个项目，你得先把整个文件目录结构搭好把，把必要的文件先建好。这个过程每次新建项目都需要，其实这个就是脚手架 该干的活。再说明白点，这个脚手架就是个项目模板，有了他能给我省很多事。就像在后台创建Maven项目时，可以直接Create from archetype,这个 archetype就是个原型或者说是模板，跟这个脚手架差不多</p>
<p>“webpack 脚手架”及 webpack-cli ,是一个帮助我们快速构建前端项目的 “骨架”</p>
<p>另一个作用就是 把我们写好的项目中的静态资源统一打包成一个文件</p>
<p><strong>小结</strong>：</p>
<p>webpack作用：可以将多个静态资源js、css等打包成一个js文件。</p>
<h2 id="8-webpack打包js"><a href="#8-webpack打包js" class="headerlink" title="8. webpack打包js"></a>8. webpack打包js</h2><p>为何需要webpack 打包？</p>
<p>一个HTML中有时候我们需要引入很多的js 文件，为了未来方便写代码,我们可以将多个js 文件打包</p>
<p>1)方便开发,</p>
<ol start="2">
<li><p>对客户来讲,文件打包后一般会变得更小,节约流量</p>
</li>
<li><p>加大了别的开发人员山寨我们功能的难度</p>
</li>
</ol>
<p><strong>目标</strong>：创建2个js文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p>
<p><strong>分析</strong>：</p>
<p>实现步骤：</p>
<ol>
<li>创建2个js文件；</li>
<li>创建入口文件main.js；</li>
<li>创建webpack的配置文件；</li>
<li>运行webpack命令；</li>
<li>创建index.html页面进行测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>webpack打包js的配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 node js中 默认 有一行配置<br>var exports = module.exports;<br>于是我们可以直接在 exports 对象上添加方法，表示对外输出的接口，如同在module.exports上添加一样。<br>例如  exports.add=funciton(){…}</p>
<p>注意，不能直接将exports变量指向一个值，因为这样等于切断了exports与module.exports的联系。<br>例如:  exports = {}<br>此时 exports 被覆盖 exports!= module.exports 了,和module.exports 没有关系了,之后对 exports 的所有操作都和 module.exports 没有关系了</p>
<blockquote>
<p>webpack可以将多个js文件打包成一个js</p>
</blockquote>
<h2 id="9-webpack打包css"><a href="#9-webpack打包css" class="headerlink" title="9. webpack打包css"></a>9. webpack打包css</h2><p><strong>目标</strong>：安装style-loader css-loader组件，创建并使用css文件，使用webpack命令打包js文件到 <code>dist/bundle.js</code> 文件中并测试。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install style-loader css-loader --save-dev</span><br><span class="line">cnpm install less less-loader --save-dev</span><br></pre></td></tr></table></figure>

<p><strong>分析</strong>：</p>
<p>实现步骤：</p>
<ol>
<li>安装转换css的组件；</li>
<li>修改配置文件；</li>
<li>创建css文件；</li>
<li>修改入口文件，加载css文件；</li>
<li>打包并测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>webpack打包css文件需要安装转换的组件，并修改配置文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//入口文件</span></span><br><span class="line">    entry: <span class="string">&quot;./src/main.js&quot;</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//路径</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">        filename: <span class="string">&quot;bundle.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10-ES6概述-amp-创建测试工程"><a href="#10-ES6概述-amp-创建测试工程" class="headerlink" title="10. ES6概述&amp;创建测试工程"></a>10. ES6概述&amp;创建测试工程</h2><p><strong>目标</strong>：了解es6应用场景；创建测试工程</p>
<p><a href="https://www.w3school.com.cn/js/pro_js_history.asp">js 的发展历史</a><br>ECMAScript是JavaScript的规范,规定了js 应该有哪些功能<br>ECMAScript 也和我们的java 语言一样,不断的在改进语法<br>2015年发布了第6 个重大版本,我们叫做 ES6, 其中出现了一些新的特性正在被开发人员大量使用</p>
<p><strong>小结</strong>：</p>
<p>ECMAScript是前端js的语法规范；可以应用在各种js环境中。如：浏览器或者node.js环境。</p>
<p>它有很多版本：es1/2/3/5/6，很多新特性，可以在js环境中使用这些新特性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">备注: js 没有 4.xx 的版本 ,因为4 的版本开发阶段提出了很多超前思想,然后官方开了个会决定放弃这个版本的发布,实际上 4.x 的版本的很多特性被ES6 实现了</span><br></pre></td></tr></table></figure>

<p>Idea 默认只支持ES5 语法,需要设置ES6</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File--&gt;OtherSettings--&gt;Settings for New Projects--&gt;Languages&amp;Framworks--&gt;JavaScript</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/12/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191112Nodejs&ES6/IDEA%E8%AE%BE%E7%BD%AEES6.png" alt="设置ES6"></p>
<h2 id="11-let和const命令及模板字符串"><a href="#11-let和const命令及模板字符串" class="headerlink" title="11. let和const命令及模板字符串"></a>11. let和const命令及模板字符串</h2><p><strong>目标</strong>：使用let和const定义变量说出区别；模板字符串的好处以及对象初始化简写</p>
<p><strong>小结</strong>：</p>
<ul>
<li><p>let所声明的变量只能在let命令所在的代码块中使用</p>
</li>
<li><p>const声明的变量是常量，也就是值不可以改变(类似java的final )</p>
</li>
<li><p>模板字符串：可以不用通过反斜杠拼接多行字符，直接使用`</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello &#x27;</span> + name)</span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;itcast&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) <span class="comment">//hello itcast</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> msg = <span class="string">&quot;Hi \</span></span><br><span class="line"><span class="string">man!&quot;</span></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;hello world&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象初始化简化：可以在返回的对象时，不用指定属性名。</p>
</li>
</ul>
<h2 id="12-解构表达式"><a href="#12-解构表达式" class="headerlink" title="12. 解构表达式"></a>12. 解构表达式</h2><p><strong>目标</strong>：将数组、对象中的值或属性使用解构表达式设置到对应变量</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;解构&quot; : 把原来的额对象分解,重新构造一个新的对象或变量进行接收</span><br><span class="line"> 作用  :  使我们基于一个对象创建新变量的操作更加简单;</span><br></pre></td></tr></table></figure>

<p>解构表达式：可以对数组、对象的元素或者属性按顺序、名称的方式进行赋值到对应变量中。</p>
<h2 id="13-函数优化"><a href="#13-函数优化" class="headerlink" title="13. 函数优化"></a>13. 函数优化</h2><p><strong>目标</strong>：箭头函数的好处；对象的函数属性简写，箭头函数与解构表达式的应用</p>
<p><strong>小结</strong>：</p>
<p>箭头函数：可以不用编写基础函数的解构（如：function），直接使用 <code>=&gt;</code> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> print = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(obj);</span><br><span class="line">        &#125;;</span><br><span class="line">        print(<span class="string">&quot;print&quot;</span>);</span><br><span class="line">        <span class="comment">//箭头函数</span></span><br><span class="line">        <span class="keyword">var</span> print2 = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">console</span>.log(obj);</span><br><span class="line">        print2(<span class="string">&quot;print2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(sum(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//箭头函数</span></span><br><span class="line">        <span class="keyword">var</span> sum2 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> a+b;</span><br><span class="line">        <span class="built_in">console</span>.log(sum2(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum3 = <span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(a+b);</span><br><span class="line">            <span class="keyword">return</span> a+b;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">console</span>.log(sum3(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> person = &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;heima&quot;</span>,</span><br><span class="line">            learn1: <span class="function"><span class="keyword">function</span> (<span class="params">course=<span class="string">&quot;java&quot;</span></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">//箭头函数；不能使用this</span></span><br><span class="line">            learn2: <span class="function">(<span class="params">course</span>) =&gt;</span> <span class="built_in">console</span>.log(person.name + <span class="string">&quot; 在学习 &quot;</span> + course),</span><br><span class="line">            <span class="comment">//简写</span></span><br><span class="line">            <span class="function"><span class="title">learn3</span>(<span class="params">course</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; 在学习 &quot;</span> + course);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        person.learn1(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        person.learn2(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">        person.learn3(<span class="string">&quot;css&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> person = &#123;</span><br><span class="line">            name:<span class="string">&quot;heima&quot;</span>,</span><br><span class="line">            age:<span class="number">13</span>,</span><br><span class="line">            language:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;js&quot;</span>,<span class="string">&quot;css&quot;</span>]</span><br><span class="line">        &#125;;</span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">person</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + person.name);</span><br><span class="line">         &#125;</span><br><span class="line">         hello(person);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//箭头函数、解构表达式</span></span><br><span class="line"><span class="comment">//  此处的&#123;name&#125; 意思是  未来传递的对象必须有一个name 属性,否则无法使用</span></span><br><span class="line">      <span class="comment">// var &#123;name&#125; =person</span></span><br><span class="line">       <span class="comment">// var hello2 = (name) =&gt; console.log(&quot;hello2 &quot; + name);</span></span><br><span class="line">		<span class="keyword">var</span> hello2 = <span class="function">(<span class="params">&#123;name&#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;hello2 &quot;</span> + name);</span><br><span class="line">        hello2(person);</span><br></pre></td></tr></table></figure>

<h2 id="14-map方法使用"><a href="#14-map方法使用" class="headerlink" title="14. map方法使用"></a>14. map方法使用</h2><p><strong>目标</strong>：数组中map方法的应用场景</p>
<p><strong>小结</strong>：</p>
<p>map方法可以将原数组中的所有元素通过一个函数进行处理并放入到一个新数组中并返回该新数组。</p>
<p>案例:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//已知一个数组,let arr =[3,2,1] ,求数组中每个数的三次方,并放入一个新的数组</span></span><br><span class="line"><span class="comment">// 答:</span></span><br><span class="line"><span class="keyword">let</span> arr =[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line"> <span class="keyword">var</span> ar = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> elem*elem*elem;</span><br><span class="line"> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(ar); <span class="comment">// [27,8,1]</span></span><br></pre></td></tr></table></figure>

<h2 id="15-reduce方法使用"><a href="#15-reduce方法使用" class="headerlink" title="15. reduce方法使用"></a>15. reduce方法使用</h2><p><strong>目标</strong>：数组中reduce方法的应用场景</p>
<p><strong>小结</strong>：</p>
<p>reduce方法会从左到右依次把数组中的元素用函数处理（reduce方法的第一个参数），会返回一个执行结果。</p>
<blockquote>
<p>let arr = [1, 2, 3]</p>
<p>arr.reduce((a,b)=&gt;a+b)</p>
<p>第1次：(1,2) =&gt; 1+2</p>
<p>第2次：(3, 3) =&gt; 3+3  ——–&gt; 6</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">求已知数组的累计和</span><br></pre></td></tr></table></figure>

<h2 id="16-promise应用示例"><a href="#16-promise应用示例" class="headerlink" title="16. promise应用示例"></a>16. promise应用示例</h2><p><strong>目标</strong>：promise的应用场景及示例</p>
<p>问题:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">                <span class="keyword">const</span> i=<span class="number">0</span>;</span><br><span class="line">                i=<span class="number">100</span>;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;before setTimeout()&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(callback, <span class="number">1000</span>); <span class="comment">// 1秒钟后调用callback函数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;after setTimeout()&#x27;</span>);</span><br><span class="line"><span class="comment">/* 问题:</span></span><br><span class="line"><span class="comment"> 如果此时我们想让主线程知道方法调用是否成功,如果想成功了 做点事情,失败了做点事情, 传统方式是做不到的</span></span><br><span class="line"><span class="comment"> ES6 提供了一个新的对象供我们使用解决上述问题 promise</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">&#x27;Done&#x27;</span>);</span><br><span class="line">                   <span class="keyword">const</span> i = <span class="number">0</span>;</span><br><span class="line">                   i = <span class="number">100</span>;</span><br><span class="line">                   resolve(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">               &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                   <span class="comment">// console.log(&quot;exception&quot;);</span></span><br><span class="line">                   reject(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;before setTimeout()&#x27;</span>);</span><br><span class="line"></span><br><span class="line">       promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(msg)</span><br><span class="line">       &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(msg)</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<p>promise是一个对象，保存着预期事件执行的结果；可以应用在异步操作时候，指定异步操作的成功与失败的结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">num &lt; <span class="number">0.5</span></span>)</span>&#123;</span><br><span class="line">            resolve(<span class="string">&quot;操作成功！num=&quot;</span> + num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(<span class="string">&quot;操作失败！num=&quot;</span> + num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="number">300</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="17-对象的扩展方法使用"><a href="#17-对象的扩展方法使用" class="headerlink" title="17. 对象的扩展方法使用"></a>17. 对象的扩展方法使用</h2><p><strong>目标</strong>：Object对象中的keys/values/assign的作用</p>
<p><strong>小结</strong>：</p>
<p>Object的方法：</p>
<ul>
<li><p>keys：获取对象的属性名</p>
</li>
<li><p>values：获取对象的属性值</p>
</li>
<li><p>entries：获取对象的属性和属性值</p>
</li>
<li><p>assign：可以将对象进行拷贝</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person =&#123;</span><br><span class="line">           age:<span class="number">13</span>,</span><br><span class="line">           order:&#123;</span><br><span class="line">                id:<span class="number">1</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">var</span> obj =&#123;&#125;</span><br><span class="line">       <span class="comment">//  obj.age=person.age;// 赋值</span></span><br><span class="line">       <span class="built_in">Object</span>.assign(obj,person)</span><br><span class="line"></span><br><span class="line">       <span class="built_in">console</span>.log(obj.age);</span><br><span class="line">       <span class="built_in">console</span>.log(obj.order.id);</span><br><span class="line"></span><br><span class="line">       person.age=<span class="number">14</span>;</span><br><span class="line">       person.order.id=<span class="number">3</span>;</span><br><span class="line">       <span class="built_in">console</span>.log(obj.age);</span><br><span class="line">       <span class="built_in">console</span>.log(obj.order.id); <span class="comment">// 浅 copy</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="18-数组的扩展方法使用"><a href="#18-数组的扩展方法使用" class="headerlink" title="18. 数组的扩展方法使用"></a>18. 数组的扩展方法使用</h2><p><strong>目标</strong>：数组中的find/findIndex/includes的作用</p>
<p><strong>小结</strong>：</p>
<p>数组的扩展方法：</p>
<ul>
<li>find：根据函数条件查找数组中符合条件的元素</li>
<li>findIndex：与find类似，返回的不是元素而是元素对应的索引号</li>
<li>includes：判断指定的元素是否存在</li>
</ul>
<h2 id="19-安装babel"><a href="#19-安装babel" class="headerlink" title="19. 安装babel"></a>19. 安装babel</h2><p><strong>目标</strong>：安装babel及了解babel的作用</p>
<p><strong>小结</strong>：</p>
<p>babel是一个javaScript语法编译器，可以将es6的语法进行转换并执行。</p>
<p>需要安装babel：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev </span><br><span class="line">cnpm install babel-cli -g</span><br></pre></td></tr></table></figure>

<p>编写.babelrc文件，指定es的版本</p>
<p>可以通过命令去执行对应的js文件：babel-node</p>
<h2 id="20-export和import联合应用"><a href="#20-export和import联合应用" class="headerlink" title="20. export和import联合应用"></a>20. export和import联合应用</h2><p><strong>目标</strong>：export和import的联合应用场景；使用export导出模板文件，import引入模板文件</p>
<p><strong>小结</strong>：</p>
<p>可以通过export导出模块，通过import导入模块并使用其内容。</p>
<p>导出有两种方式：命名导出和默认导出。</p>
<p>因为浏览器默认不支持export和import命令，所以需要安装babel对export和import进行解析和执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//补充 ES6 的 export和import 方法是可以在浏览器中使用的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// test.html</span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;</span><br><span class="line">	<span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&quot;./export.js&quot;</span></span><br><span class="line">	alert(<span class="string">&quot;3+5=&quot;</span>+(add(<span class="number">3</span>,<span class="number">5</span>)));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Dubbo</title>
    <url>/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/</url>
    <content><![CDATA[<h1 id="分布式RPC框架Apache-Dubbo"><a href="#分布式RPC框架Apache-Dubbo" class="headerlink" title="分布式RPC框架Apache Dubbo"></a>分布式RPC框架Apache Dubbo</h1><h2 id="1-软件架构的演进过程"><a href="#1-软件架构的演进过程" class="headerlink" title="1. 软件架构的演进过程"></a>1. 软件架构的演进过程</h2><p>软件架构的发展经历了由单体架构、垂直架构、SOA架构到微服务架构的演进过程，下面我们分别了解一下这几个架构。</p>
<h3 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1 单体架构"></a>1.1 单体架构</h3><p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/1.png" alt="1"></p>
<p>架构说明：</p>
<p>​      全部功能集中在一个项目内（All in one）。</p>
<p>架构优点：</p>
<p>​      架构简单，前期开发成本低、开发周期短，适合小型项目。</p>
<a id="more"></a>

<p>架构缺点：</p>
<p>​       全部功能集成在一个工程中，对于大型项目不易开发、扩展和维护。</p>
<p>​       技术栈受限，只能使用一种语言开发。</p>
<p>​       系统性能扩展只能通过扩展集群节点，成本高。</p>
<h3 id="1-2-垂直架构"><a href="#1-2-垂直架构" class="headerlink" title="1.2 垂直架构"></a>1.2 垂直架构</h3><p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/18.png" alt="18"></p>
<p>架构说明：       </p>
<p>​      按照业务进行切割，形成小的单体项目。</p>
<p>架构优点：</p>
<p>​      技术栈可扩展（不同的系统可以用不同的编程语言编写）。</p>
<p>架构缺点：</p>
<p>​       功能集中在一个项目中，不利于开发、扩展、维护。</p>
<p>​       系统扩张只能通过集群的方式。</p>
<p>​       项目之间功能冗余、数据冗余、耦合性强。</p>
<h3 id="1-3-SOA架构"><a href="#1-3-SOA架构" class="headerlink" title="1.3 SOA架构"></a>1.3 SOA架构</h3><p>SOA全称为Service-Oriented Architecture，即面向服务的架构。它可以根据需求通过网络对松散耦合的粗粒度应用组件(服务)进行分布式部署、组合和使用。一个服务通常以独立的形式存在于操作系统进程中。</p>
<p>站在功能的角度，把业务逻辑抽象成可复用的服务，通过服务的编排实现业务的快速再生，目的：把原先固有的业务功能转变为通用的业务服务，实现业务逻辑的快速复用。</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/19.png" alt="19"></p>
<p>架构说明：</p>
<p>​      将重复功能或模块抽取成组件的形式，对外提供服务，在项目与服务之间使用ESB（企业服务总线）的形式作为通信的桥梁。</p>
<p>架构优点：</p>
<p>​       重复功能或模块抽取为服务，提高开发效率。</p>
<p>​       可重用性高。</p>
<p>​       可维护性高。</p>
<p>架构缺点：</p>
<p>​       各系统之间业务不同，很难确认功能或模块是重复的。(设计难度增大)</p>
<p>​       抽取服务的粒度大。</p>
<p>​       系统和服务之间耦合度高。</p>
<h3 id="1-4-微服务架构"><a href="#1-4-微服务架构" class="headerlink" title="1.4 微服务架构"></a>1.4 微服务架构</h3><p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/20.png" alt="20"></p>
<p>架构说明：</p>
<p>​       将系统服务层完全独立出来，抽取为一个一个的微服务。</p>
<p>​       抽取的粒度更细，遵循单一原则。</p>
<p>​       采用轻量级框架协议传输。</p>
<p>架构优点：</p>
<p>​       服务拆分粒度更细，有利于提高开发效率。 </p>
<p>​       可以针对不同服务制定对应的优化方案。</p>
<p>​       适用于互联网时代，产品迭代周期更短。</p>
<p>架构缺点：</p>
<p>​      粒度太细导致服务太多，维护成本高。</p>
<p>​      分布式系统开发的技术成本高，对团队的挑战大。</p>
<h2 id="2-Apache-Dubbo概述"><a href="#2-Apache-Dubbo概述" class="headerlink" title="2. Apache Dubbo概述"></a>2. Apache Dubbo概述</h2><h3 id="2-1-Dubbo简介"><a href="#2-1-Dubbo简介" class="headerlink" title="2.1 Dubbo简介"></a>2.1 Dubbo简介</h3><p>Apache Dubbo是一款高性能的Java RPC框架。其前身是阿里巴巴公司开源的一个高性能、轻量级的开源Java RPC框架，可以和Spring框架无缝集成。</p>
<p><strong>什么是RPC？</strong></p>
<p>RPC全称为remote procedure call，即<strong>远程过程调用</strong>。比如两台服务器A和B，A服务器上部署一个应用，B服务器上部署一个应用，A服务器上的应用想调用B服务器上的应用提供的方法，由于两个应用不在一个内存空间，不能直接调用，所以需要通过网络来表达调用的语义和传达调用的数据。</p>
<p>需要注意的是RPC并不是一个具体的技术，而是指整个网络远程调用过程。</p>
<p>RPC是一个泛化的概念，严格来说一切远程过程调用手段都属于RPC范畴。各种开发语言都有自己的RPC框架。Java中的RPC框架比较多，广泛使用的有RMI、Hessian、Dubbo等。</p>
<p><a href="http://dubbo.apache.org/">Dubbo官网地址</a></p>
<p>Dubbo提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p>
<h3 id="2-2-Dubbo架构"><a href="#2-2-Dubbo架构" class="headerlink" title="2.2 Dubbo架构"></a>2.2 Dubbo架构</h3><p>Dubbo架构图（Dubbo官方提供）如下：</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/2.png" alt="2"></p>
<p>节点角色说明：</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>角色名称</th>
</tr>
</thead>
<tbody><tr>
<td>Provider</td>
<td>暴露服务的服务提供方</td>
</tr>
<tr>
<td>Consumer</td>
<td>调用远程服务的服务消费方</td>
</tr>
<tr>
<td>Registry</td>
<td>服务注册与发现的注册中心</td>
</tr>
<tr>
<td>Monitor</td>
<td>统计服务的调用次数和调用时间的监控中心</td>
</tr>
<tr>
<td>Container</td>
<td>服务运行容器</td>
</tr>
</tbody></table>
<p>虚线都是异步访问，实线都是同步访问<br>蓝色虚线:在启动时完成的功能<br>红色虚线(实线)都是程序运行过程中执行的功能</p>
<p>调用关系说明:</p>
<ol start="0">
<li>服务容器负责启动，加载，运行服务提供者。</li>
<li>服务提供者在启动时，向注册中心注册自己提供的服务。</li>
<li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li>
<li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li>
<li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li>
<li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li>
</ol>
<h2 id="3-服务注册中心Zookeeper"><a href="#3-服务注册中心Zookeeper" class="headerlink" title="3. 服务注册中心Zookeeper"></a>3. 服务注册中心Zookeeper</h2><p>通过前面的Dubbo架构图可以看到，Registry（服务注册中心）在其中起着至关重要的作用。Dubbo官方推荐使用Zookeeper作为服务注册中心。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dubbo 支持很多中在注册中心,但是官方推荐的是zookeeper</span><br><span class="line"></span><br><span class="line">1、Zookeeper(官方推荐)</span><br><span class="line">优点:支持分布式.很多周边产品。</span><br><span class="line">缺点: 受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优。</span><br><span class="line">2、Multicast</span><br><span class="line">优点:去中心化,不需要单独安装软件。</span><br><span class="line">缺点:Provider和Consumer和Registry不能跨机房(路由)。</span><br><span class="line">3、Redis</span><br><span class="line">优点:支持集群,性能高。</span><br><span class="line">缺点:要求服务器时间同步.否则可能出现集群失败问题。</span><br><span class="line">4、Simple</span><br><span class="line">优点: 标准RPC服务.没有兼容问题。</span><br><span class="line">缺点: 不支持集群。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-1-Zookeeper介绍"><a href="#3-1-Zookeeper介绍" class="headerlink" title="3.1 Zookeeper介绍"></a>3.1 Zookeeper介绍</h3><p>Zookeeper 是 Apache Hadoop 的子项目，是一个树型的目录服务，支持变更推送，适合作为 Dubbo 服务的注册中心，工业强度较高，可用于生产环境，并推荐使用 。</p>
<p>为了便于理解Zookeeper的树型目录服务，我们先来看一下我们电脑的文件系统(也是一个树型目录结构)：</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/img/4.png" alt="4"></p>
<p>我的电脑可以分为多个盘符（例如C、D、E等），每个盘符下可以创建多个目录，每个目录下面可以创建文件，也可以创建子目录，最终构成了一个树型结构。通过这种树型结构的目录，我们可以将文件分门别类的进行存放，方便我们后期查找。而且磁盘上的每个文件都有一个唯一的访问路径，例如：C:\Windows\itcast\hello.txt。</p>
<p>Zookeeper树型目录服务：</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/3.png" alt="3"></p>
<p>流程说明：</p>
<ul>
<li>服务提供者(Provider)启动时: 向 <code>/dubbo/com.foo.BarService/providers</code> 目录下写入自己的 URL 地址</li>
<li>服务消费者(Consumer)启动时: 订阅 <code>/dubbo/com.foo.BarService/providers</code> 目录下的提供者 URL 地址。并向 <code>/dubbo/com.foo.BarService/consumers</code> 目录下写入自己的 URL 地址</li>
<li>监控中心(Monitor)启动时: 订阅 <code>/dubbo/com.foo.BarService</code> 目录下的所有提供者和消费者 URL 地址</li>
</ul>
<h3 id="3-2-安装Zookeeper"><a href="#3-2-安装Zookeeper" class="headerlink" title="3.2 安装Zookeeper"></a>3.2 安装Zookeeper</h3><p>下载地址：<a href="http://archive.apache.org/dist/zookeeper/">http://archive.apache.org/dist/zookeeper/</a></p>
<p>本课程使用的Zookeeper版本为3.4.6，下载完成后可以获得名称为zookeeper-3.4.6.tar.gz的压缩文件。</p>
<p>安装步骤：</p>
<p>第一步：安装 jdk（略）<br>第二步：把 zookeeper 的压缩包（zookeeper-3.4.6.tar.gz）上传到 linux 系统<br>第三步：解压缩压缩包<br>​    tar -zxvf zookeeper-3.4.6.tar.gz<br>第四步：进入zookeeper-3.4.6目录，创建data目录<br>​    mkdir data<br>第五步：进入conf目录 ，把zoo_sample.cfg 改名为zoo.cfg<br>​    cd conf<br>​    mv zoo_sample.cfg zoo.cfg<br>第六步：打开zoo.cfg文件,  修改data属性：dataDir=/root/zookeeper-3.4.6/data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows 环境,路径配置 </span><br><span class="line">D:\\develop\\zookeeper-3.4.6\\zookeeper-3.4.6\\data</span><br></pre></td></tr></table></figure>



<h3 id="3-3-启动、停止Zookeeper"><a href="#3-3-启动、停止Zookeeper" class="headerlink" title="3.3 启动、停止Zookeeper"></a>3.3 启动、停止Zookeeper</h3><p>进入Zookeeper的bin目录，启动服务命令<br> ./zkServer.sh start</p>
<p>停止服务命令<br>./zkServer.sh stop</p>
<p>查看服务状态：<br>./zkServer.sh status</p>
<h2 id="4-Dubbo快速入门"><a href="#4-Dubbo快速入门" class="headerlink" title="4. Dubbo快速入门"></a>4. Dubbo快速入门</h2><p>Dubbo作为一个RPC框架，其最核心的功能就是要实现跨网络的远程调用。本小节就是要创建两个应用，一个作为服务的提供方，一个作为服务的消费方。通过Dubbo来实现服务消费方远程调用服务提供方的方法。</p>
<h3 id="4-1-服务提供方开发"><a href="#4-1-服务提供方开发" class="headerlink" title="4.1 服务提供方开发"></a>4.1 服务提供方开发</h3><p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/5.dubbo/%E7%AC%94%E8%AE%B0/assets/1569123691384.png" alt="1569123691384"></p>
<p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_provider，在pom.xml文件中导入如下坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- dubbo相关 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.sgroschupf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javassist<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.1.GA<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 请求路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（3）创建服务接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）创建服务实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：服务实现类上使用的Service注解是Dubbo提供的，用于对外发布服务</p>
<p>（5）在src/main/resources下创建applicationContext-service.xml </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo_provider&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 注册  协议和port   端口默认是20880 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20881&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描指定包，加入@Service注解的类会被发布为服务  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service.impl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（6）启动服务</p>
<p>tomcat7:run</p>
<h3 id="4-2-服务消费方开发"><a href="#4-2-服务消费方开发" class="headerlink" title="4.2 服务消费方开发"></a>4.2 服务消费方开发</h3><p>开发步骤：</p>
<p>（1）创建maven工程（打包方式为war）dubbodemo_consumer，pom.xml配置和上面服务提供者相同，只需要将Tomcat插件的端口号改为8082即可</p>
<p>（2）配置web.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定加载的配置文件 ，通过参数contextConfigLocation加载 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext-web.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（3）将服务提供者工程中的HelloService接口复制到当前工程</p>
<p>（4）编写Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：Controller中注入HelloService使用的是Dubbo提供的@Reference注解</p>
<p>（5）在src/main/resources下创建applicationContext-web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">			http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;dubbodemo-consumer&quot;</span> /&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 连接服务注册中心zookeeper ip为zookeeper所在服务器的ip地址--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://192.168.134.129:2181&quot;</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 扫描的方式暴露接口  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.controller&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（6）运行测试</p>
<p>tomcat7:run启动</p>
<p>在浏览器输入<a href="http://localhost:8082/demo/hello.do?name=Jack%EF%BC%8C%E6%9F%A5%E7%9C%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C">http://localhost:8082/demo/hello.do?name=Jack，查看浏览器输出结果</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) provider 不一定需要部署在tomcat ,main 方法也可以需要死循环</span><br><span class="line">2) 一旦comsumer 和provider 建立连接,是长连接,及时zookeeper 宕机也不影响</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>思考一：</strong>上面的Dubbo入门案例中我们是将HelloService接口从服务提供者工程(dubbodemo_provider)复制到服务消费者工程(dubbodemo_consumer)中，这种做法是否合适？还有没有更好的方式？</p>
<p><strong>答：</strong>这种做法显然是不好的，同一个接口被复制了两份，不利于后期维护。更好的方式是单独创建一个maven工程，将此接口创建在这个maven工程中。需要依赖此接口的工程只需要在自己工程的pom.xml文件中引入maven坐标即可。</p>
<p><strong>思考二：</strong>在服务消费者工程(dubbodemo_consumer)中只是引用了HelloService接口，并没有提供实现类，Dubbo是如何做到远程调用的？</p>
<p><strong>答：</strong>Dubbo底层是基于代理技术为HelloService接口创建代理对象，远程调用是通过此代理对象完成的。可以通过开发工具的debug功能查看此代理对象的内部结构。另外，Dubbo实现网络传输底层是基于Netty框架完成的。</p>
<p><strong>思考三：</strong>上面的Dubbo入门案例中我们使用Zookeeper作为服务注册中心，服务提供者需要将自己的服务信息注册到Zookeeper，服务消费者需要从Zookeeper订阅自己所需要的服务，此时Zookeeper服务就变得非常重要了，那如何防止Zookeeper单点故障呢？</p>
<p><strong>答：</strong>Zookeeper其实是支持集群模式的，可以配置Zookeeper集群来达到Zookeeper服务的高可用，防止出现单点故障。</p>
<h2 id="5-Dubbo管理控制台"><a href="#5-Dubbo管理控制台" class="headerlink" title="5. Dubbo管理控制台"></a>5. Dubbo管理控制台</h2><p>我们在开发时，需要知道Zookeeper注册中心都注册了哪些服务，有哪些消费者来消费这些服务。我们可以通过部署一个管理中心来实现。其实管理中心就是一个web应用，部署到tomcat即可。</p>
<h3 id="5-1-安装"><a href="#5-1-安装" class="headerlink" title="5.1 安装"></a>5.1 安装</h3><p>安装步骤：</p>
<p>（1）将资料中的dubbo-admin-2.6.0.war文件复制到tomcat的webapps目录下</p>
<p>（2）启动tomcat，此war文件会自动解压</p>
<p>（3）修改WEB-INF下的dubbo.properties文件，注意dubbo.registry.address对应的值需要对应当前使用的Zookeeper的ip地址和端口号</p>
<p>​    dubbo.registry.address=zookeeper://192.168.134.129:2181<br>​    dubbo.admin.root.password=root<br>​    dubbo.admin.guest.password=guest</p>
<p>（4）重启tomcat</p>
<h3 id="5-2-使用"><a href="#5-2-使用" class="headerlink" title="5.2 使用"></a>5.2 使用</h3><p>操作步骤：</p>
<p>（1）访问<a href="http://localhost:8080/dubbo-admin-2.6.0/%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D(root)%E5%92%8C%E5%AF%86%E7%A0%81(root)">http://localhost:8080/dubbo-admin-2.6.0/，输入用户名(root)和密码(root)</a></p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/5.png" alt="5"></p>
<p>（2）启动服务提供者工程和服务消费者工程，可以在查看到对应的信息</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/6.png" alt="6"></p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/7.png" alt="7"></p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/8.png" alt="8"></p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/9.png" alt="9"></p>
<h2 id="6-Dubbo相关配置说明"><a href="#6-Dubbo相关配置说明" class="headerlink" title="6. Dubbo相关配置说明"></a>6. Dubbo相关配置说明</h2><h3 id="6-1-包扫描"><a href="#6-1-包扫描" class="headerlink" title="6.1 包扫描"></a>6.1 包扫描</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">&quot;com.itheima.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>服务提供者和服务消费者都需要配置，表示包扫描，作用是扫描指定包(包括子包)下的类。</p>
<p>如果不使用包扫描，也可以通过如下配置的方式来发布服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.HelloServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作为服务消费者，可以通过如下配置来引用服务：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用helloService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">interface</span> =<span class="string">&quot;com.itheima.api.HelloService&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这种方式发布和引用服务，一个配置项(<a href="dubbo:service">dubbo:service</a>、<a href="dubbo:reference">dubbo:reference</a>)只能发布或者引用一个服务，如果有多个服务，这种方式就比较繁琐了。推荐使用包扫描方式。</p>
<h3 id="6-2-协议"><a href="#6-2-协议" class="headerlink" title="6.2 协议"></a>6.2 协议</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般在服务提供者一方配置，可以指定使用的协议名称和端口号。</p>
<p>其中Dubbo支持的协议有：dubbo、rmi、hessian、http、webservice、rest、redis等。</p>
<p>推荐使用的是dubbo协议。</p>
<p>dubbo 协议采用单一长连接和 NIO 异步通讯，适合于小数据量大并发的服务调用，以及服务消费者机器数远大于服务提供者机器数的情况。不适合传送大数据量的服务，比如传文件，传视频等，除非请求量很低。</p>
<p>也可以在同一个工程中配置多个协议，不同服务可以使用不同的协议，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 多协议配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;rmi&quot;</span> <span class="attr">port</span>=<span class="string">&quot;1099&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用dubbo协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.HelloService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;helloService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;dubbo&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用rmi协议暴露服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.itheima.api.DemoService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;demoService&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;rmi&quot;</span> /&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-3-启动时检查"><a href="#6-3-启动时检查" class="headerlink" title="6.3 启动时检查"></a>6.3 启动时检查</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面这个配置需要配置在服务消费者一方，如果不配置默认check值为true。Dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线时，能及早发现问题。可以通过将check值改为false来关闭检查。</p>
<p>建议在开发阶段将check值设置为false，在生产环境下改为true。</p>
<h3 id="6-4-负载均衡"><a href="#6-4-负载均衡" class="headerlink" title="6.4 负载均衡"></a>6.4 负载均衡</h3><p>负载均衡（Load Balance）：其实就是将请求分摊到多个操作单元上进行执行，从而共同完成工作任务。</p>
<p>在集群负载均衡时，Dubbo 提供了多种均衡策略（包括随机、轮询、最少活跃调用数、一致性Hash），缺省为random随机调用。</p>
<p>配置负载均衡策略，既可以在服务提供者一方配置，也可以在服务消费者一方配置，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在服务消费者一方配置负载均衡策略</span></span><br><span class="line">    <span class="meta">@Reference(check = false,loadbalance = &quot;random&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//远程调用</span></span><br><span class="line">        String result = helloService.sayHello(name);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在服务提供者一方配置负载均衡</span></span><br><span class="line"><span class="meta">@Service(loadbalance = &quot;random&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以通过启动多个服务提供者来观察Dubbo负载均衡效果。</p>
<p>注意：因为我们是在一台机器上启动多个服务提供者，所以需要修改tomcat的端口号和Dubbo服务的端口号来防止端口冲突。</p>
<p>在实际生产环境中，多个服务提供者是分别部署在不同的机器上，所以不存在端口冲突问题。</p>
<h4 id="dubbo-负载均衡策略"><a href="#dubbo-负载均衡策略" class="headerlink" title="dubbo 负载均衡策略 ,"></a>dubbo 负载均衡策略 ,</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)RandomLoadBalance:随机负载均衡。随机的选择一个。是Dubbo的默认负载均衡策略。</span><br><span class="line">2)RoundRobinLoadBalance:轮询负载均衡。轮询选择一个。</span><br><span class="line">3)LeastActiveLoadBalance:最少活跃调用数，相同活跃数的随机。活跃数指调用前后计数差。使慢的 Provider 收到更少请求，因为越慢的 Provider 的调用前后计数差会越大。</span><br><span class="line">4) ConsistentHashLoadBalance:一致性哈希负载均衡。相同参数的请求总是落在同一台机器上。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如何配置: </p>
<p>  LoadBalance 接口有四个字类,源代码中有配置选项,可以找到配置选择项</p>
<h3 id="6-5-超时时间配置"><a href="#6-5-超时时间配置" class="headerlink" title="6.5 超时时间配置"></a>6.5 超时时间配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候我们的查询业务需要较长的时间才能返回结果,dubbo 默认 1s 没有响应结果则认为服务调用失败,会报错</span><br><span class="line">我们可以指定超时时间策略</span><br><span class="line"> @Service(timeout &#x3D; 10000) &#x2F;&#x2F; 10s </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-解决Dubbo无法发布被事务代理的Service问题"><a href="#7-解决Dubbo无法发布被事务代理的Service问题" class="headerlink" title="7. 解决Dubbo无法发布被事务代理的Service问题"></a>7. 解决Dubbo无法发布被事务代理的Service问题</h2><p>前面我们已经完成了Dubbo的入门案例，通过入门案例我们可以看到通过Dubbo提供的标签配置就可以进行包扫描，扫描到@Service注解的类就可以被发布为服务。</p>
<p>但是我们如果在服务提供者类上加入@Transactional事务控制注解后，服务就发布不成功了。原因是事务控制的底层原理是为服务提供者类创建代理对象，而默认情况下Spring是基于JDK动态代理方式创建代理对象，而此代理对象的完整类名为com.sun.proxy.$Proxy42（最后两位数字不是固定的），导致Dubbo在发布服务前进行包匹配时无法完成匹配，进而没有进行服务的发布。</p>
<h3 id="7-1-问题展示"><a href="#7-1-问题展示" class="headerlink" title="7.1 问题展示"></a>7.1 问题展示</h3><p>在入门案例的服务提供者dubbodemo_provider工程基础上进行展示</p>
<p>操作步骤：</p>
<p>（1）在pom.xml文件中增加maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）在applicationContext-service.xml配置文件中加入数据源、事务管理器、开启事务注解的相关配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面连接的数据库可以自行创建</p>
<p>（3）在HelloServiceImpl类上加入@Transactional注解</p>
<p>（4）启动服务提供者和服务消费者，并访问</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/12.png" alt="12"></p>
<p>上面的错误为没有可用的服务提供者</p>
<p>查看dubbo管理控制台发现服务并没有发布，如下：</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/13.png" alt="13"></p>
<p>可以通过断点调试的方式查看Dubbo执行过程，Dubbo通过AnnotationBean的postProcessAfterInitialization方法进行处理</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/14.png" alt="14"></p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/15.png" alt="15"></p>
<h3 id="7-2-解决方案"><a href="#7-2-解决方案" class="headerlink" title="7.2 解决方案"></a>7.2 解决方案</h3><p>通过上面的断点调试可以看到，在HelloServiceImpl类上加入事务注解后，Spring会为此类基于JDK动态代理技术创建代理对象，创建的代理对象完整类名为com.sun.proxy.$Proxy35，导致Dubbo在进行包匹配时没有成功（因为我们在发布服务时扫描的包为com.itheima.service），所以后面真正发布服务的代码没有执行。</p>
<p>解决方式操作步骤：</p>
<p>（1）修改applicationContext-service.xml配置文件，开启事务控制注解支持时指定proxy-target-class属性，值为true。其作用是使用cglib代理方式为Service类创建代理对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启事务控制的注解支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/17.png" alt="17"></p>
<p>（2）修改HelloServiceImpl类，在Service注解中加入interfaceClass属性，值为HelloService.class，作用是指定服务的接口类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = HelloService.class)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此处也是必须要修改的，否则会导致发布的服务接口为SpringProxy，而不是HelloService接口，如下：</p>
<p><img src="/2019/11/16/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191116Dubbo/16.png" alt="16"></p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/</url>
    <content><![CDATA[<h1 id="1-版本控制工具概念"><a href="#1-版本控制工具概念" class="headerlink" title="1.版本控制工具概念"></a>1.版本控制工具概念</h1><p>毕业论文写好了导师不满意让修改,改好了,导师又觉得第一版不错,改回来吧,此时内心一脸懵,第一版长啥样没存档啊</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;毕业论文第一版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文第二版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文第三版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文最终版.doc&gt;&gt;</span><br><span class="line">&lt;&lt;毕业论文最终版2.doc&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>代码开发中经常会碰到这种现象:改之前好好的,改完就报错了,也没怎么修改啊,这种情况下如果不能查看修改之前的代码,查找问题是非常困难的.</p>
<p>如果有一个软件能记录我们对文档的所有修改,所有版本,那么上面的问题讲迎刃而解.而这类软件我们一般叫做版本控制工具.</p>
<p>版本控制工具一般具有如下特性:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 能够记录历史版本</span><br><span class="line">2) 能后回退历史版本</span><br><span class="line">3) 能够满足团队协作开发的要求</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="2-版本管理工具介绍"><a href="#2-版本管理工具介绍" class="headerlink" title="2. 版本管理工具介绍"></a>2. 版本管理工具介绍</h1><p>现在比较流行的版本控制工具是git ,但是实际上git 是近几年才发展起来的,可能有一些老的项目,还在用一些老的软件,比如svn</p>
<h2 id="2-1版本控制发展简史-维基百科"><a href="#2-1版本控制发展简史-维基百科" class="headerlink" title="2.1版本控制发展简史(维基百科)"></a>2.1版本控制发展简史(维基百科)</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571983065236.png" alt="1571983065236"> </p>
<h2 id="2-2-SVN-和GIT-的区别"><a href="#2-2-SVN-和GIT-的区别" class="headerlink" title="2.2 SVN 和GIT 的区别"></a>2.2 SVN 和GIT 的区别</h2><h3 id="2-1-1-SVN-SubVersion"><a href="#2-1-1-SVN-SubVersion" class="headerlink" title="2.1.1 SVN(SubVersion)"></a>2.1.1 SVN(SubVersion)</h3><p>工作流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SVN是集中式版本控制系统，版本库是集中放在中央服务器的.</span><br><span class="line">工作流程如下:</span><br><span class="line">	1.从远程仓库下载代码</span><br><span class="line">	2.修改后将代码提交到远程仓库</span><br></pre></td></tr></table></figure>

<p>优缺点:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">优点: 简单,易操作</span><br><span class="line">缺点:所有代码必须放在服务器  </span><br><span class="line"> 	   1.服务器一旦宕机无法提交代码,即容错性较差</span><br><span class="line">      2.离线无法提交代码,无法及时记录我们的提交行为</span><br></pre></td></tr></table></figure>

<p>svn流程图</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/svn.jpg"></p>
<h3 id="2-1-2-Git"><a href="#2-1-2-Git" class="headerlink" title="2.1.2 Git"></a>2.1.2 Git</h3><p>工作流程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git是分布式版本控制系统（Distributed Version Control System，简称 DVCS），分为两种类型的仓库：</span><br><span class="line">本地仓库和远程仓库</span><br><span class="line">工作流程如下</span><br><span class="line">    1．从远程仓库中克隆代码到本地仓库(pull)</span><br><span class="line">    2．从本地仓库中checkout代码然后进行代码修改</span><br><span class="line">    3．在提交前先将代码提交到暂存区</span><br><span class="line">    4．提交到本地仓库。本地仓库中保存修改的各个历史版本</span><br><span class="line">    5．修改完成后，需要和团队成员共享代码时，将代码push到远程仓库</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/git.png"></p>
<h3 id="2-1-3-svn-和git-的区别"><a href="#2-1-3-svn-和git-的区别" class="headerlink" title="2.1.3 svn 和git 的区别"></a>2.1.3 svn 和git 的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. svn 是集中式版本控制工具,git 是分布式版本控制工具</span><br><span class="line">2. svn 不支持离线提交,git 支持离线提交代码</span><br></pre></td></tr></table></figure>

<h1 id="3-Git-发展简史"><a href="#3-Git-发展简史" class="headerlink" title="3. Git 发展简史"></a>3. Git 发展简史</h1><p> 林纳斯·本纳第克特·托瓦兹（Linus Benedict Torvalds, 1969年~ ） </p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571987252740.png" alt="1571987252740"></p>
<p>很多人都知道，Linus在1991年创建了开源的Linux，从此，Linux系统不断发展，已经成为最大的服务器系统软件了。</p>
<p>Linus虽然创建了Linux，但Linux的壮大是靠全世界热心的志愿者参与的，这么多人在世界各地为Linux编写代码，那Linux的代码是如何管理的呢？</p>
<p>事实是，在2002年以前，世界各地的志愿者把源代码文件通过diff的方式发给Linus，然后由Linus本人通过<strong>手工方式合并代码！</strong></p>
<p>你也许会想，为什么Linus不把Linux代码放到版本控制系统里呢？那个年代不是有CVS、SVN这些免费的版本控制系统吗？因为Linus坚定地反对CVS和SVN，这些集中式的版本控制系统不但速度慢，<strong>而且必须联网才能使用</strong>。有一些商用的版本控制系统，虽然比CVS、SVN好用，但那是<strong>付费</strong>的，和Linux的开源精神不符。</p>
<p>不过，到了2002年，Linux系统已经发展了十年了，代码库之大让Linus很难继续通过手工方式管理了，社区的弟兄们也对这种方式表达了强烈不满，于是Linus选择了一个商业的版本控制系统BitKeeper，BitKeeper的东家BitMover公司出于人道主义精神，授权Linux社区免费使用这个版本控制系统。而授权的前提是:Linux 社区的人不能开发具有相同功能的竞争产品! </p>
<p>另一方面,BitKeeper不是开源的. 显然与Linux 的开源精神不相符,所以linux 社区的很多人抱怨,不愿意使用.</p>
<p>典型的就是 1  (Samba 开发服务的创造者) 非常不满.偷偷违反了和 BitKeeper 的协议,反编译 BitKeeper 的源代码,开发了个爬虫,然后爬取信息被人发现了. BitKeeper 公司的领导非常不满意,然后开始发布消息说,(下个版本)不再为Linux 提供免费的服务. </p>
<p>Linus  本人就出面协调(几周或者几个月),但是不管用, 没办法. 估计谈判的过程感觉到了憋屈–”吃人嘴短,拿人手软”</p>
<p>Linus  本人 花了10天的时间Git 出来了,一个月之内，Linux系统的源码已经由Git管理了！</p>
<p> <img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1571988966446.png" alt="Linus 采访记录"></p>
<p>Git 出来以后毕竟是一个人做的,开始并不好用(刚开始只能用勉强可以用来形容), 还是很多人抱怨,发展了很多年都没有干过其他软件.</p>
<p>直到 2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub,从此git 迎来了飞速发展,当下git 已经成为了最流行的版本控制工具</p>
<h1 id="4-Git-的安装"><a href="#4-Git-的安装" class="headerlink" title="4. Git 的安装"></a>4. Git 的安装</h1><h2 id="4-1-git-的下载"><a href="#4-1-git-的下载" class="headerlink" title="4.1 git 的下载"></a>4.1 git 的下载</h2><p>下载地址： <a href="https://git-scm.com/download">https://git-scm.com/download</a></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571990833074.png" alt="1571990833074"></p>
<p>附件</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571991253594.png" alt="1571991253594"></p>
<hr>

<h2 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h2><ol>
<li><p>按照附件的 顺序直接下一步傻瓜式安装即可</p>
</li>
<li><p>其中安装的过程中需要填写一个邮箱和用户名(任意即可)</p>
</li>
</ol>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572001054551.png" alt="1572001054551"></p>
<ol start="3">
<li><p> $\color{red}{注意: 安装完毕请重启资源管理器,或者重启电脑!!!}$ </p>
</li>
<li><p>更改语言</p>
</li>
</ol>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571992521110.png" alt="1571992521110"></p>
<h1 id="5-Git-工作流程"><a href="#5-Git-工作流程" class="headerlink" title="5. Git 工作流程"></a>5. Git 工作流程</h1><h2 id="5-1-Git-初始化"><a href="#5-1-Git-初始化" class="headerlink" title="5.1 Git 初始化"></a>5.1 Git 初始化</h2><p>我们先初始化一个本地仓</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 新建测试文件夹</span><br><span class="line">2) 进入文件夹,然后右键创建版本库</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571993852280.png" alt="1571993852280"></p>
<p>此时 我们看到 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 文件夹上多了一个绿色图标(如果没有请看本章节 5.3小节说明)</span><br><span class="line">2) 文件夹内部生成了一个.git 隐藏文件夹(需要设置隐藏文件夹可见)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="5-2-git-流程"><a href="#5-2-git-流程" class="headerlink" title="5.2  git 流程"></a>5.2  git 流程</h2><h3 id="5-2-1-流程图"><a href="#5-2-1-流程图" class="headerlink" title="5.2.1 流程图"></a>5.2.1 流程图</h3><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/git%E6%B5%81%E7%A8%8B.png"></p>
<h3 id="5-2-2概念及详解"><a href="#5-2-2概念及详解" class="headerlink" title="5.2.2概念及详解"></a>5.2.2概念及详解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地仓库：是在开发人员自己电脑上的Git仓库,存放我们的代码(.git 隐藏文件夹就是我们的本地仓库)		</span><br><span class="line">远程仓库：是在远程服务器上的Git仓库,存放代码(可以是github.com或者gitee.com 上的仓库,或者自己该公司的服务器)</span><br><span class="line">工作区: 我们自己写代码(文档)的地方</span><br><span class="line">暂存区: 在 本地仓库中的一个特殊的文件(index) 叫做暂存区,临时存储我们即将要提交的文件</span><br><span class="line">------------</span><br><span class="line">Clone：克隆，就是将远程仓库复制到本地仓库</span><br><span class="line">Push：推送，就是将本地仓库代码上传到远程仓库</span><br><span class="line">Pull：拉取，就是将远程仓库代码下载到本地仓库,并将代码 克隆到本地工作区</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/git%E6%B5%81%E7%A8%8B_%E8%AF%A6%E8%A7%A3.png"></p>
<h2 id="5-3-图标不显示问题处理"><a href="#5-3-图标不显示问题处理" class="headerlink" title="5.3 图标不显示问题处理"></a>5.3 图标不显示问题处理</h2><p>如果 TortoiseGit  安装完毕后 图标不正常显示 则需要进行如下处理</p>
<p>修复TortoiseGit文件夹和文件状态图标不显示问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) win +r  输入  regedit</span><br><span class="line">2) 进入目录</span><br><span class="line">\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers\</span><br><span class="line">3) 将如下图目录前加两个空格</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1571993045835.png" alt="1571993045835"></p>
<h1 id="6-Git-的基本使用01-TortoiseGit-操作本地仓库"><a href="#6-Git-的基本使用01-TortoiseGit-操作本地仓库" class="headerlink" title="6.Git 的基本使用01-TortoiseGit 操作本地仓库"></a>6.Git 的基本使用01-TortoiseGit 操作本地仓库</h1><h2 id="6-1-初始化仓库"><a href="#6-1-初始化仓库" class="headerlink" title="6.1  初始化仓库"></a>6.1  初始化仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一: </span><br><span class="line">新建一个文件夹,进入文件夹内部操作</span><br><span class="line">1)右键--&gt; 在这里创建Git 版本库 </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572161580344.png" alt="1572161580344"></p>
<p>  注意: 不要直接在桌面上操作,否则桌面就是一个仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法二:</span><br><span class="line">2) 右键--&gt;Git GUI here</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572162906623.png" alt="1572162906623"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法三: 命令行模式</span><br><span class="line">2) git init </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572163015102.png" alt="1572163015102"></p>
<p>创建完毕仓库,我们发现,此时我们创建的文件夹下有一个.git 文件已经生成了</p>
<p>并且仓库文件夹上多了一个 绿色图标</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572164583708.png" alt="1572164583708"></p>
<h2 id="6-2-添加文件"><a href="#6-2-添加文件" class="headerlink" title="6.2 添加文件"></a>6.2 添加文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)在仓库中新建一个文件</span><br><span class="line">2)选中新建的文件--&gt;右键--&gt; TortoiseGit--&gt; 添加</span><br><span class="line">3)此时我们看到文件夹上多了一个 &quot;加号&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572164475555.png" alt="1572164475555"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1572165109016.png" alt="1572165109016"></p>
<h2 id="6-3-提交文件至本地仓库"><a href="#6-3-提交文件至本地仓库" class="headerlink" title="6.3 提交文件至本地仓库"></a>6.3 提交文件至本地仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)选中文件</span><br><span class="line">2) 右键--git提交</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572165471421.png" alt="1572165471421"></p>
<h2 id="6-4-修改文件-与再次提交文件"><a href="#6-4-修改文件-与再次提交文件" class="headerlink" title="6.4 修改文件,与再次提交文件"></a>6.4 修改文件,与再次提交文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当我们修改文件以后,文件上多了一个红色感叹号,表示我们上次提交后该文件被修改过</span><br><span class="line">提交后文件图标又变成绿色</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572165676716.png" alt="1572165676716"></p>
<h2 id="6-5-文件状态"><a href="#6-5-文件状态" class="headerlink" title="6.5 文件状态"></a>6.5 文件状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Git工作目录下的文件存在两种状态：</span><br><span class="line">1 untracked 未跟踪（未被纳入版本控制） :  比如新建的文件(此时文件夹上没有图标或者有一个&quot;问号&quot;)</span><br><span class="line">2 tracked 已跟踪（被纳入版本控制）     </span><br><span class="line">    2.1 Staged 已暂存状态            : 添加 但未提交状态(此时文件夹上有一个&quot;加号&quot;)</span><br><span class="line">	2.2 Unmodified 未修改状态        : 已提交(此时文件夹上有一个&quot;对号&quot;)</span><br><span class="line">	2.3 Modified 已修改状态          : 修改了,但是还没有提交 (此时文件夹上有一个&quot;红色感叹号&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1569293793902.png"></p>
<p>这些文件的状态会随着我们执行Git的命令发生变化</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1566627767390.png"></p>
<h2 id="6-6-修改文件-不提交和上一个版本比较差异-diff"><a href="#6-6-修改文件-不提交和上一个版本比较差异-diff" class="headerlink" title="6.6 修改文件,不提交和上一个版本比较差异(diff)"></a>6.6 修改文件,不提交和上一个版本比较差异(diff)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改文件,此时不要提交</span><br><span class="line">选中文件--&gt;右键--&gt; TortoiseGit--&gt; 比较差异</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572167540734.png" alt="1572167540734"></p>
<h2 id="6-7-查看提交历史记录"><a href="#6-7-查看提交历史记录" class="headerlink" title="6.7 查看提交历史记录"></a>6.7 查看提交历史记录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选中文件</span><br><span class="line">右键--&gt; TortoiseGit--&gt; 显示日志</span><br><span class="line">此时我们可以看到所有的历史提交记录</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572167842481.png" alt="1572167842481"></p>
<p>##6.8 回退至历史版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右键--&gt; TortoiseGit--&gt; 显示日志</span><br><span class="line">选中某个版本--&gt; 进行如下操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572171034508.png" alt="1572171034508"></p>
<h2 id="6-9-文件删除"><a href="#6-9-文件删除" class="headerlink" title="6.9 文件删除"></a>6.9 文件删除</h2><p>###6.9.1本地删除与恢复</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1) 直接选中文件删除的话,其实只是删除了本地工作区的文件,并没有删除 仓库中的文件</span><br><span class="line">   此时时可以回退的, 比如我们进行如下操作</span><br><span class="line">   1)文件删除</span><br><span class="line">   2)右键--&gt; TortoiseGit--&gt; 还原</span><br><span class="line">   此时我们发现文件又被恢复了</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572169387835.png" alt="1572169387835"></p>
<h3 id="6-9-2从服务器删除"><a href="#6-9-2从服务器删除" class="headerlink" title="6.9.2从服务器删除"></a>6.9.2从服务器删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2) 我们如果真的想要将某个文件从服务器删除,需要进行如下操作</span><br><span class="line">   1) 删除文件,和上面的操作一样</span><br><span class="line">   2) 提交,此时服务文件已经删除了(历史版本还在,还是可以恢复)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-9-3从服务器删除-但是不删除本地"><a href="#6-9-3从服务器删除-但是不删除本地" class="headerlink" title="6.9.3从服务器删除,但是不删除本地"></a>6.9.3从服务器删除,但是不删除本地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们可以如下操作,只删除服务器上的文件,但是本地文件并不删除</span><br><span class="line">备注: 删除之后需要提交,才会真正的从服务器删除</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572171572963.png" alt="1572171572963"></p>
<h2 id="6-10-忽略提交"><a href="#6-10-忽略提交" class="headerlink" title="6.10 忽略提交"></a>6.10 忽略提交</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有时候我们一些文件是不需要提交的比如说idea&#x2F;eclipse 开发的代码自动生成的配置文件</span><br><span class="line">如何配置不提交呢</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572172137494.png" alt="1572172137494"></p>
<p>此时我们的根目录下会生成一个.gitignore 文件</p>
<p>忽略文件如何阅读,常见格式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有以.a 结尾的文件讲被忽略(递归)</span></span><br><span class="line"><span class="string">*.a</span></span><br><span class="line"><span class="comment"># 不管其他规则怎样,强制不忽略  lib.a</span></span><br><span class="line"><span class="type">!lib.a</span></span><br><span class="line"><span class="comment"># 只忽略 文件 TODO (注意这里是文件)</span></span><br><span class="line"><span class="string">/TODO</span></span><br><span class="line"><span class="comment"># 忽略 build文件夹下所有内容(递归) 这里是文件夹</span></span><br><span class="line"><span class="string">build/</span></span><br><span class="line"><span class="comment"># 忽略 doc 目录下以 *.txt 结尾的文件 (不递归)</span></span><br><span class="line"><span class="string">doc/*.txt</span></span><br><span class="line"><span class="comment"># 忽略 doc 目录下以 *.pdf 结尾的文件 (递归)</span></span><br><span class="line"><span class="string">doc/**/*.pdf</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当然理解了上述规则,我们也可以手动编辑该文件,而不用通过窗口化操作(如果不嫌麻烦)</p>
<h1 id="7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支"><a href="#7-Git-的基本使用02-TortoiseGit-操作本地仓库-分支" class="headerlink" title="7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)"></a>7. Git 的基本使用02-TortoiseGit 操作本地仓库(分支)</h1><h2 id="7-1-分支的概念"><a href="#7-1-分支的概念" class="headerlink" title="7.1 分支的概念"></a>7.1 分支的概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-2-为何要使用分支"><a href="#7-2-为何要使用分支" class="headerlink" title="7.2 为何要使用分支"></a>7.2 为何要使用分支</h2><p>先看单线程开发</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572173978185.png" alt="1572173978185"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">思考如下现象</span><br><span class="line">    10.1 日 业务部门提出需求 : 明年 元旦3天做2个促销活动</span><br><span class="line">	1) 12.31 号上线活动1, </span><br><span class="line">	2) 1.4 号上线活动2 ,同时 要求撤销 活动1</span><br><span class="line">    你所在 部门领导 为了保证能顺利完成,要求 11.15 号完成 上述两个功能的开发工作</span><br><span class="line">此时作为开发人员:我要面临两个文件, 活动1 的代码,即要存在(12.31 要用)又要不存在(1.4 号要求删除) ,我们怎么做?</span><br><span class="line">显然比较棘手,如果使用分支(可以理解为将代码复制一份)将很好解决</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572174740013.png" alt="1572174740013"></p>
<h2 id="7-3-创建分支"><a href="#7-3-创建分支" class="headerlink" title="7.3 创建分支"></a>7.3 创建分支</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">到现在为止,我们一直使用的时主分支(master)</span><br><span class="line">在主分支上操作创建分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572178189980.png" alt="1572178189980"></p>
<h2 id="7-4-分支的查看切换"><a href="#7-4-分支的查看切换" class="headerlink" title="7.4 分支的查看切换"></a>7.4 分支的查看切换</h2><h3 id="7-4-1查看分支"><a href="#7-4-1查看分支" class="headerlink" title="7.4.1查看分支"></a>7.4.1查看分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看版本分支图,此时我们看到有两个分支</span><br><span class="line">当然,我们可以创建多个分支</span><br><span class="line">可以看到多个分支的图形</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572179420706.png" alt="1572179420706"></p>
<h3 id="7-4-2切换分支"><a href="#7-4-2切换分支" class="headerlink" title="7.4.2切换分支"></a>7.4.2切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右键--&gt; 检出</span><br></pre></td></tr></table></figure>



<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572180057481.png" alt="1572180057481"></p>
<p>##7.5 分支的合并与删除</p>
<h3 id="7-5-1合并"><a href="#7-5-1合并" class="headerlink" title="7.5.1合并"></a>7.5.1合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我们将代码切换到分支1,然后写属于需求1 的代码并提交</span><br><span class="line">当我们把需求1 开发完毕如何把需求1 的代码合并到主分支呢?</span><br><span class="line">--&gt;1 切换到 主版本</span><br><span class="line">--&gt;2 右键 合并即可将需求1 写的代码合并至主分支</span><br><span class="line">-----此时我们看到代码自动合并到了master分支</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572180623156.png" alt="1572180623156"></p>
<h3 id="7-5-2删除分支"><a href="#7-5-2删除分支" class="headerlink" title="7.5.2删除分支"></a>7.5.2删除分支</h3><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572183670465.png" alt="1572183670465"></p>
<p>5,冲突的处理<br>    5.1)冲突的概念</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">现象演示	</span><br><span class="line">	开发人员A 开发需求1,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int [] args)</span><br><span class="line"> 同时开发人员B 开发需求2,开发了一个工具类 MathUtil,里面第一行写了一个方法 add(int a int b)</span><br><span class="line">他们在互相不知道对方需求的情况下同时提交了代码到自己的分支</span><br><span class="line">   思考此时如果我们把需求1 和需求2 同时都合并到主分支上, 主分支的 工具类 MathUtil 的第一行应该使用谁的代码? </span><br><span class="line">   此时主分支是不能智能判断第一行使用谁的代码,合并时会报错,我们叫做冲突.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572181403239.png" alt="1572181403239"></p>
<p>​    5.2) 如何处理冲突</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分析一下冲突的原因:</span><br><span class="line">	开发人员之间彼此没有沟通导致的同一个时间节点修改了同一个地方的代码,合并是冲突</span><br><span class="line">思考:</span><br><span class="line">	我们能直接把某个开发人员开发的代码删除吗?</span><br><span class="line">显然不能</span><br><span class="line">	所以在处理冲突时,第一步应该时找开发另一个需求的人员沟通,之后才是处理冲突</span><br><span class="line">-----</span><br><span class="line">--&gt; 选中冲突的文件(带黄色感叹号的文件都是冲突的文件,如果有多个需要逐一处理)</span><br><span class="line">--&gt; 右键--&gt; 编辑冲突,</span><br><span class="line">--&gt;处理完毕后.标记已解决</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572182565594.png" alt="1572182565594"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572182727568.png" alt="1572182727568"></p>
<p>#8. tag  标签</p>
<h2 id="8-1-标签的概念"><a href="#8-1-标签的概念" class="headerlink" title="8.1 标签的概念"></a>8.1 标签的概念</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你的项目达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以给它打上标签(tag)</span><br><span class="line">比如说，我们想为我们的项目发布一个&quot;1.0&quot;版本。 我们给最新一次提交打上（HEAD）&quot;v1.0&quot;的标签。</span><br><span class="line">标签可以理解为项目里程碑的一个标记,一旦打上了这个标记则,表示当前的代码将不允许提交</span><br></pre></td></tr></table></figure>

<h2 id="8-2-标签的创建-tag"><a href="#8-2-标签的创建-tag" class="headerlink" title="8.2  标签的创建(tag)"></a>8.2  标签的创建(tag)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签的创建和分支的创建操作几乎一样</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572183849972.png" alt="1572183849972"></p>
<h2 id="8-3-标签的切换与删除"><a href="#8-3-标签的切换与删除" class="headerlink" title="8.3 标签的切换与删除"></a>8.3 标签的切换与删除</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572184030612.png" alt="1572184030612"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572184109746.png" alt="1572184109746"></p>
<h1 id="9-远程仓库"><a href="#9-远程仓库" class="headerlink" title="9. 远程仓库"></a>9. 远程仓库</h1><p>我们的代码不能总是放在本地,因为总是放在本地,一旦电脑出现故障,数据将丢失,怎么共享呢,这里我们需要一个服务器, 我们可以把代码放到服务器上,然后让别人下载,这样我峨嵋你既可以备份代码,也可以进行团队协作开发</p>
<h2 id="9-0-局域网仓库"><a href="#9-0-局域网仓库" class="headerlink" title="9.0 局域网仓库"></a>9.0 局域网仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上我们可以搭建一个简单的局域网服务器共享我们的代码</span><br></pre></td></tr></table></figure>

<h3 id="9-0-1本地相对路径-多个文件夹之间共享代码"><a href="#9-0-1本地相对路径-多个文件夹之间共享代码" class="headerlink" title="9.0.1本地相对路径,多个文件夹之间共享代码"></a>9.0.1本地相对路径,多个文件夹之间共享代码</h3><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572535798760.png" alt="1572535798760"></p>
<h3 id="9-0-2开启局域网共享代码"><a href="#9-0-2开启局域网共享代码" class="headerlink" title="9.0.2开启局域网共享代码"></a>9.0.2开启局域网共享代码</h3><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572535921581.png" alt="1572535921581"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572536029899.png" alt="1572536029899"></p>
<p>局域网这种共享是没有安全控制的,都可以访问,如果想要搭建一个可以控制权限的服务器需要借助第三方软件</p>
<p>gitblit,可以自行搜索搭建</p>
<h2 id="9-1-常用远程仓库托管服务"><a href="#9-1-常用远程仓库托管服务" class="headerlink" title="9.1 常用远程仓库托管服务"></a>9.1 常用远程仓库托管服务</h2><p>除了自己搭建服务器,其实我们可以使用一些免费的远程仓库,远程仓库有很多,常见的免费互联网远程仓库托管服务如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.github.com</span><br><span class="line">www.gitee.com</span><br><span class="line">www.gitlab.com</span><br><span class="line"></span><br><span class="line">github  是一个基于git实现在线代码托管的仓库，向互联网开放，企业版要收钱。</span><br><span class="line">gitee    即码云，是 oschina 免费给企业用的，不用自己搭建环境。</span><br><span class="line">gitlab   类似 github，一般用于在企业内搭建git私服，要自己搭环境。</span><br><span class="line"></span><br><span class="line">GitHub(gitee)、GitLab 不同点：</span><br><span class="line">1、GitHub如果使用私有仓库是需要付费的，(2019年开始私有仓库也是免费的但是只能3个人协同开发,想要更多需要收费)，GitLab可以在上面搭建私人的免费仓库。</span><br><span class="line">2、GitLab让开发团队对他们的代码仓库拥有更多的控制，相对于GitHub，它有不少的特色：</span><br><span class="line">    (1)允许免费设置仓库权限</span><br><span class="line">    (2)允许用户选择分享一个project的部分代码</span><br><span class="line">    (3)允许用户设置project的获取权限，进一步提升安全性</span><br><span class="line">    (4)可以设置获取到团队整体的改进进度</span><br><span class="line">    (5)通过innersourcing让不在权限范围内的人访问不到该资源</span><br></pre></td></tr></table></figure>

<p>鉴于国内用户可能网络不好,这里我们使用gitee(码云) 来讲解我们的课程,其他可自行找资料学习非常类似</p>
<h2 id="9-2-码云账号注册"><a href="#9-2-码云账号注册" class="headerlink" title="9.2  码云账号注册"></a>9.2  码云账号注册</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572267659865.png" alt="1572267659865"></p>
<p>填写邮箱发送验证码,然后可以注册账号,主页如下</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572268091948.png" alt="1572268091948"></p>
<h2 id="9-3-创建远程仓库"><a href="#9-3-创建远程仓库" class="headerlink" title="9.3 创建远程仓库"></a>9.3 创建远程仓库</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572274044100.png" alt="1572274044100"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/224637.png"></p>
<p>各个类型仓库之间的区别</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572274100802.png" alt="1572274100802"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572274406371.png" alt="1572274406371"></p>
<h2 id="9-4-把本地代码推送到远端"><a href="#9-4-把本地代码推送到远端" class="headerlink" title="9.4  把本地代码推送到远端"></a>9.4  把本地代码推送到远端</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572275202869.png" alt="1572275202869"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572275492670.png" alt="1572275492670"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572275546739.png" alt="1572275546739"></p>
<p>此时我们刷新仓库发现代码已经存在了</p>
<p>我们填写的用户信息,会被保存在本地,下次提交无需填写用户名和密码</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572277483698.png" alt="1572277483698"></p>
<h2 id="9-5-从远程仓库更新代码"><a href="#9-5-从远程仓库更新代码" class="headerlink" title="9.5  从远程仓库更新代码"></a>9.5  从远程仓库更新代码</h2><p>我们同样可以从库下载代码,</p>
<p>新建一个文件夹 repo2 ,进入然后进行如下操作</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572275958701.png" alt="1572275958701"></p>
<p>此时我们发现我们的代码已经被下载下来了</p>
<h2 id="9-6-代码的修改与提交-查看历史"><a href="#9-6-代码的修改与提交-查看历史" class="headerlink" title="9.6  代码的修改与提交,查看历史"></a>9.6  代码的修改与提交,查看历史</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)此时我们修改代码就不能仅仅是提交到本地了,提交完毕应该推送到远端服务器</span><br><span class="line">2)此时如果别人从远端仓库下载最新的代码其实是可以看到我们的代码修改记录的</span><br><span class="line">   git --&gt;显示日志</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572277139243.png" alt="1572277139243"></p>
<h2 id="9-7-ssh-连接概述"><a href="#9-7-ssh-连接概述" class="headerlink" title="9.7 ssh 连接概述"></a>9.7 ssh 连接概述</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实际上git 不仅仅支持用户名密码方式的配置,可以有另外一种相对更加安全的配置即ssh 方式配置</span><br></pre></td></tr></table></figure>

<p> ssh 方式的底层原理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh连接地城是RAS加密算法,又称非对称加密,是一种现在公认的最安全的加密方式</span><br><span class="line">数学基础好的同学可以研究一下</span><br><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;cjm123&#x2F;p&#x2F;8243424.html</span><br><span class="line"></span><br><span class="line">公钥私钥加密可以看作古代 的&quot;虎符&quot; , 我们本地电脑有一份,远程服务器有一份, 只要 &quot;虎符&quot; 核对通过 表示身份无误,可以执行提交等操作,无需输入用户名密码</span><br></pre></td></tr></table></figure>

<h2 id="9-8-ssh-密钥的生成"><a href="#9-8-ssh-密钥的生成" class="headerlink" title="9.8 ssh 密钥的生成"></a>9.8 ssh 密钥的生成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#生成公钥私钥</span><br><span class="line"> ssh-keygen -t rsa</span><br><span class="line"> 一直回车即可</span><br><span class="line"> 会默认用户目录 .ssh 目录生成一个默认的id_rsa文件 和id_rsa.pub</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572520139221.png" alt="1572520139221"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572520293700.png" alt="1572520293700"></p>
<h2 id="9-9-ssh-密钥配置"><a href="#9-9-ssh-密钥配置" class="headerlink" title="9.9 ssh 密钥配置"></a>9.9 ssh 密钥配置</h2><p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572520396806.png" alt="1572520396806"></p>
<h2 id="9-10-ssh-方式克隆-提交代码"><a href="#9-10-ssh-方式克隆-提交代码" class="headerlink" title="9.10 ssh 方式克隆/提交代码:"></a>9.10 ssh 方式克隆/提交代码:</h2><p>  配置完成之后我们克隆我们之前的项目</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572522118610.png" alt="1572522118610"></p>
<p>修改后直接提交推送即可成功,,git 会自动去.ssh 目录找我们的私钥进行匹配</p>
<h2 id="9-11-远程仓库的其他操作"><a href="#9-11-远程仓库的其他操作" class="headerlink" title="9.11. 远程仓库的其他操作"></a>9.11. 远程仓库的其他操作</h2><p>概念</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572522822946.png" alt="1572522822946"></p>
<p>当我们从 gitee 上查看别人的项目的时候我们可能会看到上图中的按钮</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指数:</span><br><span class="line">	是gitee 网站根据当前项目的各项指标计算出来的一个值</span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572523045267.png" alt="1572523045267"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Star:</span><br><span class="line">	点赞, 注意这里的并不像朋友圈那样容易获得点赞,圈内人还是很克制的</span><br><span class="line">Watch:</span><br><span class="line">   如果你watch 了某个开源项目,那么这个项目后续所有的改动你将收到通知</span><br><span class="line">Fork :</span><br><span class="line">	将别人的代码克隆到你自己的仓库</span><br><span class="line">	作用一: 如果担心某个优秀的项目别人突然有一天不开源了,你可以fork到自己的仓库</span><br><span class="line">    作用二: 修改别人的代码</span><br><span class="line">	  以linux 为例,你其实不是linux 社区的开发人员,但是你 又想为linux 开发做贡献(维护代码)</span><br><span class="line">	   你并没有权限,怎们办?</span><br><span class="line">	   你可以先把linux 开源的代码 fork 到你自己的仓库,此时你就可以操作自己的仓库进行修改代码了</span><br><span class="line">	   如何让别人合并你修改好的代码呢? </span><br><span class="line">	    我们注意项目的上方有一个 &quot; Pull Request&quot; 这个按钮的意思是 &quot;请求求别人合并你修改的代码&quot;</span><br><span class="line">	    当我们发起一个 Pull Request 时 , 项目的拥有者将收到 Pull Request请求,然后将根据你提交代码的质量决定是否合并</span><br></pre></td></tr></table></figure>

<p>项目操作</p>
<p>1)我们可以删除修改我们自己仓库的基本信息</p>
<ol start="2">
<li>我们可以邀请其他人成为项目的开发人员或者管理人员</li>
</ol>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572523819666.png" alt="1572523819666"></p>
<p>我们可以删除修改我们自己仓库的基本信息</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572523928774.png" alt="1572523928774"></p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572523968992.png" alt="1572523968992"></p>
<h2 id="9-12-利用-gitee-搭建个人主页"><a href="#9-12-利用-gitee-搭建个人主页" class="headerlink" title="9.12 利用 gitee 搭建个人主页"></a>9.12 利用 gitee 搭建个人主页</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)将静态资源上传至仓库</span><br><span class="line">2) 选择服务 pages 即可部署</span><br><span class="line">注意 1)必须有个index.html 文件</span><br><span class="line">注意 2) 只能搭建静态网站,动态网站请租赁服务器搭建提供服务</span><br><span class="line">注意 3) gitee 要求必须绑定手机号</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572525575923.png" alt="1572525575923"></p>
<p>点击开启后gitee 会自动生成一个域名</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/6.git/%E8%AF%A6%E7%BB%86%E8%AE%B2%E4%B9%89/%E8%AE%B2%E4%B9%89/assets/1572526097257.png" alt="1572526097257"></p>
<p>直接访问即可</p>
<p>此时我们已经在git 上部署了一个静态的网站</p>
<p><img src="/2019/11/18/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191118Git/1572526136074.png" alt="1572526136074"></p>
<h1 id="10-命令行–-git基本操作"><a href="#10-命令行–-git基本操作" class="headerlink" title="10.命令行– git基本操作"></a>10.命令行– git基本操作</h1><h2 id="10-1-介绍"><a href="#10-1-介绍" class="headerlink" title="10.1  介绍"></a>10.1  介绍</h2><p>​    上述我们的操作 使用的 是客户端TortoiseGit 操作的git ,实际上底层依旧是使用的命令行帮我们执行, 在早期 git 并没有窗口化工具,开发人员只能使用命令行模式</p>
<p>  实际上,如果你掌握并熟练使用了命令行模式操作git 的话,你会发现某些操作命令行比窗口化操作要简单</p>
<p>所有你在工作中会发现高深的技术人员可能会喜欢命令行模式提交git</p>
<p>##10.2 环境配置</p>
<p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置用户信息 </span></span><br><span class="line">   git config --global user.name “itcast”</span><br><span class="line">   git config --global user.email “itcast@itcast.cn”</span><br><span class="line"><span class="meta">#</span><span class="bash">查看配置信息</span></span><br><span class="line">   git config --list</span><br><span class="line">   git config user.name</span><br><span class="line"><span class="meta">#</span><span class="bash">通过上面的命令设置的信息会保存在~/.gitconfig文件中</span></span><br></pre></td></tr></table></figure>

<p>##10.3  初始化本地仓库 init</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化仓库带工作区</span></span><br><span class="line">git init</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化仓库不带工作区</span></span><br><span class="line">git init -bare  </span><br></pre></td></tr></table></figure>

<p>##10.4 克隆 clone</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库克隆</span></span><br><span class="line">git clone 远程Git仓库地址 </span><br><span class="line">例如: git clone https://gitee.com/itcast/gittest.git</span><br></pre></td></tr></table></figure>

<p>##10.5  查看状态 stasus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">git status </span><br><span class="line"><span class="meta">#</span><span class="bash">查看状态 使输出信息更加简洁</span></span><br><span class="line">git status –s </span><br></pre></td></tr></table></figure>

<p>##10.6 add </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将未跟踪的文件加入暂存区</span></span><br><span class="line">git add  &lt;文件名&gt;  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存区的文件取消暂存 (取消 add )</span></span><br><span class="line">git reset  &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<p>##10.7 commit</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git commit 将暂存区的文件修改提交到本地仓库</span></span><br><span class="line">git commit -m &quot;日志信息&quot;  &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<p>##10.8 删除 rm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从本地工作区 删除文件</span></span><br><span class="line">git rm &lt;文件名&gt;  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果本工作区库误删, 想要回退</span></span><br><span class="line">git checkout head &lt;文件名&gt;  </span><br></pre></td></tr></table></figure>

<h1 id="11-命令行–git-远程仓库操作"><a href="#11-命令行–git-远程仓库操作" class="headerlink" title="11. 命令行–git 远程仓库操作"></a>11. 命令行–git 远程仓库操作</h1><h2 id="11-1-查看远程"><a href="#11-1-查看远程" class="headerlink" title="11.1    查看远程"></a>11.1    查看远程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程  列出指定的每一个远程服务器的简写</span></span><br><span class="line">git remote </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程 , 列出 简称和地址</span></span><br><span class="line">git remote  -v  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看远程仓库详细地址</span></span><br><span class="line">git remote show  &lt;仓库简称&gt;</span><br></pre></td></tr></table></figure>

<h2 id="11-2-添加-移除远测仓库"><a href="#11-2-添加-移除远测仓库" class="headerlink" title="11.2 添加/移除远测仓库"></a>11.2 添加/移除远测仓库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加远程仓库</span></span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除远程仓库和本地仓库的关系(只是从本地移除远程仓库的关联关系，并不会真正影响到远程仓库)</span></span><br><span class="line">git remote rm &lt;shortname&gt; </span><br></pre></td></tr></table></figure>

<h2 id="11-3-从远程仓库获取代码"><a href="#11-3-从远程仓库获取代码" class="headerlink" title="11.3 从远程仓库获取代码"></a>11.3 从远程仓库获取代码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库克隆</span></span><br><span class="line">git clone &lt;url&gt; </span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库拉取 (拉取到.git 目录,不会合并到工作区,工作区发生变化)</span></span><br><span class="line">git fetch  &lt;shortname&gt;  &lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动合并  把某个版本的某个分支合并到当前工作区</span></span><br><span class="line">git merge &lt;shortname&gt;/&lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从远程仓库拉取 (拉取到.git 目录,合并到工作区,工作区不发生变化) = fetch+merge</span></span><br><span class="line">git pull  &lt;shortname&gt;  &lt;分支名称&gt;</span><br><span class="line">git pull  &lt;shortname&gt;  &lt;分支名称&gt;  --allow-unrelated-histories  #  强制拉取合并</span><br></pre></td></tr></table></figure>

<p>注意：如果当前本地仓库不是从远程仓库克隆，而是本地创建的仓库，并且仓库中存在文件，此时再从远程仓库拉取文件的时候会报错（fatal: refusing to merge unrelated histories ），解决此问题可以在git pull命令后加入参数–allow-unrelated-histories (如上 命令)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将本地仓库推送至远程仓库的某个分支</span></span><br><span class="line">git push [remote-name] [branch-name]</span><br></pre></td></tr></table></figure>

<h1 id="12-命令行–-分支"><a href="#12-命令行–-分支" class="headerlink" title="12.  命令行– 分支"></a>12.  命令行– 分支</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认 分支名称为 master</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建分支</span></span><br><span class="line">git branch &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换分支 </span></span><br><span class="line">git chekout &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支(如果分支已经修改过,则不允许删除)</span></span><br><span class="line">git branch -d  &lt;分支名&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制删除分支</span></span><br><span class="line">git branch -D  &lt;分支名&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 提交分支至远程仓库</span></span><br><span class="line">git push &lt;仓库简称&gt; &lt;分支名称&gt;	</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并分支 将其他分支合并至当前工作区</span></span><br><span class="line">git merge &lt;分支名称&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程仓库分支</span></span><br><span class="line">git push origin –d branchName</span><br></pre></td></tr></table></figure>

<h1 id="13-命令行-–tag"><a href="#13-命令行-–tag" class="headerlink" title="13 . 命令行 –tag"></a>13 . 命令行 –tag</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tag详细信息 </span></span><br><span class="line"> git show [tagName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个tag</span></span><br><span class="line">git tag [tagName]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提交指定tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push [仓库简称] [tagName]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向某个tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch] [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git tag -d [tag]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag (注意 空格)</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin :refs/tags/[tag]</span></span><br></pre></td></tr></table></figure>

<h1 id="14-案例"><a href="#14-案例" class="headerlink" title="14. 案例"></a>14. 案例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">企业中我们是如何开发的</span><br><span class="line">1) 入职第一天,管理人员分配&#x2F;git账号密码 (可能是两个:一个是文档,一个是 代码)</span><br><span class="line">2) 开发人员下载代码即文档&#x2F; 根据文档将环境搭建成功</span><br><span class="line">3) 团队一般会给你讲讲项目相关的支持</span><br><span class="line">----</span><br><span class="line">4) 你接到第一个需求(或者某个功能,一般要经过沟通,分析,设计...等过程)</span><br><span class="line">5) 创建分支(一般以需求编号为版本号)</span><br><span class="line">6) 开发需求,本地测试,提交代码,</span><br><span class="line">	一般来讲为了避免将测试代码提交,需要提交前,检查如下步骤</span><br><span class="line">	6.1) 是否多提交了某个文件,比如测试文件</span><br><span class="line">	6.2) 是否漏提交文件</span><br><span class="line">	6.3) 打开每一个应该提交的文件,判断是否多提交了一行代码,是否少提交了一行代码,是否删除了本应该存在的代码</span><br><span class="line">	检查完毕提交代码</span><br><span class="line">7) 合并至主版本-- 提交测试人员测试</span><br><span class="line">8) 测试人员测试bug ,在分支上继续修改,提交</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2019/11/23/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191123RabbitMQ/</url>
    <content><![CDATA[<h2 id="1-消息队列概述"><a href="#1-消息队列概述" class="headerlink" title="1. 消息队列概述"></a>1. 消息队列概述</h2><p><strong>目标</strong>：能够说出什么是消息队列；为什么使用消息队列；常见产品有哪些</p>
<p><strong>小结</strong>：</p>
<p>消息队列是应用程序之间的通信方法；无需即时返回的且耗时的操作进行异步处理从而提高系统的吞吐量；可以实现程序之间的解耦合。</p>
<ul>
<li>实现方式：AMQP，JMS</li>
<li>常见产品：activeMQ，zeroMQ，RabbitMQ，RocketMQ，kafka</li>
</ul>
<a id="more"></a>

<h2 id="2-安装及配置RabbitMQ"><a href="#2-安装及配置RabbitMQ" class="headerlink" title="2. 安装及配置RabbitMQ"></a>2. 安装及配置RabbitMQ</h2><p><strong>目标</strong>：按照文档在本机安装windows版本RabbitMQ，并配置其用户和Virtual Hosts</p>
<p><strong>分析</strong>：</p>
<ol>
<li>安装erlang；</li>
<li>安装rabbitMQ；</li>
<li>安装RabbitMQ的图形管理界面插件；</li>
<li>创建管理用户；</li>
<li>创建虚拟主机Virtual Hosts</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">1[安装erlang] --&gt; 2[安装RabbitMQ]</span><br><span class="line">2 --&gt; 3[安装管理插件]</span><br><span class="line">3 --&gt; 4[创建用户]</span><br><span class="line">4 --&gt; 5[创建虚拟主机]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>安装上述的组件时候都需要使用以管理员身份运行。</p>
</blockquote>
<h2 id="3-搭建RabbitMQ入门工程"><a href="#3-搭建RabbitMQ入门工程" class="headerlink" title="3. 搭建RabbitMQ入门工程"></a>3. 搭建RabbitMQ入门工程</h2><p><strong>目标</strong>：搭建RabbitMQ入门工程并配置对应的maven依赖</p>
<p><strong>分析</strong>：</p>
<p>创建heima-rabbitmq的工程；用于测试RabbitMQ的消息收发。添加用于操作RabbitMQ的依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>小结</strong>：</p>
<p>使用IDEA创建maven工程；使用了jdk1.8。在工程中的pom.xml文件中添加了上述的依赖。</p>
<h2 id="4-入门工程-生产者"><a href="#4-入门工程-生产者" class="headerlink" title="4. 入门工程-生产者"></a>4. 入门工程-生产者</h2><p><strong>目标</strong>：编写消息生产者代码，发送消息到队列</p>
<p><strong>分析</strong>：</p>
<p>入门工程：生产者发送消息到RabbitMQ的队列（simple_queue）；消费者可以从队列中获取消息。可以使用RabbitMQ的简单模式（simple）。</p>
<p>生产者实现发送消息的步骤：</p>
<ol>
<li>创建连接工厂（设置RabbitMQ的连接参数）；</li>
<li>创建连接；</li>
<li>创建频道；</li>
<li>声明队列；</li>
<li>发送消息；</li>
<li>关闭资源</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Channel;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.Connection;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.ConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式：发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">&quot;simple_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂（设置RabbitMQ的连接参数）；</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">//主机；默认localhost</span></span><br><span class="line">        connectionFactory.setHost(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="comment">//连接端口；默认5672</span></span><br><span class="line">        connectionFactory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">//虚拟主机；默认/</span></span><br><span class="line">        connectionFactory.setVirtualHost(<span class="string">&quot;/itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名；默认guest</span></span><br><span class="line">        connectionFactory.setUsername(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line">        <span class="comment">//密码；默认guest</span></span><br><span class="line">        connectionFactory.setPassword(<span class="string">&quot;heima&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建连接；</span></span><br><span class="line">        Connection connection = connectionFactory.newConnection();</span><br><span class="line">        <span class="comment">//3. 创建频道；</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4. 声明队列；</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列（消息会持久化保存在服务器上）</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候队列自动删除</span></span><br><span class="line"><span class="comment">         * 参数5：其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5. 发送消息；</span></span><br><span class="line">        String message = <span class="string">&quot;你好！小兔纸。&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：交换机名称；如果没有则指定空字符串（表示使用默认的交换机）</span></span><br><span class="line"><span class="comment">         * 参数2：路由key，简单模式中可以使用队列名称</span></span><br><span class="line"><span class="comment">         * 参数3：消息其它属性</span></span><br><span class="line"><span class="comment">         * 参数4：消息内容</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicPublish(<span class="string">&quot;&quot;</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">&quot;已发送消息：&quot;</span> + message);</span><br><span class="line">        <span class="comment">//6. 关闭资源</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在设置连接工厂的时候；如果没有指定连接的参数则会有默认值；可以去设置虚拟主机。</p>
</blockquote>
<h2 id="5-入门工程-消费者"><a href="#5-入门工程-消费者" class="headerlink" title="5. 入门工程-消费者"></a>5. 入门工程-消费者</h2><p><strong>目标</strong>：编写消息消费者代码，从队列中接收消息并消费</p>
<p><strong>分析</strong>：</p>
<p>从RabbitMQ中队列（与生产者发送消息时的队列一致；simple_queue）接收消息；</p>
<p>实现消费者步骤：</p>
<ol>
<li>创建连接工厂；</li>
<li>创建连接；（抽取一个获取连接的工具类）</li>
<li>创建频道；</li>
<li>声明队列；</li>
<li>创建消费者（接收消息并处理消息）；</li>
<li>监听队列</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.util.ConnectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.rabbitmq.client.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单模式；消费者接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建连接工厂；</span></span><br><span class="line">        <span class="comment">//2. 创建连接；（抽取一个获取连接的工具类）</span></span><br><span class="line">        Connection connection = ConnectionUtil.getConnection();</span><br><span class="line">        <span class="comment">//3. 创建频道；</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">//4. 声明队列；</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名称</span></span><br><span class="line"><span class="comment">         * 参数2：是否定义持久化队列（消息会持久化保存在服务器上）</span></span><br><span class="line"><span class="comment">         * 参数3：是否独占本连接</span></span><br><span class="line"><span class="comment">         * 参数4：是否在不使用的时候队列自动删除</span></span><br><span class="line"><span class="comment">         * 参数5：其它参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.queueDeclare(Producer.QUEUE_NAME, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//5. 创建消费者（接收消息并处理消息）；</span></span><br><span class="line">        DefaultConsumer defaultConsumer = <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="comment">//路由key</span></span><br><span class="line">                System.out.println(<span class="string">&quot;路由key为：&quot;</span> + envelope.getRoutingKey());</span><br><span class="line">                <span class="comment">//交换机</span></span><br><span class="line">                System.out.println(<span class="string">&quot;交换机为：&quot;</span> + envelope.getExchange());</span><br><span class="line">                <span class="comment">//消息id</span></span><br><span class="line">                System.out.println(<span class="string">&quot;消息id为：&quot;</span> + envelope.getDeliveryTag());</span><br><span class="line">                <span class="comment">//接收到的消息</span></span><br><span class="line">                System.out.println(<span class="string">&quot;接收到的消息为：&quot;</span> + <span class="keyword">new</span> String(body, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//6. 监听队列</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 参数1：队列名</span></span><br><span class="line"><span class="comment">         * 参数2：是否要自动确认；设置为true表示消息接收到自动向MQ回复接收到了，MQ则会将消息从队列中删除；</span></span><br><span class="line"><span class="comment">         * 如果设置为false则需要手动确认</span></span><br><span class="line"><span class="comment">         * 参数3：消费者</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        channel.basicConsume(Producer.QUEUE_NAME, <span class="keyword">true</span>, defaultConsumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要持续监听队列消息，所以不要关闭资源</p>
</blockquote>
<h2 id="6-入门工程测试"><a href="#6-入门工程测试" class="headerlink" title="6. 入门工程测试"></a>6. 入门工程测试</h2><p><strong>目标</strong>：启动消费者和生产者，到RabbitMQ中查询队列并在消费者端IDEA控制台查看接收到的消息</p>
<p><strong>分析</strong>：</p>
<p>生产者：发送消息到RabbitMQ队列（simple_queue）</p>
<p>消费者：接收RabbitMQ队列消息</p>
<p><strong>小结</strong>：</p>
<p>简单模式：生产者发送消息到队列中，一个消费者从队列中接收消息。</p>
<blockquote>
<p>在RabbitMQ中消费者只能从队列接收消息。</p>
<p>如果接收消息的消费者在同一个队列中有两个或多个时；消息是如何分配的？</p>
</blockquote>
<h2 id="7-Work-queues工作队列模式"><a href="#7-Work-queues工作队列模式" class="headerlink" title="7. Work queues工作队列模式"></a>7. Work queues工作队列模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Work queues工作队列模式的特点</p>
<p><strong>分析</strong>：</p>
<p>工作队列模式：在同一个队列中可以有多个消费者，消费者之间对于消息的接收是竞争关系。</p>
<p>生产者：发送30个消息</p>
<p>消费者：创建两个消费者监听同一个队列，查看两个消费者的接收消息是否存在重复。</p>
<p><strong>小结</strong>：</p>
<p>工作队列模式：一个消息只能被一个消费者接收，其它消费者是不能接收到同一条消息的。</p>
<p>应用场景：可以在消费者端处理任务比较耗时的时候；添加对同一个队列的消费者来提高任务处理能力。</p>
<h2 id="8-订阅模式类型说明"><a href="#8-订阅模式类型说明" class="headerlink" title="8. 订阅模式类型说明"></a>8. 订阅模式类型说明</h2><p><strong>目标</strong>：说出订阅模式中的Exchange交换机作用以及交换机的三种类型</p>
<p><strong>小结</strong>：</p>
<p>订阅模式与前面的两种模式比较：多了一个角色Exchange交换机，接收生产者发送的消息并决定如何投递消息到其绑定的队列；消息的投递决定于交换机的类型。</p>
<p>交换机类型：广播（fanout）、定向（direct）、通配符（topic）</p>
<blockquote>
<p>交换机只做消息转发，自身不存储数据。</p>
</blockquote>
<h2 id="9-Publish-Subscribe发布与订阅模式"><a href="#9-Publish-Subscribe发布与订阅模式" class="headerlink" title="9. Publish/Subscribe发布与订阅模式"></a>9. Publish/Subscribe发布与订阅模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Publish/Subscribe发布与订阅模式的特点</p>
<p><strong>分析</strong>：</p>
<p>发布与订阅模式特点：一个消息可以被多个消费者接收；其实是使用了订阅模式，交换机类型为：fanout广播</p>
<ul>
<li>生产者（发送10个消息）<ol>
<li>创建连接；</li>
<li>创建频道；</li>
<li>声明交换机（fanout）；</li>
<li>声明队列；</li>
<li>队列绑定到交换机；</li>
<li>发送消息；</li>
<li>关闭资源</li>
</ol>
</li>
<li>消费者（至少两个消费者）<ol>
<li>创建连接；</li>
<li>创建频道；</li>
<li>声明交换机；</li>
<li>声明队列；</li>
<li>队列绑定到交换机；</li>
<li>创建消费者；</li>
<li>监听队列；</li>
</ol>
</li>
</ul>
<p><strong>小结</strong>：</p>
<p>发布与订阅模式：<strong>一个消息可以被多个消费者接收</strong>；一个消费者对于的队列，该队列只能被一个消费者监听。使用了订阅模式中交换机类型为：广播。</p>
<h2 id="10-Routing路由模式"><a href="#10-Routing路由模式" class="headerlink" title="10. Routing路由模式"></a>10. Routing路由模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Routing路由模式的特点</p>
<p><strong>分析</strong>：</p>
<p>生产者：发送两条消息（路由key分别为：insert、update）</p>
<p>消费者：创建两个消费者，监听的队列分别绑定路由key为：insert、update</p>
<ol>
<li>消息中路由key为insert的会被绑定路由key为insert的队列接收并被其监听的消费者接收、处理；</li>
<li>消息中路由key为update的会被绑定路由key为update的队列接收并被其监听的消费者接收、处理；</li>
</ol>
<p><strong>小结</strong>：</p>
<p>Routing 路面模式要求队列绑定到交换机的时候指定路由key；消费发送时候需要携带路由key；只有消息的路由key与队列路由key完全一致才能让该队列接收到消息。</p>
<h2 id="11-Topics通配符模式"><a href="#11-Topics通配符模式" class="headerlink" title="11. Topics通配符模式"></a>11. Topics通配符模式</h2><p><strong>目标</strong>：编写生产者、消费者代码并测试了解Topics通配符模式的特点</p>
<p><strong>分析</strong>：</p>
<ul>
<li>生产者：发送包含有item.insert、item.update，item.delete的3中路由key消息</li>
<li>消费者1：监听的队列绑定到交换机的路由key为：item.update，item.delete</li>
<li>消费者2：监听的队列绑定到交换机的路由key为：item.*</li>
</ul>
<p><strong>小结</strong>：</p>
<p>Topics通配符模式：可以根据路由key将消息传递到对应路由key的队列；队列绑定到交换机的路由key可以有多个；通配符模式中路由key可以使用 <code>*</code> 和 <code>#</code> ；使用了通配符模式之后对于路由Key的配置更加灵活。</p>
<h2 id="12-RabbitMQ模式总结"><a href="#12-RabbitMQ模式总结" class="headerlink" title="12. RabbitMQ模式总结"></a>12. RabbitMQ模式总结</h2><p><strong>目标</strong>：对比总结RabbitMQ的5种模式特征</p>
<p><strong>小结</strong>：</p>
<ul>
<li>不直接Exchange交换机（默认交换机）<ol>
<li>simple简单模式：一个生产者生产一个消息到一个队列被一个消费者接收</li>
<li>work工作队列模式：生产者发送消息到一个队列中，然后可以被多个消费者监听该队列；一个消息只能被一个消费者接收，消费者之间是竞争关系</li>
</ol>
</li>
<li>使用Exchange交换机；订阅模式（交换机：广播fanout、定向direct、通配符topic）<ol>
<li>发布与订阅模式：使用了fanout广播类型的交换机，可以将一个消息发送到所有绑定了该交换机的队列</li>
<li>路由模式：使用了direct定向类型的交换机，消费会携带路由key，交换机根据消息的路由key与队列的路由key进行对比，一致的话那么该队列可以接收到消息</li>
<li>通配符模式：使用了topic通配符类型的交换机，消费会携带路由key（*， #），交换机根据消息的路由key与队列的路由key进行对比，匹配的话那么该队列可以接收到消息</li>
</ol>
</li>
</ul>
<h2 id="13-创建SpringBoot整合RabbitMQ的两个工程"><a href="#13-创建SpringBoot整合RabbitMQ的两个工程" class="headerlink" title="13. 创建SpringBoot整合RabbitMQ的两个工程"></a>13. 创建SpringBoot整合RabbitMQ的两个工程</h2><p><strong>目标</strong>：创建springboot-rabbitmq-producer工程用于生产消息；创建springboot-rabbitmq-consumer工程用于接收消息</p>
<p><strong>分析</strong>：</p>
<p>Spring Boot提供了对于AMQP的整合；可以使用RabbitTemplate发送消息；可以使用@RabbitListener注解接收消息。</p>
<p><strong>生产者工程springboot-rabbitmq-producer</strong>：发送消息</p>
<ol>
<li>创建工程；</li>
<li>添加依赖（spring-boot-stater-amqp，spring-boot-starter-test）；</li>
<li>创建启动引导类；</li>
<li>添加配置文件application.yml</li>
</ol>
<p><strong>消费者工程springboot-rabbitmq-consumer</strong>：接收消息</p>
<ol>
<li>创建工程；</li>
<li>添加依赖（spring-boot-stater-amqp）；</li>
<li>创建启动引导类；</li>
<li>添加配置文件application.yml</li>
</ol>
<p><strong>小结</strong>：</p>
<blockquote>
<p>可以使用插件自动生产Spring Boot工程的启动引导类Application.java和配置文件application.yml</p>
</blockquote>
<h2 id="14-配置生产者工程"><a href="#14-配置生产者工程" class="headerlink" title="14. 配置生产者工程"></a>14. 配置生产者工程</h2><p><strong>目标</strong>：配置springboot-rabbitmq-producer工程的RabbitMQ，一个交换机、队列并绑定</p>
<p><strong>分析</strong>：</p>
<p>使用通配符模式：将队列绑定到交换机（topic）时需要指定路由key（item.#）</p>
<ol>
<li>配置RabbitMQ的连接参数：主机、连接端口、虚拟主机、用户名、密码；</li>
<li>声明交换机、队列并将队列绑定到交换机，指定的路由key（item.#）</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>配置application.yml文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/itcast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heima</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heima</span></span><br></pre></td></tr></table></figure>



<ul>
<li>配置交换机、队列和绑定，创建一个配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//交换机名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_TOPIC_EXCHANGE = <span class="string">&quot;item_topic_exchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ITEM_QUEUE = <span class="string">&quot;item_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemTopicExchange&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(ITEM_TOPIC_EXCHANGE).durable(<span class="keyword">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明队列</span></span><br><span class="line">    <span class="meta">@Bean(&quot;itemQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">itemQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(ITEM_QUEUE).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将队列绑定到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">itemQueueExchange</span><span class="params">(<span class="meta">@Qualifier(&quot;itemQueue&quot;)</span> Queue queue,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="meta">@Qualifier(&quot;itemTopicExchange&quot;)</span>Exchange exchange)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;item.#&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="15-配置消费者工程"><a href="#15-配置消费者工程" class="headerlink" title="15. 配置消费者工程"></a>15. 配置消费者工程</h2><p><strong>目标</strong>：配置springboot-rabbitmq-consumer工程的RabbitMQ，编写消息监听器接收消息</p>
<p><strong>分析</strong>：</p>
<ol>
<li>配置application.yml文件，设置RabbitMQ的连接参数；</li>
<li>编写消息监听器接收队列（item_queue）消息；可以使用注解@RabbitListener接收队列消息</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>配置application.yml文件；与生产者工程一致</li>
<li>编写监听器类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收队列消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 接收到的消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;item_queue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListener1</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者接收到消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>接收消息的队列名称要与生产者发送消息时的队列名称一致</p>
</blockquote>
<h2 id="16-测试消息发送和接收"><a href="#16-测试消息发送和接收" class="headerlink" title="16. 测试消息发送和接收"></a>16. 测试消息发送和接收</h2><p><strong>目标</strong>：生产者编写测试类RabbitMQTest发送消息到交换机和特定的路由（item.insert，item.update，item.delete）</p>
<p><strong>分析</strong>：</p>
<p>生产者：编写测试类RabbitMQTest，利用RabbitTemplate发送3条消息，这3条消息的路由key分别是item.insert，item.update，item.delete</p>
<p>消费者：在IDEA控制台查看是否能接收到符合路由key的消息</p>
<p><strong>小结</strong>：</p>
<p>编写测试类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.rabbitmq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.rabbitmq.config.RabbitMQConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.insert&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.insert&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.update&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.update&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;item.delete&quot;</span>, <span class="string">&quot;商品新增,路由Key为item.delete&quot;</span>);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.ITEM_TOPIC_EXCHANGE,</span><br><span class="line">                <span class="string">&quot;a.item.delete&quot;</span>, <span class="string">&quot;商品新增,路由Key为a.item.delete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>先启动测试类进行声明交换机、队列和绑定；之后再启动消费者工程接收消息。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud</title>
    <url>/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/</url>
    <content><![CDATA[<h2 id="1-系统架构演变概述"><a href="#1-系统架构演变概述" class="headerlink" title="1. 系统架构演变概述"></a>1. 系统架构演变概述</h2><p><strong>目标</strong>：了解项目架构的演变历程</p>
<p><strong>小结</strong>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">1[集中式架构] --&gt; 2[垂直拆分]</span><br><span class="line">2 --&gt; 3[分布式服务]</span><br><span class="line">3 --&gt; 4[SOA面向服务架构]</span><br><span class="line">4 --&gt; 5[微服务架构]</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-微服务架构说明"><a href="#2-微服务架构说明" class="headerlink" title="2. 微服务架构说明"></a>2. 微服务架构说明</h2><p><strong>目标</strong>：了解SOA与微服务架构的区别以及说出微服务架构的特点</p>
<p><strong>分析</strong>：</p>
<p>SOA使用了ESB组件的面向服务架构：ESB自身实现复杂；应用服务粒度较大，所有服务之间的通信都经过ESB会降低通信速度；部署、测试ESB比较麻烦。</p>
<p><strong>小结</strong>：</p>
<p><strong>微服务架构</strong>：是一套使用小服务或者单一业务来开发单个应用的方式或途径。</p>
<p>微服务架构特点：</p>
<ul>
<li>单一职责</li>
<li>服务粒度小</li>
<li>面向服务（对外暴露REST api）</li>
<li>服务之间相互独立</li>
</ul>
<p>与使用ESB的SOA架构的区别：微服务架构没有使用ESB，有服务治理注册中心；业务粒度小。</p>
<h2 id="3-服务调用方式说明"><a href="#3-服务调用方式说明" class="headerlink" title="3. 服务调用方式说明"></a>3. 服务调用方式说明</h2><p><strong>目标</strong>：能够说出服务调用方式种类</p>
<p><strong>小结</strong>：</p>
<ul>
<li>RPC：基于socket，速度快，效率高；webservice、dubbo</li>
<li>HTTP：基于TCP，封装比较臃肿；对服务和调用方没有任何技术、语言的限定，自由灵活；RESTful，Spring Cloud</li>
</ul>
<h2 id="4-Spring-RestTemplate示例工程导入"><a href="#4-Spring-RestTemplate示例工程导入" class="headerlink" title="4. Spring RestTemplate示例工程导入"></a>4. Spring RestTemplate示例工程导入</h2><p><strong>目标</strong>：了解Spring RestTemplate的应用</p>
<p><strong>分析</strong>：</p>
<p>一般情况下有如下三种http客户端工具类包都可以方便的进行http服务调用：</p>
<ul>
<li>httpClient</li>
<li>okHttp</li>
<li>JDK原生URLConnection</li>
</ul>
<p>spring 提供了RestTemplate的工具类对上述的3种http客户端工具类进行了封装，可在spring项目中使用RestTemplate进行服务调用。</p>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://localhost/user/8&quot;</span>;</span><br><span class="line">        <span class="comment">//restTemplate可以对json格式字符串进行反序列化</span></span><br><span class="line">        User user = restTemplate.getForObject(url, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-Spring-Cloud概述"><a href="#5-Spring-Cloud概述" class="headerlink" title="5. Spring Cloud概述"></a>5. Spring Cloud概述</h2><p><strong>目标</strong>：Spring Cloud整合的组件和版本特征</p>
<p><strong>小结</strong>：</p>
<ul>
<li>整合的组件可以有很多组件；常见的组件有：eureka注册中心，Gateway网关，Ribbon负载均衡，Feign服务调用，Hystrix熔断器。在有需要的时候项目添加对于的启动器依赖即可。</li>
<li>版本特征：以英文单词命名（伦敦地铁站名）</li>
</ul>
<h2 id="6-创建微服务工程"><a href="#6-创建微服务工程" class="headerlink" title="6. 创建微服务工程"></a>6. 创建微服务工程</h2><p><strong>目标</strong>：创建微服务父工程heima-springcloud、用户服务工程user-service、服务消费工程consumer-demo</p>
<p><strong>分析</strong>：</p>
<p>需求：查询数据库中的用户数据并输出到浏览器</p>
<ul>
<li>父工程heima-springcloud：添加spring boot父坐标和管理其它组件的依赖</li>
<li>用户服务工程user-service：整合mybatis查询数据库中用户数据；提供查询用户服务</li>
<li>服务消费工程consumer-demo：利用查询用户服务获取用户数据并输出到浏览器</li>
</ul>
<p><strong>小结</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- springCloud --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过 <code>scope</code> 的import可以继承 <code>spring-cloud-dependencies</code> 工程中的依赖</p>
<h2 id="7-搭建配置user-service工程"><a href="#7-搭建配置user-service工程" class="headerlink" title="7. 搭建配置user-service工程"></a>7. 搭建配置user-service工程</h2><p><strong>目标</strong>：配置user-service工程并能够根据用户id查询数据库中用户</p>
<p><strong>分析</strong>：</p>
<p>需求：可以访问<a href="http://localhost:9091/user/8%E8%BE%93%E5%87%BA%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE">http://localhost:9091/user/8输出用户数据</a></p>
<p>实现步骤：</p>
<ol>
<li>添加启动器依赖（web、通用Mapper）；</li>
<li>创建启动引导类和配置文件；</li>
<li>修改配置文件中的参数；</li>
<li>编写测试代码（UserMapper，UserService，UserController）；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>添加启动器依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通用Mapper启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>编写配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.itheima.user.pojo</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="8-搭建配置consumer-demo工程"><a href="#8-搭建配置consumer-demo工程" class="headerlink" title="8. 搭建配置consumer-demo工程"></a>8. 搭建配置consumer-demo工程</h2><p><strong>目标</strong>：编写测试类使用restTemplate访问user-service的路径根据id查询用户</p>
<p><strong>分析</strong>：</p>
<p>需求：访问<a href="http://localhost:8080/consumer/8">http://localhost:8080/consumer/8</a> 使用RestTemplate获取<a href="http://localhost:9091/user/8%E7%9A%84%E6%95%B0%E6%8D%AE">http://localhost:9091/user/8的数据</a></p>
<p>实现步骤：</p>
<ol>
<li>添加启动器依赖；</li>
<li>创建启动引导类（注册RestTemplate）和配置文件；</li>
<li>编写测试代码（ConsumerController中使用restTemplate访问服务获取数据）</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>服务管理<br>如何自动注册和发现<br>如何实现状态监管<br>如何实现动态路由</li>
<li>服务如何实现负载均衡</li>
<li>服务如何解决容灾问题</li>
<li>服务如何实现统一配置</li>
</ul>
<p>上述的问题都可以通过Spring Cloud的各种组件解决。</p>
<h2 id="9-Eureka注册中心说明"><a href="#9-Eureka注册中心说明" class="headerlink" title="9. Eureka注册中心说明"></a>9. Eureka注册中心说明</h2><p><strong>目标</strong>：说出Eureka的主要功能</p>
<p><strong>小结</strong>：</p>
<p>Eureka的主要功能是进行服务管理，定期检查服务状态，返回服务地址列表。</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day01/%E7%AC%94%E8%AE%B0/assets/1560439174201.png" alt="1560439174201"></p>
<h2 id="10-搭建eureka-server工程"><a href="#10-搭建eureka-server工程" class="headerlink" title="10. 搭建eureka-server工程"></a>10. 搭建eureka-server工程</h2><p><strong>目标</strong>：添加eureka对应依赖和编写引导类搭建eureka服务并可访问eureka服务界面</p>
<p><strong>分析</strong>：</p>
<p>Eureka是服务注册中心，只做服务注册；自身并不提供服务也不消费服务。可以搭建web工程使用Eureka，可以使用Spring Boot方式搭建。</p>
<p>搭建步骤：</p>
<ol>
<li>创建工程；</li>
<li>添加启动器依赖；</li>
<li>编写启动引导类（添加Eureka的服务注解）和配置文件；</li>
<li>修改配置文件（端口，应用名称…）；</li>
<li>启动测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>启动器依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment"># eureka 服务地址，如果是集群的话；需要指定其它集群eureka地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="comment"># 不注册自己</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 不拉取服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>



<h2 id="11-服务注册与发现"><a href="#11-服务注册与发现" class="headerlink" title="11. 服务注册与发现"></a>11. 服务注册与发现</h2><p><strong>目标</strong>：将user-service的服务注册到eureka并在consumer-demo中可以根据服务名称调用</p>
<p><strong>分析</strong>：</p>
<ul>
<li>服务注册：在服务提供工程user-service上添加Eureka客户端依赖；自动将服务注册到EurekaServer服务地址列表。<ul>
<li>添加依赖；</li>
<li>改造启动引导类；添加开启Eureka客户端发现的注解；</li>
<li>修改配置文件；设置Eureka 服务地址</li>
</ul>
</li>
<li>服务发现：在服务消费工程consumer-demo上添加Eureka客户端依赖；可以使用工具类根据服务名称获取对应的服务地址列表。<ul>
<li>添加依赖；</li>
<li>改造启动引导类；添加开启Eureka客户端发现的注解；</li>
<li>修改配置文件；设置Eureka 服务地址；</li>
<li>改造处理器类ConsumerController，可以使用工具类DiscoveryClient根据服务名称获取对应服务地址列表。</li>
</ul>
</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>添加Eureka客户端依赖；</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>添加启动引导类注解；</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day01/%E7%AC%94%E8%AE%B0/assets/1560519608668.png" alt="1560519608668"></p>
</li>
<li><p>修改配置</p>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-demo</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="12-Eureka-Server高可用配置"><a href="#12-Eureka-Server高可用配置" class="headerlink" title="12. Eureka Server高可用配置"></a>12. Eureka Server高可用配置</h2><p><strong>目标</strong>：可以启动两台eureka-server实例；在eureka管理界面看到两个实例</p>
<p><strong>分析</strong>：</p>
<p>Eureka Server是一个web应用，可以启动多个实例（配置不同端口）保证Eureka Server的高可用。</p>
<p><strong>小结</strong>：</p>
<p><strong>高可用配置</strong>：将Eureka Server作为一个服务注册到其它Eureka Server，这样多个Eureka Server之间就能够互相发现对方，同步服务，实现Eureka Server集群。</p>
<h2 id="13-Eureka客户端与服务端配置"><a href="#13-Eureka客户端与服务端配置" class="headerlink" title="13. Eureka客户端与服务端配置"></a>13. Eureka客户端与服务端配置</h2><p><strong>目标</strong>：配置eureka客户端user-service的注册、续约等配置项，配置eureka客户端consumer-demo的获取服务间隔时间；了解失效剔除和自我保护</p>
<p><strong>分析</strong>：</p>
<ul>
<li>Eureka客户端工程<ul>
<li>user-service 服务提供<ul>
<li>服务地址使用ip方式</li>
<li>续约</li>
</ul>
</li>
<li>consumer-demo 服务消费<ul>
<li>获取服务地址的频率</li>
</ul>
</li>
</ul>
</li>
<li>Eureka服务端工程 eureka-server<ul>
<li>失效剔除</li>
<li>自我保护</li>
</ul>
</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>user-service </li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 更倾向使用ip地址，而不是host名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># ip地址</span></span><br><span class="line">    <span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># 续约间隔，默认30秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 服务失效时间，默认90秒</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>consumer-demo </li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">    <span class="comment"># 获取服务地址列表间隔时间，默认30秒</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>eureka-server</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="comment"># 服务失效剔除时间间隔，默认60秒</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">60000</span></span><br><span class="line">    <span class="comment"># 关闭自我保护模式（默认是打开的）</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="14-负载均衡Ribbon简介"><a href="#14-负载均衡Ribbon简介" class="headerlink" title="14. 负载均衡Ribbon简介"></a>14. 负载均衡Ribbon简介</h2><p><strong>目标</strong>：描述负载均衡和ribbon的作用</p>
<p><strong>分析</strong>：</p>
<p>负载均衡是一个算法，可以通过该算法实现从地址列表中获取一个地址进行服务调用。</p>
<p>在Spring Cloud中提供了负载均衡器：Ribbon</p>
<p><strong>小结</strong>：</p>
<p>Ribbon提供了轮询、随机两种负载均衡算法（默认是轮询）可以实现从地址列表中使用负载均衡算法获取地址进行服务调用。</p>
<h2 id="15-Ribbon负载均衡应用"><a href="#15-Ribbon负载均衡应用" class="headerlink" title="15. Ribbon负载均衡应用"></a>15. Ribbon负载均衡应用</h2><p><strong>目标</strong>：配置启动两个用户服务，在consumer-demo中使用服务名实现根据用户id获取用户</p>
<p><strong>分析</strong>：</p>
<p>需求：可以使用RestTemplate访问<a href="http://user-service/user/8%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E6%95%B0%E6%8D%AE%E3%80%82">http://user-service/user/8获取服务数据。</a></p>
<p>可以使用Ribbon负载均衡：在执行RestTemplate发送服务地址请求的时候，使用负载均衡拦截器拦截，根据服务名获取服务地址列表，使用Ribbon负载均衡算法从服务地址列表中选择一个服务地址，访问该地址获取服务数据。</p>
<p>实现步骤：</p>
<ol>
<li>启动多个user-service实例（9091,9092）；</li>
<li>修改RestTemplate实例化方法，添加负载均衡注解；</li>
<li>修改ConsumerController；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>在实例化RestTemplate的时候使用@LoadBalanced，服务地址直接可以使用服务名。</p>
<h2 id="16-熔断器Hystrix简介"><a href="#16-熔断器Hystrix简介" class="headerlink" title="16. 熔断器Hystrix简介"></a>16. 熔断器Hystrix简介</h2><p><strong>目标</strong>：了解熔断器Hystrix的作用</p>
<p><strong>小结</strong>：</p>
<p>Hystrix是一个延迟和容错库，用于隔离访问远程服务，防止出现级联失败。</p>
<h2 id="17-线程隔离-amp-服务降级"><a href="#17-线程隔离-amp-服务降级" class="headerlink" title="17. 线程隔离&amp;服务降级"></a>17. 线程隔离&amp;服务降级</h2><p><strong>目标</strong>：了解什么是线程隔离和服务降级</p>
<p><strong>分析</strong>：</p>
<p>Hystrix解决雪崩效应：</p>
<ul>
<li>线程隔离：用户请求不直接访问服务，而是使用线程池中空闲的线程访问服务，加速失败判断时间。</li>
<li>服务降级：及时返回服务调用失败的结果，让线程不因为等待服务而阻塞。</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>添加依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>开启熔断</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day01/%E7%AC%94%E8%AE%B0/assets/1560662674993.png" alt="1560662674993"> </p>
</li>
<li><p>降级逻辑</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/consumer&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;defaultFallback&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="comment">//@HystrixCommand(fallbackMethod = &quot;queryByIdFallback&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*String url = &quot;http://localhost:9091/user/&quot;+id;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        //获取eureka中注册的user-service的实例</span></span><br><span class="line"><span class="comment">        List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(&quot;user-service&quot;);</span></span><br><span class="line"><span class="comment">        ServiceInstance serviceInstance = serviceInstances.get(0);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        url = &quot;http://&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;/user/&quot; + id;*/</span></span><br><span class="line">        String url = <span class="string">&quot;http://user-service/user/&quot;</span> + id;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryByIdFallback</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;查询用户信息失败。id：&#123;&#125;&quot;</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;对不起，网络太拥挤了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">defaultFallback</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;默认提示：对不起，网络太拥挤了！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>修改超时配置</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="18-服务熔断演示"><a href="#18-服务熔断演示" class="headerlink" title="18. 服务熔断演示"></a>18. 服务熔断演示</h2><p><strong>目标</strong>：了解熔断器工作原理</p>
<p><strong>小结</strong>：</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day01/%E7%AC%94%E8%AE%B0/assets/1560682028169.png" alt="1560682028169"></p>
<p>可以通过配置服务熔断参数修改默认：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">2000</span></span><br><span class="line">      <span class="attr">circuitBreaker:</span></span><br><span class="line">        <span class="attr">errorThresholdPercentage:</span> <span class="number">50</span> <span class="comment"># 触发熔断错误比例阈值，默认值50%</span></span><br><span class="line">        <span class="attr">sleepWindowInMilliseconds:</span> <span class="number">10000</span> <span class="comment"># 熔断后休眠时长，默认值5秒</span></span><br><span class="line">        <span class="attr">requestVolumeThreshold:</span> <span class="number">10</span> <span class="comment"># 熔断触发最小请求次数，默认值是20</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="19-Feign应用"><a href="#19-Feign应用" class="headerlink" title="19. Feign应用"></a>19. Feign应用</h2><p><strong>目标</strong>：Feign的作用；使用Feign实现consumer-demo代码中调用服务</p>
<p><strong>分析</strong>：</p>
<ol>
<li>导入启动器依赖；</li>
<li>开启Feign功能；</li>
<li>编写Feign客户端；</li>
<li>编写一个处理器ConsumerFeignController，注入Feign客户端并使用；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>Feign主要作用：自动根据参数拼接http请求地址。</p>
<ul>
<li>启动器依赖；</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>Feign客户端：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明当前类是一个Feign客户端，指定服务名为user-service</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;user-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//http://user-service/user/123</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">queryById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="20-Feign负载均衡及熔断"><a href="#20-Feign负载均衡及熔断" class="headerlink" title="20. Feign负载均衡及熔断"></a>20. Feign负载均衡及熔断</h2><p><strong>目标</strong>：可以配置Feign内置ribbon配置项和Hystrix熔断的Fallback配置</p>
<p><strong>分析</strong>：</p>
<ul>
<li>负载均衡</li>
<li>服务熔断</li>
<li>请求压缩</li>
<li>日志级别</li>
</ul>
<p>都可以通过配置项在Feign中开启使用。</p>
<p><strong>小结</strong>：</p>
<p>在服务消费工程consumer-demo中的配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时长</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span> <span class="comment"># 数据通信超时时长</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span> <span class="comment"># 当前服务器的重试次数</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span> <span class="comment"># 重试多少次服务</span></span><br><span class="line">  <span class="attr">OkToRetryOnAllOperations:</span> <span class="literal">false</span> <span class="comment"># 是否对所有的请求方式都重试</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Feign的熔断功能</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">request:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启请求压缩</span></span><br><span class="line">      <span class="attr">mime-types:</span> <span class="string">text/html,application/xml,application/json</span> <span class="comment"># 设置压缩的数据类型</span></span><br><span class="line">      <span class="attr">min-request-size:</span> <span class="number">2048</span> <span class="comment"># 设置触发压缩的大小下限</span></span><br><span class="line">    <span class="attr">response:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.itheima:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>



<h2 id="21-Spring-Cloud-Gateway网关简介"><a href="#21-Spring-Cloud-Gateway网关简介" class="headerlink" title="21. Spring Cloud Gateway网关简介"></a>21. Spring Cloud Gateway网关简介</h2><p><strong>目标</strong>：Spring Cloud Gateway网关的作用</p>
<p><strong>小结</strong>：</p>
<p>Spring Cloud Gateway的核心就是一系列的过滤器，可以将客户端的请求转发到不同的微服务。主要作用：过滤和路由。</p>
<h2 id="22-Spring-Cloud-Gateway入门"><a href="#22-Spring-Cloud-Gateway入门" class="headerlink" title="22. Spring Cloud Gateway入门"></a>22. Spring Cloud Gateway入门</h2><p><strong>目标</strong>：搭建网关服务工程测试网关服务作用</p>
<p><strong>分析</strong>：</p>
<p>需求：通过网关系统heima-gateway将包含有 /user 的请求 路由到 <a href="http://127.0.0.1:9091/user/%E7%94%A8%E6%88%B7id">http://127.0.0.1:9091/user/用户id</a> </p>
<p>实现步骤：</p>
<ol>
<li>创建工程；</li>
<li>添加启动器依赖；</li>
<li>编写启动引导类和配置文件；</li>
<li>修改配置文件，设置路由信息；</li>
<li>启动测试</li>
</ol>
<p><a href="http://127.0.0.1:10010/user/8">http://127.0.0.1:10010/user/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a></p>
<p><strong>小结</strong>：</p>
<ul>
<li>启动器依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 路由id，可以任意</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service-route</span></span><br><span class="line">          <span class="comment"># 代理的服务地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://127.0.0.1:9091</span></span><br><span class="line">          <span class="comment"># 路由断言： 可以匹配映射路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<h2 id="23-面向服务的路由"><a href="#23-面向服务的路由" class="headerlink" title="23. 面向服务的路由"></a>23. 面向服务的路由</h2><p><strong>目标</strong>：使用在eureka注册的服务作为路由地址</p>
<p><strong>分析</strong>：</p>
<p>如果将路由服务地址写死明显是不合理的；在Spring Cloud Gateway中可以通过配置动态路由解决。</p>
<p><strong>小结</strong>：</p>
<p>面向服务的路由；只需要在配置文件中指定路由路径类似： <code>lb://user-service</code></p>
<blockquote>
<p>lb 之后编写的服务名必须要在eureka中注册才能使用</p>
</blockquote>
<h2 id="24-路由前缀处理"><a href="#24-路由前缀处理" class="headerlink" title="24. 路由前缀处理"></a>24. 路由前缀处理</h2><p><strong>目标</strong>：可以对请求到网关服务的地址添加或去除前缀</p>
<p><strong>分析</strong>：</p>
<p>提供服务的地址：<a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a></p>
<ul>
<li>添加前缀：对请求地址添加前缀路径之后再作为代理的服务地址；</li>
</ul>
<p><a href="http://127.0.0.1:10010/8">http://127.0.0.1:10010/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a> 添加前缀路径/user</p>
<ul>
<li>去除前缀：将请求地址中路径去除一些前缀路径之后再作为代理的服务地址；</li>
</ul>
<p><a href="http://127.0.0.1:10010/api/user/8">http://127.0.0.1:10010/api/user/8</a> –&gt; <a href="http://127.0.0.1:9091/user/8">http://127.0.0.1:9091/user/8</a> 去除前缀路径/api</p>
<p><strong>小结</strong>：</p>
<p>客户端的请求地址与微服务的服务地址如果不一致的时候，可以通过配置路径过滤器实现路径前缀的添加和去除。</p>
<h2 id="25-过滤器简介"><a href="#25-过滤器简介" class="headerlink" title="25. 过滤器简介"></a>25. 过滤器简介</h2><p><strong>目标</strong>：Gateway默认过滤器的用法和过滤器类型</p>
<p><strong>小结</strong>：</p>
<ul>
<li>用法：在配置文件中指定要使用的过滤器名称；</li>
<li>类型：局部、全局；</li>
<li>使用场景：请求鉴权、异常处理、记录调用时长等。</li>
</ul>
<h2 id="26-自定义局部过滤器"><a href="#26-自定义局部过滤器" class="headerlink" title="26. 自定义局部过滤器"></a>26. 自定义局部过滤器</h2><p><strong>目标</strong>：按照默认过滤器编写并配置一个自定义局部过滤器，该过滤器可以通过配置文件中的参数名称获取请求的参数值</p>
<p><strong>分析</strong>：</p>
<p>需求：在过滤器（MyParamGatewayFilterFactory）中将<a href="http://localhost:10010/api/user/8?name=itcast%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0name%E7%9A%84%E5%80%BC%E8%8E%B7%E5%8F%96%E5%88%B0%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%9B%E5%B9%B6%E4%B8%94%E5%8F%82%E6%95%B0%E5%90%8D%E6%98%AF%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%AF%8F%E6%AC%A1%E9%83%BD%E6%98%AFname%EF%BC%9B%E9%9C%80%E8%A6%81%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E5%88%B0%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E5%90%8D%E3%80%82">http://localhost:10010/api/user/8?name=itcast中的参数name的值获取到并输出到控制台；并且参数名是可变的，也就是不一定每次都是name；需要可以通过配置过滤器的时候做到配置参数名。</a></p>
<p>实现步骤：</p>
<ol>
<li>配置过滤器；</li>
<li>编写过滤器；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>配置；与其他过滤器的配置一致。</li>
<li>实现过滤器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.gateway.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyParamGatewayFilterFactory</span> <span class="keyword">extends</span> <span class="title">AbstractGatewayFilterFactory</span>&lt;<span class="title">MyParamGatewayFilterFactory</span>.<span class="title">Config</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PARAM_NAME = <span class="string">&quot;param&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyParamGatewayFilterFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Config.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">shortcutFieldOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(PARAM_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GatewayFilter <span class="title">apply</span><span class="params">(Config config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; &#123;</span><br><span class="line">            <span class="comment">// http://localhost:10010/api/user/8?name=itcast   config.param ==&gt; name</span></span><br><span class="line">            <span class="comment">//获取请求参数中param对应的参数名 的参数值</span></span><br><span class="line">            ServerHttpRequest request = exchange.getRequest();</span><br><span class="line">            <span class="keyword">if</span>(request.getQueryParams().containsKey(config.param))&#123;</span><br><span class="line">                request.getQueryParams().get(config.param).</span><br><span class="line">                        forEach(value -&gt; System.out.printf(<span class="string">&quot;------------局部过滤器--------%s = %s------&quot;</span>, config.param, value));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span></span>&#123;</span><br><span class="line">        <span class="comment">//对应在配置过滤器的时候指定的参数名</span></span><br><span class="line">        <span class="keyword">private</span> String param;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> param;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParam</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.param = param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="27-自定义全局过滤器"><a href="#27-自定义全局过滤器" class="headerlink" title="27. 自定义全局过滤器"></a>27. 自定义全局过滤器</h2><p><strong>目标</strong>：定义一个全局过滤器检查请求中是否携带有token参数</p>
<p><strong>分析</strong>：</p>
<p>需求：编写全局过滤器，在过滤器中检查请求地址是否携带token参数。如果token参数的值存在则放行；如果token的参数值为空或者不存在则设置返回的状态码为：未授权也不再执行下去。</p>
<p>实现步骤：</p>
<ol>
<li>编写全局过滤器；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlobalFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------全局过滤器MyGlobalFilter------------------&quot;</span>);</span><br><span class="line">        String token = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isBlank(token))&#123;</span><br><span class="line">            <span class="comment">//设置响应状态码为未授权</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//值越小越先执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="28-Gateway其它配置说明"><a href="#28-Gateway其它配置说明" class="headerlink" title="28. Gateway其它配置说明"></a>28. Gateway其它配置说明</h2><p><strong>目标</strong>：Gateway网关的负载均衡和熔断参数配置</p>
<p><strong>小结</strong>：</p>
<p>网关服务配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="comment"># 路由id，可以任意</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service-route</span></span><br><span class="line">          <span class="comment"># 代理的服务地址</span></span><br><span class="line">          <span class="comment">#uri: http://127.0.0.1:9091</span></span><br><span class="line">          <span class="comment"># lb表示从eureka中获取具体服务</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://user-service</span></span><br><span class="line">          <span class="comment"># 路由断言： 可以匹配映射路径</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="comment">#- Path=/user/**</span></span><br><span class="line">            <span class="comment">#- Path=/**</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/user/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 添加请求路径的前缀</span></span><br><span class="line">            <span class="comment">#- PrefixPath=/user</span></span><br><span class="line">            <span class="comment">#1表示过滤1个路径，2表示两个路径，以此类推</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">StripPrefix=1</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MyParam=name</span></span><br><span class="line">      <span class="comment"># 默认过滤器，对所有路由都生效</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=X-Response-Foo,</span> <span class="string">Bar</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddResponseHeader=abc-myname,heima</span></span><br><span class="line">      <span class="attr">globalcors:</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="comment">#allowedOrigins: * # 这种写法或者下面的都可以，*表示全部</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://docs.spring.io&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line">  <span class="attr">command:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">execution:</span></span><br><span class="line">        <span class="attr">isolation:</span></span><br><span class="line">          <span class="attr">thread:</span></span><br><span class="line">            <span class="attr">timeoutInMilliseconds:</span> <span class="number">6000</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">2000</span></span><br><span class="line">  <span class="attr">MaxAutoRetries:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">MaxAutoRetriesNextServer:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Gateway网关一般直接给终端请求使用；Feign一般用在微服务之间调用。</p>
</blockquote>
<h2 id="29-Spring-Cloud-Config分布式配置中心简介"><a href="#29-Spring-Cloud-Config分布式配置中心简介" class="headerlink" title="29. Spring Cloud Config分布式配置中心简介"></a>29. Spring Cloud Config分布式配置中心简介</h2><p><strong>目标</strong>：分布式配置中心的作用</p>
<p><strong>小结</strong>：</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day02/%E7%AC%94%E8%AE%B0/assets/1560919656472.png" alt="1560919656472"></p>
<p>spring cloud config作用：可以通过修改在git仓库中的配置文件实现其它所有微服务的配置文件的修改。</p>
<h2 id="30-搭建配置中心微服务"><a href="#30-搭建配置中心微服务" class="headerlink" title="30. 搭建配置中心微服务"></a>30. 搭建配置中心微服务</h2><p><strong>目标</strong>：创建码云的远程公开git仓库，搭建配置中心微服务config-server</p>
<p><strong>分析</strong>：</p>
<ul>
<li>创建git仓库：在码云上创建仓库</li>
<li>搭建配置中心config-server：使用spring boot方式搭建和配置</li>
</ul>
<p><strong>小结</strong>：</p>
<ul>
<li>配置中心依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>配置中心的配置文件</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/goheima/heima-config.git</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在gitee中修改了配置文件会在配置中心服务及时更新。</p>
</blockquote>
<h2 id="31-获取配置中心配置"><a href="#31-获取配置中心配置" class="headerlink" title="31. 获取配置中心配置"></a>31. 获取配置中心配置</h2><p><strong>目标</strong>：改造用户微服务user-service，配置文件信息不再由微服务项目提供，而是从配置中心获取</p>
<p><strong>分析</strong>：</p>
<p>需求：将服务提供工程user-service的application.yml配置文件删除，修改为从配置中心config-server中获取。</p>
<p>实现步骤：</p>
<ol>
<li>添加启动器依赖；</li>
<li>修改配置文件；</li>
<li>启动测试</li>
</ol>
<p><strong>小结</strong>：</p>
<p>将原来的application.yml删除；然后添加bootstrap.yml配置文件，该文件也是spring boot的默认配置文件，其内容经常配置一些项目中固定的配置项。如果是项目经常变动的应该配置到application.yml中，现在使用了配置中心则应该配置到git仓库中对于的配置文件。</p>
<ul>
<li>依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>配置文件bootstrap.yml</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件的application保持一致</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件的profile保持一致</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span></span><br><span class="line">      <span class="comment"># 要与仓库中的配置文件所属的版本（分支）一样</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">master</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 使用配置中心</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 配置中心服务名</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">config-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="32-Spring-Cloud-Bus简介"><a href="#32-Spring-Cloud-Bus简介" class="headerlink" title="32. Spring Cloud Bus简介"></a>32. Spring Cloud Bus简介</h2><p><strong>目标</strong>：了解Spring Cloud Bus作用</p>
<p><strong>小结</strong>：</p>
<p>Spring Cloud Bus作用：将git仓库的配置文件更新，在不重启系统的情况下实现及时同步到各个微服务。</p>
<h2 id="33-Spring-Cloud-Bus应用"><a href="#33-Spring-Cloud-Bus应用" class="headerlink" title="33. Spring Cloud Bus应用"></a>33. Spring Cloud Bus应用</h2><p><strong>目标</strong>：启动RabbitMQ通过修改码云中的配置文件后发送Post请求实现及时更新用户微服务中的配置项</p>
<p><strong>分析</strong>：</p>
<p>需求：在码云的git仓库中修改user-dev.yml配置文件，实现不重启user-service的情况下可以及时更新配置文件。</p>
<p>实现步骤：</p>
<ol>
<li>启动RabbitMQ；</li>
<li>修改配置中心config-server；</li>
<li>修改服务提供工程user-service；</li>
<li>测试</li>
</ol>
<p><strong>小结</strong>：</p>
<ul>
<li>config-server的依赖添加内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>config-server的配置文件添加内容</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">12000</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/goheima/heima-config.git</span></span><br><span class="line">  <span class="comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment"># 暴露触发消息总线的地址</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">bus-refresh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>user-service的依赖添加内容</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-bus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-stream-binder-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>user-service的配置文件添加内容</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置rabbitmq信息；如果是都与默认值一致则不需要配置</span></span><br><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>UserController的修改</li>
</ul>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day02/%E7%AC%94%E8%AE%B0/assets/1561003475491.png" alt="1561003475491"> </p>
<h2 id="34-Spring-Cloud-体系技术综合应用说明"><a href="#34-Spring-Cloud-体系技术综合应用说明" class="headerlink" title="34. Spring Cloud 体系技术综合应用说明"></a>34. Spring Cloud 体系技术综合应用说明</h2><p><strong>目标</strong>：了解Spring Cloud中的Eureka、GateWay、Config、Bus、Feign等技术的综合应用</p>
<p><strong>小结</strong>：</p>
<p><img src="/2019/11/29/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E6%A1%86%E6%9E%B6/191129SpringCloud/Java%E8%B5%84%E6%96%99/4.%E6%A1%86%E6%9E%B6/09.springcloud/day02/%E7%AC%94%E8%AE%B0/assets/1561004983897.png" alt="1561004983897"></p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>框架</category>
      </categories>
  </entry>
  <entry>
    <title>IO流和Properties集合</title>
    <url>/2019/09/01/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/JavaSE/190901IO%E6%B5%81%E5%92%8CProperties%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="1-IO流案例"><a href="#1-IO流案例" class="headerlink" title="1.IO流案例"></a>1.IO流案例</h2><h3 id="1-1集合到文件数据排序改进版【应用】"><a href="#1-1集合到文件数据排序改进版【应用】" class="headerlink" title="1.1集合到文件数据排序改进版【应用】"></a>1.1集合到文件数据排序改进版【应用】</h3><h4 id="1-1-1案例需求"><a href="#1-1-1案例需求" class="headerlink" title="1.1.1案例需求"></a>1.1.1案例需求</h4><ul>
<li>键盘录入5个学生信息(姓名,语文成绩,数学成绩,英语成绩)。要求按照成绩总分从高到低写入文本文件</li>
<li>格式：姓名,语文成绩,数学成绩,英语成绩  举例：林青霞,98,99,100</li>
</ul>
<h4 id="1-1-2分析步骤"><a href="#1-1-2分析步骤" class="headerlink" title="1.1.2分析步骤"></a>1.1.2分析步骤</h4><ol>
<li><p>定义学生类</p>
</li>
<li><p>创建TreeSet集合，通过比较器排序进行排序</p>
</li>
<li><p>键盘录入学生数据</p>
</li>
<li><p>创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</p>
</li>
<li><p>把学生对象添加到TreeSet集合</p>
</li>
<li><p>创建字符缓冲输出流对象</p>
</li>
<li><p>遍历集合，得到每一个学生对象</p>
</li>
<li><p>把学生对象的数据拼接成指定格式的字符串</p>
</li>
<li><p>调用字符缓冲输出流对象的方法写数据</p>
</li>
<li><p>释放资源</p>
<a id="more"></a>

</li>
</ol>
<h4 id="1-1-3代码实现"><a href="#1-1-3代码实现" class="headerlink" title="1.1.3代码实现"></a>1.1.3代码实现</h4><ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 语文成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> chinese;</span><br><span class="line">    <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> math;</span><br><span class="line">    <span class="comment">// 英语成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> chinese, <span class="keyword">int</span> math, <span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChinese</span><span class="params">(<span class="keyword">int</span> chinese)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMath</span><span class="params">(<span class="keyword">int</span> math)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnglish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnglish</span><span class="params">(<span class="keyword">int</span> english)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.chinese + <span class="keyword">this</span>.math + <span class="keyword">this</span>.english;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetToFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合，通过比较器排序进行排序</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//成绩总分从高到低</span></span><br><span class="line">                <span class="keyword">int</span> num = s2.getSum() - s1.getSum();</span><br><span class="line">                <span class="comment">//次要条件</span></span><br><span class="line">                <span class="keyword">int</span> num2 = num == <span class="number">0</span> ? s1.getChinese() - s2.getChinese() : num;</span><br><span class="line">                <span class="keyword">int</span> num3 = num2 == <span class="number">0</span> ? s1.getMath() - s2.getMath() : num2;</span><br><span class="line">                <span class="keyword">int</span> num4 = num3 == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num3;</span><br><span class="line">                <span class="keyword">return</span> num4;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入学生数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;个学生信息：&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;语文成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> chinese = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;数学成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> math = sc.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;英语成绩：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> english = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//创建学生对象，把键盘录入的数据对应赋值给学生对象的成员变量</span></span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.setName(name);</span><br><span class="line">            s.setChinese(chinese);</span><br><span class="line">            s.setMath(math);</span><br><span class="line">            s.setEnglish(english);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把学生对象添加到TreeSet集合</span></span><br><span class="line">            ts.add(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myCharStream\\ts.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合，得到每一个学生对象</span></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            <span class="comment">//把学生对象的数据拼接成指定格式的字符串</span></span><br><span class="line">            <span class="comment">//格式：姓名,语文成绩,数学成绩,英语成绩</span></span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.append(s.getName()).append(<span class="string">&quot;,&quot;</span>).append(s.getChinese()).append(<span class="string">&quot;,&quot;</span>).append(s.getMath()).append(<span class="string">&quot;,&quot;</span>).append(s.getEnglish()).append(<span class="string">&quot;,&quot;</span>).append(s.getSum());</span><br><span class="line"></span><br><span class="line"><span class="comment">//            调用字符缓冲输出流对象的方法写数据</span></span><br><span class="line">            bw.write(sb.toString());</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2复制单级文件夹【应用】"><a href="#1-2复制单级文件夹【应用】" class="headerlink" title="1.2复制单级文件夹【应用】"></a>1.2复制单级文件夹【应用】</h3><h4 id="1-2-1案例需求"><a href="#1-2-1案例需求" class="headerlink" title="1.2.1案例需求"></a>1.2.1案例需求</h4><ul>
<li>把“E:\itcast”这个文件夹复制到模块目录下</li>
</ul>
<h4 id="1-2-2分析步骤"><a href="#1-2-2分析步骤" class="headerlink" title="1.2.2分析步骤"></a>1.2.2分析步骤</h4><ol>
<li><p>创建数据源目录File对象，路径是E:\itcast</p>
</li>
<li><p>获取数据源目录File对象的名称</p>
</li>
<li><p>创建目的地目录File对象，路径由(模块名+第2步获取的名称)组成</p>
</li>
<li><p>判断第3步创建的File是否存在，如果不存在，就创建</p>
</li>
<li><p>获取数据源目录下所有文件的File数组</p>
</li>
<li><p>遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</p>
</li>
<li><p>获取数据源文件File对象的名称</p>
</li>
<li><p>创建目的地文件File对象，路径由(目的地目录+第7步获取的名称)组成</p>
</li>
<li><p>复制文件</p>
<p>​    由于不清楚数据源目录下的文件都是什么类型的，所以采用字节流复制文件</p>
<p>​    采用参数为File的构造方法</p>
</li>
</ol>
<h4 id="1-2-3代码实现"><a href="#1-2-3代码实现" class="headerlink" title="1.2.3代码实现"></a>1.2.3代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFolderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源目录File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFolder = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录File对象的名称(itcast)</span></span><br><span class="line">        String srcFolderName = srcFolder.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目的地目录File对象，路径名是模块名+itcast组成(myCharStream\\itcast)</span></span><br><span class="line">        File destFolder = <span class="keyword">new</span> File(<span class="string">&quot;myCharStream&quot;</span>,srcFolderName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断目的地目录对应的File是否存在，如果不存在，就创建</span></span><br><span class="line">        <span class="keyword">if</span>(!destFolder.exists()) &#123;</span><br><span class="line">            destFolder.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取数据源目录下所有文件的File数组</span></span><br><span class="line">        File[] listFiles = srcFolder.listFiles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历File数组，得到每一个File对象，该File对象，其实就是数据源文件</span></span><br><span class="line">        <span class="keyword">for</span>(File srcFile : listFiles) &#123;</span><br><span class="line">            <span class="comment">//数据源文件：E:\\itcast\\mn.jpg</span></span><br><span class="line">            <span class="comment">//获取数据源文件File对象的名称(mn.jpg)</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            <span class="comment">//创建目的地文件File对象，路径名是目的地目录+mn.jpg组成(myCharStream\\itcast\\mn.jpg)</span></span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destFolder,srcFileName);</span><br><span class="line">            <span class="comment">//复制文件</span></span><br><span class="line">            copyFile(srcFile,destFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len=bis.read(bys))!=-<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3复制多级文件夹【应用】"><a href="#1-3复制多级文件夹【应用】" class="headerlink" title="1.3复制多级文件夹【应用】"></a>1.3复制多级文件夹【应用】</h3><h4 id="1-3-1案例需求"><a href="#1-3-1案例需求" class="headerlink" title="1.3.1案例需求"></a>1.3.1案例需求</h4><ul>
<li>把“E:\itcast”这个文件夹复制到 F盘目录下</li>
</ul>
<h4 id="1-3-2分析步骤"><a href="#1-3-2分析步骤" class="headerlink" title="1.3.2分析步骤"></a>1.3.2分析步骤</h4><ol>
<li><p>创建数据源File对象，路径是E:\itcast</p>
</li>
<li><p>创建目的地File对象，路径是F:\</p>
</li>
<li><p>写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</p>
</li>
<li><p>判断数据源File是否是文件</p>
<p>​    是文件：直接复制，用字节流</p>
<p>​    不是文件：</p>
<pre><code>      在目的地下创建该目录

      遍历获取该目录下的所有文件的File数组，得到每一个File对象

      回到3继续(递归)</code></pre>
</li>
</ol>
<h4 id="1-3-3代码实现"><a href="#1-3-3代码实现" class="headerlink" title="1.3.3代码实现"></a>1.3.3代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFoldersDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建数据源File对象，路径是E:\\itcast</span></span><br><span class="line">        File srcFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">        <span class="comment">//创建目的地File对象，路径是F:\\</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(<span class="string">&quot;F:\\&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写方法实现文件夹的复制，参数为数据源File对象和目的地File对象</span></span><br><span class="line">        copyFolder(srcFile,destFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制文件夹</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFolder</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//判断数据源File是否是目录</span></span><br><span class="line">        <span class="keyword">if</span>(srcFile.isDirectory()) &#123;</span><br><span class="line">            <span class="comment">//在目的地下创建和数据源File名称一样的目录</span></span><br><span class="line">            String srcFileName = srcFile.getName();</span><br><span class="line">            File newFolder = <span class="keyword">new</span> File(destFile,srcFileName); <span class="comment">//F:\\itcast</span></span><br><span class="line">            <span class="keyword">if</span>(!newFolder.exists()) &#123;</span><br><span class="line">                newFolder.mkdir();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取数据源File下所有文件或者目录的File数组</span></span><br><span class="line">            File[] fileArray = srcFile.listFiles();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//遍历该File数组，得到每一个File对象</span></span><br><span class="line">            <span class="keyword">for</span>(File file : fileArray) &#123;</span><br><span class="line">                <span class="comment">//把该File作为数据源File对象，递归调用复制文件夹的方法</span></span><br><span class="line">                copyFolder(file,newFolder);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//说明是文件，直接复制，用字节流</span></span><br><span class="line">            File newFile = <span class="keyword">new</span> File(destFile,srcFile.getName());</span><br><span class="line">            copyFile(srcFile,newFile);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字节缓冲流复制文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(File srcFile, File destFile)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(srcFile));</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(destFile));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bos.close();</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-4复制文件的异常处理【应用】"><a href="#1-4复制文件的异常处理【应用】" class="headerlink" title="1.4复制文件的异常处理【应用】"></a>1.4复制文件的异常处理【应用】</h3><h4 id="1-4-1基本做法"><a href="#1-4-1基本做法" class="headerlink" title="1.4.1基本做法"></a>1.4.1基本做法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//try...catch...finally</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fw!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fw.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fr!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出处理</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2JDK7版本改进"><a href="#1-4-2JDK7版本改进" class="headerlink" title="1.4.2JDK7版本改进"></a>1.4.2JDK7版本改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK7的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-3JDK9版本改进"><a href="#1-4-3JDK9版本改进" class="headerlink" title="1.4.3JDK9版本改进"></a>1.4.3JDK9版本改进</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JDK9的改进方案</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;fr.txt&quot;</span>);</span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;fw.txt&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>(fr;fw)&#123;</span><br><span class="line">            <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-IO特殊操作流"><a href="#2-IO特殊操作流" class="headerlink" title="2.IO特殊操作流"></a>2.IO特殊操作流</h2><h3 id="2-1标准输入流【应用】"><a href="#2-1标准输入流【应用】" class="headerlink" title="2.1标准输入流【应用】"></a>2.1标准输入流【应用】</h3><ul>
<li><p>System类中有两个静态的成员变量</p>
<ul>
<li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li>
<li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li>
</ul>
</li>
<li><p>自己实现键盘录入数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//public static final InputStream in：标准输入流</span></span><br><span class="line"><span class="comment">//        InputStream is = System.in;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        int by;</span></span><br><span class="line"><span class="comment">//        while ((by=is.read())!=-1) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.print((char)by);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何把字节流转换为字符流？用转换流</span></span><br><span class="line"><span class="comment">//        InputStreamReader isr = new InputStreamReader(is);</span></span><br><span class="line"><span class="comment">//        //使用字符流能不能够实现一次读取一行数据呢？可以</span></span><br><span class="line"><span class="comment">//        //但是，一次读取一行数据的方法是字符缓冲输入流的特有方法</span></span><br><span class="line"><span class="comment">//        BufferedReader br = new BufferedReader(isr);</span></span><br><span class="line"></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = br.readLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的字符串是：&quot;</span> + line);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(br.readLine());</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的整数是：&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自己实现键盘录入数据太麻烦了，所以Java就提供了一个类供我们使用</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2标准输出流【应用】"><a href="#2-2标准输出流【应用】" class="headerlink" title="2.2标准输出流【应用】"></a>2.2标准输出流【应用】</h3><ul>
<li><p>System类中有两个静态的成员变量</p>
<ul>
<li>public static final InputStream in：标准输入流。通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源</li>
<li>public static final PrintStream out：标准输出流。通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标</li>
</ul>
</li>
<li><p>输出语句的本质：是一个标准的输出流</p>
<ul>
<li>PrintStream ps = System.out;</li>
<li>PrintStream类有的方法，System.out都可以使用</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemOutDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//public static final PrintStream out：标准输出流</span></span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//能够方便地打印各种数据值</span></span><br><span class="line"><span class="comment">//        ps.print(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.print(100);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        ps.println(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        ps.println(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out的本质是一个字节输出流</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line"><span class="comment">//        System.out.print();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3字节打印流【应用】"><a href="#2-3字节打印流【应用】" class="headerlink" title="2.3字节打印流【应用】"></a>2.3字节打印流【应用】</h3><ul>
<li><p>打印流分类</p>
<ul>
<li>字节打印流：PrintStream</li>
<li>字符打印流：PrintWriter</li>
</ul>
</li>
<li><p>打印流的特点</p>
<ul>
<li>只负责输出数据，不负责读取数据</li>
<li>永远不会抛出IOException</li>
<li>有自己的特有方法</li>
</ul>
</li>
<li><p>字节打印流</p>
<ul>
<li><p>PrintStream(String fileName)：使用指定的文件名创建新的打印流</p>
</li>
<li><p>使用继承父类的方法写数据，查看的时候会转码；使用自己的特有方法写数据，查看的数据原样输出</p>
</li>
<li><p>可以改变输出语句的目的地</p>
<p>​    public static void setOut(PrintStream out)：重新分配“标准”输出流</p>
</li>
</ul>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintStream(String fileName)：使用指定的文件名创建新的打印流</span></span><br><span class="line">        PrintStream ps = <span class="keyword">new</span> PrintStream(<span class="string">&quot;myOtherStream\\ps.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        <span class="comment">//字节输出流有的方法</span></span><br><span class="line"><span class="comment">//        ps.write(97);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用特有方法写数据</span></span><br><span class="line"><span class="comment">//        ps.print(97);</span></span><br><span class="line"><span class="comment">//        ps.println();</span></span><br><span class="line"><span class="comment">//        ps.print(98);</span></span><br><span class="line">        ps.println(<span class="number">97</span>);</span><br><span class="line">        ps.println(<span class="number">98</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        ps.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4字符打印流【应用】"><a href="#2-4字符打印流【应用】" class="headerlink" title="2.4字符打印流【应用】"></a>2.4字符打印流【应用】</h3><ul>
<li><p>字符打印流构造房方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>PrintWriter(String   fileName)</td>
<td>使用指定的文件名创建一个新的PrintWriter，而不需要自动执行刷新</td>
</tr>
<tr>
<td>PrintWriter(Writer   out, boolean autoFlush)</td>
<td>创建一个新的PrintWriter    out：字符输出流    autoFlush： 一个布尔值，如果为真，则println ， printf ，或format方法将刷新输出缓冲区</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintWriterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//PrintWriter(String fileName) ：使用指定的文件名创建一个新的PrintWriter，而不需要自动执行行刷新</span></span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(&quot;myOtherStream\\pw.txt&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        pw.println(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"><span class="comment">//        pw.println(&quot;world&quot;);</span></span><br><span class="line"><span class="comment">//        pw.flush();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//PrintWriter(Writer out, boolean autoFlush)：创建一个新的PrintWriter</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\pw.txt&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//        PrintWriter pw = new PrintWriter(new FileWriter(&quot;myOtherStream\\pw.txt&quot;),false);</span></span><br><span class="line"></span><br><span class="line">        pw.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            pw.write(&quot;hello&quot;);</span></span><br><span class="line"><span class="comment">            pw.write(&quot;\r\n&quot;);</span></span><br><span class="line"><span class="comment">            pw.flush();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        pw.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5复制Java文件打印流改进版【应用】"><a href="#2-5复制Java文件打印流改进版【应用】" class="headerlink" title="2.5复制Java文件打印流改进版【应用】"></a>2.5复制Java文件打印流改进版【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>把模块目录下的PrintStreamDemo.java 复制到模块目录下的 Copy.java</li>
</ul>
</li>
<li><p>分析步骤</p>
<ul>
<li>根据数据源创建字符输入流对象</li>
<li>根据目的地创建字符输出流对象</li>
<li>读写数据，复制文件</li>
<li>释放资源</li>
</ul>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyJavaDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //根据数据源创建字符输入流对象</span></span><br><span class="line"><span class="comment">        BufferedReader br = new BufferedReader(new FileReader(&quot;myOtherStream\\PrintStreamDemo.java&quot;));</span></span><br><span class="line"><span class="comment">        //根据目的地创建字符输出流对象</span></span><br><span class="line"><span class="comment">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;myOtherStream\\Copy.java&quot;));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //读写数据，复制文件</span></span><br><span class="line"><span class="comment">        String line;</span></span><br><span class="line"><span class="comment">        while ((line=br.readLine())!=null) &#123;</span></span><br><span class="line"><span class="comment">            bw.write(line);</span></span><br><span class="line"><span class="comment">            bw.newLine();</span></span><br><span class="line"><span class="comment">            bw.flush();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //释放资源</span></span><br><span class="line"><span class="comment">        bw.close();</span></span><br><span class="line"><span class="comment">        br.close();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\PrintStreamDemo.java&quot;</span>));</span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\Copy.java&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            pw.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        pw.close();</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6对象序列化流【应用】"><a href="#2-6对象序列化流【应用】" class="headerlink" title="2.6对象序列化流【应用】"></a>2.6对象序列化流【应用】</h3><ul>
<li><p>对象序列化介绍</p>
<ul>
<li>对象序列化：就是将对象保存到磁盘中，或者在网络中传输对象</li>
<li>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</li>
<li>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</li>
<li>反之，该字节序列还可以从文件中读取回来，重构对象，对它进行反序列化</li>
</ul>
</li>
<li><p>对象序列化流： ObjectOutputStream</p>
<ul>
<li>将Java对象的原始数据类型和图形写入OutputStream。 可以使用ObjectInputStream读取（重构）对象。 可以通过使用流的文件来实现对象的持久存储。 如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象 </li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectOutputStream(OutputStream out)</td>
<td>创建一个写入指定的OutputStream的ObjectOutputStream</td>
</tr>
</tbody></table>
</li>
<li><p>序列化对象的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void writeObject(Object obj)</td>
<td>将指定的对象写入ObjectOutputStream</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectOutputStream(OutputStream out)：创建一个写入指定的OutputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void writeObject(Object obj)：将指定的对象写入ObjectOutputStream</span></span><br><span class="line">        oos.writeObject(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>注意事项</p>
<ul>
<li>一个对象要想被序列化，该对象所属的类必须必须实现Serializable 接口</li>
<li>Serializable是一个标记接口，实现该接口，不需要重写任何方法</li>
</ul>
</li>
</ul>
<h3 id="2-7对象反序列化流【应用】"><a href="#2-7对象反序列化流【应用】" class="headerlink" title="2.7对象反序列化流【应用】"></a>2.7对象反序列化流【应用】</h3><ul>
<li><p>对象反序列化流： ObjectInputStream</p>
<ul>
<li>ObjectInputStream反序列化先前使用ObjectOutputStream编写的原始数据和对象</li>
</ul>
</li>
<li><p>构造方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>ObjectInputStream(InputStream in)</td>
<td>创建从指定的InputStream读取的ObjectInputStream</td>
</tr>
</tbody></table>
</li>
<li><p>反序列化对象的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object readObject()</td>
<td>从ObjectInputStream读取一个对象</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//ObjectInputStream(InputStream in)：创建从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object readObject()：从ObjectInputStream读取一个对象</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line"></span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8serialVersionUID-amp-transient【应用】"><a href="#2-8serialVersionUID-amp-transient【应用】" class="headerlink" title="2.8serialVersionUID&amp;transient【应用】"></a>2.8serialVersionUID&amp;transient【应用】</h3><ul>
<li><p>serialVersionUID</p>
<ul>
<li>用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出问题呢？<ul>
<li>会出问题，会抛出InvalidClassException异常</li>
</ul>
</li>
<li>如果出问题了，如何解决呢？<ul>
<li>重新序列化</li>
<li>给对象所属的类加一个serialVersionUID <ul>
<li>private static final long serialVersionUID = 42L;</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>transient</p>
<ul>
<li>如果一个对象中的某个成员变量的值不想被序列化，又该如何实现呢？<ul>
<li>给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li>
</ul>
</li>
</ul>
</li>
<li><p>示例代码</p>
<ul>
<li><p>学生类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//    private int age;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public String toString() &#123;</span></span><br><span class="line"><span class="comment">//        return &quot;Student&#123;&quot; +</span></span><br><span class="line"><span class="comment">//                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">//                &quot;, age=&quot; + age +</span></span><br><span class="line"><span class="comment">//                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"><span class="comment">//        write();</span></span><br><span class="line">        read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        Student s = (Student) obj;</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//序列化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;myOtherStream\\oos.txt&quot;</span>));</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;林青霞&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        oos.writeObject(s);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="3-Properties集合"><a href="#3-Properties集合" class="headerlink" title="3.Properties集合"></a>3.Properties集合</h2><h3 id="3-1Properties作为Map集合的使用【应用】"><a href="#3-1Properties作为Map集合的使用【应用】" class="headerlink" title="3.1Properties作为Map集合的使用【应用】"></a>3.1Properties作为Map集合的使用【应用】</h3><ul>
<li><p>Properties介绍</p>
<ul>
<li>是一个Map体系的集合类</li>
<li>Properties可以保存到流中或从流中加载</li>
<li>属性列表中的每个键及其对应的值都是一个字符串</li>
</ul>
</li>
<li><p>Properties基本使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line"><span class="comment">//        Properties&lt;String,String&gt; prop = new Properties&lt;String,String&gt;(); //错误</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储元素</span></span><br><span class="line">        prop.put(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.put(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line">        <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">            Object value = prop.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2Properties作为Map集合的特有方法【应用】"><a href="#3-2Properties作为Map集合的特有方法【应用】" class="headerlink" title="3.2Properties作为Map集合的特有方法【应用】"></a>3.2Properties作为Map集合的特有方法【应用】</h3><ul>
<li><p>特有方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object   setProperty(String key, String value)</td>
<td>设置集合的键和值，都是String类型，底层调用   Hashtable方法 put</td>
</tr>
<tr>
<td>String   getProperty(String key)</td>
<td>使用此属性列表中指定的键搜索属性</td>
</tr>
<tr>
<td>Set<String>   stringPropertyNames()</String></td>
<td>从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object setProperty(String key, String value)：设置集合的键和值，都是String类型，底层调用Hashtable方法put</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>, <span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Object setProperty(String key, String value) &#123;</span></span><br><span class="line"><span class="comment">                return put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            Object put(Object key, Object value) &#123;</span></span><br><span class="line"><span class="comment">                return map.put(key, value);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>, <span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>, <span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String getProperty(String key)：使用此属性列表中指定的键搜索属性</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima001&quot;));</span></span><br><span class="line"><span class="comment">//        System.out.println(prop.getProperty(&quot;itheima0011&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println(prop);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; stringPropertyNames()：从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</span></span><br><span class="line">        Set&lt;String&gt; names = prop.stringPropertyNames();</span><br><span class="line">        <span class="keyword">for</span> (String key : names) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(key);</span></span><br><span class="line">            String value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3Properties和IO流相结合的方法【应用】"><a href="#3-3Properties和IO流相结合的方法【应用】" class="headerlink" title="3.3Properties和IO流相结合的方法【应用】"></a>3.3Properties和IO流相结合的方法【应用】</h3><ul>
<li><p>和IO流结合的方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void   load(InputStream inStream)</td>
<td>从输入字节流读取属性列表（键和元素对）</td>
</tr>
<tr>
<td>void   load(Reader reader)</td>
<td>从输入字符流读取属性列表（键和元素对）</td>
</tr>
<tr>
<td>void   store(OutputStream out, String comments)</td>
<td>将此属性列表（键和元素对）写入此   Properties表中，以适合于使用   load(InputStream)方法的格式写入输出字节流</td>
</tr>
<tr>
<td>void   store(Writer writer, String comments)</td>
<td>将此属性列表（键和元素对）写入此   Properties表中，以适合使用   load(Reader)方法的格式写入输出字符流</td>
</tr>
</tbody></table>
</li>
<li><p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesDemo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//把集合中的数据保存到文件</span></span><br><span class="line"><span class="comment">//        myStore();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//把文件中的数据加载到集合</span></span><br><span class="line">        myLoad();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void load(Reader reader)：</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myStore</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima001&quot;</span>,<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima002&quot;</span>,<span class="string">&quot;张曼玉&quot;</span>);</span><br><span class="line">        prop.setProperty(<span class="string">&quot;itheima003&quot;</span>,<span class="string">&quot;王祖贤&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void store(Writer writer, String comments)：</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\fw.txt&quot;</span>);</span><br><span class="line">        prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">        fw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4游戏次数案例【应用】"><a href="#3-4游戏次数案例【应用】" class="headerlink" title="3.4游戏次数案例【应用】"></a>3.4游戏次数案例【应用】</h3><ul>
<li><p>案例需求</p>
<ul>
<li>实现猜数字小游戏只能试玩3次，如果还想玩，提示：游戏试玩已结束，想玩请充值(<a href="http://www.itcast.cn/">www.itcast.cn</a>)</li>
</ul>
</li>
<li><p>分析步骤</p>
<ol>
<li><p>写一个游戏类，里面有一个猜数字的小游戏</p>
</li>
<li><p>写一个测试类，测试类中有main()方法，main()方法中写如下代码：</p>
<p>​    从文件中读取数据到Properties集合，用load()方法实现</p>
<pre><code>      文件已经存在：game.txt

      里面有一个数据值：count=0</code></pre>
<p>​    通过Properties集合获取到玩游戏的次数</p>
<p>​    判断次数是否到到3次了</p>
<pre><code>      如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)

      如果不到3次：

          次数+1，重新写回文件，用Properties的store()方法实现玩游戏</code></pre>
</li>
</ol>
</li>
<li><p>代码实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//从文件中读取数据到Properties集合，用load()方法实现</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">        prop.load(fr);</span><br><span class="line">        fr.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Properties集合获取到玩游戏的次数</span></span><br><span class="line">        String count = prop.getProperty(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> number = Integer.parseInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断次数是否到到3次了</span></span><br><span class="line">        <span class="keyword">if</span>(number &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//如果到了，给出提示：游戏试玩已结束，想玩请充值(www.itcast.cn)</span></span><br><span class="line">            System.out.println(<span class="string">&quot;游戏试玩已结束，想玩请充值(www.itcast.cn)&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//玩游戏</span></span><br><span class="line">            GuessNumber.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//次数+1，重新写回文件，用Properties的store()方法实现</span></span><br><span class="line">            number++;</span><br><span class="line">            prop.setProperty(<span class="string">&quot;count&quot;</span>,String.valueOf(number));</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;myOtherStream\\game.txt&quot;</span>);</span><br><span class="line">            prop.store(fw,<span class="keyword">null</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>JavaSE</category>
      </categories>
  </entry>
  <entry>
    <title>Maven高级</title>
    <url>/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="Maven高级"><a href="#Maven高级" class="headerlink" title="Maven高级"></a>Maven高级</h2><h2 id="1-maven基础知识回顾"><a href="#1-maven基础知识回顾" class="headerlink" title="1.maven基础知识回顾"></a>1.maven基础知识回顾</h2><h3 id="1-1-maven介绍"><a href="#1-1-maven介绍" class="headerlink" title="1.1 maven介绍"></a>1.1 maven介绍</h3><p>maven 是一个项目管理工具，主要作用是在项目开发阶段对Java项目进行依赖管理和项目构建。</p>
<p>依赖管理：就是对jar包的管理。通过导入maven坐标，就相当于将仓库中的jar包导入了当前项目中。</p>
<p>项目构建：通过maven的一个命令就可以完成项目从清理、编译、测试、报告、打包，部署整个过程。</p>
<p>​              <img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%871.png"></p>
<a id="more"></a>

<h3 id="1-2-maven的仓库类型"><a href="#1-2-maven的仓库类型" class="headerlink" title="1.2 maven的仓库类型"></a>1.2 maven的仓库类型</h3><p>1.本地仓库 </p>
<p>2.远程仓库</p>
<p>①maven中央仓库（地址：<a href="http://repo2.maven.org/maven2/%EF%BC%89">http://repo2.maven.org/maven2/）</a></p>
<p>②maven私服（公司局域网内的仓库，需要自己搭建）</p>
<p>③其他公共远程仓库（例如apache提供的远程仓库，地址：<a href="http://repo.maven.apache.org/maven2/%EF%BC%89">http://repo.maven.apache.org/maven2/）</a></p>
<h3 id="1-3-maven常用命令"><a href="#1-3-maven常用命令" class="headerlink" title="1.3 maven常用命令"></a>1.3 maven常用命令</h3><p>clean：     清理</p>
<p>compile：编译</p>
<p>test：        测试</p>
<p>package：打包</p>
<p>install：    安装</p>
<h3 id="1-4-maven坐标书写规范"><a href="#1-4-maven坐标书写规范" class="headerlink" title="1.4 maven坐标书写规范"></a>1.4 maven坐标书写规范</h3><p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%872.png"></p>
<h3 id="1-5-maven的依赖范围"><a href="#1-5-maven的依赖范围" class="headerlink" title="1.5 maven的依赖范围"></a>1.5 maven的依赖范围</h3><table>
<thead>
<tr>
<th>依赖范围</th>
<th>对于编译classpath有效</th>
<th>对于测试classpath有效</th>
<th>对于运行时classpath有效</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>compile</td>
<td>Y</td>
<td>Y</td>
<td>Y</td>
<td>spring-core</td>
</tr>
<tr>
<td>test</td>
<td>-</td>
<td>Y</td>
<td>-</td>
<td>Junit</td>
</tr>
<tr>
<td>provided</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>servlet-api</td>
</tr>
<tr>
<td>runtime</td>
<td>-</td>
<td>Y</td>
<td>Y</td>
<td>JDBC驱动</td>
</tr>
<tr>
<td>system</td>
<td>Y</td>
<td>Y</td>
<td>-</td>
<td>本地的，maven仓库之外的类库</td>
</tr>
</tbody></table>
<h2 id="2-maven的依赖传递"><a href="#2-maven的依赖传递" class="headerlink" title="2. maven的依赖传递"></a>2. maven的依赖传递</h2><h3 id="2-1-什么是依赖传递"><a href="#2-1-什么是依赖传递" class="headerlink" title="2.1 什么是依赖传递"></a>2.1 什么是依赖传递</h3><p>在maven中，依赖是可以传递的，假设存在三个项目，分别是项目A，项目B以及项目C。假设C依赖B，B依赖A，那么我们可以根据maven项目依赖的特征不难推出项目C也依赖A。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%873.png"></p>
<p>​                         <img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%874.png"></p>
<p>通过上面的图可以看到，我们的web项目直接依赖了spring-webmvc，而spring-webmvc依赖了sping-aop、spring-beans等。最终的结果就是在我们的web项目中间接依赖了spring-aop、spring-beans等。</p>
<h3 id="2-2-什么是依赖冲突"><a href="#2-2-什么是依赖冲突" class="headerlink" title="2.2 什么是依赖冲突"></a>2.2 什么是依赖冲突</h3><p>由于依赖传递现象的存在， spring-webmvc 依赖 spirng-beans-4.2.4，spring-aop 依赖 spring-beans-5.0.2，但是发现 spirng-beans-4.2.4 加入到了工程中，而我们希望 spring-beans-5.0.2 加入工程。这就造成了依赖冲突。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%875.png"></p>
<h3 id="2-3-如何解决依赖冲突"><a href="#2-3-如何解决依赖冲突" class="headerlink" title="2.3 如何解决依赖冲突"></a>2.3 如何解决依赖冲突</h3><p>1.使用maven提供的依赖调解原则 </p>
<pre><code>    第一声明者优先原则</code></pre>
<p>​     路径近者优先原则</p>
<p>2.排除依赖</p>
<p>3.锁定版本 </p>
<h3 id="2-4-依赖调节原则——第一声明者优先原则"><a href="#2-4-依赖调节原则——第一声明者优先原则" class="headerlink" title="2.4 依赖调节原则——第一声明者优先原则"></a>2.4 依赖调节原则——第一声明者优先原则</h3><p>在 pom 文件中定义依赖，以先声明的依赖为准。其实就是根据坐标导入的顺序来确定最终使用哪个传递过来的依赖。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%876.png"></p>
<p>结论：通过上图可以看到，spring-aop和spring-webmvc都传递过来了spring-beans，但是因为spring-aop在前面，所以最终使用的spring-beans是由spring-aop传递过来的，而spring-webmvc传递过来的spring-beans则被忽略了。</p>
<h3 id="2-5-排除依赖"><a href="#2-5-排除依赖" class="headerlink" title="2.5 排除依赖"></a>2.5 排除依赖</h3><p>可以使用exclusions标签将传递过来的依赖排除出去。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%877.png"></p>
<h3 id="2-6-版本锁定"><a href="#2-6-版本锁定" class="headerlink" title="2.6 版本锁定"></a>2.6 版本锁定</h3><p>采用直接锁定版本的方法确定依赖jar包的版本，版本锁定后则不考虑依赖的声明顺序或依赖的路径，以锁定的版本为准添加到工程中，此方法在企业开发中经常使用。</p>
<p>版本锁定的使用方式：</p>
<p>第一步：在dependencyManagement标签中锁定依赖的版本</p>
<p>第二步：在dependencies标签中声明需要导入的maven坐标</p>
<p>①在dependencyManagement标签中锁定依赖的版本</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%878.png"></p>
<p>②在dependencies标签中声明需要导入的maven坐标</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%879.png"></p>
<h2 id="3-基于maven构建SSM工程案例"><a href="#3-基于maven构建SSM工程案例" class="headerlink" title="3.基于maven构建SSM工程案例"></a>3.基于maven构建SSM工程案例</h2><h3 id="3-1-需求描述"><a href="#3-1-需求描述" class="headerlink" title="3.1 需求描述"></a>3.1 需求描述</h3><p>本案例基于maven构建 SSM（Spring+SpringMVC+Mybatis）工程，通过maven坐标进行依赖管理。最终实现根据 id 查询商品信息的功能。</p>
<h3 id="3-2-构建maven工程"><a href="#3-2-构建maven工程" class="headerlink" title="3.2 构建maven工程"></a>3.2 构建maven工程</h3><p>1.数据库环境搭建 </p>
<p>​    ①创建数据库ssmtest</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8710.png"></p>
<p>​    ②创建商品表item</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`item`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">float</span> <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`createtime`</span> datetime <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`detail`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">default</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span>  (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>2.maven项目构建 </p>
<p>①创建maven web项目</p>
<p>②配置pom.xml文件</p>
<p>③实现spring+mybatis整合</p>
<p>创建POJO类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Float price;</span><br><span class="line"><span class="keyword">private</span> Date createtime;</span><br><span class="line"><span class="keyword">private</span> String detail;</span><br><span class="line"><span class="comment">//省略setter、getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>持久层DAO接口编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Mapper映射文件编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.ssm.dao.ItemMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">         select * from item where id=#&#123;id&#125;<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>业务层Service编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Items <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> itemMapper.findById(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>spring配置文件applicationContext-dao.xml编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>   <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span>       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span>       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/bean       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd       http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-4.0.xsd      http://www.springframework.org/schema/aop   http://www.springframework.org/schema/aop/spring-aop-4.0.xsd     http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- url --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmtest&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用户名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper配置 --&gt;</span> <span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span>        <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--为指定包下的所有实体类创建别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.pojo&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper扫描器 ：用来产生代理对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring配置文件applicationContext-service.xml编写</p>
<p>④加入springmvc相关配置</p>
<p>表现层Controller编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ItemService itemService;</span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/showItem/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">showItem</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id, Model model)</span></span>&#123;</span><br><span class="line">        Item item = itemService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;item&quot;</span>,item);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>springmvc.xml文件编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span>       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span>       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd       http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context-4.0.xsd&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  配置视图解析器的前缀和后缀 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span>           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix“ value=&quot;</span>/<span class="attr">WEB-INF</span>/<span class="attr">jsp</span>/&quot;&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>jsp页面编写</p>
<p>配置web.xml文件</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8711.png"></p>
<h2 id="4-分模块构建maven工程"><a href="#4-分模块构建maven工程" class="headerlink" title="4.分模块构建maven工程"></a>4.分模块构建maven工程</h2><h3 id="4-1-分模块构建maven工程分析"><a href="#4-1-分模块构建maven工程分析" class="headerlink" title="4.1 分模块构建maven工程分析"></a>4.1 分模块构建maven工程分析</h3><p>在现实生活中，汽车厂家进行汽车生产时，由于整个生产过程非常复杂和繁琐，工作量非常大，所以车场都会将整个汽车的部件分开生产，最终再将生产好的部件进行组装，形成一台完整的汽车。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8712.png"></p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8713.png"></p>
<h3 id="4-2-maven工程的继承"><a href="#4-2-maven工程的继承" class="headerlink" title="4.2 maven工程的继承"></a>4.2 maven工程的继承</h3><p>在Java语言中，类之间是可以继承的，通过继承，子类就可以引用父类中非private的属性和方法。同样，在maven工程之间也可以继承，子工程继承父工程后，就可以使用在父工程中引入的依赖。继承的目的是为了消除重复代码。</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8714.png"></p>
<h3 id="4-3-maven工程的聚合"><a href="#4-3-maven工程的聚合" class="headerlink" title="4.3 maven工程的聚合"></a>4.3 maven工程的聚合</h3><p>在maven工程的pom.xml文件中可以使用<modules>标签将其他maven工程聚合到一起，聚合的目的是为了进行统一操作。</modules></p>
<p>例如拆分后的maven工程有多个，如果要进行打包，就需要针对每个工程分别执行打包命令，操作起来非常繁琐。这时就可以使用<modules>标签将这些工程统一聚合到maven工程中，需要打包的时候，只需要在此工程中执行一次打包命令，其下被聚合的工程就都会被打包了。</modules></p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8715.png"></p>
<h3 id="4-4-分模块构建maven工程具体实现"><a href="#4-4-分模块构建maven工程具体实现" class="headerlink" title="4.4 分模块构建maven工程具体实现"></a>4.4 分模块构建maven工程具体实现</h3><p>①父工程maven_parent构建</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">springmvc.version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">springmvc.version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--锁定jar版本--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- springMVC --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springmvc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②子工程maven_pojo构建</p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③3.1子工程maven_dao构建</p>
<p>​    3.2 配置maven_dao工程的pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_pojo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- Mybatis和mybatis与spring的整合 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- MySql驱动 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- druid数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- spring相关 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- junit测试 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    3.3 创建DAO接口和Mapper映射文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.ssm.dao.ItemMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Item&quot;</span>&gt;</span></span><br><span class="line">        select * from item where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    3.4 在resources目录下创建spring配置文件applicationContext-dao.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源信息，使用druid连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/ssmtest&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置spring整合mybatis框架的SQLSessionFactoryBean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描pojo包，为实体类创建别名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mapper扫描器，用于产生代理对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itheima.ssm.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span></span></span><br><span class="line"><span class="tag"></span></span><br></pre></td></tr></table></figure>

<p>④子工程maven_service构建</p>
<p>​    第一步：创建maven_service工程</p>
<p>​    第二步：配置maven_service工程的pom.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第三步：创建Service接口和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.dao.ItemMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemServiceImpl</span> <span class="keyword">implements</span> <span class="title">ItemService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemMapper itemMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">findById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> itemMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 第四步：创建spring配置文件applicationContext-service.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置扫描器，扫描Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--事物注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>⑤子工程maven_web构建</p>
<p>​    第一步：创建maven_web工程，注意打包方式为war</p>
<p>​    第二步：配置maven_web工程的pom.xml文件</p>
 <properties>
​        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
​        <maven.compiler.source>1.8</maven.compiler.source>
​        <maven.compiler.target>1.8</maven.compiler.target>
​    </properties>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>maven_web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>​    第三步：创建Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.ssm.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.pojo.Item;</span><br><span class="line"><span class="keyword">import</span> com.itheima.ssm.service.ItemService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/item&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemService itemService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showItem/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id, Model model)</span></span>&#123;</span><br><span class="line">        Item item = itemService.findById(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;item&quot;</span>,item);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;item&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第四步：创建jsp页面</p>
<p>​    第五步：配置web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定Spring配置文件位置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:applicationContext*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--配置Spring框架启动时使用的监听器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--配置SpringMVC的前端控制器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    第六步：创建springmvc配置文件springmvc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">						   http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置扫描器，扫描Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima.ssm.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>项目整体结构如下：</p>
<p>1）maven_parent为父工程，其余工程为子工程，都继承父工程maven_parent</p>
<p>2）maven_parent工程将其子工程都进行了聚合 </p>
<p>3）子工程之间存在依赖关系，比如maven_dao依赖， maven_pojo、maven_service依赖maven_dao、 maven_web依赖maven_service</p>
<h2 id="5-maven私服"><a href="#5-maven私服" class="headerlink" title="5. maven私服"></a>5. maven私服</h2><h3 id="5-1-私服说明"><a href="#5-1-私服说明" class="headerlink" title="5.1 私服说明"></a>5.1 私服说明</h3><p>maven仓库分为本地仓库和远程仓库，而远程仓库又分为maven中央仓库、其他远程仓库和私服（私有服务器）。其中，中央仓库是由maven官方提供的，而私服就需要我们自己搭建了。</p>
<p>maven私服就是公司局域网内的maven远程仓库，每个员工的电脑上安装maven软件并且连接maven私服，程序员可以将自己开发的项目打成jar并发布到私服，其它项目组成员就可以从私服下载所依赖的jar。私服还充当一个代理服务器的角色，当私服上没有jar包时会从maven中央仓库自动下载。</p>
<p>nexus 是一个maven仓库管理器（其实就是一个软件），nexus可以充当maven私服，同时nexus还提供强大的仓库管理、构件搜索等功能。</p>
<h3 id="5-2-搭建maven私服"><a href="#5-2-搭建maven私服" class="headerlink" title="5.2 搭建maven私服"></a>5.2 搭建maven私服</h3><p>①下载nexus</p>
<p><a href="https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss">https://help.sonatype.com/repomanager2/download/download-archives---repository-manager-oss</a></p>
<p>②安装nexus</p>
<p>将下载的压缩包进行解压，进入bin目录</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8717.png"></p>
<p>打开cmd窗口并进入上面bin目录下，执行nexus.bat install命令安装服务（注意需要以管理员身份运行cmd命令）</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8718.png"></p>
<p>③启动nexus</p>
<p>经过前面命令已经完成nexus的安装，可以通过如下两种方式启动nexus服务：</p>
<p>在Windows系统服务中启动nexus</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8719.png"></p>
<p>在命令行执行nexus.bat start命令启动nexus</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8720.png"></p>
<p>④访问nexus</p>
<p>启动nexus服务后，访问<a href="http://localhost:8081/nexus">http://localhost:8081/nexus</a></p>
<p>点击右上角LogIn按钮，进行登录。使用默认用户名admin和密码admin123登录系统</p>
<p>登录成功后点击左侧菜单Repositories可以看到nexus内置的仓库列表（如下图）</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8721.png"></p>
<p>nexus仓库类型</p>
<p>通过前面的仓库列表可以看到，nexus默认内置了很多仓库，这些仓库可以划分为4种类型，每种类型的仓库用于存放特定的jar包，具体说明如下：</p>
<p>①hosted，宿主仓库，部署自己的jar到这个类型的仓库，包括Releases和Snapshots两部分，Releases为公司内部发布版本仓库、 Snapshots为公司内部测试版本仓库 </p>
<p>②proxy，代理仓库，用于代理远程的公共仓库，如maven中央仓库，用户连接私服，私服自动去中央仓库下载jar包或者插件</p>
<p>③group，仓库组，用来合并多个hosted/proxy仓库，通常我们配置自己的maven连接仓库组</p>
<p>④virtual(虚拟)：兼容Maven1版本的jar或者插件</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8721.png"></p>
<p>nexus仓库类型与安装目录对应关系</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8722.png"></p>
<h3 id="5-3-将项目发布到maven私服"><a href="#5-3-将项目发布到maven私服" class="headerlink" title="5.3 将项目发布到maven私服"></a>5.3 将项目发布到maven私服</h3><p>maven私服是搭建在公司局域网内的maven仓库，公司内的所有开发团队都可以使用。例如技术研发团队开发了一个基础组件，就可以将这个基础组件打成jar包发布到私服，其他团队成员就可以从私服下载这个jar包到本地仓库并在项目中使用。</p>
<p>将项目发布到maven私服操作步骤如下：</p>
<ol>
<li>配置maven的settings.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​      注意：一定要在idea工具中引入的maven的settings.xml文件中配置 </p>
<ol start="2">
<li>配置项目的pom.xml文件</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span>               <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8081/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行mvn deploy命令</li>
</ol>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8723.png"></p>
<h3 id="5-4-从私服下载jar到本地仓库"><a href="#5-4-从私服下载jar到本地仓库" class="headerlink" title="5.4 从私服下载jar到本地仓库"></a>5.4 从私服下载jar到本地仓库</h3><p>前面我们已经完成了将本地项目打成jar包发布到maven私服，下面我们就需要从maven私服下载jar包到本地仓库。</p>
<p>具体操作步骤如下：</p>
<p>在maven的settings.xml文件中配置下载模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">			http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否下载releases构件--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--是否下载snapshots构件--&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">		http://localhost:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在maven的settings.xml文件中配置激活下载模板</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="6-将第三方jar安装到本地仓库和maven私服"><a href="#6-将第三方jar安装到本地仓库和maven私服" class="headerlink" title="6. 将第三方jar安装到本地仓库和maven私服"></a>6. 将第三方jar安装到本地仓库和maven私服</h2><p>在maven工程的pom.xml文件中配置某个jar包的坐标后，如果本地的maven仓库不存在这个jar包，maven工具会自动到配置的maven私服下载，如果私服中也不存在，maven私服就会从maven中央仓库进行下载。</p>
<p>但是并不是所有的jar包都可以从中央仓库下载到，比如常用的Oracle数据库驱动的jar包在中央仓库就不存在。此时需要到Oracle的官网下载驱动jar包，然后将此jar包通过maven命令安装到我们本地的maven仓库或者maven私服中，这样在maven项目中就可以使用maven坐标引用到此jar包了。</p>
<h3 id="6-1-将第三方jar安装到本地仓库"><a href="#6-1-将第三方jar安装到本地仓库" class="headerlink" title="6.1 将第三方jar安装到本地仓库"></a>6.1 将第三方jar安装到本地仓库</h3><p>①下载Oracle的jar包（略）</p>
<p>②mvn install命令进行安装</p>
<p>​      mvn install:install-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 – </p>
<p>​      Dversion=10.2.0.4.0 -Dpackaging=jar</p>
<p>③查看本地maven仓库，确认安装是否成功</p>
<p><img src="/2019/10/08/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Web/191008Maven%E9%AB%98%E7%BA%A7/%E5%9B%BE%E7%89%8724.png"></p>
<h3 id="6-2-将第三方jar安装到maven私服"><a href="#6-2-将第三方jar安装到maven私服" class="headerlink" title="6.2 将第三方jar安装到maven私服"></a>6.2 将第三方jar安装到maven私服</h3><p>①下载Oracle的jar包（略）</p>
<p>②在maven的settings.xml配置文件中配置第三方仓库的server信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>thirdparty<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③执行mvn deploy命令进行安装</p>
<p>​      mvn deploy:deploy-file -Dfile=ojdbc14-10.2.0.4.0.jar -DgroupId=com.oracle -DartifactId=ojdbc14 –</p>
<p>​      Dversion=10.2.0.4.0 -Dpackaging=jar –</p>
<p>​      Durl=<a href="http://localhost:8081/nexus/content/repositories/thirdparty/">http://localhost:8081/nexus/content/repositories/thirdparty/</a> -DrepositoryId=thirdparty</p>
]]></content>
      <categories>
        <category>Java学习笔记</category>
        <category>Web</category>
      </categories>
  </entry>
</search>
